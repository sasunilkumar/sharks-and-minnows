
build/gradient_simple.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0f 05       	cpc	r16, r15
      6a:	66 05       	cpc	r22, r6
      6c:	7a 05       	cpc	r23, r10
      6e:	ab 05       	cpc	r26, r11
      70:	b2 05       	cpc	r27, r2
      72:	91 05       	cpc	r25, r1
      74:	b5 05       	cpc	r27, r5
      76:	13 07       	cpc	r17, r19
      78:	04 08       	sbc	r0, r4
      7a:	04 08       	sbc	r0, r4
      7c:	1c 07       	cpc	r17, r28
      7e:	1f 07       	cpc	r17, r31
      80:	22 07       	cpc	r18, r18
      82:	24 07       	cpc	r18, r20
      84:	26 07       	cpc	r18, r22
      86:	28 07       	cpc	r18, r24
      88:	d9 07       	cpc	r29, r25
      8a:	3a 07       	cpc	r19, r26

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 ec       	ldi	r30, 0xC4	; 196
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 b6 08 	call	0x116c	; 0x116c <main>
      da:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
uint8_t grad_val, data;
int message_sent = 0, new_message = 0;
message_t transmit_msg, rcvd_message;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	82 e2       	ldi	r24, 0x22	; 34
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_rx>:
void message_rx(message_t *msg, distance_measurement_t *dist) {
  rcvd_message = *msg;
      e8:	2c e0       	ldi	r18, 0x0C	; 12
      ea:	fc 01       	movw	r30, r24
      ec:	a4 e1       	ldi	r26, 0x14	; 20
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 90       	ld	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	2a 95       	dec	r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <message_rx+0x8>
  data = msg->data[0];
      f8:	fc 01       	movw	r30, r24
      fa:	80 81       	ld	r24, Z
      fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <data>
  new_message = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     108:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     10c:	08 95       	ret

0000010e <setup>:
}

void setup() {
  if (kilo_uid == SEED_ID) {
     10e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <kilo_uid>
     112:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <kilo_uid+0x1>
     116:	8a 97       	sbiw	r24, 0x2a	; 42
     118:	19 f4       	brne	.+6      	; 0x120 <setup+0x12>
    grad_val = 0;
     11a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <grad_val>
     11e:	03 c0       	rjmp	.+6      	; 0x126 <setup+0x18>
  } else {
    grad_val = GRAD_MAX;
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <grad_val>
  }

  transmit_msg.type = NORMAL;
     126:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <transmit_msg+0x9>
  transmit_msg.data[0] = grad_val;
     12a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <grad_val>
     12e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmit_msg>
  transmit_msg.crc = message_crc(&transmit_msg);
     132:	82 e2       	ldi	r24, 0x22	; 34
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 17 08 	call	0x102e	; 0x102e <message_crc>
     13a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <transmit_msg+0xb>
     13e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmit_msg+0xa>
     142:	08 95       	ret

00000144 <color_function>:
}

void color_function(int grad_val) {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
  set_color(OFF);
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
  delay(200);
     150:	88 ec       	ldi	r24, 0xC8	; 200
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 ff 01 	call	0x3fe	; 0x3fe <delay>
  if (grad_val == 0) {
     158:	20 97       	sbiw	r28, 0x00	; 0
     15a:	11 f4       	brne	.+4      	; 0x160 <color_function+0x1c>
    set_color(WHITE);
     15c:	85 e1       	ldi	r24, 0x15	; 21
     15e:	19 c0       	rjmp	.+50     	; 0x192 <color_function+0x4e>
  } else if (grad_val == 1) {
     160:	c1 30       	cpi	r28, 0x01	; 1
     162:	d1 05       	cpc	r29, r1
     164:	11 f4       	brne	.+4      	; 0x16a <color_function+0x26>
    set_color(RED);
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	14 c0       	rjmp	.+40     	; 0x192 <color_function+0x4e>
  } else if (grad_val == 2) {
     16a:	c2 30       	cpi	r28, 0x02	; 2
     16c:	d1 05       	cpc	r29, r1
     16e:	11 f4       	brne	.+4      	; 0x174 <color_function+0x30>
    set_color(GREEN);
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	0f c0       	rjmp	.+30     	; 0x192 <color_function+0x4e>
  } else if (grad_val == 3) {
     174:	c3 30       	cpi	r28, 0x03	; 3
     176:	d1 05       	cpc	r29, r1
     178:	11 f4       	brne	.+4      	; 0x17e <color_function+0x3a>
    set_color(BLUE);
     17a:	80 e1       	ldi	r24, 0x10	; 16
     17c:	0a c0       	rjmp	.+20     	; 0x192 <color_function+0x4e>
  } else if (grad_val == 4) {
     17e:	c4 30       	cpi	r28, 0x04	; 4
     180:	d1 05       	cpc	r29, r1
     182:	11 f4       	brne	.+4      	; 0x188 <color_function+0x44>
    set_color(MAGENTA);
     184:	81 e1       	ldi	r24, 0x11	; 17
     186:	05 c0       	rjmp	.+10     	; 0x192 <color_function+0x4e>
  } else if (grad_val == 5) {
     188:	25 97       	sbiw	r28, 0x05	; 5
     18a:	11 f4       	brne	.+4      	; 0x190 <color_function+0x4c>
    set_color(YELLOW);
     18c:	85 e0       	ldi	r24, 0x05	; 5
     18e:	01 c0       	rjmp	.+2      	; 0x192 <color_function+0x4e>
  } else {
    set_color(CYAN);
     190:	84 e1       	ldi	r24, 0x14	; 20
  }
}
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
  } else if (grad_val == 4) {
    set_color(MAGENTA);
  } else if (grad_val == 5) {
    set_color(YELLOW);
  } else {
    set_color(CYAN);
     196:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <set_color>

0000019a <loop>:
  }
}

void loop() {
    if (kilo_uid != SEED_ID) {
     19a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <kilo_uid>
     19e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <kilo_uid+0x1>
     1a2:	8a 97       	sbiw	r24, 0x2a	; 42
     1a4:	51 f1       	breq	.+84     	; 0x1fa <loop+0x60>
      if (new_message == 1) {
     1a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     1aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	21 f5       	brne	.+72     	; 0x1fa <loop+0x60>
	if (grad_val > (data + 1)) {
     1b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <data>
     1b6:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <grad_val>
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	28 2f       	mov	r18, r24
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	2f 5f       	subi	r18, 0xFF	; 255
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	24 17       	cp	r18, r20
     1c6:	35 07       	cpc	r19, r21
     1c8:	7c f4       	brge	.+30     	; 0x1e8 <loop+0x4e>
	  grad_val = data + 1;
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <grad_val>
	  transmit_msg.type = NORMAL;
     1d0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <transmit_msg+0x9>
	  transmit_msg.data[0] = grad_val;
     1d4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmit_msg>
	  transmit_msg.crc = message_crc(&transmit_msg);
     1d8:	82 e2       	ldi	r24, 0x22	; 34
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 17 08 	call	0x102e	; 0x102e <message_crc>
     1e0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <transmit_msg+0xb>
     1e4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmit_msg+0xa>
	}
	color_function(grad_val);
     1e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <grad_val>
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 a2 00 	call	0x144	; 0x144 <color_function>
        new_message = 0;
     1f2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     1f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     1fa:	08 95       	ret

000001fc <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1fc:	08 95       	ret

000001fe <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	08 95       	ret

00000204 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     204:	08 95       	ret

00000206 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
    cli();
     214:	f8 94       	cli

    ports_off();
     216:	14 b8       	out	0x04, r1	; 4
     218:	17 b8       	out	0x07, r1	; 7
     21a:	1a b8       	out	0x0a, r1	; 10
     21c:	15 b8       	out	0x05, r1	; 5
     21e:	18 b8       	out	0x08, r1	; 8
     220:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     222:	52 9a       	sbi	0x0a, 2	; 10
     224:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     226:	14 bc       	out	0x24, r1	; 36
     228:	85 e0       	ldi	r24, 0x05	; 5
     22a:	85 bd       	out	0x25, r24	; 37
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	87 bd       	out	0x27, r24	; 39
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     236:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     23a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     23e:	2f e8       	ldi	r18, 0x8F	; 143
     240:	3b e0       	ldi	r19, 0x0B	; 11
     242:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     246:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     24a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     24e:	53 98       	cbi	0x0a, 3	; 10
     250:	23 98       	cbi	0x04, 3	; 4
     252:	91 ea       	ldi	r25, 0xA1	; 161
     254:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     258:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     25c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     260:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     264:	8b e0       	ldi	r24, 0x0B	; 11
     266:	80 bf       	out	0x30, r24	; 48
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     26e:	86 e0       	ldi	r24, 0x06	; 6
     270:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     274:	83 e8       	ldi	r24, 0x83	; 131
     276:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     27a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     27e:	80 64       	ori	r24, 0x40	; 64
     280:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     284:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     288:	86 fd       	sbrc	r24, 6
     28a:	fc cf       	rjmp	.-8      	; 0x284 <kilo_init+0x7e>
    adc_trigger_high_gain();
     28c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     290:	83 ea       	ldi	r24, 0xA3	; 163
     292:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
    if (osccal != 0xFF)
     2a4:	8f 3f       	cpi	r24, 0xFF	; 255
     2a6:	11 f0       	breq	.+4      	; 0x2ac <kilo_init+0xa6>
        OSCCAL = osccal;
     2a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     2ac:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    rx_leadingbit = 1;
     2b0:	c1 e0       	ldi	r28, 0x01	; 1
     2b2:	c0 93 2e 01 	sts	0x012E, r28	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
     2b6:	c0 93 72 01 	sts	0x0172, r28	; 0x800172 <rx_leadingbyte>
    rx_byteindex = 0;
     2ba:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
    rx_bytevalue = 0;
     2be:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2c2:	80 e9       	ldi	r24, 0x90	; 144
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     2ca:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2ce:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_mask>
     2d2:	88 73       	andi	r24, 0x38	; 56
     2d4:	11 f0       	breq	.+4      	; 0x2da <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2d6:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <tx_mask>
    tx_clock = 0;
     2da:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
     2de:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
    tx_increment = 255;
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
     2ea:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    kilo_ticks = 0;
     2ee:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <kilo_ticks>
     2f2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <kilo_ticks+0x1>
     2f6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <kilo_ticks+0x2>
     2fa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <kilo_ticks+0x3>
    kilo_state = IDLE;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     304:	82 e4       	ldi	r24, 0x42	; 66
     306:	9f e0       	ldi	r25, 0x0F	; 15
     308:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <kilo_tx_period+0x1>
     30c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     310:	80 eb       	ldi	r24, 0xB0	; 176
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     318:	c8 2f       	mov	r28, r24
     31a:	81 eb       	ldi	r24, 0xB1	; 177
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     322:	2c 2f       	mov	r18, r28
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	38 2b       	or	r19, r24
     328:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <kilo_uid+0x1>
     32c:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     338:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     344:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     348:	8c e0       	ldi	r24, 0x0C	; 12
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     350:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     354:	84 e1       	ldi	r24, 0x14	; 20
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     35c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
     360:	06 e5       	ldi	r16, 0x56	; 86
     362:	11 e0       	ldi	r17, 0x01	; 1
     364:	5f e2       	ldi	r21, 0x2F	; 47
     366:	e5 2e       	mov	r14, r21
     368:	51 e0       	ldi	r21, 0x01	; 1
     36a:	f5 2e       	mov	r15, r21
     36c:	c0 e2       	ldi	r28, 0x20	; 32
     36e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     370:	ce 01       	movw	r24, r28
     372:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     376:	d8 2e       	mov	r13, r24
     378:	ce 01       	movw	r24, r28
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     380:	2d 2d       	mov	r18, r13
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	32 2f       	mov	r19, r18
     386:	22 27       	eor	r18, r18
     388:	28 2b       	or	r18, r24
     38a:	f8 01       	movw	r30, r16
     38c:	21 93       	st	Z+, r18
     38e:	31 93       	st	Z+, r19
     390:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     392:	ce 01       	movw	r24, r28
     394:	c0 96       	adiw	r24, 0x30	; 48
     396:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     39a:	d8 2e       	mov	r13, r24
     39c:	ce 01       	movw	r24, r28
     39e:	c1 96       	adiw	r24, 0x31	; 49
     3a0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_read_byte>
     3a4:	2d 2d       	mov	r18, r13
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	32 2f       	mov	r19, r18
     3aa:	22 27       	eor	r18, r18
     3ac:	28 2b       	or	r18, r24
     3ae:	f7 01       	movw	r30, r14
     3b0:	21 93       	st	Z+, r18
     3b2:	31 93       	st	Z+, r19
     3b4:	7f 01       	movw	r14, r30
     3b6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3b8:	cc 33       	cpi	r28, 0x3C	; 60
     3ba:	d1 05       	cpc	r29, r1
     3bc:	c9 f6       	brne	.-78     	; 0x370 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3be:	78 94       	sei
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	08 95       	ret

000003d0 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	8f 93       	push	r24
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	a8 95       	wdr
     3e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3e6:	88 61       	ori	r24, 0x18	; 24
     3e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3f0:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3f2:	8f 91       	pop	r24
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3fe:	00 97       	sbiw	r24, 0x00	; 0
     400:	41 f0       	breq	.+16     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     402:	ef ec       	ldi	r30, 0xCF	; 207
     404:	f7 e0       	ldi	r31, 0x07	; 7
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
        _delay_ms(1);
        ms--;
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f6 cf       	rjmp	.-20     	; 0x3fe <delay>
    }
}
     412:	08 95       	ret

00000414 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     414:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     418:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     41c:	08 95       	ret

0000041e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     424:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     428:	8f e0       	ldi	r24, 0x0F	; 15
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <delay>

00000430 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     430:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     434:	81 11       	cpse	r24, r1
     436:	1e c0       	rjmp	.+60     	; 0x474 <get_ambientlight+0x44>
        cli();
     438:	f8 94       	cli
        adc_setup_conversion(7);
     43a:	87 e0       	ldi	r24, 0x07	; 7
     43c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     440:	83 e8       	ldi	r24, 0x83	; 131
     442:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     446:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     450:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     454:	86 fd       	sbrc	r24, 6
     456:	fc cf       	rjmp	.-8      	; 0x450 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     458:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     45c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     460:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     464:	23 ea       	ldi	r18, 0xA3	; 163
     466:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     470:	78 94       	sei
     472:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     478:	08 95       	ret

0000047a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     47a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     47e:	81 11       	cpse	r24, r1
     480:	1e c0       	rjmp	.+60     	; 0x4be <get_temperature+0x44>
        cli();
     482:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     484:	88 ec       	ldi	r24, 0xC8	; 200
     486:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     48a:	87 e8       	ldi	r24, 0x87	; 135
     48c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     490:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     494:	80 64       	ori	r24, 0x40	; 64
     496:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     49a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     49e:	86 fd       	sbrc	r24, 6
     4a0:	fc cf       	rjmp	.-8      	; 0x49a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     4a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4aa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ae:	23 ea       	ldi	r18, 0xA3	; 163
     4b0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4ba:	78 94       	sei
     4bc:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     4c2:	08 95       	ret

000004c4 <rand_hard>:

uint8_t rand_hard() {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4ce:	e3 ea       	ldi	r30, 0xA3	; 163
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4d2:	c6 e0       	ldi	r28, 0x06	; 6
     4d4:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4d6:	a1 e0       	ldi	r26, 0x01	; 1
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4da:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4dc:	f8 94       	cli
            adc_setup_conversion(6);
     4de:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4e2:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4e6:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ea:	40 64       	ori	r20, 0x40	; 64
     4ec:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4f0:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f4:	46 fd       	sbrc	r20, 6
     4f6:	fc cf       	rjmp	.-8      	; 0x4f0 <rand_hard+0x2c>
            a = ADCW&0x1;
     4f8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4fc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     500:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     502:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     506:	50 64       	ori	r21, 0x40	; 64
     508:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     50c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     510:	56 fd       	sbrc	r21, 6
     512:	fc cf       	rjmp	.-8      	; 0x50c <rand_hard+0x48>
            b = ADCW&0x1;
     514:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     518:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     51c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     520:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     524:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     528:	78 94       	sei
            tries++;
     52a:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     52c:	61 70       	andi	r22, 0x01	; 1
     52e:	46 17       	cp	r20, r22
     530:	51 f0       	breq	.+20     	; 0x546 <rand_hard+0x82>
        if (a)
     532:	44 23       	and	r20, r20
     534:	59 f0       	breq	.+22     	; 0x54c <rand_hard+0x88>
            num |= (1<<i);
     536:	ad 01       	movw	r20, r26
     538:	02 2e       	mov	r0, r18
     53a:	01 c0       	rjmp	.+2      	; 0x53e <rand_hard+0x7a>
     53c:	44 0f       	add	r20, r20
     53e:	0a 94       	dec	r0
     540:	ea f7       	brpl	.-6      	; 0x53c <rand_hard+0x78>
     542:	84 2b       	or	r24, r20
     544:	03 c0       	rjmp	.+6      	; 0x54c <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     546:	90 38       	cpi	r25, 0x80	; 128
     548:	49 f6       	brne	.-110    	; 0x4dc <rand_hard+0x18>
     54a:	f3 cf       	rjmp	.-26     	; 0x532 <rand_hard+0x6e>
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     550:	28 30       	cpi	r18, 0x08	; 8
     552:	31 05       	cpc	r19, r1
     554:	09 f0       	breq	.+2      	; 0x558 <rand_hard+0x94>
     556:	c1 cf       	rjmp	.-126    	; 0x4da <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     55e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     562:	98 e0       	ldi	r25, 0x08	; 8
     564:	89 9f       	mul	r24, r25
     566:	90 01       	movw	r18, r0
     568:	11 24       	eor	r1, r1
     56a:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     56c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	89 0f       	add	r24, r25
     574:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     578:	82 2f       	mov	r24, r18
     57a:	82 95       	swap	r24
     57c:	86 95       	lsr	r24
     57e:	87 70       	andi	r24, 0x07	; 7
     580:	28 27       	eor	r18, r24
     582:	96 95       	lsr	r25
     584:	96 95       	lsr	r25
     586:	82 2f       	mov	r24, r18
     588:	89 27       	eor	r24, r25
     58a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     58e:	08 95       	ret

00000590 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     590:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     594:	08 95       	ret

00000596 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     596:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     59a:	81 11       	cpse	r24, r1
     59c:	16 c0       	rjmp	.+44     	; 0x5ca <get_voltage+0x34>
        cli();                                    // disable interrupts
     59e:	f8 94       	cli
        adc_setup_conversion(6);
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5a6:	83 e8       	ldi	r24, 0x83	; 131
     5a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5ba:	86 fd       	sbrc	r24, 6
     5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5c6:	78 94       	sei
     5c8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5ce:	08 95       	ret

000005d0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5d0:	2f 92       	push	r2
     5d2:	3f 92       	push	r3
     5d4:	4f 92       	push	r4
     5d6:	5f 92       	push	r5
     5d8:	6f 92       	push	r6
     5da:	7f 92       	push	r7
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5f6:	fc 01       	movw	r30, r24
     5f8:	c2 81       	ldd	r28, Z+2	; 0x02
     5fa:	d3 81       	ldd	r29, Z+3	; 0x03
     5fc:	c4 38       	cpi	r28, 0x84	; 132
     5fe:	f3 e0       	ldi	r31, 0x03	; 3
     600:	df 07       	cpc	r29, r31
     602:	0c f0       	brlt	.+2      	; 0x606 <estimate_distance+0x36>
     604:	7e c0       	rjmp	.+252    	; 0x702 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     606:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <kilo_irhigh>
     60a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <kilo_irhigh+0x1>
     60e:	8c 17       	cp	r24, r28
     610:	9d 07       	cpc	r25, r29
     612:	08 f4       	brcc	.+2      	; 0x616 <estimate_distance+0x46>
     614:	6f c0       	rjmp	.+222    	; 0x6f4 <estimate_distance+0x124>
     616:	e1 e3       	ldi	r30, 0x31	; 49
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     61c:	81 91       	ld	r24, Z+
     61e:	91 91       	ld	r25, Z+
     620:	8c 17       	cp	r24, r28
     622:	9d 07       	cpc	r25, r29
     624:	20 f0       	brcs	.+8      	; 0x62e <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     626:	1f 5f       	subi	r17, 0xFF	; 255
     628:	1e 30       	cpi	r17, 0x0E	; 14
     62a:	c1 f7       	brne	.-16     	; 0x61c <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     62c:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     62e:	81 2f       	mov	r24, r17
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	e1 5d       	subi	r30, 0xD1	; 209
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	e0 80       	ld	r14, Z
     63e:	f1 80       	ldd	r15, Z+1	; 0x01
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	fc 01       	movw	r30, r24
     646:	e3 5d       	subi	r30, 0xD3	; 211
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	b7 01       	movw	r22, r14
     650:	68 1b       	sub	r22, r24
     652:	79 0b       	sbc	r23, r25
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     65c:	9b 01       	movw	r18, r22
     65e:	ac 01       	movw	r20, r24
     660:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     664:	4b 01       	movw	r8, r22
     666:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     668:	be 01       	movw	r22, r28
     66a:	0d 2e       	mov	r0, r29
     66c:	00 0c       	add	r0, r0
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     676:	2b 01       	movw	r4, r22
     678:	3c 01       	movw	r6, r24
     67a:	b7 01       	movw	r22, r14
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     684:	6b 01       	movw	r12, r22
     686:	7c 01       	movw	r14, r24
     688:	61 2f       	mov	r22, r17
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	5f e3       	ldi	r21, 0x3F	; 63
     69c:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	a9 01       	movw	r20, r18
     6a6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     6aa:	a5 01       	movw	r20, r10
     6ac:	94 01       	movw	r18, r8
     6ae:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	c3 01       	movw	r24, r6
     6c4:	b2 01       	movw	r22, r4
     6c6:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e2       	ldi	r20, 0x20	; 32
     6d0:	51 e4       	ldi	r21, 0x41	; 65
     6d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     6d6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     6da:	7b 01       	movw	r14, r22
     6dc:	c5 01       	movw	r24, r10
     6de:	b4 01       	movw	r22, r8
     6e0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     6e4:	ab 01       	movw	r20, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	c7 01       	movw	r24, r14
     6ea:	ba 01       	movw	r22, r20
     6ec:	0e 94 cd 08 	call	0x119a	; 0x119a <__divmodhi4>
     6f0:	16 2f       	mov	r17, r22
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6f4:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6f6:	cd 3b       	cpi	r28, 0xBD	; 189
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	d8 07       	cpc	r29, r24
     6fc:	0c f4       	brge	.+2      	; 0x700 <estimate_distance+0x130>
     6fe:	ca c0       	rjmp	.+404    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     700:	01 c0       	rjmp	.+2      	; 0x704 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     702:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     704:	f1 01       	movw	r30, r2
     706:	c0 80       	ld	r12, Z
     708:	d1 80       	ldd	r13, Z+1	; 0x01
     70a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <kilo_irlow>
     70e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <kilo_irlow+0x1>
     712:	8c 15       	cp	r24, r12
     714:	9d 05       	cpc	r25, r13
     716:	88 f0       	brcs	.+34     	; 0x73a <estimate_distance+0x16a>
     718:	e8 e5       	ldi	r30, 0x58	; 88
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     722:	e1 90       	ld	r14, Z+
     724:	f1 90       	ld	r15, Z+
     726:	ec 14       	cp	r14, r12
     728:	fd 04       	cpc	r15, r13
     72a:	08 f4       	brcc	.+2      	; 0x72e <estimate_distance+0x15e>
     72c:	58 c0       	rjmp	.+176    	; 0x7de <estimate_distance+0x20e>
     72e:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     730:	8e 30       	cpi	r24, 0x0E	; 14
     732:	91 05       	cpc	r25, r1
     734:	a9 f7       	brne	.-22     	; 0x720 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     736:	0a e5       	ldi	r16, 0x5A	; 90
     738:	01 c0       	rjmp	.+2      	; 0x73c <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     73a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     73c:	1f 3f       	cpi	r17, 0xFF	; 255
     73e:	09 f4       	brne	.+2      	; 0x742 <estimate_distance+0x172>
     740:	4b c0       	rjmp	.+150    	; 0x7d8 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     742:	be 01       	movw	r22, r28
     744:	dd 0f       	add	r29, r29
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     74e:	6b 01       	movw	r12, r22
     750:	7c 01       	movw	r14, r24
     752:	61 2f       	mov	r22, r17
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     75e:	4b 01       	movw	r8, r22
     760:	5c 01       	movw	r10, r24
     762:	a7 01       	movw	r20, r14
     764:	96 01       	movw	r18, r12
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	81 e6       	ldi	r24, 0x61	; 97
     76c:	94 e4       	ldi	r25, 0x44	; 68
     76e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	c5 01       	movw	r24, r10
     778:	b4 01       	movw	r22, r8
     77a:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
     782:	60 2f       	mov	r22, r16
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     78e:	2b 01       	movw	r4, r22
     790:	3c 01       	movw	r6, r24
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4f e2       	ldi	r20, 0x2F	; 47
     798:	54 e4       	ldi	r21, 0x44	; 68
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c3 01       	movw	r24, r6
     7a8:	b2 01       	movw	r22, r4
     7aa:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	c5 01       	movw	r24, r10
     7b4:	b4 01       	movw	r22, r8
     7b6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	48 e4       	ldi	r20, 0x48	; 72
     7c0:	53 e4       	ldi	r21, 0x43	; 67
     7c2:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	44 e0       	ldi	r20, 0x04	; 4
     7cc:	52 e4       	ldi	r21, 0x42	; 66
     7ce:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     7d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
     7d6:	60 c0       	rjmp	.+192    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
        } else {
            return 33 + dist_low;
     7d8:	61 e2       	ldi	r22, 0x21	; 33
     7da:	60 0f       	add	r22, r16
     7dc:	5d c0       	rjmp	.+186    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	fc 01       	movw	r30, r24
     7e4:	ec 5a       	subi	r30, 0xAC	; 172
     7e6:	fe 4f       	sbci	r31, 0xFE	; 254
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	b7 01       	movw	r22, r14
     7ee:	68 1b       	sub	r22, r24
     7f0:	79 0b       	sbc	r23, r25
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
     7fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     802:	4b 01       	movw	r8, r22
     804:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     806:	b6 01       	movw	r22, r12
     808:	dd 0c       	add	r13, r13
     80a:	88 0b       	sbc	r24, r24
     80c:	99 0b       	sbc	r25, r25
     80e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     812:	2b 01       	movw	r4, r22
     814:	3c 01       	movw	r6, r24
     816:	b7 01       	movw	r22, r14
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     820:	6b 01       	movw	r12, r22
     822:	7c 01       	movw	r14, r24
     824:	63 2d       	mov	r22, r3
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	5f e3       	ldi	r21, 0x3F	; 63
     838:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	a9 01       	movw	r20, r18
     842:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     846:	a5 01       	movw	r20, r10
     848:	94 01       	movw	r18, r8
     84a:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     85a:	9b 01       	movw	r18, r22
     85c:	ac 01       	movw	r20, r24
     85e:	c3 01       	movw	r24, r6
     860:	b2 01       	movw	r22, r4
     862:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e2       	ldi	r20, 0x20	; 32
     86c:	51 e4       	ldi	r21, 0x41	; 65
     86e:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3>
     872:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     876:	7b 01       	movw	r14, r22
     878:	c5 01       	movw	r24, r10
     87a:	b4 01       	movw	r22, r8
     87c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     880:	ab 01       	movw	r20, r22
     882:	bc 01       	movw	r22, r24
     884:	c7 01       	movw	r24, r14
     886:	ba 01       	movw	r22, r20
     888:	0e 94 cd 08 	call	0x119a	; 0x119a <__divmodhi4>
     88c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     88e:	6f 3f       	cpi	r22, 0xFF	; 255
     890:	09 f0       	breq	.+2      	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     892:	54 cf       	rjmp	.-344    	; 0x73c <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     894:	61 e2       	ldi	r22, 0x21	; 33
     896:	61 0f       	add	r22, r17
    }
}
     898:	86 2f       	mov	r24, r22
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	5f 90       	pop	r5
     8b8:	4f 90       	pop	r4
     8ba:	3f 90       	pop	r3
     8bc:	2f 90       	pop	r2
     8be:	08 95       	ret

000008c0 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
    tx_clock += tx_increment;
     8e2:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tx_clock>
     8e6:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tx_clock+0x1>
     8ea:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <tx_increment>
     8ee:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <tx_increment+0x1>
     8f2:	82 0f       	add	r24, r18
     8f4:	93 1f       	adc	r25, r19
     8f6:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tx_clock+0x1>
     8fa:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tx_clock>
    tx_increment = 0xFF;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
     906:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    OCR0A = tx_increment;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     90e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <kilo_ticks>
     912:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <kilo_ticks+0x1>
     916:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <kilo_ticks+0x2>
     91a:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <kilo_ticks+0x3>
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	a1 1d       	adc	r26, r1
     922:	b1 1d       	adc	r27, r1
     924:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <kilo_ticks>
     928:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <kilo_ticks+0x1>
     92c:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <kilo_ticks+0x2>
     930:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     934:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     938:	81 11       	cpse	r24, r1
     93a:	2d c0       	rjmp	.+90     	; 0x996 <__stack+0x97>
     93c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <kilo_tx_period>
     940:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <kilo_tx_period+0x1>
     944:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tx_clock>
     948:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tx_clock+0x1>
     94c:	82 17       	cp	r24, r18
     94e:	93 07       	cpc	r25, r19
     950:	10 f5       	brcc	.+68     	; 0x996 <__stack+0x97>
     952:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	f1 f4       	brne	.+60     	; 0x996 <__stack+0x97>
        message_t *msg = kilo_message_tx();
     95a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     95e:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     962:	09 95       	icall
        if (msg) {
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	b9 f0       	breq	.+46     	; 0x996 <__stack+0x97>
            if (message_send(msg)) {
     968:	0e 94 33 08 	call	0x1066	; 0x1066 <message_send>
     96c:	88 23       	and	r24, r24
     96e:	51 f0       	breq	.+20     	; 0x984 <__stack+0x85>
                kilo_message_tx_success();
     970:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     974:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     978:	09 95       	icall
                tx_clock = 0;
     97a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
     97e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
     982:	09 c0       	rjmp	.+18     	; 0x996 <__stack+0x97>
            } else {
                tx_increment = rand()&0xFF;
     984:	0e 94 66 0b 	call	0x16cc	; 0x16cc <rand>
     988:	9c 01       	movw	r18, r24
     98a:	33 27       	eor	r19, r19
     98c:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <tx_increment+0x1>
     990:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <tx_increment>
                OCR0A = tx_increment;
     994:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9b8:	80 ff       	sbrs	r24, 0
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <set_color+0x8>
        DDRD |= (1<<5);
     9bc:	55 9a       	sbi	0x0a, 5	; 10
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     9c0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     9c2:	81 ff       	sbrs	r24, 1
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <set_color+0x12>
        DDRD |= (1<<4);
     9c6:	54 9a       	sbi	0x0a, 4	; 10
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9ca:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9cc:	82 ff       	sbrs	r24, 2
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <set_color+0x1c>
        DDRC |= (1<<3);
     9d0:	3b 9a       	sbi	0x07, 3	; 7
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9d4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9d6:	83 ff       	sbrs	r24, 3
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <set_color+0x26>
        DDRC |= (1<<2);
     9da:	3a 9a       	sbi	0x07, 2	; 7
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9de:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9e0:	84 ff       	sbrs	r24, 4
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <set_color+0x30>
        DDRC |= (1<<5);
     9e4:	3d 9a       	sbi	0x07, 5	; 7
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9e8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9ea:	85 ff       	sbrs	r24, 5
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <set_color+0x3a>
        DDRC |= (1<<4);
     9ee:	3c 9a       	sbi	0x07, 4	; 7
     9f0:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9f2:	3c 98       	cbi	0x07, 4	; 7
     9f4:	08 95       	ret

000009f6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9f6:	8c 01       	movw	r16, r24
     9f8:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9fa:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9fc:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a02:	98 e1       	ldi	r25, 0x18	; 24
     a04:	c9 2e       	mov	r12, r25
     a06:	29 e2       	ldi	r18, 0x29	; 41
     a08:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a0a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	e7 30       	cpi	r30, 0x07	; 7
     a12:	f1 05       	cpc	r31, r1
     a14:	d0 f7       	brcc	.-12     	; 0xa0a <kilo_start+0x14>
     a16:	ec 5c       	subi	r30, 0xCC	; 204
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__tablejump2__>
            case SLEEPING:
                cli();
     a1e:	f8 94       	cli
                acomp_off();
     a20:	80 b7       	in	r24, 0x30	; 48
     a22:	87 7f       	andi	r24, 0xF7	; 247
     a24:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a26:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a2a:	8f 77       	andi	r24, 0x7F	; 127
     a2c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a30:	14 b8       	out	0x04, r1	; 4
     a32:	17 b8       	out	0x07, r1	; 7
     a34:	1a b8       	out	0x0a, r1	; 10
     a36:	15 b8       	out	0x05, r1	; 5
     a38:	18 b8       	out	0x08, r1	; 8
     a3a:	1b b8       	out	0x0b, r1	; 11
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	a8 95       	wdr
     a42:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a4c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a50:	80 64       	ori	r24, 0x40	; 64
     a52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a56:	83 b7       	in	r24, 0x33	; 51
     a58:	81 7f       	andi	r24, 0xF1	; 241
     a5a:	84 60       	ori	r24, 0x04	; 4
     a5c:	83 bf       	out	0x33, r24	; 51
                cli();
     a5e:	f8 94       	cli
                sleep_enable();
     a60:	83 b7       	in	r24, 0x33	; 51
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	83 bf       	out	0x33, r24	; 51
                sei();
     a66:	78 94       	sei
                sleep_cpu();
     a68:	88 95       	sleep
                sleep_disable();
     a6a:	83 b7       	in	r24, 0x33	; 51
     a6c:	8e 7f       	andi	r24, 0xFE	; 254
     a6e:	83 bf       	out	0x33, r24	; 51
                sei();
     a70:	78 94       	sei
                rx_busy = 0;
     a72:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
                ports_on();
     a76:	52 9a       	sbi	0x0a, 2	; 10
     a78:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a7a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a84:	87 e5       	ldi	r24, 0x57	; 87
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <kilo_start+0x92>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <kilo_start+0x98>
     a8e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a90:	80 b7       	in	r24, 0x30	; 48
     a92:	88 61       	ori	r24, 0x18	; 24
     a94:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9c:	ef e1       	ldi	r30, 0x1F	; 31
     a9e:	fe e4       	ldi	r31, 0x4E	; 78
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <kilo_start+0xaa>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <kilo_start+0xb0>
     aa6:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     aa8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <kilo_start+0xbc>
     ab0:	50 c0       	rjmp	.+160    	; 0xb52 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     ab8:	ff ef       	ldi	r31, 0xFF	; 255
     aba:	20 e7       	ldi	r18, 0x70	; 112
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	f1 50       	subi	r31, 0x01	; 1
     ac0:	20 40       	sbci	r18, 0x00	; 0
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	e1 f7       	brne	.-8      	; 0xabe <kilo_start+0xc8>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <kilo_start+0xd2>
     ac8:	00 00       	nop
     aca:	43 c0       	rjmp	.+134    	; 0xb52 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     ad2:	ef ec       	ldi	r30, 0xCF	; 207
     ad4:	f7 e0       	ldi	r31, 0x07	; 7
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <kilo_start+0xe0>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <kilo_start+0xe6>
     adc:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     ae4:	ff ef       	ldi	r31, 0xFF	; 255
     ae6:	21 ee       	ldi	r18, 0xE1	; 225
     ae8:	84 e0       	ldi	r24, 0x04	; 4
     aea:	f1 50       	subi	r31, 0x01	; 1
     aec:	20 40       	sbci	r18, 0x00	; 0
     aee:	80 40       	sbci	r24, 0x00	; 0
     af0:	e1 f7       	brne	.-8      	; 0xaea <kilo_start+0xf4>
     af2:	2c c0       	rjmp	.+88     	; 0xb4c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     af4:	0e 94 cb 02 	call	0x596	; 0x596 <get_voltage>
                if(voltage > 682)
     af8:	8b 3a       	cpi	r24, 0xAB	; 171
     afa:	e2 e0       	ldi	r30, 0x02	; 2
     afc:	9e 07       	cpc	r25, r30
     afe:	24 f0       	brlt	.+8      	; 0xb08 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b00:	8c e0       	ldi	r24, 0x0C	; 12
     b02:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     b06:	81 cf       	rjmp	.-254    	; 0xa0a <kilo_start+0x14>
                else if(voltage > 648)
     b08:	89 38       	cpi	r24, 0x89	; 137
     b0a:	f2 e0       	ldi	r31, 0x02	; 2
     b0c:	9f 07       	cpc	r25, r31
     b0e:	14 f0       	brlt	.+4      	; 0xb14 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b10:	80 e3       	ldi	r24, 0x30	; 48
     b12:	f7 cf       	rjmp	.-18     	; 0xb02 <kilo_start+0x10c>
                else if(voltage > 614)
     b14:	87 36       	cpi	r24, 0x67	; 103
     b16:	92 40       	sbci	r25, 0x02	; 2
     b18:	14 f0       	brlt	.+4      	; 0xb1e <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b1a:	8f e0       	ldi	r24, 0x0F	; 15
     b1c:	f2 cf       	rjmp	.-28     	; 0xb02 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	f0 cf       	rjmp	.-32     	; 0xb02 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b22:	48 99       	sbic	0x09, 0	; 9
     b24:	16 c0       	rjmp	.+44     	; 0xb52 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     b2c:	8f ec       	ldi	r24, 0xCF	; 207
     b2e:	97 e0       	ldi	r25, 0x07	; 7
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <kilo_start+0x13a>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <kilo_start+0x140>
     b36:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	e1 ee       	ldi	r30, 0xE1	; 225
     b42:	f4 e0       	ldi	r31, 0x04	; 4
     b44:	91 50       	subi	r25, 0x01	; 1
     b46:	e0 40       	sbci	r30, 0x00	; 0
     b48:	f0 40       	sbci	r31, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <kilo_start+0x14e>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <kilo_start+0x158>
     b4e:	00 00       	nop
     b50:	5c cf       	rjmp	.-328    	; 0xa0a <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	d6 cf       	rjmp	.-84     	; 0xb02 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b56:	d1 11       	cpse	r29, r1
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <kilo_start+0x168>
                    setup();
     b5a:	f8 01       	movw	r30, r16
     b5c:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b5e:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b62:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b64:	f7 01       	movw	r30, r14
     b66:	09 95       	icall
                break;
     b68:	50 cf       	rjmp	.-352    	; 0xa0a <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b6a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b6e:	81 11       	cpse	r24, r1
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b72:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b76:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b7a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b7e:	45 cf       	rjmp	.-374    	; 0xa0a <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b80:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b84:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b88:	98 17       	cp	r25, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <kilo_start+0x198>
     b8c:	3e cf       	rjmp	.-388    	; 0xa0a <kilo_start+0x14>
                        prev_motion = cur_motion;
     b8e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b92:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b96:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	89 f4       	brne	.+34     	; 0xbc0 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b9e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ba2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ba6:	8f e2       	ldi	r24, 0x2F	; 47
     ba8:	95 e7       	ldi	r25, 0x75	; 117
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <kilo_start+0x1b4>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <kilo_start+0x1ba>
     bb0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     bb2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bba:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bbe:	25 cf       	rjmp	.-438    	; 0xa0a <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bc0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bc4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bc8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	59 f4       	brne	.+22     	; 0xbe6 <kilo_start+0x1f0>
     bd0:	ef e2       	ldi	r30, 0x2F	; 47
     bd2:	f5 e7       	ldi	r31, 0x75	; 117
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <kilo_start+0x1de>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <kilo_start+0x1e4>
     bda:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bdc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     be0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <kilo_start+0x210>
     be6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bea:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bee:	8f e2       	ldi	r24, 0x2F	; 47
     bf0:	95 e7       	ldi	r25, 0x75	; 117
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <kilo_start+0x1fc>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <kilo_start+0x202>
     bf8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bfa:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <kilo_straight_right>
     bfe:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c02:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c06:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c0a:	ff ce       	rjmp	.-514    	; 0xa0a <kilo_start+0x14>

00000c0c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
    rx_timer_off();
     c1a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c1e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c22:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
     c2c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
    rx_busy = 0;
     c30:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    adc_trigger_high_gain();
     c34:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c38:	93 ea       	ldi	r25, 0xA3	; 163
     c3a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c3e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c76:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c7a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c84:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_leadingbit>
     c88:	88 23       	and	r24, r24
     c8a:	21 f1       	breq	.+72     	; 0xcd4 <__vector_23+0x84>
        rx_timer_on();
     c8c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c90:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c94:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c98:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
        rx_leadingbit = 0;
     c9c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_leadingbit>
        if (rx_leadingbyte) {
     ca0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
     ca4:	88 23       	and	r24, r24
     ca6:	09 f4       	brne	.+2      	; 0xcaa <__vector_23+0x5a>
     ca8:	af c1       	rjmp	.+862    	; 0x1008 <__vector_23+0x3b8>
            adc_finish_conversion();
     caa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cae:	86 fd       	sbrc	r24, 6
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     cb2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cb6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cba:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <rx_dist+0x3>
     cbe:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rx_dist+0x2>
            adc_trigger_low_gain();
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cc8:	93 ea       	ldi	r25, 0xA3	; 163
     cca:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cd2:	9a c1       	rjmp	.+820    	; 0x1008 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cd4:	c9 01       	movw	r24, r18
     cd6:	87 58       	subi	r24, 0x87	; 135
     cd8:	91 09       	sbc	r25, r1
     cda:	84 37       	cpi	r24, 0x74	; 116
     cdc:	99 40       	sbci	r25, 0x09	; 9
     cde:	a0 f0       	brcs	.+40     	; 0xd08 <__vector_23+0xb8>
            rx_timer_off();
     ce0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ce4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ce8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cec:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
            rx_leadingbyte = 1;
     cf0:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
            rx_busy = 0;
     cf4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
            adc_trigger_high_gain();
     cf8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cfc:	83 ea       	ldi	r24, 0xA3	; 163
     cfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d02:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d06:	80 c1       	rjmp	.+768    	; 0x1008 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d08:	26 58       	subi	r18, 0x86	; 134
     d0a:	31 09       	sbc	r19, r1
     d0c:	a4 ef       	ldi	r26, 0xF4	; 244
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__umulhisi3>
     d14:	8c 01       	movw	r16, r24
     d16:	22 27       	eor	r18, r18
     d18:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d1a:	08 30       	cpi	r16, 0x08	; 8
     d1c:	60 f4       	brcc	.+24     	; 0xd36 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <__vector_23+0xd6>
     d24:	88 0f       	add	r24, r24
     d26:	0a 95       	dec	r16
     d28:	ea f7       	brpl	.-6      	; 0xd24 <__vector_23+0xd4>
     d2a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     d2e:	89 2b       	or	r24, r25
     d30:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <rx_bytevalue>
     d34:	69 c1       	rjmp	.+722    	; 0x1008 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d36:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
                if (rx_leadingbyte) {
     d3a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
     d3e:	88 23       	and	r24, r24
     d40:	41 f1       	breq	.+80     	; 0xd92 <__vector_23+0x142>
                    adc_finish_conversion();
     d42:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d46:	86 fd       	sbrc	r24, 6
     d48:	fc cf       	rjmp	.-8      	; 0xd42 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d4a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d4e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d52:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <rx_dist+0x1>
     d56:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rx_dist>
                    adc_trigger_high_gain();
     d5a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d5e:	83 ea       	ldi	r24, 0xA3	; 163
     d60:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d6a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     d6e:	99 23       	and	r25, r25
     d70:	59 f0       	breq	.+22     	; 0xd88 <__vector_23+0x138>
                        rx_timer_off();
     d72:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d76:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d7a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d7e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
     d82:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
     d86:	40 c1       	rjmp	.+640    	; 0x1008 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d88:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <rx_leadingbyte>
                        rx_byteindex = 0;
     d8c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
     d90:	3b c1       	rjmp	.+630    	; 0x1008 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d92:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_byteindex>
     d96:	e8 2f       	mov	r30, r24
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	e8 58       	subi	r30, 0x88	; 136
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     da2:	90 83       	st	Z, r25
                    rx_byteindex++;
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     daa:	8c 30       	cpi	r24, 0x0C	; 12
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__vector_23+0x160>
     dae:	2c c1       	rjmp	.+600    	; 0x1008 <__vector_23+0x3b8>
                        rx_timer_off();
     db0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     db4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     db8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dbc:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
     dc0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     dc4:	00 91 82 01 	lds	r16, 0x0182	; 0x800182 <rx_msg+0xa>
     dc8:	10 91 83 01 	lds	r17, 0x0183	; 0x800183 <rx_msg+0xb>
     dcc:	88 e7       	ldi	r24, 0x78	; 120
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 17 08 	call	0x102e	; 0x102e <message_crc>
     dd4:	08 17       	cp	r16, r24
     dd6:	19 07       	cpc	r17, r25
     dd8:	09 f0       	breq	.+2      	; 0xddc <__vector_23+0x18c>
     dda:	16 c1       	rjmp	.+556    	; 0x1008 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ddc:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_msg+0x9>
     de0:	e7 fd       	sbrc	r30, 7
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     de4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     de8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     dec:	6d e4       	ldi	r22, 0x4D	; 77
     dee:	71 e0       	ldi	r23, 0x01	; 1
     df0:	88 e7       	ldi	r24, 0x78	; 120
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	09 95       	icall
     df6:	08 c1       	rjmp	.+528    	; 0x1008 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     df8:	88 e7       	ldi	r24, 0x78	; 120
     dfa:	8e 0f       	add	r24, r30
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	30 f0       	brcs	.+12     	; 0xe0c <__vector_23+0x1bc>
        motors_off();
     e00:	53 98       	cbi	0x0a, 3	; 10
     e02:	23 98       	cbi	0x04, 3	; 4
     e04:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e08:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e0c:	8e 2f       	mov	r24, r30
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	e0 58       	subi	r30, 0x80	; 128
     e14:	f1 09       	sbc	r31, r1
     e16:	eb 30       	cpi	r30, 0x0B	; 11
     e18:	f1 05       	cpc	r31, r1
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <__vector_23+0x1ce>
     e1c:	f5 c0       	rjmp	.+490    	; 0x1008 <__vector_23+0x3b8>
     e1e:	e5 5c       	subi	r30, 0xC5	; 197
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e26:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e30:	16 bc       	out	0x26, r1	; 38
            bootload();
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f0 e7       	ldi	r31, 0x70	; 112
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e38:	e0 e0       	ldi	r30, 0x00	; 0
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e3e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e42:	e2 c0       	rjmp	.+452    	; 0x1008 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	b2 c0       	rjmp	.+356    	; 0xfac <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e48:	85 e0       	ldi	r24, 0x05	; 5
     e4a:	b0 c0       	rjmp	.+352    	; 0xfac <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	ae c0       	rjmp	.+348    	; 0xfac <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e50:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	09 f4       	brne	.+2      	; 0xe5a <__vector_23+0x20a>
     e58:	d7 c0       	rjmp	.+430    	; 0x1008 <__vector_23+0x3b8>
     e5a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	09 f4       	brne	.+2      	; 0xe64 <__vector_23+0x214>
     e62:	d2 c0       	rjmp	.+420    	; 0x1008 <__vector_23+0x3b8>
                motors_on();
     e64:	53 9a       	sbi	0x0a, 3	; 10
     e66:	23 9a       	sbi	0x04, 3	; 4
     e68:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e6c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	9c c0       	rjmp	.+312    	; 0xfac <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e74:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_23+0x22e>
     e7c:	4b c0       	rjmp	.+150    	; 0xf14 <__vector_23+0x2c4>
     e7e:	80 f4       	brcc	.+32     	; 0xea0 <__vector_23+0x250>
     e80:	88 23       	and	r24, r24
     e82:	a9 f0       	breq	.+42     	; 0xeae <__vector_23+0x25e>
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f0       	breq	.+2      	; 0xe8a <__vector_23+0x23a>
     e88:	82 c0       	rjmp	.+260    	; 0xf8e <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e8a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <rx_msg+0x1>
     e8e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_msg+0x2>
     e92:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <kilo_uid+0x1>
     e96:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <kilo_uid>
                    cur_motion = MOVE_STOP;
     e9a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     e9e:	77 c0       	rjmp	.+238    	; 0xf8e <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__vector_23+0x256>
     ea4:	49 c0       	rjmp	.+146    	; 0xf38 <__vector_23+0x2e8>
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	09 f4       	brne	.+2      	; 0xeac <__vector_23+0x25c>
     eaa:	58 c0       	rjmp	.+176    	; 0xf5c <__vector_23+0x30c>
     eac:	70 c0       	rjmp	.+224    	; 0xf8e <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     eae:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     eb2:	86 30       	cpi	r24, 0x06	; 6
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <__vector_23+0x268>
     eb6:	6b c0       	rjmp	.+214    	; 0xf8e <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     eb8:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <kilo_uid>
     ebc:	80 eb       	ldi	r24, 0xB0	; 176
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     ec4:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <kilo_uid+0x1>
     ec8:	81 eb       	ldi	r24, 0xB1	; 177
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ed0:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_turn_left>
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     edc:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_turn_right>
     ee0:	89 e0       	ldi	r24, 0x09	; 9
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ee8:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_straight_left>
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ef4:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_straight_right>
     ef8:	84 e1       	ldi	r24, 0x14	; 20
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <eeprom_write_byte>
                        motors_off();
     f00:	53 98       	cbi	0x0a, 3	; 10
     f02:	23 98       	cbi	0x04, 3	; 4
     f04:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f08:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f12:	3d c0       	rjmp	.+122    	; 0xf8e <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f14:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f18:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_msg+0x3>
     f1c:	91 30       	cpi	r25, 0x01	; 1
     f1e:	21 f4       	brne	.+8      	; 0xf28 <__vector_23+0x2d8>
     f20:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <kilo_turn_left>
     f24:	89 17       	cp	r24, r25
     f26:	99 f1       	breq	.+102    	; 0xf8e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f28:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f32:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
     f36:	2b c0       	rjmp	.+86     	; 0xf8e <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f38:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f3c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg+0x4>
     f40:	92 30       	cpi	r25, 0x02	; 2
     f42:	21 f4       	brne	.+8      	; 0xf4c <__vector_23+0x2fc>
     f44:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_turn_right>
     f48:	89 17       	cp	r24, r25
     f4a:	09 f1       	breq	.+66     	; 0xf8e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f4c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f56:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f5c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f60:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg+0x6>
     f64:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_msg+0x5>
     f68:	23 30       	cpi	r18, 0x03	; 3
     f6a:	41 f4       	brne	.+16     	; 0xf7c <__vector_23+0x32c>
     f6c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <kilo_straight_right>
     f70:	82 13       	cpse	r24, r18
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__vector_23+0x32c>
     f74:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <kilo_straight_left>
     f78:	92 17       	cp	r25, r18
     f7a:	49 f0       	breq	.+18     	; 0xf8e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f7c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f86:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f8a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f8e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
     f92:	88 23       	and	r24, r24
     f94:	c9 f1       	breq	.+114    	; 0x1008 <__vector_23+0x3b8>
     f96:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f9a:	86 30       	cpi	r24, 0x06	; 6
     f9c:	a9 f1       	breq	.+106    	; 0x1008 <__vector_23+0x3b8>
                motors_on();
     f9e:	53 9a       	sbi	0x0a, 3	; 10
     fa0:	23 9a       	sbi	0x04, 3	; 4
     fa2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fa6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     fb0:	2b c0       	rjmp	.+86     	; 0x1008 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     fb2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     fb6:	86 30       	cpi	r24, 0x06	; 6
     fb8:	81 f0       	breq	.+32     	; 0xfda <__vector_23+0x38a>
                motors_on();
     fba:	53 9a       	sbi	0x0a, 3	; 10
     fbc:	23 9a       	sbi	0x04, 3	; 4
     fbe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fc2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fcc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     fd0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     fd4:	86 e0       	ldi	r24, 0x06	; 6
     fd6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	00 90 78 01 	lds	r0, 0x0178	; 0x800178 <rx_msg>
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <__vector_23+0x398>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <__vector_23+0x394>
     fec:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <kilo_uid>
     ff0:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <kilo_uid+0x1>
     ff4:	82 23       	and	r24, r18
     ff6:	93 23       	and	r25, r19
     ff8:	89 2b       	or	r24, r25
     ffa:	21 f0       	breq	.+8      	; 0x1004 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1004:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    102e:	fc 01       	movw	r30, r24
    1030:	9c 01       	movw	r18, r24
    1032:	26 5f       	subi	r18, 0xF6	; 246
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    103a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    103c:	84 27       	eor	r24, r20
    103e:	08 2e       	mov	r0, r24
    1040:	82 95       	swap	r24
    1042:	80 7f       	andi	r24, 0xF0	; 240
    1044:	80 25       	eor	r24, r0
    1046:	09 2e       	mov	r0, r25
    1048:	98 2f       	mov	r25, r24
    104a:	82 95       	swap	r24
    104c:	8f 70       	andi	r24, 0x0F	; 15
    104e:	08 26       	eor	r0, r24
    1050:	86 95       	lsr	r24
    1052:	98 27       	eor	r25, r24
    1054:	89 27       	eor	r24, r25
    1056:	88 0f       	add	r24, r24
    1058:	88 0f       	add	r24, r24
    105a:	88 0f       	add	r24, r24
    105c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    105e:	e2 17       	cp	r30, r18
    1060:	f3 07       	cpc	r31, r19
    1062:	59 f7       	brne	.-42     	; 0x103a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1064:	08 95       	ret

00001066 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1066:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1068:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    106a:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    106c:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <tx_mask>
    or tmpreg1, ddrreg
    1070:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1072:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1074:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1076:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    107a:	20 30       	cpi	r18, 0x00	; 0
    107c:	29 f0       	breq	.+10     	; 0x1088 <message_send+0x22>
    107e:	00 00       	nop
    1080:	25 b1       	in	r18, 0x05	; 5
    1082:	23 2b       	or	r18, r19
    1084:	25 b9       	out	0x05, r18	; 5
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <message_send+0x2a>
    1088:	00 00       	nop
    108a:	00 00       	nop
    108c:	00 00       	nop
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <message_send+0x2a>
    1090:	00 00       	nop
    1092:	00 00       	nop
    1094:	00 00       	nop
    1096:	30 95       	com	r19
    1098:	25 b1       	in	r18, 0x05	; 5
    109a:	23 23       	and	r18, r19
    109c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    109e:	2e ea       	ldi	r18, 0xAE	; 174
    10a0:	2a 95       	dec	r18
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    10a4:	2b ee       	ldi	r18, 0xEB	; 235

000010a6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    10a6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    10a8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10ac:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10ae:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    10b2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10b4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10b6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10b8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10ba:	0f be       	out	0x3f, r0	; 63
    return 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret

000010c0 <nocollision>:
nocollision:
    nop
    10c0:	00 00       	nop
    dec tmpreg1
    10c2:	2a 95       	dec	r18
    brne checkcollision
    10c4:	81 f7       	brne	.-32     	; 0x10a6 <checkcollision>

    ldi tmpreg1, 0x01
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10c8:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    10cc:	20 30       	cpi	r18, 0x00	; 0
    10ce:	29 f0       	breq	.+10     	; 0x10da <nocollision+0x1a>
    10d0:	00 00       	nop
    10d2:	25 b1       	in	r18, 0x05	; 5
    10d4:	23 2b       	or	r18, r19
    10d6:	25 b9       	out	0x05, r18	; 5
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <nocollision+0x22>
    10da:	00 00       	nop
    10dc:	00 00       	nop
    10de:	00 00       	nop
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <nocollision+0x22>
    10e2:	00 00       	nop
    10e4:	00 00       	nop
    10e6:	00 00       	nop
    10e8:	30 95       	com	r19
    10ea:	25 b1       	in	r18, 0x05	; 5
    10ec:	23 23       	and	r18, r19
    10ee:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10f0:	00 00       	nop
    10f2:	24 e5       	ldi	r18, 0x54	; 84
    10f4:	2a 95       	dec	r18
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10f8:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10fa:	8c e0       	ldi	r24, 0x0C	; 12

000010fc <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10fc:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1100:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1102:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1104:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1106:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1108:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    110a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    110c:	50 e0       	ldi	r21, 0x00	; 0

0000110e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    110e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1110:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1112:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1114:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1116:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    111a:	20 30       	cpi	r18, 0x00	; 0
    111c:	29 f0       	breq	.+10     	; 0x1128 <sendbit+0x1a>
    111e:	00 00       	nop
    1120:	25 b1       	in	r18, 0x05	; 5
    1122:	23 2b       	or	r18, r19
    1124:	25 b9       	out	0x05, r18	; 5
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <sendbit+0x22>
    1128:	00 00       	nop
    112a:	00 00       	nop
    112c:	00 00       	nop
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <sendbit+0x22>
    1130:	00 00       	nop
    1132:	00 00       	nop
    1134:	00 00       	nop
    1136:	30 95       	com	r19
    1138:	25 b1       	in	r18, 0x05	; 5
    113a:	23 23       	and	r18, r19
    113c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    113e:	00 00       	nop
    1140:	21 e5       	ldi	r18, 0x51	; 81
    1142:	2a 95       	dec	r18
    1144:	f1 f7       	brne	.-4      	; 0x1142 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1146:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1148:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    114a:	9a 95       	dec	r25
    brne sendbit
    114c:	01 f7       	brne	.-64     	; 0x110e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    114e:	8a 95       	dec	r24
    brne sendbyte
    1150:	a9 f6       	brne	.-86     	; 0x10fc <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1152:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1154:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1156:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1158:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    115a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    115e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1160:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1162:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1164:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1166:	0f be       	out	0x3f, r0	; 63
    return 1
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	08 95       	ret

0000116c <main>:
      }
    }
}

int main() {
  kilo_init();
    116c:	0e 94 03 01 	call	0x206	; 0x206 <kilo_init>
  kilo_message_tx = message_tx;
    1170:	81 e7       	ldi	r24, 0x71	; 113
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1178:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_message_rx = message_rx;
    117c:	84 e7       	ldi	r24, 0x74	; 116
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    1184:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
  kilo_start(setup, loop);
    1188:	6d ec       	ldi	r22, 0xCD	; 205
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	87 e8       	ldi	r24, 0x87	; 135
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <kilo_start>

  return 0;
}
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	08 95       	ret

0000119a <__divmodhi4>:
    119a:	97 fb       	bst	r25, 7
    119c:	07 2e       	mov	r0, r23
    119e:	16 f4       	brtc	.+4      	; 0x11a4 <__divmodhi4+0xa>
    11a0:	00 94       	com	r0
    11a2:	07 d0       	rcall	.+14     	; 0x11b2 <__divmodhi4_neg1>
    11a4:	77 fd       	sbrc	r23, 7
    11a6:	09 d0       	rcall	.+18     	; 0x11ba <__divmodhi4_neg2>
    11a8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivmodhi4>
    11ac:	07 fc       	sbrc	r0, 7
    11ae:	05 d0       	rcall	.+10     	; 0x11ba <__divmodhi4_neg2>
    11b0:	3e f4       	brtc	.+14     	; 0x11c0 <__divmodhi4_exit>

000011b2 <__divmodhi4_neg1>:
    11b2:	90 95       	com	r25
    11b4:	81 95       	neg	r24
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	08 95       	ret

000011ba <__divmodhi4_neg2>:
    11ba:	70 95       	com	r23
    11bc:	61 95       	neg	r22
    11be:	7f 4f       	sbci	r23, 0xFF	; 255

000011c0 <__divmodhi4_exit>:
    11c0:	08 95       	ret

000011c2 <__tablejump2__>:
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	05 90       	lpm	r0, Z+
    11c8:	f4 91       	lpm	r31, Z
    11ca:	e0 2d       	mov	r30, r0
    11cc:	09 94       	ijmp

000011ce <__umulhisi3>:
    11ce:	a2 9f       	mul	r26, r18
    11d0:	b0 01       	movw	r22, r0
    11d2:	b3 9f       	mul	r27, r19
    11d4:	c0 01       	movw	r24, r0
    11d6:	a3 9f       	mul	r26, r19
    11d8:	70 0d       	add	r23, r0
    11da:	81 1d       	adc	r24, r1
    11dc:	11 24       	eor	r1, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	b2 9f       	mul	r27, r18
    11e2:	70 0d       	add	r23, r0
    11e4:	81 1d       	adc	r24, r1
    11e6:	11 24       	eor	r1, r1
    11e8:	91 1d       	adc	r25, r1
    11ea:	08 95       	ret

000011ec <__udivmodhi4>:
    11ec:	aa 1b       	sub	r26, r26
    11ee:	bb 1b       	sub	r27, r27
    11f0:	51 e1       	ldi	r21, 0x11	; 17
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <__udivmodhi4_ep>

000011f4 <__udivmodhi4_loop>:
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	a6 17       	cp	r26, r22
    11fa:	b7 07       	cpc	r27, r23
    11fc:	10 f0       	brcs	.+4      	; 0x1202 <__udivmodhi4_ep>
    11fe:	a6 1b       	sub	r26, r22
    1200:	b7 0b       	sbc	r27, r23

00001202 <__udivmodhi4_ep>:
    1202:	88 1f       	adc	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	5a 95       	dec	r21
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__udivmodhi4_loop>
    120a:	80 95       	com	r24
    120c:	90 95       	com	r25
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	08 95       	ret

00001214 <__subsf3>:
    1214:	50 58       	subi	r21, 0x80	; 128

00001216 <__addsf3>:
    1216:	bb 27       	eor	r27, r27
    1218:	aa 27       	eor	r26, r26
    121a:	0e 94 22 09 	call	0x1244	; 0x1244 <__addsf3x>
    121e:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_round>
    1222:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscA>
    1226:	38 f0       	brcs	.+14     	; 0x1236 <__addsf3+0x20>
    1228:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_pscB>
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__addsf3+0x20>
    122e:	39 f4       	brne	.+14     	; 0x123e <__addsf3+0x28>
    1230:	9f 3f       	cpi	r25, 0xFF	; 255
    1232:	19 f4       	brne	.+6      	; 0x123a <__addsf3+0x24>
    1234:	26 f4       	brtc	.+8      	; 0x123e <__addsf3+0x28>
    1236:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__fp_nan>
    123a:	0e f4       	brtc	.+2      	; 0x123e <__addsf3+0x28>
    123c:	e0 95       	com	r30
    123e:	e7 fb       	bst	r30, 7
    1240:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_inf>

00001244 <__addsf3x>:
    1244:	e9 2f       	mov	r30, r25
    1246:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_split3>
    124a:	58 f3       	brcs	.-42     	; 0x1222 <__addsf3+0xc>
    124c:	ba 17       	cp	r27, r26
    124e:	62 07       	cpc	r22, r18
    1250:	73 07       	cpc	r23, r19
    1252:	84 07       	cpc	r24, r20
    1254:	95 07       	cpc	r25, r21
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__addsf3x+0x1c>
    1258:	79 f4       	brne	.+30     	; 0x1278 <__addsf3x+0x34>
    125a:	a6 f5       	brtc	.+104    	; 0x12c4 <__addsf3x+0x80>
    125c:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__fp_zero>
    1260:	0e f4       	brtc	.+2      	; 0x1264 <__addsf3x+0x20>
    1262:	e0 95       	com	r30
    1264:	0b 2e       	mov	r0, r27
    1266:	ba 2f       	mov	r27, r26
    1268:	a0 2d       	mov	r26, r0
    126a:	0b 01       	movw	r0, r22
    126c:	b9 01       	movw	r22, r18
    126e:	90 01       	movw	r18, r0
    1270:	0c 01       	movw	r0, r24
    1272:	ca 01       	movw	r24, r20
    1274:	a0 01       	movw	r20, r0
    1276:	11 24       	eor	r1, r1
    1278:	ff 27       	eor	r31, r31
    127a:	59 1b       	sub	r21, r25
    127c:	99 f0       	breq	.+38     	; 0x12a4 <__addsf3x+0x60>
    127e:	59 3f       	cpi	r21, 0xF9	; 249
    1280:	50 f4       	brcc	.+20     	; 0x1296 <__addsf3x+0x52>
    1282:	50 3e       	cpi	r21, 0xE0	; 224
    1284:	68 f1       	brcs	.+90     	; 0x12e0 <__addsf3x+0x9c>
    1286:	1a 16       	cp	r1, r26
    1288:	f0 40       	sbci	r31, 0x00	; 0
    128a:	a2 2f       	mov	r26, r18
    128c:	23 2f       	mov	r18, r19
    128e:	34 2f       	mov	r19, r20
    1290:	44 27       	eor	r20, r20
    1292:	58 5f       	subi	r21, 0xF8	; 248
    1294:	f3 cf       	rjmp	.-26     	; 0x127c <__addsf3x+0x38>
    1296:	46 95       	lsr	r20
    1298:	37 95       	ror	r19
    129a:	27 95       	ror	r18
    129c:	a7 95       	ror	r26
    129e:	f0 40       	sbci	r31, 0x00	; 0
    12a0:	53 95       	inc	r21
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__addsf3x+0x52>
    12a4:	7e f4       	brtc	.+30     	; 0x12c4 <__addsf3x+0x80>
    12a6:	1f 16       	cp	r1, r31
    12a8:	ba 0b       	sbc	r27, r26
    12aa:	62 0b       	sbc	r22, r18
    12ac:	73 0b       	sbc	r23, r19
    12ae:	84 0b       	sbc	r24, r20
    12b0:	ba f0       	brmi	.+46     	; 0x12e0 <__addsf3x+0x9c>
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	a1 f0       	breq	.+40     	; 0x12de <__addsf3x+0x9a>
    12b6:	ff 0f       	add	r31, r31
    12b8:	bb 1f       	adc	r27, r27
    12ba:	66 1f       	adc	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	88 1f       	adc	r24, r24
    12c0:	c2 f7       	brpl	.-16     	; 0x12b2 <__addsf3x+0x6e>
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <__addsf3x+0x9c>
    12c4:	ba 0f       	add	r27, r26
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 1f       	adc	r23, r19
    12ca:	84 1f       	adc	r24, r20
    12cc:	48 f4       	brcc	.+18     	; 0x12e0 <__addsf3x+0x9c>
    12ce:	87 95       	ror	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f7 95       	ror	r31
    12d8:	9e 3f       	cpi	r25, 0xFE	; 254
    12da:	08 f0       	brcs	.+2      	; 0x12de <__addsf3x+0x9a>
    12dc:	b0 cf       	rjmp	.-160    	; 0x123e <__addsf3+0x28>
    12de:	93 95       	inc	r25
    12e0:	88 0f       	add	r24, r24
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <__addsf3x+0xa2>
    12e4:	99 27       	eor	r25, r25
    12e6:	ee 0f       	add	r30, r30
    12e8:	97 95       	ror	r25
    12ea:	87 95       	ror	r24
    12ec:	08 95       	ret

000012ee <__divsf3>:
    12ee:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3x>
    12f2:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_round>
    12f6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_pscB>
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <__divsf3+0x24>
    12fc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscA>
    1300:	40 f0       	brcs	.+16     	; 0x1312 <__divsf3+0x24>
    1302:	29 f4       	brne	.+10     	; 0x130e <__divsf3+0x20>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	29 f0       	breq	.+10     	; 0x1312 <__divsf3+0x24>
    1308:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_inf>
    130c:	51 11       	cpse	r21, r1
    130e:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_szero>
    1312:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__fp_nan>

00001316 <__divsf3x>:
    1316:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_split3>
    131a:	68 f3       	brcs	.-38     	; 0x12f6 <__divsf3+0x8>

0000131c <__divsf3_pse>:
    131c:	99 23       	and	r25, r25
    131e:	b1 f3       	breq	.-20     	; 0x130c <__divsf3+0x1e>
    1320:	55 23       	and	r21, r21
    1322:	91 f3       	breq	.-28     	; 0x1308 <__divsf3+0x1a>
    1324:	95 1b       	sub	r25, r21
    1326:	55 0b       	sbc	r21, r21
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	62 17       	cp	r22, r18
    132e:	73 07       	cpc	r23, r19
    1330:	84 07       	cpc	r24, r20
    1332:	38 f0       	brcs	.+14     	; 0x1342 <__divsf3_pse+0x26>
    1334:	9f 5f       	subi	r25, 0xFF	; 255
    1336:	5f 4f       	sbci	r21, 0xFF	; 255
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	44 1f       	adc	r20, r20
    133e:	aa 1f       	adc	r26, r26
    1340:	a9 f3       	breq	.-22     	; 0x132c <__divsf3_pse+0x10>
    1342:	35 d0       	rcall	.+106    	; 0x13ae <__divsf3_pse+0x92>
    1344:	0e 2e       	mov	r0, r30
    1346:	3a f0       	brmi	.+14     	; 0x1356 <__divsf3_pse+0x3a>
    1348:	e0 e8       	ldi	r30, 0x80	; 128
    134a:	32 d0       	rcall	.+100    	; 0x13b0 <__divsf3_pse+0x94>
    134c:	91 50       	subi	r25, 0x01	; 1
    134e:	50 40       	sbci	r21, 0x00	; 0
    1350:	e6 95       	lsr	r30
    1352:	00 1c       	adc	r0, r0
    1354:	ca f7       	brpl	.-14     	; 0x1348 <__divsf3_pse+0x2c>
    1356:	2b d0       	rcall	.+86     	; 0x13ae <__divsf3_pse+0x92>
    1358:	fe 2f       	mov	r31, r30
    135a:	29 d0       	rcall	.+82     	; 0x13ae <__divsf3_pse+0x92>
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	bb 1f       	adc	r27, r27
    1364:	26 17       	cp	r18, r22
    1366:	37 07       	cpc	r19, r23
    1368:	48 07       	cpc	r20, r24
    136a:	ab 07       	cpc	r26, r27
    136c:	b0 e8       	ldi	r27, 0x80	; 128
    136e:	09 f0       	breq	.+2      	; 0x1372 <__divsf3_pse+0x56>
    1370:	bb 0b       	sbc	r27, r27
    1372:	80 2d       	mov	r24, r0
    1374:	bf 01       	movw	r22, r30
    1376:	ff 27       	eor	r31, r31
    1378:	93 58       	subi	r25, 0x83	; 131
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	3a f0       	brmi	.+14     	; 0x138c <__divsf3_pse+0x70>
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	51 05       	cpc	r21, r1
    1382:	78 f0       	brcs	.+30     	; 0x13a2 <__divsf3_pse+0x86>
    1384:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_inf>
    1388:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_szero>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	e4 f3       	brlt	.-8      	; 0x1388 <__divsf3_pse+0x6c>
    1390:	98 3e       	cpi	r25, 0xE8	; 232
    1392:	d4 f3       	brlt	.-12     	; 0x1388 <__divsf3_pse+0x6c>
    1394:	86 95       	lsr	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f7 95       	ror	r31
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__divsf3_pse+0x78>
    13a2:	88 0f       	add	r24, r24
    13a4:	91 1d       	adc	r25, r1
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	97 f9       	bld	r25, 7
    13ac:	08 95       	ret
    13ae:	e1 e0       	ldi	r30, 0x01	; 1
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	bb 1f       	adc	r27, r27
    13b8:	62 17       	cp	r22, r18
    13ba:	73 07       	cpc	r23, r19
    13bc:	84 07       	cpc	r24, r20
    13be:	ba 07       	cpc	r27, r26
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <__divsf3_pse+0xae>
    13c2:	62 1b       	sub	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	ba 0b       	sbc	r27, r26
    13ca:	ee 1f       	adc	r30, r30
    13cc:	88 f7       	brcc	.-30     	; 0x13b0 <__divsf3_pse+0x94>
    13ce:	e0 95       	com	r30
    13d0:	08 95       	ret

000013d2 <__fixsfsi>:
    13d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
    13d6:	68 94       	set
    13d8:	b1 11       	cpse	r27, r1
    13da:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_szero>
    13de:	08 95       	ret

000013e0 <__fixunssfsi>:
    13e0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_splitA>
    13e4:	88 f0       	brcs	.+34     	; 0x1408 <__fixunssfsi+0x28>
    13e6:	9f 57       	subi	r25, 0x7F	; 127
    13e8:	98 f0       	brcs	.+38     	; 0x1410 <__fixunssfsi+0x30>
    13ea:	b9 2f       	mov	r27, r25
    13ec:	99 27       	eor	r25, r25
    13ee:	b7 51       	subi	r27, 0x17	; 23
    13f0:	b0 f0       	brcs	.+44     	; 0x141e <__fixunssfsi+0x3e>
    13f2:	e1 f0       	breq	.+56     	; 0x142c <__fixunssfsi+0x4c>
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	1a f0       	brmi	.+6      	; 0x1404 <__fixunssfsi+0x24>
    13fe:	ba 95       	dec	r27
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__fixunssfsi+0x14>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <__fixunssfsi+0x4c>
    1404:	b1 30       	cpi	r27, 0x01	; 1
    1406:	91 f0       	breq	.+36     	; 0x142c <__fixunssfsi+0x4c>
    1408:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_zero>
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	08 95       	ret
    1410:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__fp_zero>
    1414:	67 2f       	mov	r22, r23
    1416:	78 2f       	mov	r23, r24
    1418:	88 27       	eor	r24, r24
    141a:	b8 5f       	subi	r27, 0xF8	; 248
    141c:	39 f0       	breq	.+14     	; 0x142c <__fixunssfsi+0x4c>
    141e:	b9 3f       	cpi	r27, 0xF9	; 249
    1420:	cc f3       	brlt	.-14     	; 0x1414 <__fixunssfsi+0x34>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b3 95       	inc	r27
    142a:	d9 f7       	brne	.-10     	; 0x1422 <__fixunssfsi+0x42>
    142c:	3e f4       	brtc	.+14     	; 0x143c <__fixunssfsi+0x5c>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__floatunsisf>:
    143e:	e8 94       	clt
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <__floatsisf+0x12>

00001442 <__floatsisf>:
    1442:	97 fb       	bst	r25, 7
    1444:	3e f4       	brtc	.+14     	; 0x1454 <__floatsisf+0x12>
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	99 23       	and	r25, r25
    1456:	a9 f0       	breq	.+42     	; 0x1482 <__floatsisf+0x40>
    1458:	f9 2f       	mov	r31, r25
    145a:	96 e9       	ldi	r25, 0x96	; 150
    145c:	bb 27       	eor	r27, r27
    145e:	93 95       	inc	r25
    1460:	f6 95       	lsr	r31
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b7 95       	ror	r27
    146a:	f1 11       	cpse	r31, r1
    146c:	f8 cf       	rjmp	.-16     	; 0x145e <__floatsisf+0x1c>
    146e:	fa f4       	brpl	.+62     	; 0x14ae <__floatsisf+0x6c>
    1470:	bb 0f       	add	r27, r27
    1472:	11 f4       	brne	.+4      	; 0x1478 <__floatsisf+0x36>
    1474:	60 ff       	sbrs	r22, 0
    1476:	1b c0       	rjmp	.+54     	; 0x14ae <__floatsisf+0x6c>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <__floatsisf+0x6c>
    1482:	88 23       	and	r24, r24
    1484:	11 f0       	breq	.+4      	; 0x148a <__floatsisf+0x48>
    1486:	96 e9       	ldi	r25, 0x96	; 150
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <__floatsisf+0x6a>
    148a:	77 23       	and	r23, r23
    148c:	21 f0       	breq	.+8      	; 0x1496 <__floatsisf+0x54>
    148e:	9e e8       	ldi	r25, 0x8E	; 142
    1490:	87 2f       	mov	r24, r23
    1492:	76 2f       	mov	r23, r22
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <__floatsisf+0x5e>
    1496:	66 23       	and	r22, r22
    1498:	71 f0       	breq	.+28     	; 0x14b6 <__floatsisf+0x74>
    149a:	96 e8       	ldi	r25, 0x86	; 134
    149c:	86 2f       	mov	r24, r22
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	2a f0       	brmi	.+10     	; 0x14ae <__floatsisf+0x6c>
    14a4:	9a 95       	dec	r25
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	da f7       	brpl	.-10     	; 0x14a4 <__floatsisf+0x62>
    14ae:	88 0f       	add	r24, r24
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	97 f9       	bld	r25, 7
    14b6:	08 95       	ret

000014b8 <__fp_inf>:
    14b8:	97 f9       	bld	r25, 7
    14ba:	9f 67       	ori	r25, 0x7F	; 127
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <__fp_nan>:
    14c4:	9f ef       	ldi	r25, 0xFF	; 255
    14c6:	80 ec       	ldi	r24, 0xC0	; 192
    14c8:	08 95       	ret

000014ca <__fp_pscA>:
    14ca:	00 24       	eor	r0, r0
    14cc:	0a 94       	dec	r0
    14ce:	16 16       	cp	r1, r22
    14d0:	17 06       	cpc	r1, r23
    14d2:	18 06       	cpc	r1, r24
    14d4:	09 06       	cpc	r0, r25
    14d6:	08 95       	ret

000014d8 <__fp_pscB>:
    14d8:	00 24       	eor	r0, r0
    14da:	0a 94       	dec	r0
    14dc:	12 16       	cp	r1, r18
    14de:	13 06       	cpc	r1, r19
    14e0:	14 06       	cpc	r1, r20
    14e2:	05 06       	cpc	r0, r21
    14e4:	08 95       	ret

000014e6 <__fp_round>:
    14e6:	09 2e       	mov	r0, r25
    14e8:	03 94       	inc	r0
    14ea:	00 0c       	add	r0, r0
    14ec:	11 f4       	brne	.+4      	; 0x14f2 <__fp_round+0xc>
    14ee:	88 23       	and	r24, r24
    14f0:	52 f0       	brmi	.+20     	; 0x1506 <__fp_round+0x20>
    14f2:	bb 0f       	add	r27, r27
    14f4:	40 f4       	brcc	.+16     	; 0x1506 <__fp_round+0x20>
    14f6:	bf 2b       	or	r27, r31
    14f8:	11 f4       	brne	.+4      	; 0x14fe <__fp_round+0x18>
    14fa:	60 ff       	sbrs	r22, 0
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__fp_round+0x20>
    14fe:	6f 5f       	subi	r22, 0xFF	; 255
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__fp_split3>:
    1508:	57 fd       	sbrc	r21, 7
    150a:	90 58       	subi	r25, 0x80	; 128
    150c:	44 0f       	add	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	59 f0       	breq	.+22     	; 0x1528 <__fp_splitA+0x10>
    1512:	5f 3f       	cpi	r21, 0xFF	; 255
    1514:	71 f0       	breq	.+28     	; 0x1532 <__fp_splitA+0x1a>
    1516:	47 95       	ror	r20

00001518 <__fp_splitA>:
    1518:	88 0f       	add	r24, r24
    151a:	97 fb       	bst	r25, 7
    151c:	99 1f       	adc	r25, r25
    151e:	61 f0       	breq	.+24     	; 0x1538 <__fp_splitA+0x20>
    1520:	9f 3f       	cpi	r25, 0xFF	; 255
    1522:	79 f0       	breq	.+30     	; 0x1542 <__fp_splitA+0x2a>
    1524:	87 95       	ror	r24
    1526:	08 95       	ret
    1528:	12 16       	cp	r1, r18
    152a:	13 06       	cpc	r1, r19
    152c:	14 06       	cpc	r1, r20
    152e:	55 1f       	adc	r21, r21
    1530:	f2 cf       	rjmp	.-28     	; 0x1516 <__fp_split3+0xe>
    1532:	46 95       	lsr	r20
    1534:	f1 df       	rcall	.-30     	; 0x1518 <__fp_splitA>
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <__fp_splitA+0x30>
    1538:	16 16       	cp	r1, r22
    153a:	17 06       	cpc	r1, r23
    153c:	18 06       	cpc	r1, r24
    153e:	99 1f       	adc	r25, r25
    1540:	f1 cf       	rjmp	.-30     	; 0x1524 <__fp_splitA+0xc>
    1542:	86 95       	lsr	r24
    1544:	71 05       	cpc	r23, r1
    1546:	61 05       	cpc	r22, r1
    1548:	08 94       	sec
    154a:	08 95       	ret

0000154c <__fp_zero>:
    154c:	e8 94       	clt

0000154e <__fp_szero>:
    154e:	bb 27       	eor	r27, r27
    1550:	66 27       	eor	r22, r22
    1552:	77 27       	eor	r23, r23
    1554:	cb 01       	movw	r24, r22
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret

0000155a <__mulsf3>:
    155a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__mulsf3x>
    155e:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_round>
    1562:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscA>
    1566:	38 f0       	brcs	.+14     	; 0x1576 <__mulsf3+0x1c>
    1568:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_pscB>
    156c:	20 f0       	brcs	.+8      	; 0x1576 <__mulsf3+0x1c>
    156e:	95 23       	and	r25, r21
    1570:	11 f0       	breq	.+4      	; 0x1576 <__mulsf3+0x1c>
    1572:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_inf>
    1576:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__fp_nan>
    157a:	11 24       	eor	r1, r1
    157c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_szero>

00001580 <__mulsf3x>:
    1580:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_split3>
    1584:	70 f3       	brcs	.-36     	; 0x1562 <__mulsf3+0x8>

00001586 <__mulsf3_pse>:
    1586:	95 9f       	mul	r25, r21
    1588:	c1 f3       	breq	.-16     	; 0x157a <__mulsf3+0x20>
    158a:	95 0f       	add	r25, r21
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	55 1f       	adc	r21, r21
    1590:	62 9f       	mul	r22, r18
    1592:	f0 01       	movw	r30, r0
    1594:	72 9f       	mul	r23, r18
    1596:	bb 27       	eor	r27, r27
    1598:	f0 0d       	add	r31, r0
    159a:	b1 1d       	adc	r27, r1
    159c:	63 9f       	mul	r22, r19
    159e:	aa 27       	eor	r26, r26
    15a0:	f0 0d       	add	r31, r0
    15a2:	b1 1d       	adc	r27, r1
    15a4:	aa 1f       	adc	r26, r26
    15a6:	64 9f       	mul	r22, r20
    15a8:	66 27       	eor	r22, r22
    15aa:	b0 0d       	add	r27, r0
    15ac:	a1 1d       	adc	r26, r1
    15ae:	66 1f       	adc	r22, r22
    15b0:	82 9f       	mul	r24, r18
    15b2:	22 27       	eor	r18, r18
    15b4:	b0 0d       	add	r27, r0
    15b6:	a1 1d       	adc	r26, r1
    15b8:	62 1f       	adc	r22, r18
    15ba:	73 9f       	mul	r23, r19
    15bc:	b0 0d       	add	r27, r0
    15be:	a1 1d       	adc	r26, r1
    15c0:	62 1f       	adc	r22, r18
    15c2:	83 9f       	mul	r24, r19
    15c4:	a0 0d       	add	r26, r0
    15c6:	61 1d       	adc	r22, r1
    15c8:	22 1f       	adc	r18, r18
    15ca:	74 9f       	mul	r23, r20
    15cc:	33 27       	eor	r19, r19
    15ce:	a0 0d       	add	r26, r0
    15d0:	61 1d       	adc	r22, r1
    15d2:	23 1f       	adc	r18, r19
    15d4:	84 9f       	mul	r24, r20
    15d6:	60 0d       	add	r22, r0
    15d8:	21 1d       	adc	r18, r1
    15da:	82 2f       	mov	r24, r18
    15dc:	76 2f       	mov	r23, r22
    15de:	6a 2f       	mov	r22, r26
    15e0:	11 24       	eor	r1, r1
    15e2:	9f 57       	subi	r25, 0x7F	; 127
    15e4:	50 40       	sbci	r21, 0x00	; 0
    15e6:	9a f0       	brmi	.+38     	; 0x160e <__mulsf3_pse+0x88>
    15e8:	f1 f0       	breq	.+60     	; 0x1626 <__mulsf3_pse+0xa0>
    15ea:	88 23       	and	r24, r24
    15ec:	4a f0       	brmi	.+18     	; 0x1600 <__mulsf3_pse+0x7a>
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	bb 1f       	adc	r27, r27
    15f4:	66 1f       	adc	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	91 50       	subi	r25, 0x01	; 1
    15fc:	50 40       	sbci	r21, 0x00	; 0
    15fe:	a9 f7       	brne	.-22     	; 0x15ea <__mulsf3_pse+0x64>
    1600:	9e 3f       	cpi	r25, 0xFE	; 254
    1602:	51 05       	cpc	r21, r1
    1604:	80 f0       	brcs	.+32     	; 0x1626 <__mulsf3_pse+0xa0>
    1606:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_inf>
    160a:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_szero>
    160e:	5f 3f       	cpi	r21, 0xFF	; 255
    1610:	e4 f3       	brlt	.-8      	; 0x160a <__mulsf3_pse+0x84>
    1612:	98 3e       	cpi	r25, 0xE8	; 232
    1614:	d4 f3       	brlt	.-12     	; 0x160a <__mulsf3_pse+0x84>
    1616:	86 95       	lsr	r24
    1618:	77 95       	ror	r23
    161a:	67 95       	ror	r22
    161c:	b7 95       	ror	r27
    161e:	f7 95       	ror	r31
    1620:	e7 95       	ror	r30
    1622:	9f 5f       	subi	r25, 0xFF	; 255
    1624:	c1 f7       	brne	.-16     	; 0x1616 <__mulsf3_pse+0x90>
    1626:	fe 2b       	or	r31, r30
    1628:	88 0f       	add	r24, r24
    162a:	91 1d       	adc	r25, r1
    162c:	96 95       	lsr	r25
    162e:	87 95       	ror	r24
    1630:	97 f9       	bld	r25, 7
    1632:	08 95       	ret

00001634 <do_rand>:
    1634:	8f 92       	push	r8
    1636:	9f 92       	push	r9
    1638:	af 92       	push	r10
    163a:	bf 92       	push	r11
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	68 81       	ld	r22, Y
    164c:	79 81       	ldd	r23, Y+1	; 0x01
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	61 15       	cp	r22, r1
    1654:	71 05       	cpc	r23, r1
    1656:	81 05       	cpc	r24, r1
    1658:	91 05       	cpc	r25, r1
    165a:	21 f4       	brne	.+8      	; 0x1664 <do_rand+0x30>
    165c:	64 e2       	ldi	r22, 0x24	; 36
    165e:	79 ed       	ldi	r23, 0xD9	; 217
    1660:	8b e5       	ldi	r24, 0x5B	; 91
    1662:	97 e0       	ldi	r25, 0x07	; 7
    1664:	2d e1       	ldi	r18, 0x1D	; 29
    1666:	33 ef       	ldi	r19, 0xF3	; 243
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__divmodsi4>
    1670:	49 01       	movw	r8, r18
    1672:	5a 01       	movw	r10, r20
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
    1678:	a7 ea       	ldi	r26, 0xA7	; 167
    167a:	b1 e4       	ldi	r27, 0x41	; 65
    167c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__muluhisi3>
    1680:	6b 01       	movw	r12, r22
    1682:	7c 01       	movw	r14, r24
    1684:	ac ee       	ldi	r26, 0xEC	; 236
    1686:	b4 ef       	ldi	r27, 0xF4	; 244
    1688:	a5 01       	movw	r20, r10
    168a:	94 01       	movw	r18, r8
    168c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__mulohisi3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8c 0d       	add	r24, r12
    1696:	9d 1d       	adc	r25, r13
    1698:	ae 1d       	adc	r26, r14
    169a:	bf 1d       	adc	r27, r15
    169c:	b7 ff       	sbrs	r27, 7
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <do_rand+0x72>
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b0 48       	sbci	r27, 0x80	; 128
    16a6:	88 83       	st	Y, r24
    16a8:	99 83       	std	Y+1, r25	; 0x01
    16aa:	aa 83       	std	Y+2, r26	; 0x02
    16ac:	bb 83       	std	Y+3, r27	; 0x03
    16ae:	9f 77       	andi	r25, 0x7F	; 127
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	08 95       	ret

000016c6 <rand_r>:
    16c6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <do_rand>
    16ca:	08 95       	ret

000016cc <rand>:
    16cc:	87 e0       	ldi	r24, 0x07	; 7
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <do_rand>
    16d4:	08 95       	ret

000016d6 <srand>:
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    16de:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    16e2:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    16e6:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    16ea:	08 95       	ret

000016ec <eeprom_read_byte>:
    16ec:	f9 99       	sbic	0x1f, 1	; 31
    16ee:	fe cf       	rjmp	.-4      	; 0x16ec <eeprom_read_byte>
    16f0:	92 bd       	out	0x22, r25	; 34
    16f2:	81 bd       	out	0x21, r24	; 33
    16f4:	f8 9a       	sbi	0x1f, 0	; 31
    16f6:	99 27       	eor	r25, r25
    16f8:	80 b5       	in	r24, 0x20	; 32
    16fa:	08 95       	ret

000016fc <eeprom_write_byte>:
    16fc:	26 2f       	mov	r18, r22

000016fe <eeprom_write_r18>:
    16fe:	f9 99       	sbic	0x1f, 1	; 31
    1700:	fe cf       	rjmp	.-4      	; 0x16fe <eeprom_write_r18>
    1702:	1f ba       	out	0x1f, r1	; 31
    1704:	92 bd       	out	0x22, r25	; 34
    1706:	81 bd       	out	0x21, r24	; 33
    1708:	20 bd       	out	0x20, r18	; 32
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	fa 9a       	sbi	0x1f, 2	; 31
    1710:	f9 9a       	sbi	0x1f, 1	; 31
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	08 95       	ret

00001718 <__divmodsi4>:
    1718:	05 2e       	mov	r0, r21
    171a:	97 fb       	bst	r25, 7
    171c:	1e f4       	brtc	.+6      	; 0x1724 <__divmodsi4+0xc>
    171e:	00 94       	com	r0
    1720:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__negsi2>
    1724:	57 fd       	sbrc	r21, 7
    1726:	07 d0       	rcall	.+14     	; 0x1736 <__divmodsi4_neg2>
    1728:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodsi4>
    172c:	07 fc       	sbrc	r0, 7
    172e:	03 d0       	rcall	.+6      	; 0x1736 <__divmodsi4_neg2>
    1730:	4e f4       	brtc	.+18     	; 0x1744 <__divmodsi4_exit>
    1732:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__negsi2>

00001736 <__divmodsi4_neg2>:
    1736:	50 95       	com	r21
    1738:	40 95       	com	r20
    173a:	30 95       	com	r19
    173c:	21 95       	neg	r18
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	4f 4f       	sbci	r20, 0xFF	; 255
    1742:	5f 4f       	sbci	r21, 0xFF	; 255

00001744 <__divmodsi4_exit>:
    1744:	08 95       	ret

00001746 <__negsi2>:
    1746:	90 95       	com	r25
    1748:	80 95       	com	r24
    174a:	70 95       	com	r23
    174c:	61 95       	neg	r22
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	08 95       	ret

00001756 <__muluhisi3>:
    1756:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__umulhisi3>
    175a:	a5 9f       	mul	r26, r21
    175c:	90 0d       	add	r25, r0
    175e:	b4 9f       	mul	r27, r20
    1760:	90 0d       	add	r25, r0
    1762:	a4 9f       	mul	r26, r20
    1764:	80 0d       	add	r24, r0
    1766:	91 1d       	adc	r25, r1
    1768:	11 24       	eor	r1, r1
    176a:	08 95       	ret

0000176c <__mulshisi3>:
    176c:	b7 ff       	sbrs	r27, 7
    176e:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__muluhisi3>

00001772 <__mulohisi3>:
    1772:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__muluhisi3>
    1776:	82 1b       	sub	r24, r18
    1778:	93 0b       	sbc	r25, r19
    177a:	08 95       	ret

0000177c <__udivmodsi4>:
    177c:	a1 e2       	ldi	r26, 0x21	; 33
    177e:	1a 2e       	mov	r1, r26
    1780:	aa 1b       	sub	r26, r26
    1782:	bb 1b       	sub	r27, r27
    1784:	fd 01       	movw	r30, r26
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <__udivmodsi4_ep>

00001788 <__udivmodsi4_loop>:
    1788:	aa 1f       	adc	r26, r26
    178a:	bb 1f       	adc	r27, r27
    178c:	ee 1f       	adc	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	a2 17       	cp	r26, r18
    1792:	b3 07       	cpc	r27, r19
    1794:	e4 07       	cpc	r30, r20
    1796:	f5 07       	cpc	r31, r21
    1798:	20 f0       	brcs	.+8      	; 0x17a2 <__udivmodsi4_ep>
    179a:	a2 1b       	sub	r26, r18
    179c:	b3 0b       	sbc	r27, r19
    179e:	e4 0b       	sbc	r30, r20
    17a0:	f5 0b       	sbc	r31, r21

000017a2 <__udivmodsi4_ep>:
    17a2:	66 1f       	adc	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	88 1f       	adc	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	1a 94       	dec	r1
    17ac:	69 f7       	brne	.-38     	; 0x1788 <__udivmodsi4_loop>
    17ae:	60 95       	com	r22
    17b0:	70 95       	com	r23
    17b2:	80 95       	com	r24
    17b4:	90 95       	com	r25
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	bd 01       	movw	r22, r26
    17bc:	cf 01       	movw	r24, r30
    17be:	08 95       	ret

000017c0 <_exit>:
    17c0:	f8 94       	cli

000017c2 <__stop_program>:
    17c2:	ff cf       	rjmp	.-2      	; 0x17c2 <__stop_program>
