
build/minnow_auto_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f7 05       	cpc	r31, r7
      6a:	4e 06       	cpc	r4, r30
      6c:	62 06       	cpc	r6, r18
      6e:	93 06       	cpc	r9, r19
      70:	9a 06       	cpc	r9, r26
      72:	79 06       	cpc	r7, r25
      74:	9d 06       	cpc	r9, r29
      76:	fb 07       	cpc	r31, r27
      78:	ec 08       	sbc	r14, r12
      7a:	ec 08       	sbc	r14, r12
      7c:	04 08       	sbc	r0, r4
      7e:	07 08       	sbc	r0, r7
      80:	0a 08       	sbc	r0, r10
      82:	0c 08       	sbc	r0, r12
      84:	0e 08       	sbc	r0, r14
      86:	10 08       	sbc	r1, r0
      88:	c1 08       	sbc	r12, r1
      8a:	22 08       	sbc	r2, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 ec       	ldi	r30, 0xC2	; 194
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 39       	cpi	r26, 0x94	; 148
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 9e 09 	call	0x133c	; 0x133c <main>
      da:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
uint32_t last_changed = 0;
int16_t current_light = 0;

// Function that listens for an incoming message and sets new_message flag on reception
message_t recv_message;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  recv_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	ae e1       	ldi	r26, 0x1E	; 30
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  if (recv_message.data[0] == 1) {
      f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <recv_message>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	31 f4       	brne	.+12     	; 0x106 <message_rx+0x24>
    new_message = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <new_message+0x1>
     102:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <new_message>
     106:	08 95       	ret

00000108 <message_tx>:
/* Functions continuously called once minnow converted to shark to
   emit a message, like a beacon */
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	08 95       	ret

0000010e <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <message_sent+0x1>
     116:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <message_sent>
     11a:	08 95       	ret

0000011c <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
     11c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
     120:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
     124:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_straight_left>
     128:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <set_motors>

0000012c <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     138:	c1 2c       	mov	r12, r1
     13a:	d1 2c       	mov	r13, r1
     13c:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     142:	0e 94 00 03 	call	0x600	; 0x600 <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	92 07       	cpc	r25, r18
     14c:	49 f0       	breq	.+18     	; 0x160 <sample_light+0x34>
            sum = sum + sample;
     14e:	09 2e       	mov	r0, r25
     150:	00 0c       	add	r0, r0
     152:	aa 0b       	sbc	r26, r26
     154:	bb 0b       	sbc	r27, r27
     156:	c8 0e       	add	r12, r24
     158:	d9 1e       	adc	r13, r25
     15a:	ea 1e       	adc	r14, r26
     15c:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     15e:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     160:	cc 32       	cpi	r28, 0x2C	; 44
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	d8 07       	cpc	r29, r24
     166:	6c f3       	brlt	.-38     	; 0x142 <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     168:	9e 01       	movw	r18, r28
     16a:	dd 0f       	add	r29, r29
     16c:	44 0b       	sbc	r20, r20
     16e:	55 0b       	sbc	r21, r21
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 cf 09 	call	0x139e	; 0x139e <__divmodsi4>
}
     178:	c9 01       	movw	r24, r18
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	08 95       	ret

00000188 <setup>:
}

/* Function runs once upon program initialization
   takes measurement of light at beginning of execution */
void setup() {
  current_light = sample_light();
     188:	0e 94 96 00 	call	0x12c	; 0x12c <sample_light>
     18c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     194:	08 95       	ret

00000196 <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <set_motion+0x12>
     1a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     1a8:	02 97       	sbiw	r24, 0x02	; 2
     1aa:	31 f4       	brne	.+12     	; 0x1b8 <set_motion+0x22>
    spinup_motors();
     1ac:	0e 94 f7 02 	call	0x5ee	; 0x5ee <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <set_motion+0x2c>
  } else {
    spinup_motors();
     1b8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1bc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <set_motors>

000001c6 <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	19 f4       	brne	.+6      	; 0x1d0 <random_walk+0xa>
     1ca:	0e 94 8e 00 	call	0x11c	; 0x11c <set_motion.part.0>
     1ce:	34 c0       	rjmp	.+104    	; 0x238 <random_walk+0x72>
          set_motion(FORWARD);
      } else if (die == 1) {
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	19 f4       	brne	.+6      	; 0x1dc <random_walk+0x16>
          set_motion(LEFT);
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <random_walk+0x20>
      } else if (die == 2) {
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	91 05       	cpc	r25, r1
     1e0:	29 f4       	brne	.+10     	; 0x1ec <random_walk+0x26>
          set_motion(RIGHT);
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
     1ea:	26 c0       	rjmp	.+76     	; 0x238 <random_walk+0x72>
      } else if (die == 3 || die == 4) {  // Initialization phase
     1ec:	9c 01       	movw	r18, r24
     1ee:	23 50       	subi	r18, 0x03	; 3
     1f0:	31 09       	sbc	r19, r1
     1f2:	22 30       	cpi	r18, 0x02	; 2
     1f4:	31 05       	cpc	r19, r1
     1f6:	c8 f4       	brcc	.+50     	; 0x22a <random_walk+0x64>
          if (die == 4) {
     1f8:	04 97       	sbiw	r24, 0x04	; 4
     1fa:	59 f4       	brne	.+22     	; 0x212 <random_walk+0x4c>
	    set_color(WHITE);
     1fc:	85 e1       	ldi	r24, 0x15	; 21
     1fe:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
	    set_motion(STOP);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	    delay(1500);
     20a:	8c ed       	ldi	r24, 0xDC	; 220
     20c:	95 e0       	ldi	r25, 0x05	; 5
     20e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <delay>
          }
          set_color(GREEN);
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
          set_motion(STOP);
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	  delay(1500);
     220:	8c ed       	ldi	r24, 0xDC	; 220
     222:	95 e0       	ldi	r25, 0x05	; 5
     224:	0e 94 e7 02 	call	0x5ce	; 0x5ce <delay>
     228:	07 c0       	rjmp	.+14     	; 0x238 <random_walk+0x72>
      } else {				  // Error handling, shouldn't reach
          set_motion(STOP);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	  set_color(OFF);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
      }
      delay(100);
     238:	84 e6       	ldi	r24, 0x64	; 100
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <delay>

00000240 <shark>:
}

// Function called once converted to shark
int16_t shark() {
  transmit_msg.type = NORMAL;			// Set message parameters
     240:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <transmit_msg+0x9>
  transmit_msg.data[0] = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <transmit_msg>
  transmit_msg.crc = message_crc(&transmit_msg);
     24a:	8a e2       	ldi	r24, 0x2A	; 42
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <message_crc>
     252:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <transmit_msg+0xb>
     256:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <transmit_msg+0xa>
  set_color(RED);				// Sharks are always red
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
  if (message_sent == 1) {
     260:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message_sent>
     264:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <message_sent+0x1>
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	e9 f4       	brne	.+58     	; 0x2a6 <shark+0x66>
      message_sent = 0;				// Reset flag so message needs to send again
     26c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <message_sent+0x1>
     270:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <message_sent>
      rand = rand_soft();			// Creating random number generator
     274:	0e 94 97 03 	call	0x72e	; 0x72e <rand_soft>
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     27e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
      random_walk(die);
     282:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     286:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     28a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
      die = (rand % 3);				// Generate new random value
     28e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     292:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divmodhi4>
     29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();			// Return current light conditions to main loop
     2a6:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

000002aa <minnow>:
}

// Function initially called when minnow has not yet been converted
int16_t minnow() {
   if (new_message == 1) {	// Indicates transition behavior (turn purple, pause)
     2aa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_message>
     2ae:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <new_message+0x1>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	81 f4       	brne	.+32     	; 0x2d8 <minnow+0x2e>
	tagged = 1;
     2b8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <tagged+0x1>
     2bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tagged>
	set_color(VIOLET);
     2c0:	81 e1       	ldi	r24, 0x11	; 17
     2c2:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
	set_motion(STOP);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	delay(1500);		// 1.5 second conversion delay
     2ce:	8c ed       	ldi	r24, 0xDC	; 220
     2d0:	95 e0       	ldi	r25, 0x05	; 5
     2d2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <delay>
     2d6:	1c c0       	rjmp	.+56     	; 0x310 <minnow+0x66>
	return sample_light();
    } else {
        set_color(BLUE); // Indicates random walk behavior with blue light for minnow
     2d8:	80 e1       	ldi	r24, 0x10	; 16
     2da:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
        rand = rand_soft();
     2de:	0e 94 97 03 	call	0x72e	; 0x72e <rand_soft>
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     2e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
	random_walk(die);
     2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2f4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
        die = (rand % 3);
     2f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     2fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     300:	63 e0       	ldi	r22, 0x03	; 3
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divmodhi4>
     308:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
  return sample_light(); // Again return current light conditions to main loop
     310:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

00000314 <random_delayed>:
}

int16_t random_delayed() {
  last_changed = kilo_ticks;
     314:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_ticks>
     318:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <kilo_ticks+0x1>
     31c:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <kilo_ticks+0x2>
     320:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <kilo_ticks+0x3>
     324:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_changed>
     328:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <last_changed+0x1>
     32c:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <last_changed+0x2>
     330:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <last_changed+0x3>
  while (kilo_ticks < last_changed + 32) {
     334:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <kilo_ticks>
     338:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <kilo_ticks+0x1>
     33c:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_ticks+0x2>
     340:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <kilo_ticks+0x3>
     344:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_changed>
     348:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <last_changed+0x1>
     34c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <last_changed+0x2>
     350:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <last_changed+0x3>
     354:	80 96       	adiw	r24, 0x20	; 32
     356:	a1 1d       	adc	r26, r1
     358:	b1 1d       	adc	r27, r1
     35a:	48 17       	cp	r20, r24
     35c:	59 07       	cpc	r21, r25
     35e:	6a 07       	cpc	r22, r26
     360:	7b 07       	cpc	r23, r27
     362:	60 f4       	brcc	.+24     	; 0x37c <random_delayed+0x68>
    if (tagged == 1) {
     364:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     368:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	19 f4       	brne	.+6      	; 0x376 <random_delayed+0x62>
      shark();
     370:	0e 94 20 01 	call	0x240	; 0x240 <shark>
     374:	df cf       	rjmp	.-66     	; 0x334 <random_delayed+0x20>
    } else {
      minnow();
     376:	0e 94 55 01 	call	0x2aa	; 0x2aa <minnow>
     37a:	dc cf       	rjmp	.-72     	; 0x334 <random_delayed+0x20>
    }
  }
  return sample_light();
     37c:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

00000380 <loop>:
}

void loop() {
  if (current_light < 1020 && current_light > 1000) {
     380:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     384:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     388:	89 5e       	subi	r24, 0xE9	; 233
     38a:	93 40       	sbci	r25, 0x03	; 3
     38c:	43 97       	sbiw	r24, 0x13	; 19
     38e:	70 f4       	brcc	.+28     	; 0x3ac <loop+0x2c>
    set_motion(STOP);				// 1/2 second delay/movement blocking for either if in shadow
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
    set_color(GREEN);
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
    delay(500);
     39e:	84 ef       	ldi	r24, 0xF4	; 244
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <delay>
    current_light = random_delayed();
     3a6:	0e 94 8a 01 	call	0x314	; 0x314 <random_delayed>
     3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <loop+0x42>
  } else {
    if (tagged == 1) {  // Shark, no delay as current_light is above threshold (nonshadow)
     3ac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     3b0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	19 f4       	brne	.+6      	; 0x3be <loop+0x3e>
      current_light = shark();
     3b8:	0e 94 20 01 	call	0x240	; 0x240 <shark>
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <loop+0x42>
    } else {
      current_light = minnow();			// Minnow, no delay as current_light is above threshold (nonshadow)
     3be:	0e 94 55 01 	call	0x2aa	; 0x2aa <minnow>
     3c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     3c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     3ca:	08 95       	ret

000003cc <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3cc:	08 95       	ret

000003ce <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	08 95       	ret

000003d4 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3d4:	08 95       	ret

000003d6 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
    cli();
     3e4:	f8 94       	cli

    ports_off();
     3e6:	14 b8       	out	0x04, r1	; 4
     3e8:	17 b8       	out	0x07, r1	; 7
     3ea:	1a b8       	out	0x0a, r1	; 10
     3ec:	15 b8       	out	0x05, r1	; 5
     3ee:	18 b8       	out	0x08, r1	; 8
     3f0:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3f2:	52 9a       	sbi	0x0a, 2	; 10
     3f4:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3f6:	14 bc       	out	0x24, r1	; 36
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	8f ef       	ldi	r24, 0xFF	; 255
     3fe:	87 bd       	out	0x27, r24	; 39
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     406:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     40a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     40e:	2f e8       	ldi	r18, 0x8F	; 143
     410:	3b e0       	ldi	r19, 0x0B	; 11
     412:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     416:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     41a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     41e:	53 98       	cbi	0x0a, 3	; 10
     420:	23 98       	cbi	0x04, 3	; 4
     422:	91 ea       	ldi	r25, 0xA1	; 161
     424:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     428:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     42c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     430:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     434:	8b e0       	ldi	r24, 0x0B	; 11
     436:	80 bf       	out	0x30, r24	; 48
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     444:	83 e8       	ldi	r24, 0x83	; 131
     446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44e:	80 64       	ori	r24, 0x40	; 64
     450:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     454:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     458:	86 fd       	sbrc	r24, 6
     45a:	fc cf       	rjmp	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
    adc_trigger_high_gain();
     45c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     460:	83 ea       	ldi	r24, 0xA3	; 163
     462:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
    if (osccal != 0xFF)
     474:	8f 3f       	cpi	r24, 0xFF	; 255
     476:	11 f0       	breq	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
        OSCCAL = osccal;
     478:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     47c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    rx_leadingbit = 1;
     480:	c1 e0       	ldi	r28, 0x01	; 1
     482:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     486:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <rx_leadingbyte>
    rx_byteindex = 0;
     48a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
    rx_bytevalue = 0;
     48e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     492:	80 e9       	ldi	r24, 0x90	; 144
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     49a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     49e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <tx_mask>
     4a2:	88 73       	andi	r24, 0x38	; 56
     4a4:	11 f0       	breq	.+4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
        tx_mask = TX_MASK_MIN;
     4a6:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <tx_mask>
    tx_clock = 0;
     4aa:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     4ae:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
    tx_increment = 255;
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     4ba:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    kilo_ticks = 0;
     4be:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <kilo_ticks>
     4c2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <kilo_ticks+0x1>
     4c6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <kilo_ticks+0x2>
     4ca:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <kilo_ticks+0x3>
    kilo_state = IDLE;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    kilo_tx_period = 3906;
     4d4:	82 e4       	ldi	r24, 0x42	; 66
     4d6:	9f e0       	ldi	r25, 0x0F	; 15
     4d8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <kilo_tx_period+0x1>
     4dc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4e0:	80 eb       	ldi	r24, 0xB0	; 176
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     4e8:	c8 2f       	mov	r28, r24
     4ea:	81 eb       	ldi	r24, 0xB1	; 177
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     4f2:	2c 2f       	mov	r18, r28
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	38 2b       	or	r19, r24
     4f8:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <kilo_uid+0x1>
     4fc:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     500:	85 e0       	ldi	r24, 0x05	; 5
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     508:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     50c:	89 e0       	ldi	r24, 0x09	; 9
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     514:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     518:	8c e0       	ldi	r24, 0x0C	; 12
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     520:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     524:	84 e1       	ldi	r24, 0x14	; 20
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     52c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
     530:	0e e5       	ldi	r16, 0x5E	; 94
     532:	11 e0       	ldi	r17, 0x01	; 1
     534:	57 e3       	ldi	r21, 0x37	; 55
     536:	e5 2e       	mov	r14, r21
     538:	51 e0       	ldi	r21, 0x01	; 1
     53a:	f5 2e       	mov	r15, r21
     53c:	c0 e2       	ldi	r28, 0x20	; 32
     53e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     540:	ce 01       	movw	r24, r28
     542:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     546:	d8 2e       	mov	r13, r24
     548:	ce 01       	movw	r24, r28
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     550:	2d 2d       	mov	r18, r13
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	32 2f       	mov	r19, r18
     556:	22 27       	eor	r18, r18
     558:	28 2b       	or	r18, r24
     55a:	f8 01       	movw	r30, r16
     55c:	21 93       	st	Z+, r18
     55e:	31 93       	st	Z+, r19
     560:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     562:	ce 01       	movw	r24, r28
     564:	c0 96       	adiw	r24, 0x30	; 48
     566:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     56a:	d8 2e       	mov	r13, r24
     56c:	ce 01       	movw	r24, r28
     56e:	c1 96       	adiw	r24, 0x31	; 49
     570:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_read_byte>
     574:	2d 2d       	mov	r18, r13
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	32 2f       	mov	r19, r18
     57a:	22 27       	eor	r18, r18
     57c:	28 2b       	or	r18, r24
     57e:	f7 01       	movw	r30, r14
     580:	21 93       	st	Z+, r18
     582:	31 93       	st	Z+, r19
     584:	7f 01       	movw	r14, r30
     586:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     588:	cc 33       	cpi	r28, 0x3C	; 60
     58a:	d1 05       	cpc	r29, r1
     58c:	c9 f6       	brne	.-78     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     58e:	78 94       	sei
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	08 95       	ret

000005a0 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8f 93       	push	r24
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	a8 95       	wdr
     5b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5b6:	88 61       	ori	r24, 0x18	; 24
     5b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5c0:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5c2:	8f 91       	pop	r24
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	41 f0       	breq	.+16     	; 0x5e2 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d2:	ef ec       	ldi	r30, 0xCF	; 207
     5d4:	f7 e0       	ldi	r31, 0x07	; 7
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <delay+0x8>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <delay+0xe>
     5dc:	00 00       	nop
        _delay_ms(1);
        ms--;
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f6 cf       	rjmp	.-20     	; 0x5ce <delay>
    }
}
     5e2:	08 95       	ret

000005e4 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     5e8:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     5ec:	08 95       	ret

000005ee <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     5f4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     5f8:	8f e0       	ldi	r24, 0x0F	; 15
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <delay>

00000600 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     600:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     604:	81 11       	cpse	r24, r1
     606:	1e c0       	rjmp	.+60     	; 0x644 <get_ambientlight+0x44>
        cli();
     608:	f8 94       	cli
        adc_setup_conversion(7);
     60a:	87 e0       	ldi	r24, 0x07	; 7
     60c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     620:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     624:	86 fd       	sbrc	r24, 6
     626:	fc cf       	rjmp	.-8      	; 0x620 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     628:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     62c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     630:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     634:	23 ea       	ldi	r18, 0xA3	; 163
     636:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     640:	78 94       	sei
     642:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     648:	08 95       	ret

0000064a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     64a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     64e:	81 11       	cpse	r24, r1
     650:	1e c0       	rjmp	.+60     	; 0x68e <get_temperature+0x44>
        cli();
     652:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     654:	88 ec       	ldi	r24, 0xC8	; 200
     656:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     65a:	87 e8       	ldi	r24, 0x87	; 135
     65c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     660:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     664:	80 64       	ori	r24, 0x40	; 64
     666:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     66a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     66e:	86 fd       	sbrc	r24, 6
     670:	fc cf       	rjmp	.-8      	; 0x66a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     672:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     676:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     67a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     67e:	23 ea       	ldi	r18, 0xA3	; 163
     680:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     68a:	78 94       	sei
     68c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     692:	08 95       	ret

00000694 <rand_hard>:

uint8_t rand_hard() {
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     69e:	e3 ea       	ldi	r30, 0xA3	; 163
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     6a2:	c6 e0       	ldi	r28, 0x06	; 6
     6a4:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     6a6:	a1 e0       	ldi	r26, 0x01	; 1
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6aa:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6ac:	f8 94       	cli
            adc_setup_conversion(6);
     6ae:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6b2:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     6b6:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ba:	40 64       	ori	r20, 0x40	; 64
     6bc:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     6c0:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6c4:	46 fd       	sbrc	r20, 6
     6c6:	fc cf       	rjmp	.-8      	; 0x6c0 <rand_hard+0x2c>
            a = ADCW&0x1;
     6c8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6cc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6d0:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     6d2:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6d6:	50 64       	ori	r21, 0x40	; 64
     6d8:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     6dc:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6e0:	56 fd       	sbrc	r21, 6
     6e2:	fc cf       	rjmp	.-8      	; 0x6dc <rand_hard+0x48>
            b = ADCW&0x1;
     6e4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6e8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     6ec:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6f0:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6f4:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     6f8:	78 94       	sei
            tries++;
     6fa:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     6fc:	61 70       	andi	r22, 0x01	; 1
     6fe:	46 17       	cp	r20, r22
     700:	51 f0       	breq	.+20     	; 0x716 <rand_hard+0x82>
        if (a)
     702:	44 23       	and	r20, r20
     704:	59 f0       	breq	.+22     	; 0x71c <rand_hard+0x88>
            num |= (1<<i);
     706:	ad 01       	movw	r20, r26
     708:	02 2e       	mov	r0, r18
     70a:	01 c0       	rjmp	.+2      	; 0x70e <rand_hard+0x7a>
     70c:	44 0f       	add	r20, r20
     70e:	0a 94       	dec	r0
     710:	ea f7       	brpl	.-6      	; 0x70c <rand_hard+0x78>
     712:	84 2b       	or	r24, r20
     714:	03 c0       	rjmp	.+6      	; 0x71c <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     716:	90 38       	cpi	r25, 0x80	; 128
     718:	49 f6       	brne	.-110    	; 0x6ac <rand_hard+0x18>
     71a:	f3 cf       	rjmp	.-26     	; 0x702 <rand_hard+0x6e>
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     720:	28 30       	cpi	r18, 0x08	; 8
     722:	31 05       	cpc	r19, r1
     724:	09 f0       	breq	.+2      	; 0x728 <rand_hard+0x94>
     726:	c1 cf       	rjmp	.-126    	; 0x6aa <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     72e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     732:	98 e0       	ldi	r25, 0x08	; 8
     734:	89 9f       	mul	r24, r25
     736:	90 01       	movw	r18, r0
     738:	11 24       	eor	r1, r1
     73a:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     73c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accumulator>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	89 0f       	add	r24, r25
     744:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <accumulator>
     748:	82 2f       	mov	r24, r18
     74a:	82 95       	swap	r24
     74c:	86 95       	lsr	r24
     74e:	87 70       	andi	r24, 0x07	; 7
     750:	28 27       	eor	r18, r24
     752:	96 95       	lsr	r25
     754:	96 95       	lsr	r25
     756:	82 2f       	mov	r24, r18
     758:	89 27       	eor	r24, r25
     75a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     75e:	08 95       	ret

00000760 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     760:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     764:	08 95       	ret

00000766 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     766:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     76a:	81 11       	cpse	r24, r1
     76c:	16 c0       	rjmp	.+44     	; 0x79a <get_voltage+0x34>
        cli();                                    // disable interrupts
     76e:	f8 94       	cli
        adc_setup_conversion(6);
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     776:	83 e8       	ldi	r24, 0x83	; 131
     778:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     77c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     780:	80 64       	ori	r24, 0x40	; 64
     782:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     786:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     78a:	86 fd       	sbrc	r24, 6
     78c:	fc cf       	rjmp	.-8      	; 0x786 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     78e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     792:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     796:	78 94       	sei
     798:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     79e:	08 95       	ret

000007a0 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     7a0:	2f 92       	push	r2
     7a2:	3f 92       	push	r3
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7c6:	fc 01       	movw	r30, r24
     7c8:	c2 81       	ldd	r28, Z+2	; 0x02
     7ca:	d3 81       	ldd	r29, Z+3	; 0x03
     7cc:	c4 38       	cpi	r28, 0x84	; 132
     7ce:	f3 e0       	ldi	r31, 0x03	; 3
     7d0:	df 07       	cpc	r29, r31
     7d2:	0c f0       	brlt	.+2      	; 0x7d6 <estimate_distance+0x36>
     7d4:	7e c0       	rjmp	.+252    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
        if (dist->high_gain > kilo_irhigh[0]) {
     7d6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <kilo_irhigh>
     7da:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <kilo_irhigh+0x1>
     7de:	8c 17       	cp	r24, r28
     7e0:	9d 07       	cpc	r25, r29
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <estimate_distance+0x46>
     7e4:	6f c0       	rjmp	.+222    	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     7e6:	e9 e3       	ldi	r30, 0x39	; 57
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7ec:	81 91       	ld	r24, Z+
     7ee:	91 91       	ld	r25, Z+
     7f0:	8c 17       	cp	r24, r28
     7f2:	9d 07       	cpc	r25, r29
     7f4:	20 f0       	brcs	.+8      	; 0x7fe <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     7f6:	1f 5f       	subi	r17, 0xFF	; 255
     7f8:	1e 30       	cpi	r17, 0x0E	; 14
     7fa:	c1 f7       	brne	.-16     	; 0x7ec <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     7fc:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     7fe:	81 2f       	mov	r24, r17
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e9 5c       	subi	r30, 0xC9	; 201
     80a:	fe 4f       	sbci	r31, 0xFE	; 254
     80c:	e0 80       	ld	r14, Z
     80e:	f1 80       	ldd	r15, Z+1	; 0x01
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	fc 01       	movw	r30, r24
     816:	eb 5c       	subi	r30, 0xCB	; 203
     818:	fe 4f       	sbci	r31, 0xFE	; 254
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	b7 01       	movw	r22, r14
     820:	68 1b       	sub	r22, r24
     822:	79 0b       	sbc	r23, r25
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     838:	be 01       	movw	r22, r28
     83a:	0d 2e       	mov	r0, r29
     83c:	00 0c       	add	r0, r0
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatsisf>
     846:	2b 01       	movw	r4, r22
     848:	3c 01       	movw	r6, r24
     84a:	b7 01       	movw	r22, r14
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     854:	6b 01       	movw	r12, r22
     856:	7c 01       	movw	r14, r24
     858:	61 2f       	mov	r22, r17
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	5f e3       	ldi	r21, 0x3F	; 63
     86c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     87a:	a5 01       	movw	r20, r10
     87c:	94 01       	movw	r18, r8
     87e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	c3 01       	movw	r24, r6
     894:	b2 01       	movw	r22, r4
     896:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e2       	ldi	r20, 0x20	; 32
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     8a6:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     8aa:	7b 01       	movw	r14, r22
     8ac:	c5 01       	movw	r24, r10
     8ae:	b4 01       	movw	r22, r8
     8b0:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     8b4:	ab 01       	movw	r20, r22
     8b6:	bc 01       	movw	r22, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	ba 01       	movw	r22, r20
     8bc:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divmodhi4>
     8c0:	16 2f       	mov	r17, r22
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     8c4:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     8c6:	cd 3b       	cpi	r28, 0xBD	; 189
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	d8 07       	cpc	r29, r24
     8cc:	0c f4       	brge	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8ce:	ca c0       	rjmp	.+404    	; 0xa64 <__stack+0x165>
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     8d2:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     8d4:	f1 01       	movw	r30, r2
     8d6:	c0 80       	ld	r12, Z
     8d8:	d1 80       	ldd	r13, Z+1	; 0x01
     8da:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <kilo_irlow>
     8de:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <kilo_irlow+0x1>
     8e2:	8c 15       	cp	r24, r12
     8e4:	9d 05       	cpc	r25, r13
     8e6:	88 f0       	brcs	.+34     	; 0x90a <__stack+0xb>
     8e8:	e0 e6       	ldi	r30, 0x60	; 96
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     8f2:	e1 90       	ld	r14, Z+
     8f4:	f1 90       	ld	r15, Z+
     8f6:	ec 14       	cp	r14, r12
     8f8:	fd 04       	cpc	r15, r13
     8fa:	08 f4       	brcc	.+2      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
     8fc:	58 c0       	rjmp	.+176    	; 0x9ae <__stack+0xaf>
     8fe:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     900:	8e 30       	cpi	r24, 0x0E	; 14
     902:	91 05       	cpc	r25, r1
     904:	a9 f7       	brne	.-22     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     906:	0a e5       	ldi	r16, 0x5A	; 90
     908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xd>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     90a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     90c:	1f 3f       	cpi	r17, 0xFF	; 255
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	4b c0       	rjmp	.+150    	; 0x9a8 <__stack+0xa9>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     912:	be 01       	movw	r22, r28
     914:	dd 0f       	add	r29, r29
     916:	88 0b       	sbc	r24, r24
     918:	99 0b       	sbc	r25, r25
     91a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatsisf>
     91e:	6b 01       	movw	r12, r22
     920:	7c 01       	movw	r14, r24
     922:	61 2f       	mov	r22, r17
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     92e:	4b 01       	movw	r8, r22
     930:	5c 01       	movw	r10, r24
     932:	a7 01       	movw	r20, r14
     934:	96 01       	movw	r18, r12
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	81 e6       	ldi	r24, 0x61	; 97
     93c:	94 e4       	ldi	r25, 0x44	; 68
     93e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c5 01       	movw	r24, r10
     948:	b4 01       	movw	r22, r8
     94a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     94e:	4b 01       	movw	r8, r22
     950:	5c 01       	movw	r10, r24
     952:	60 2f       	mov	r22, r16
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     95e:	2b 01       	movw	r4, r22
     960:	3c 01       	movw	r6, r24
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	4f e2       	ldi	r20, 0x2F	; 47
     968:	54 e4       	ldi	r21, 0x44	; 68
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c3 01       	movw	r24, r6
     978:	b2 01       	movw	r22, r4
     97a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	48 e4       	ldi	r20, 0x48	; 72
     990:	53 e4       	ldi	r21, 0x43	; 67
     992:	0e 94 a6 0a 	call	0x154c	; 0x154c <__divsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	44 e0       	ldi	r20, 0x04	; 4
     99c:	52 e4       	ldi	r21, 0x42	; 66
     99e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     9a2:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fixunssfsi>
     9a6:	60 c0       	rjmp	.+192    	; 0xa68 <__stack+0x169>
        } else {
            return 33 + dist_low;
     9a8:	61 e2       	ldi	r22, 0x21	; 33
     9aa:	60 0f       	add	r22, r16
     9ac:	5d c0       	rjmp	.+186    	; 0xa68 <__stack+0x169>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	fc 01       	movw	r30, r24
     9b4:	e4 5a       	subi	r30, 0xA4	; 164
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	b7 01       	movw	r22, r14
     9be:	68 1b       	sub	r22, r24
     9c0:	79 0b       	sbc	r23, r25
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     9d2:	4b 01       	movw	r8, r22
     9d4:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     9d6:	b6 01       	movw	r22, r12
     9d8:	dd 0c       	add	r13, r13
     9da:	88 0b       	sbc	r24, r24
     9dc:	99 0b       	sbc	r25, r25
     9de:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__floatsisf>
     9e2:	2b 01       	movw	r4, r22
     9e4:	3c 01       	movw	r6, r24
     9e6:	b7 01       	movw	r22, r14
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     9f0:	6b 01       	movw	r12, r22
     9f2:	7c 01       	movw	r14, r24
     9f4:	63 2d       	mov	r22, r3
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatunsisf>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	5f e3       	ldi	r21, 0x3F	; 63
     a08:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	a9 01       	movw	r20, r18
     a12:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__addsf3>
     a16:	a5 01       	movw	r20, r10
     a18:	94 01       	movw	r18, r8
     a1a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     a1e:	9b 01       	movw	r18, r22
     a20:	ac 01       	movw	r20, r24
     a22:	c7 01       	movw	r24, r14
     a24:	b6 01       	movw	r22, r12
     a26:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	c3 01       	movw	r24, r6
     a30:	b2 01       	movw	r22, r4
     a32:	0e 94 39 0a 	call	0x1472	; 0x1472 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e2       	ldi	r20, 0x20	; 32
     a3c:	51 e4       	ldi	r21, 0x41	; 65
     a3e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__mulsf3>
     a42:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     a46:	7b 01       	movw	r14, r22
     a48:	c5 01       	movw	r24, r10
     a4a:	b4 01       	movw	r22, r8
     a4c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixsfsi>
     a50:	ab 01       	movw	r20, r22
     a52:	bc 01       	movw	r22, r24
     a54:	c7 01       	movw	r24, r14
     a56:	ba 01       	movw	r22, r20
     a58:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divmodhi4>
     a5c:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     a5e:	6f 3f       	cpi	r22, 0xFF	; 255
     a60:	09 f0       	breq	.+2      	; 0xa64 <__stack+0x165>
     a62:	54 cf       	rjmp	.-344    	; 0x90c <__stack+0xd>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a64:	61 e2       	ldi	r22, 0x21	; 33
     a66:	61 0f       	add	r22, r17
    }
}
     a68:	86 2f       	mov	r24, r22
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	7f 90       	pop	r7
     a84:	6f 90       	pop	r6
     a86:	5f 90       	pop	r5
     a88:	4f 90       	pop	r4
     a8a:	3f 90       	pop	r3
     a8c:	2f 90       	pop	r2
     a8e:	08 95       	ret

00000a90 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
    tx_clock += tx_increment;
     ab2:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     ab6:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     aba:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tx_increment>
     abe:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tx_increment+0x1>
     ac2:	82 0f       	add	r24, r18
     ac4:	93 1f       	adc	r25, r19
     ac6:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tx_clock+0x1>
     aca:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tx_clock>
    tx_increment = 0xFF;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     ad6:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    OCR0A = tx_increment;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     ade:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_ticks>
     ae2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <kilo_ticks+0x1>
     ae6:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <kilo_ticks+0x2>
     aea:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <kilo_ticks+0x3>
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	a1 1d       	adc	r26, r1
     af2:	b1 1d       	adc	r27, r1
     af4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_ticks>
     af8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <kilo_ticks+0x1>
     afc:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <kilo_ticks+0x2>
     b00:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     b04:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     b08:	81 11       	cpse	r24, r1
     b0a:	2d c0       	rjmp	.+90     	; 0xb66 <__vector_14+0xd6>
     b0c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_tx_period>
     b10:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <kilo_tx_period+0x1>
     b14:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     b18:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     b1c:	82 17       	cp	r24, r18
     b1e:	93 07       	cpc	r25, r19
     b20:	10 f5       	brcc	.+68     	; 0xb66 <__vector_14+0xd6>
     b22:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     b26:	84 30       	cpi	r24, 0x04	; 4
     b28:	f1 f4       	brne	.+60     	; 0xb66 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     b2a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     b2e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     b32:	09 95       	icall
        if (msg) {
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	b9 f0       	breq	.+46     	; 0xb66 <__vector_14+0xd6>
            if (message_send(msg)) {
     b38:	0e 94 1b 09 	call	0x1236	; 0x1236 <message_send>
     b3c:	88 23       	and	r24, r24
     b3e:	51 f0       	breq	.+20     	; 0xb54 <__vector_14+0xc4>
                kilo_message_tx_success();
     b40:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     b44:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     b48:	09 95       	icall
                tx_clock = 0;
     b4a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     b4e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     b54:	0e 94 88 00 	call	0x110	; 0x110 <message_tx_success+0x2>
     b58:	9c 01       	movw	r18, r24
     b5a:	33 27       	eor	r19, r19
     b5c:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <tx_increment+0x1>
     b60:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <tx_increment>
                OCR0A = tx_increment;
     b64:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     b88:	80 ff       	sbrs	r24, 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <set_color+0x8>
        DDRD |= (1<<5);
     b8c:	55 9a       	sbi	0x0a, 5	; 10
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     b90:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     b92:	81 ff       	sbrs	r24, 1
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <set_color+0x12>
        DDRD |= (1<<4);
     b96:	54 9a       	sbi	0x0a, 4	; 10
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     b9a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     b9c:	82 ff       	sbrs	r24, 2
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <set_color+0x1c>
        DDRC |= (1<<3);
     ba0:	3b 9a       	sbi	0x07, 3	; 7
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     ba4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ba6:	83 ff       	sbrs	r24, 3
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <set_color+0x26>
        DDRC |= (1<<2);
     baa:	3a 9a       	sbi	0x07, 2	; 7
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     bae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     bb0:	84 ff       	sbrs	r24, 4
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <set_color+0x30>
        DDRC |= (1<<5);
     bb4:	3d 9a       	sbi	0x07, 5	; 7
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     bb8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     bba:	85 ff       	sbrs	r24, 5
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <set_color+0x3a>
        DDRC |= (1<<4);
     bbe:	3c 9a       	sbi	0x07, 4	; 7
     bc0:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     bc2:	3c 98       	cbi	0x07, 4	; 7
     bc4:	08 95       	ret

00000bc6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     bc6:	8c 01       	movw	r16, r24
     bc8:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     bca:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     bcc:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     bd2:	98 e1       	ldi	r25, 0x18	; 24
     bd4:	c9 2e       	mov	r12, r25
     bd6:	29 e2       	ldi	r18, 0x29	; 41
     bd8:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     bda:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <kilo_state>
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	e7 30       	cpi	r30, 0x07	; 7
     be2:	f1 05       	cpc	r31, r1
     be4:	d0 f7       	brcc	.-12     	; 0xbda <kilo_start+0x14>
     be6:	ec 5c       	subi	r30, 0xCC	; 204
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__tablejump2__>
            case SLEEPING:
                cli();
     bee:	f8 94       	cli
                acomp_off();
     bf0:	80 b7       	in	r24, 0x30	; 48
     bf2:	87 7f       	andi	r24, 0xF7	; 247
     bf4:	80 bf       	out	0x30, r24	; 48
                adc_off();
     bf6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bfa:	8f 77       	andi	r24, 0x7F	; 127
     bfc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     c00:	14 b8       	out	0x04, r1	; 4
     c02:	17 b8       	out	0x07, r1	; 7
     c04:	1a b8       	out	0x0a, r1	; 10
     c06:	15 b8       	out	0x05, r1	; 5
     c08:	18 b8       	out	0x08, r1	; 8
     c0a:	1b b8       	out	0x0b, r1	; 11
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	a8 95       	wdr
     c12:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     c1c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c20:	80 64       	ori	r24, 0x40	; 64
     c22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	81 7f       	andi	r24, 0xF1	; 241
     c2a:	84 60       	ori	r24, 0x04	; 4
     c2c:	83 bf       	out	0x33, r24	; 51
                cli();
     c2e:	f8 94       	cli
                sleep_enable();
     c30:	83 b7       	in	r24, 0x33	; 51
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	83 bf       	out	0x33, r24	; 51
                sei();
     c36:	78 94       	sei
                sleep_cpu();
     c38:	88 95       	sleep
                sleep_disable();
     c3a:	83 b7       	in	r24, 0x33	; 51
     c3c:	8e 7f       	andi	r24, 0xFE	; 254
     c3e:	83 bf       	out	0x33, r24	; 51
                sei();
     c40:	78 94       	sei
                rx_busy = 0;
     c42:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
                ports_on();
     c46:	52 9a       	sbi	0x0a, 2	; 10
     c48:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     c4a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c54:	87 e5       	ldi	r24, 0x57	; 87
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <kilo_start+0x92>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <kilo_start+0x98>
     c5e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     c60:	80 b7       	in	r24, 0x30	; 48
     c62:	88 61       	ori	r24, 0x18	; 24
     c64:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     c66:	8f e3       	ldi	r24, 0x3F	; 63
     c68:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	ef e1       	ldi	r30, 0x1F	; 31
     c6e:	fe e4       	ldi	r31, 0x4E	; 78
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <kilo_start+0xaa>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <kilo_start+0xb0>
     c76:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     c78:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <kilo_start+0xbc>
     c80:	50 c0       	rjmp	.+160    	; 0xd22 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     c88:	ff ef       	ldi	r31, 0xFF	; 255
     c8a:	20 e7       	ldi	r18, 0x70	; 112
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	f1 50       	subi	r31, 0x01	; 1
     c90:	20 40       	sbci	r18, 0x00	; 0
     c92:	80 40       	sbci	r24, 0x00	; 0
     c94:	e1 f7       	brne	.-8      	; 0xc8e <kilo_start+0xc8>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <kilo_start+0xd2>
     c98:	00 00       	nop
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     c9c:	8c e0       	ldi	r24, 0x0C	; 12
     c9e:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     ca2:	ef ec       	ldi	r30, 0xCF	; 207
     ca4:	f7 e0       	ldi	r31, 0x07	; 7
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <kilo_start+0xe0>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <kilo_start+0xe6>
     cac:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     cb4:	ff ef       	ldi	r31, 0xFF	; 255
     cb6:	21 ee       	ldi	r18, 0xE1	; 225
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	f1 50       	subi	r31, 0x01	; 1
     cbc:	20 40       	sbci	r18, 0x00	; 0
     cbe:	80 40       	sbci	r24, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <kilo_start+0xf4>
     cc2:	2c c0       	rjmp	.+88     	; 0xd1c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     cc4:	0e 94 b3 03 	call	0x766	; 0x766 <get_voltage>
                if(voltage > 682)
     cc8:	8b 3a       	cpi	r24, 0xAB	; 171
     cca:	e2 e0       	ldi	r30, 0x02	; 2
     ccc:	9e 07       	cpc	r25, r30
     cce:	24 f0       	brlt	.+8      	; 0xcd8 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     cd0:	8c e0       	ldi	r24, 0x0C	; 12
     cd2:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     cd6:	81 cf       	rjmp	.-254    	; 0xbda <kilo_start+0x14>
                else if(voltage > 648)
     cd8:	89 38       	cpi	r24, 0x89	; 137
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	9f 07       	cpc	r25, r31
     cde:	14 f0       	brlt	.+4      	; 0xce4 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     ce0:	80 e3       	ldi	r24, 0x30	; 48
     ce2:	f7 cf       	rjmp	.-18     	; 0xcd2 <kilo_start+0x10c>
                else if(voltage > 614)
     ce4:	87 36       	cpi	r24, 0x67	; 103
     ce6:	92 40       	sbci	r25, 0x02	; 2
     ce8:	14 f0       	brlt	.+4      	; 0xcee <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     cea:	8f e0       	ldi	r24, 0x0F	; 15
     cec:	f2 cf       	rjmp	.-28     	; 0xcd2 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	f0 cf       	rjmp	.-32     	; 0xcd2 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     cf2:	48 99       	sbic	0x09, 0	; 9
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     cfc:	8f ec       	ldi	r24, 0xCF	; 207
     cfe:	97 e0       	ldi	r25, 0x07	; 7
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <kilo_start+0x13a>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <kilo_start+0x140>
     d06:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	e1 ee       	ldi	r30, 0xE1	; 225
     d12:	f4 e0       	ldi	r31, 0x04	; 4
     d14:	91 50       	subi	r25, 0x01	; 1
     d16:	e0 40       	sbci	r30, 0x00	; 0
     d18:	f0 40       	sbci	r31, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <kilo_start+0x14e>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <kilo_start+0x158>
     d1e:	00 00       	nop
     d20:	5c cf       	rjmp	.-328    	; 0xbda <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	d6 cf       	rjmp	.-84     	; 0xcd2 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     d26:	d1 11       	cpse	r29, r1
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <kilo_start+0x168>
                    setup();
     d2a:	f8 01       	movw	r30, r16
     d2c:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     d2e:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <kilo_state>
     d32:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     d34:	f7 01       	movw	r30, r14
     d36:	09 95       	icall
                break;
     d38:	50 cf       	rjmp	.-352    	; 0xbda <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     d3a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d3e:	81 11       	cpse	r24, r1
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d42:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d46:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     d4a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
     d4e:	45 cf       	rjmp	.-374    	; 0xbda <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     d50:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
     d54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <prev_motion>
     d58:	98 17       	cp	r25, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <kilo_start+0x198>
     d5c:	3e cf       	rjmp	.-388    	; 0xbda <kilo_start+0x14>
                        prev_motion = cur_motion;
     d5e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d62:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     d66:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	89 f4       	brne	.+34     	; 0xd90 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d6e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d72:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d76:	8f e2       	ldi	r24, 0x2F	; 47
     d78:	95 e7       	ldi	r25, 0x75	; 117
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <kilo_start+0x1b4>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <kilo_start+0x1ba>
     d80:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     d82:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d86:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d8a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d8e:	25 cf       	rjmp	.-438    	; 0xbda <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d90:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d94:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d98:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	59 f4       	brne	.+22     	; 0xdb6 <kilo_start+0x1f0>
     da0:	ef e2       	ldi	r30, 0x2F	; 47
     da2:	f5 e7       	ldi	r31, 0x75	; 117
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <kilo_start+0x1de>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <kilo_start+0x1e4>
     daa:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     dac:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     db0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <kilo_start+0x210>
     db6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     dba:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dbe:	8f e2       	ldi	r24, 0x2F	; 47
     dc0:	95 e7       	ldi	r25, 0x75	; 117
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <kilo_start+0x1fc>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <kilo_start+0x202>
     dc8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     dca:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <kilo_straight_right>
     dce:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     dd2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     dd6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dda:	ff ce       	rjmp	.-514    	; 0xbda <kilo_start+0x14>

00000ddc <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
    rx_timer_off();
     dea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     dee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     df2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     dfc:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
    rx_busy = 0;
     e00:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    adc_trigger_high_gain();
     e04:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e08:	93 ea       	ldi	r25, 0xA3	; 163
     e0a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e0e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	2f 93       	push	r18
     e30:	3f 93       	push	r19
     e32:	4f 93       	push	r20
     e34:	5f 93       	push	r21
     e36:	6f 93       	push	r22
     e38:	7f 93       	push	r23
     e3a:	8f 93       	push	r24
     e3c:	9f 93       	push	r25
     e3e:	af 93       	push	r26
     e40:	bf 93       	push	r27
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     e46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     e54:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rx_leadingbit>
     e58:	88 23       	and	r24, r24
     e5a:	21 f1       	breq	.+72     	; 0xea4 <__vector_23+0x84>
        rx_timer_on();
     e5c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e60:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e64:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     e68:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
        rx_leadingbit = 0;
     e6c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rx_leadingbit>
        if (rx_leadingbyte) {
     e70:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     e74:	88 23       	and	r24, r24
     e76:	09 f4       	brne	.+2      	; 0xe7a <__vector_23+0x5a>
     e78:	af c1       	rjmp	.+862    	; 0x11d8 <__vector_23+0x3b8>
            adc_finish_conversion();
     e7a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e7e:	86 fd       	sbrc	r24, 6
     e80:	fc cf       	rjmp	.-8      	; 0xe7a <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     e82:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e86:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e8a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <rx_dist+0x3>
     e8e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_dist+0x2>
            adc_trigger_low_gain();
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e98:	93 ea       	ldi	r25, 0xA3	; 163
     e9a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e9e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     ea2:	9a c1       	rjmp	.+820    	; 0x11d8 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     ea4:	c9 01       	movw	r24, r18
     ea6:	87 58       	subi	r24, 0x87	; 135
     ea8:	91 09       	sbc	r25, r1
     eaa:	84 37       	cpi	r24, 0x74	; 116
     eac:	99 40       	sbci	r25, 0x09	; 9
     eae:	a0 f0       	brcs	.+40     	; 0xed8 <__vector_23+0xb8>
            rx_timer_off();
     eb0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     eb4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     eb8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     ebc:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
            rx_leadingbyte = 1;
     ec0:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
            rx_busy = 0;
     ec4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
            adc_trigger_high_gain();
     ec8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ecc:	83 ea       	ldi	r24, 0xA3	; 163
     ece:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ed2:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     ed6:	80 c1       	rjmp	.+768    	; 0x11d8 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     ed8:	26 58       	subi	r18, 0x86	; 134
     eda:	31 09       	sbc	r19, r1
     edc:	a4 ef       	ldi	r26, 0xF4	; 244
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__umulhisi3>
     ee4:	8c 01       	movw	r16, r24
     ee6:	22 27       	eor	r18, r18
     ee8:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     eea:	08 30       	cpi	r16, 0x08	; 8
     eec:	60 f4       	brcc	.+24     	; 0xf06 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <__vector_23+0xd6>
     ef4:	88 0f       	add	r24, r24
     ef6:	0a 95       	dec	r16
     ef8:	ea f7       	brpl	.-6      	; 0xef4 <__vector_23+0xd4>
     efa:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     efe:	89 2b       	or	r24, r25
     f00:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rx_bytevalue>
     f04:	69 c1       	rjmp	.+722    	; 0x11d8 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f06:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
                if (rx_leadingbyte) {
     f0a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     f0e:	88 23       	and	r24, r24
     f10:	41 f1       	breq	.+80     	; 0xf62 <__vector_23+0x142>
                    adc_finish_conversion();
     f12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f16:	86 fd       	sbrc	r24, 6
     f18:	fc cf       	rjmp	.-8      	; 0xf12 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     f1a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f1e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f22:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <rx_dist+0x1>
     f26:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_dist>
                    adc_trigger_high_gain();
     f2a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f2e:	83 ea       	ldi	r24, 0xA3	; 163
     f30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     f3a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     f3e:	99 23       	and	r25, r25
     f40:	59 f0       	breq	.+22     	; 0xf58 <__vector_23+0x138>
                        rx_timer_off();
     f42:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f46:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f4a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f4e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     f52:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
     f56:	40 c1       	rjmp	.+640    	; 0x11d8 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     f58:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_leadingbyte>
                        rx_byteindex = 0;
     f5c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
     f60:	3b c1       	rjmp	.+630    	; 0x11d8 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f62:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_byteindex>
     f66:	e8 2f       	mov	r30, r24
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	e0 58       	subi	r30, 0x80	; 128
     f6c:	fe 4f       	sbci	r31, 0xFE	; 254
     f6e:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     f72:	90 83       	st	Z, r25
                    rx_byteindex++;
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     f7a:	8c 30       	cpi	r24, 0x0C	; 12
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_23+0x160>
     f7e:	2c c1       	rjmp	.+600    	; 0x11d8 <__vector_23+0x3b8>
                        rx_timer_off();
     f80:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f8c:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     f90:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     f94:	00 91 8a 01 	lds	r16, 0x018A	; 0x80018a <rx_msg+0xa>
     f98:	10 91 8b 01 	lds	r17, 0x018B	; 0x80018b <rx_msg+0xb>
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <message_crc>
     fa4:	08 17       	cp	r16, r24
     fa6:	19 07       	cpc	r17, r25
     fa8:	09 f0       	breq	.+2      	; 0xfac <__vector_23+0x18c>
     faa:	16 c1       	rjmp	.+556    	; 0x11d8 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fac:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <rx_msg+0x9>
     fb0:	e7 fd       	sbrc	r30, 7
     fb2:	0a c0       	rjmp	.+20     	; 0xfc8 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     fb4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     fb8:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     fbc:	65 e5       	ldi	r22, 0x55	; 85
     fbe:	71 e0       	ldi	r23, 0x01	; 1
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	09 95       	icall
     fc6:	08 c1       	rjmp	.+528    	; 0x11d8 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fc8:	88 e7       	ldi	r24, 0x78	; 120
     fca:	8e 0f       	add	r24, r30
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	30 f0       	brcs	.+12     	; 0xfdc <__vector_23+0x1bc>
        motors_off();
     fd0:	53 98       	cbi	0x0a, 3	; 10
     fd2:	23 98       	cbi	0x04, 3	; 4
     fd4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fd8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     fdc:	8e 2f       	mov	r24, r30
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	e0 58       	subi	r30, 0x80	; 128
     fe4:	f1 09       	sbc	r31, r1
     fe6:	eb 30       	cpi	r30, 0x0B	; 11
     fe8:	f1 05       	cpc	r31, r1
     fea:	08 f0       	brcs	.+2      	; 0xfee <__vector_23+0x1ce>
     fec:	f5 c0       	rjmp	.+490    	; 0x11d8 <__vector_23+0x3b8>
     fee:	e5 5c       	subi	r30, 0xC5	; 197
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__tablejump2__>
        case BOOT:
            tx_timer_off();
     ff6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1000:	16 bc       	out	0x26, r1	; 38
            bootload();
    1002:	e0 e0       	ldi	r30, 0x00	; 0
    1004:	f0 e7       	ldi	r31, 0x70	; 112
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
    1008:	e0 e0       	ldi	r30, 0x00	; 0
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    100e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <kilo_state>
    1012:	e2 c0       	rjmp	.+452    	; 0x11d8 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	b2 c0       	rjmp	.+356    	; 0x117c <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	b0 c0       	rjmp	.+352    	; 0x117c <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	ae c0       	rjmp	.+348    	; 0x117c <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1020:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	09 f4       	brne	.+2      	; 0x102a <__vector_23+0x20a>
    1028:	d7 c0       	rjmp	.+430    	; 0x11d8 <__vector_23+0x3b8>
    102a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	09 f4       	brne	.+2      	; 0x1034 <__vector_23+0x214>
    1032:	d2 c0       	rjmp	.+420    	; 0x11d8 <__vector_23+0x3b8>
                motors_on();
    1034:	53 9a       	sbi	0x0a, 3	; 10
    1036:	23 9a       	sbi	0x04, 3	; 4
    1038:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    103c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	9c c0       	rjmp	.+312    	; 0x117c <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1044:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	09 f4       	brne	.+2      	; 0x104e <__vector_23+0x22e>
    104c:	4b c0       	rjmp	.+150    	; 0x10e4 <__vector_23+0x2c4>
    104e:	80 f4       	brcc	.+32     	; 0x1070 <__vector_23+0x250>
    1050:	88 23       	and	r24, r24
    1052:	a9 f0       	breq	.+42     	; 0x107e <__vector_23+0x25e>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <__vector_23+0x23a>
    1058:	82 c0       	rjmp	.+260    	; 0x115e <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    105a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x1>
    105e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <rx_msg+0x2>
    1062:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <kilo_uid+0x1>
    1066:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_uid>
                    cur_motion = MOVE_STOP;
    106a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
    106e:	77 c0       	rjmp	.+238    	; 0x115e <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	09 f4       	brne	.+2      	; 0x1076 <__vector_23+0x256>
    1074:	49 c0       	rjmp	.+146    	; 0x1108 <__vector_23+0x2e8>
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	09 f4       	brne	.+2      	; 0x107c <__vector_23+0x25c>
    107a:	58 c0       	rjmp	.+176    	; 0x112c <__vector_23+0x30c>
    107c:	70 c0       	rjmp	.+224    	; 0x115e <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    107e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1082:	86 30       	cpi	r24, 0x06	; 6
    1084:	09 f0       	breq	.+2      	; 0x1088 <__vector_23+0x268>
    1086:	6b c0       	rjmp	.+214    	; 0x115e <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1088:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <kilo_uid>
    108c:	80 eb       	ldi	r24, 0xB0	; 176
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1094:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_uid+0x1>
    1098:	81 eb       	ldi	r24, 0xB1	; 177
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    10a0:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_turn_left>
    10a4:	85 e0       	ldi	r24, 0x05	; 5
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    10ac:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
    10b0:	89 e0       	ldi	r24, 0x09	; 9
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    10b8:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_straight_left>
    10bc:	8c e0       	ldi	r24, 0x0C	; 12
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    10c4:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
    10c8:	84 e1       	ldi	r24, 0x14	; 20
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <eeprom_write_byte>
                        motors_off();
    10d0:	53 98       	cbi	0x0a, 3	; 10
    10d2:	23 98       	cbi	0x04, 3	; 4
    10d4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10d8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    10e2:	3d c0       	rjmp	.+122    	; 0x115e <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    10e4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    10e8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <rx_msg+0x3>
    10ec:	91 30       	cpi	r25, 0x01	; 1
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <__vector_23+0x2d8>
    10f0:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <kilo_turn_left>
    10f4:	89 17       	cp	r24, r25
    10f6:	99 f1       	breq	.+102    	; 0x115e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    10f8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_LEFT;
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1102:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    1106:	2b c0       	rjmp	.+86     	; 0x115e <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1108:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    110c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_msg+0x4>
    1110:	92 30       	cpi	r25, 0x02	; 2
    1112:	21 f4       	brne	.+8      	; 0x111c <__vector_23+0x2fc>
    1114:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_right>
    1118:	89 17       	cp	r24, r25
    111a:	09 f1       	breq	.+66     	; 0x115e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    111c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1126:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    112a:	19 c0       	rjmp	.+50     	; 0x115e <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    112c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <cur_motion>
    1130:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <rx_msg+0x6>
    1134:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rx_msg+0x5>
    1138:	23 30       	cpi	r18, 0x03	; 3
    113a:	41 f4       	brne	.+16     	; 0x114c <__vector_23+0x32c>
    113c:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <kilo_straight_right>
    1140:	82 13       	cpse	r24, r18
    1142:	04 c0       	rjmp	.+8      	; 0x114c <__vector_23+0x32c>
    1144:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <kilo_straight_left>
    1148:	92 17       	cp	r25, r18
    114a:	49 f0       	breq	.+18     	; 0x115e <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    114c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1150:	23 e0       	ldi	r18, 0x03	; 3
    1152:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1156:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    115a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    115e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
    1162:	88 23       	and	r24, r24
    1164:	c9 f1       	breq	.+114    	; 0x11d8 <__vector_23+0x3b8>
    1166:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    116a:	86 30       	cpi	r24, 0x06	; 6
    116c:	a9 f1       	breq	.+106    	; 0x11d8 <__vector_23+0x3b8>
                motors_on();
    116e:	53 9a       	sbi	0x0a, 3	; 10
    1170:	23 9a       	sbi	0x04, 3	; 4
    1172:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1176:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    117a:	86 e0       	ldi	r24, 0x06	; 6
    117c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    1180:	2b c0       	rjmp	.+86     	; 0x11d8 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1182:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1186:	86 30       	cpi	r24, 0x06	; 6
    1188:	81 f0       	breq	.+32     	; 0x11aa <__vector_23+0x38a>
                motors_on();
    118a:	53 9a       	sbi	0x0a, 3	; 10
    118c:	23 9a       	sbi	0x04, 3	; 4
    118e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1192:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 c4 05 	call	0xb88	; 0xb88 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    119c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
    11a0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                kilo_state = MOVING;
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	00 90 80 01 	lds	r0, 0x0180	; 0x800180 <rx_msg>
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__vector_23+0x398>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <__vector_23+0x394>
    11bc:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <kilo_uid>
    11c0:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <kilo_uid+0x1>
    11c4:	82 23       	and	r24, r18
    11c6:	93 23       	and	r25, r19
    11c8:	89 2b       	or	r24, r25
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cur_motion>
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    11d4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
                    }
                }
            }
        }
    }
}
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    11fe:	fc 01       	movw	r30, r24
    1200:	9c 01       	movw	r18, r24
    1202:	26 5f       	subi	r18, 0xF6	; 246
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    120a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    120c:	84 27       	eor	r24, r20
    120e:	08 2e       	mov	r0, r24
    1210:	82 95       	swap	r24
    1212:	80 7f       	andi	r24, 0xF0	; 240
    1214:	80 25       	eor	r24, r0
    1216:	09 2e       	mov	r0, r25
    1218:	98 2f       	mov	r25, r24
    121a:	82 95       	swap	r24
    121c:	8f 70       	andi	r24, 0x0F	; 15
    121e:	08 26       	eor	r0, r24
    1220:	86 95       	lsr	r24
    1222:	98 27       	eor	r25, r24
    1224:	89 27       	eor	r24, r25
    1226:	88 0f       	add	r24, r24
    1228:	88 0f       	add	r24, r24
    122a:	88 0f       	add	r24, r24
    122c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    122e:	e2 17       	cp	r30, r18
    1230:	f3 07       	cpc	r31, r19
    1232:	59 f7       	brne	.-42     	; 0x120a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1234:	08 95       	ret

00001236 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1236:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1238:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    123a:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    123c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <tx_mask>
    or tmpreg1, ddrreg
    1240:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1242:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1244:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1246:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    124a:	20 30       	cpi	r18, 0x00	; 0
    124c:	29 f0       	breq	.+10     	; 0x1258 <message_send+0x22>
    124e:	00 00       	nop
    1250:	25 b1       	in	r18, 0x05	; 5
    1252:	23 2b       	or	r18, r19
    1254:	25 b9       	out	0x05, r18	; 5
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <message_send+0x2a>
    1258:	00 00       	nop
    125a:	00 00       	nop
    125c:	00 00       	nop
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <message_send+0x2a>
    1260:	00 00       	nop
    1262:	00 00       	nop
    1264:	00 00       	nop
    1266:	30 95       	com	r19
    1268:	25 b1       	in	r18, 0x05	; 5
    126a:	23 23       	and	r18, r19
    126c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    126e:	2e ea       	ldi	r18, 0xAE	; 174
    1270:	2a 95       	dec	r18
    1272:	f1 f7       	brne	.-4      	; 0x1270 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1274:	2b ee       	ldi	r18, 0xEB	; 235

00001276 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1276:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1278:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    127a:	0a c0       	rjmp	.+20     	; 0x1290 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    127c:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    127e:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    1282:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1284:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1286:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1288:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    128a:	0f be       	out	0x3f, r0	; 63
    return 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	08 95       	ret

00001290 <nocollision>:
nocollision:
    nop
    1290:	00 00       	nop
    dec tmpreg1
    1292:	2a 95       	dec	r18
    brne checkcollision
    1294:	81 f7       	brne	.-32     	; 0x1276 <checkcollision>

    ldi tmpreg1, 0x01
    1296:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1298:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    129c:	20 30       	cpi	r18, 0x00	; 0
    129e:	29 f0       	breq	.+10     	; 0x12aa <nocollision+0x1a>
    12a0:	00 00       	nop
    12a2:	25 b1       	in	r18, 0x05	; 5
    12a4:	23 2b       	or	r18, r19
    12a6:	25 b9       	out	0x05, r18	; 5
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <nocollision+0x22>
    12aa:	00 00       	nop
    12ac:	00 00       	nop
    12ae:	00 00       	nop
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <nocollision+0x22>
    12b2:	00 00       	nop
    12b4:	00 00       	nop
    12b6:	00 00       	nop
    12b8:	30 95       	com	r19
    12ba:	25 b1       	in	r18, 0x05	; 5
    12bc:	23 23       	and	r18, r19
    12be:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    12c0:	00 00       	nop
    12c2:	24 e5       	ldi	r18, 0x54	; 84
    12c4:	2a 95       	dec	r18
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    12c8:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    12ca:	8c e0       	ldi	r24, 0x0C	; 12

000012cc <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    12cc:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    12d0:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    12d2:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    12d4:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    12d6:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    12d8:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    12da:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    12dc:	50 e0       	ldi	r21, 0x00	; 0

000012de <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    12de:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    12e0:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    12e2:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    12e4:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    12e6:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    12ea:	20 30       	cpi	r18, 0x00	; 0
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <sendbit+0x1a>
    12ee:	00 00       	nop
    12f0:	25 b1       	in	r18, 0x05	; 5
    12f2:	23 2b       	or	r18, r19
    12f4:	25 b9       	out	0x05, r18	; 5
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <sendbit+0x22>
    12f8:	00 00       	nop
    12fa:	00 00       	nop
    12fc:	00 00       	nop
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <sendbit+0x22>
    1300:	00 00       	nop
    1302:	00 00       	nop
    1304:	00 00       	nop
    1306:	30 95       	com	r19
    1308:	25 b1       	in	r18, 0x05	; 5
    130a:	23 23       	and	r18, r19
    130c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    130e:	00 00       	nop
    1310:	21 e5       	ldi	r18, 0x51	; 81
    1312:	2a 95       	dec	r18
    1314:	f1 f7       	brne	.-4      	; 0x1312 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1316:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1318:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    131a:	9a 95       	dec	r25
    brne sendbit
    131c:	01 f7       	brne	.-64     	; 0x12de <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    131e:	8a 95       	dec	r24
    brne sendbyte
    1320:	a9 f6       	brne	.-86     	; 0x12cc <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1322:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1324:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1326:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1328:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    132a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    132e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1330:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1332:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1334:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1336:	0f be       	out	0x3f, r0	; 63
    return 1
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	08 95       	ret

0000133c <main>:
    }
  }
}

int main() {
  kilo_init();				// Begin program execution
    133c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <kilo_init>
  kilo_message_rx = message_rx;		// Begin listening loop
    1340:	81 e7       	ldi	r24, 0x71	; 113
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <kilo_message_rx+0x1>
    1348:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <kilo_message_rx>
  kilo_message_tx = message_tx;		// Begin speaker loop
    134c:	84 e8       	ldi	r24, 0x84	; 132
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    1354:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;	// Begin speaker validation loop
    1358:	87 e8       	ldi	r24, 0x87	; 135
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    1360:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);		// Begin motion
    1364:	60 ec       	ldi	r22, 0xC0	; 192
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	84 ec       	ldi	r24, 0xC4	; 196
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <kilo_start>
  return 0;
}
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	08 95       	ret

00001376 <__divmodhi4>:
    1376:	97 fb       	bst	r25, 7
    1378:	07 2e       	mov	r0, r23
    137a:	16 f4       	brtc	.+4      	; 0x1380 <__divmodhi4+0xa>
    137c:	00 94       	com	r0
    137e:	07 d0       	rcall	.+14     	; 0x138e <__divmodhi4_neg1>
    1380:	77 fd       	sbrc	r23, 7
    1382:	09 d0       	rcall	.+18     	; 0x1396 <__divmodhi4_neg2>
    1384:	0e 94 03 0a 	call	0x1406	; 0x1406 <__udivmodhi4>
    1388:	07 fc       	sbrc	r0, 7
    138a:	05 d0       	rcall	.+10     	; 0x1396 <__divmodhi4_neg2>
    138c:	3e f4       	brtc	.+14     	; 0x139c <__divmodhi4_exit>

0000138e <__divmodhi4_neg1>:
    138e:	90 95       	com	r25
    1390:	81 95       	neg	r24
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__divmodhi4_neg2>:
    1396:	70 95       	com	r23
    1398:	61 95       	neg	r22
    139a:	7f 4f       	sbci	r23, 0xFF	; 255

0000139c <__divmodhi4_exit>:
    139c:	08 95       	ret

0000139e <__divmodsi4>:
    139e:	05 2e       	mov	r0, r21
    13a0:	97 fb       	bst	r25, 7
    13a2:	1e f4       	brtc	.+6      	; 0x13aa <__divmodsi4+0xc>
    13a4:	00 94       	com	r0
    13a6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__negsi2>
    13aa:	57 fd       	sbrc	r21, 7
    13ac:	07 d0       	rcall	.+14     	; 0x13bc <__divmodsi4_neg2>
    13ae:	0e 94 17 0a 	call	0x142e	; 0x142e <__udivmodsi4>
    13b2:	07 fc       	sbrc	r0, 7
    13b4:	03 d0       	rcall	.+6      	; 0x13bc <__divmodsi4_neg2>
    13b6:	4e f4       	brtc	.+18     	; 0x13ca <__divmodsi4_exit>
    13b8:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__negsi2>

000013bc <__divmodsi4_neg2>:
    13bc:	50 95       	com	r21
    13be:	40 95       	com	r20
    13c0:	30 95       	com	r19
    13c2:	21 95       	neg	r18
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	4f 4f       	sbci	r20, 0xFF	; 255
    13c8:	5f 4f       	sbci	r21, 0xFF	; 255

000013ca <__divmodsi4_exit>:
    13ca:	08 95       	ret

000013cc <__negsi2>:
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__tablejump2__>:
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	05 90       	lpm	r0, Z+
    13e2:	f4 91       	lpm	r31, Z
    13e4:	e0 2d       	mov	r30, r0
    13e6:	09 94       	ijmp

000013e8 <__umulhisi3>:
    13e8:	a2 9f       	mul	r26, r18
    13ea:	b0 01       	movw	r22, r0
    13ec:	b3 9f       	mul	r27, r19
    13ee:	c0 01       	movw	r24, r0
    13f0:	a3 9f       	mul	r26, r19
    13f2:	70 0d       	add	r23, r0
    13f4:	81 1d       	adc	r24, r1
    13f6:	11 24       	eor	r1, r1
    13f8:	91 1d       	adc	r25, r1
    13fa:	b2 9f       	mul	r27, r18
    13fc:	70 0d       	add	r23, r0
    13fe:	81 1d       	adc	r24, r1
    1400:	11 24       	eor	r1, r1
    1402:	91 1d       	adc	r25, r1
    1404:	08 95       	ret

00001406 <__udivmodhi4>:
    1406:	aa 1b       	sub	r26, r26
    1408:	bb 1b       	sub	r27, r27
    140a:	51 e1       	ldi	r21, 0x11	; 17
    140c:	07 c0       	rjmp	.+14     	; 0x141c <__udivmodhi4_ep>

0000140e <__udivmodhi4_loop>:
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	a6 17       	cp	r26, r22
    1414:	b7 07       	cpc	r27, r23
    1416:	10 f0       	brcs	.+4      	; 0x141c <__udivmodhi4_ep>
    1418:	a6 1b       	sub	r26, r22
    141a:	b7 0b       	sbc	r27, r23

0000141c <__udivmodhi4_ep>:
    141c:	88 1f       	adc	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	5a 95       	dec	r21
    1422:	a9 f7       	brne	.-22     	; 0x140e <__udivmodhi4_loop>
    1424:	80 95       	com	r24
    1426:	90 95       	com	r25
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	08 95       	ret

0000142e <__udivmodsi4>:
    142e:	a1 e2       	ldi	r26, 0x21	; 33
    1430:	1a 2e       	mov	r1, r26
    1432:	aa 1b       	sub	r26, r26
    1434:	bb 1b       	sub	r27, r27
    1436:	fd 01       	movw	r30, r26
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <__udivmodsi4_ep>

0000143a <__udivmodsi4_loop>:
    143a:	aa 1f       	adc	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	ee 1f       	adc	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	a2 17       	cp	r26, r18
    1444:	b3 07       	cpc	r27, r19
    1446:	e4 07       	cpc	r30, r20
    1448:	f5 07       	cpc	r31, r21
    144a:	20 f0       	brcs	.+8      	; 0x1454 <__udivmodsi4_ep>
    144c:	a2 1b       	sub	r26, r18
    144e:	b3 0b       	sbc	r27, r19
    1450:	e4 0b       	sbc	r30, r20
    1452:	f5 0b       	sbc	r31, r21

00001454 <__udivmodsi4_ep>:
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	1a 94       	dec	r1
    145e:	69 f7       	brne	.-38     	; 0x143a <__udivmodsi4_loop>
    1460:	60 95       	com	r22
    1462:	70 95       	com	r23
    1464:	80 95       	com	r24
    1466:	90 95       	com	r25
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	bd 01       	movw	r22, r26
    146e:	cf 01       	movw	r24, r30
    1470:	08 95       	ret

00001472 <__subsf3>:
    1472:	50 58       	subi	r21, 0x80	; 128

00001474 <__addsf3>:
    1474:	bb 27       	eor	r27, r27
    1476:	aa 27       	eor	r26, r26
    1478:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3x>
    147c:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_round>
    1480:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fp_pscA>
    1484:	38 f0       	brcs	.+14     	; 0x1494 <__addsf3+0x20>
    1486:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_pscB>
    148a:	20 f0       	brcs	.+8      	; 0x1494 <__addsf3+0x20>
    148c:	39 f4       	brne	.+14     	; 0x149c <__addsf3+0x28>
    148e:	9f 3f       	cpi	r25, 0xFF	; 255
    1490:	19 f4       	brne	.+6      	; 0x1498 <__addsf3+0x24>
    1492:	26 f4       	brtc	.+8      	; 0x149c <__addsf3+0x28>
    1494:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_nan>
    1498:	0e f4       	brtc	.+2      	; 0x149c <__addsf3+0x28>
    149a:	e0 95       	com	r30
    149c:	e7 fb       	bst	r30, 7
    149e:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__fp_inf>

000014a2 <__addsf3x>:
    14a2:	e9 2f       	mov	r30, r25
    14a4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_split3>
    14a8:	58 f3       	brcs	.-42     	; 0x1480 <__addsf3+0xc>
    14aa:	ba 17       	cp	r27, r26
    14ac:	62 07       	cpc	r22, r18
    14ae:	73 07       	cpc	r23, r19
    14b0:	84 07       	cpc	r24, r20
    14b2:	95 07       	cpc	r25, r21
    14b4:	20 f0       	brcs	.+8      	; 0x14be <__addsf3x+0x1c>
    14b6:	79 f4       	brne	.+30     	; 0x14d6 <__addsf3x+0x34>
    14b8:	a6 f5       	brtc	.+104    	; 0x1522 <__addsf3x+0x80>
    14ba:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__fp_zero>
    14be:	0e f4       	brtc	.+2      	; 0x14c2 <__addsf3x+0x20>
    14c0:	e0 95       	com	r30
    14c2:	0b 2e       	mov	r0, r27
    14c4:	ba 2f       	mov	r27, r26
    14c6:	a0 2d       	mov	r26, r0
    14c8:	0b 01       	movw	r0, r22
    14ca:	b9 01       	movw	r22, r18
    14cc:	90 01       	movw	r18, r0
    14ce:	0c 01       	movw	r0, r24
    14d0:	ca 01       	movw	r24, r20
    14d2:	a0 01       	movw	r20, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	ff 27       	eor	r31, r31
    14d8:	59 1b       	sub	r21, r25
    14da:	99 f0       	breq	.+38     	; 0x1502 <__addsf3x+0x60>
    14dc:	59 3f       	cpi	r21, 0xF9	; 249
    14de:	50 f4       	brcc	.+20     	; 0x14f4 <__addsf3x+0x52>
    14e0:	50 3e       	cpi	r21, 0xE0	; 224
    14e2:	68 f1       	brcs	.+90     	; 0x153e <__addsf3x+0x9c>
    14e4:	1a 16       	cp	r1, r26
    14e6:	f0 40       	sbci	r31, 0x00	; 0
    14e8:	a2 2f       	mov	r26, r18
    14ea:	23 2f       	mov	r18, r19
    14ec:	34 2f       	mov	r19, r20
    14ee:	44 27       	eor	r20, r20
    14f0:	58 5f       	subi	r21, 0xF8	; 248
    14f2:	f3 cf       	rjmp	.-26     	; 0x14da <__addsf3x+0x38>
    14f4:	46 95       	lsr	r20
    14f6:	37 95       	ror	r19
    14f8:	27 95       	ror	r18
    14fa:	a7 95       	ror	r26
    14fc:	f0 40       	sbci	r31, 0x00	; 0
    14fe:	53 95       	inc	r21
    1500:	c9 f7       	brne	.-14     	; 0x14f4 <__addsf3x+0x52>
    1502:	7e f4       	brtc	.+30     	; 0x1522 <__addsf3x+0x80>
    1504:	1f 16       	cp	r1, r31
    1506:	ba 0b       	sbc	r27, r26
    1508:	62 0b       	sbc	r22, r18
    150a:	73 0b       	sbc	r23, r19
    150c:	84 0b       	sbc	r24, r20
    150e:	ba f0       	brmi	.+46     	; 0x153e <__addsf3x+0x9c>
    1510:	91 50       	subi	r25, 0x01	; 1
    1512:	a1 f0       	breq	.+40     	; 0x153c <__addsf3x+0x9a>
    1514:	ff 0f       	add	r31, r31
    1516:	bb 1f       	adc	r27, r27
    1518:	66 1f       	adc	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	c2 f7       	brpl	.-16     	; 0x1510 <__addsf3x+0x6e>
    1520:	0e c0       	rjmp	.+28     	; 0x153e <__addsf3x+0x9c>
    1522:	ba 0f       	add	r27, r26
    1524:	62 1f       	adc	r22, r18
    1526:	73 1f       	adc	r23, r19
    1528:	84 1f       	adc	r24, r20
    152a:	48 f4       	brcc	.+18     	; 0x153e <__addsf3x+0x9c>
    152c:	87 95       	ror	r24
    152e:	77 95       	ror	r23
    1530:	67 95       	ror	r22
    1532:	b7 95       	ror	r27
    1534:	f7 95       	ror	r31
    1536:	9e 3f       	cpi	r25, 0xFE	; 254
    1538:	08 f0       	brcs	.+2      	; 0x153c <__addsf3x+0x9a>
    153a:	b0 cf       	rjmp	.-160    	; 0x149c <__addsf3+0x28>
    153c:	93 95       	inc	r25
    153e:	88 0f       	add	r24, r24
    1540:	08 f0       	brcs	.+2      	; 0x1544 <__addsf3x+0xa2>
    1542:	99 27       	eor	r25, r25
    1544:	ee 0f       	add	r30, r30
    1546:	97 95       	ror	r25
    1548:	87 95       	ror	r24
    154a:	08 95       	ret

0000154c <__divsf3>:
    154c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3x>
    1550:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_round>
    1554:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_pscB>
    1558:	58 f0       	brcs	.+22     	; 0x1570 <__divsf3+0x24>
    155a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fp_pscA>
    155e:	40 f0       	brcs	.+16     	; 0x1570 <__divsf3+0x24>
    1560:	29 f4       	brne	.+10     	; 0x156c <__divsf3+0x20>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	29 f0       	breq	.+10     	; 0x1570 <__divsf3+0x24>
    1566:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__fp_inf>
    156a:	51 11       	cpse	r21, r1
    156c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_szero>
    1570:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_nan>

00001574 <__divsf3x>:
    1574:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_split3>
    1578:	68 f3       	brcs	.-38     	; 0x1554 <__divsf3+0x8>

0000157a <__divsf3_pse>:
    157a:	99 23       	and	r25, r25
    157c:	b1 f3       	breq	.-20     	; 0x156a <__divsf3+0x1e>
    157e:	55 23       	and	r21, r21
    1580:	91 f3       	breq	.-28     	; 0x1566 <__divsf3+0x1a>
    1582:	95 1b       	sub	r25, r21
    1584:	55 0b       	sbc	r21, r21
    1586:	bb 27       	eor	r27, r27
    1588:	aa 27       	eor	r26, r26
    158a:	62 17       	cp	r22, r18
    158c:	73 07       	cpc	r23, r19
    158e:	84 07       	cpc	r24, r20
    1590:	38 f0       	brcs	.+14     	; 0x15a0 <__divsf3_pse+0x26>
    1592:	9f 5f       	subi	r25, 0xFF	; 255
    1594:	5f 4f       	sbci	r21, 0xFF	; 255
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	44 1f       	adc	r20, r20
    159c:	aa 1f       	adc	r26, r26
    159e:	a9 f3       	breq	.-22     	; 0x158a <__divsf3_pse+0x10>
    15a0:	35 d0       	rcall	.+106    	; 0x160c <__divsf3_pse+0x92>
    15a2:	0e 2e       	mov	r0, r30
    15a4:	3a f0       	brmi	.+14     	; 0x15b4 <__divsf3_pse+0x3a>
    15a6:	e0 e8       	ldi	r30, 0x80	; 128
    15a8:	32 d0       	rcall	.+100    	; 0x160e <__divsf3_pse+0x94>
    15aa:	91 50       	subi	r25, 0x01	; 1
    15ac:	50 40       	sbci	r21, 0x00	; 0
    15ae:	e6 95       	lsr	r30
    15b0:	00 1c       	adc	r0, r0
    15b2:	ca f7       	brpl	.-14     	; 0x15a6 <__divsf3_pse+0x2c>
    15b4:	2b d0       	rcall	.+86     	; 0x160c <__divsf3_pse+0x92>
    15b6:	fe 2f       	mov	r31, r30
    15b8:	29 d0       	rcall	.+82     	; 0x160c <__divsf3_pse+0x92>
    15ba:	66 0f       	add	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	88 1f       	adc	r24, r24
    15c0:	bb 1f       	adc	r27, r27
    15c2:	26 17       	cp	r18, r22
    15c4:	37 07       	cpc	r19, r23
    15c6:	48 07       	cpc	r20, r24
    15c8:	ab 07       	cpc	r26, r27
    15ca:	b0 e8       	ldi	r27, 0x80	; 128
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <__divsf3_pse+0x56>
    15ce:	bb 0b       	sbc	r27, r27
    15d0:	80 2d       	mov	r24, r0
    15d2:	bf 01       	movw	r22, r30
    15d4:	ff 27       	eor	r31, r31
    15d6:	93 58       	subi	r25, 0x83	; 131
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	3a f0       	brmi	.+14     	; 0x15ea <__divsf3_pse+0x70>
    15dc:	9e 3f       	cpi	r25, 0xFE	; 254
    15de:	51 05       	cpc	r21, r1
    15e0:	78 f0       	brcs	.+30     	; 0x1600 <__divsf3_pse+0x86>
    15e2:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__fp_inf>
    15e6:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_szero>
    15ea:	5f 3f       	cpi	r21, 0xFF	; 255
    15ec:	e4 f3       	brlt	.-8      	; 0x15e6 <__divsf3_pse+0x6c>
    15ee:	98 3e       	cpi	r25, 0xE8	; 232
    15f0:	d4 f3       	brlt	.-12     	; 0x15e6 <__divsf3_pse+0x6c>
    15f2:	86 95       	lsr	r24
    15f4:	77 95       	ror	r23
    15f6:	67 95       	ror	r22
    15f8:	b7 95       	ror	r27
    15fa:	f7 95       	ror	r31
    15fc:	9f 5f       	subi	r25, 0xFF	; 255
    15fe:	c9 f7       	brne	.-14     	; 0x15f2 <__divsf3_pse+0x78>
    1600:	88 0f       	add	r24, r24
    1602:	91 1d       	adc	r25, r1
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	97 f9       	bld	r25, 7
    160a:	08 95       	ret
    160c:	e1 e0       	ldi	r30, 0x01	; 1
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	bb 1f       	adc	r27, r27
    1616:	62 17       	cp	r22, r18
    1618:	73 07       	cpc	r23, r19
    161a:	84 07       	cpc	r24, r20
    161c:	ba 07       	cpc	r27, r26
    161e:	20 f0       	brcs	.+8      	; 0x1628 <__divsf3_pse+0xae>
    1620:	62 1b       	sub	r22, r18
    1622:	73 0b       	sbc	r23, r19
    1624:	84 0b       	sbc	r24, r20
    1626:	ba 0b       	sbc	r27, r26
    1628:	ee 1f       	adc	r30, r30
    162a:	88 f7       	brcc	.-30     	; 0x160e <__divsf3_pse+0x94>
    162c:	e0 95       	com	r30
    162e:	08 95       	ret

00001630 <__fixsfsi>:
    1630:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fixunssfsi>
    1634:	68 94       	set
    1636:	b1 11       	cpse	r27, r1
    1638:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_szero>
    163c:	08 95       	ret

0000163e <__fixunssfsi>:
    163e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_splitA>
    1642:	88 f0       	brcs	.+34     	; 0x1666 <__fixunssfsi+0x28>
    1644:	9f 57       	subi	r25, 0x7F	; 127
    1646:	98 f0       	brcs	.+38     	; 0x166e <__fixunssfsi+0x30>
    1648:	b9 2f       	mov	r27, r25
    164a:	99 27       	eor	r25, r25
    164c:	b7 51       	subi	r27, 0x17	; 23
    164e:	b0 f0       	brcs	.+44     	; 0x167c <__fixunssfsi+0x3e>
    1650:	e1 f0       	breq	.+56     	; 0x168a <__fixunssfsi+0x4c>
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	1a f0       	brmi	.+6      	; 0x1662 <__fixunssfsi+0x24>
    165c:	ba 95       	dec	r27
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__fixunssfsi+0x14>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <__fixunssfsi+0x4c>
    1662:	b1 30       	cpi	r27, 0x01	; 1
    1664:	91 f0       	breq	.+36     	; 0x168a <__fixunssfsi+0x4c>
    1666:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fp_zero>
    166a:	b1 e0       	ldi	r27, 0x01	; 1
    166c:	08 95       	ret
    166e:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__fp_zero>
    1672:	67 2f       	mov	r22, r23
    1674:	78 2f       	mov	r23, r24
    1676:	88 27       	eor	r24, r24
    1678:	b8 5f       	subi	r27, 0xF8	; 248
    167a:	39 f0       	breq	.+14     	; 0x168a <__fixunssfsi+0x4c>
    167c:	b9 3f       	cpi	r27, 0xF9	; 249
    167e:	cc f3       	brlt	.-14     	; 0x1672 <__fixunssfsi+0x34>
    1680:	86 95       	lsr	r24
    1682:	77 95       	ror	r23
    1684:	67 95       	ror	r22
    1686:	b3 95       	inc	r27
    1688:	d9 f7       	brne	.-10     	; 0x1680 <__fixunssfsi+0x42>
    168a:	3e f4       	brtc	.+14     	; 0x169a <__fixunssfsi+0x5c>
    168c:	90 95       	com	r25
    168e:	80 95       	com	r24
    1690:	70 95       	com	r23
    1692:	61 95       	neg	r22
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	8f 4f       	sbci	r24, 0xFF	; 255
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__floatunsisf>:
    169c:	e8 94       	clt
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <__floatsisf+0x12>

000016a0 <__floatsisf>:
    16a0:	97 fb       	bst	r25, 7
    16a2:	3e f4       	brtc	.+14     	; 0x16b2 <__floatsisf+0x12>
    16a4:	90 95       	com	r25
    16a6:	80 95       	com	r24
    16a8:	70 95       	com	r23
    16aa:	61 95       	neg	r22
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	99 23       	and	r25, r25
    16b4:	a9 f0       	breq	.+42     	; 0x16e0 <__floatsisf+0x40>
    16b6:	f9 2f       	mov	r31, r25
    16b8:	96 e9       	ldi	r25, 0x96	; 150
    16ba:	bb 27       	eor	r27, r27
    16bc:	93 95       	inc	r25
    16be:	f6 95       	lsr	r31
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f1 11       	cpse	r31, r1
    16ca:	f8 cf       	rjmp	.-16     	; 0x16bc <__floatsisf+0x1c>
    16cc:	fa f4       	brpl	.+62     	; 0x170c <__floatsisf+0x6c>
    16ce:	bb 0f       	add	r27, r27
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__floatsisf+0x36>
    16d2:	60 ff       	sbrs	r22, 0
    16d4:	1b c0       	rjmp	.+54     	; 0x170c <__floatsisf+0x6c>
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	16 c0       	rjmp	.+44     	; 0x170c <__floatsisf+0x6c>
    16e0:	88 23       	and	r24, r24
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <__floatsisf+0x48>
    16e4:	96 e9       	ldi	r25, 0x96	; 150
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <__floatsisf+0x6a>
    16e8:	77 23       	and	r23, r23
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <__floatsisf+0x54>
    16ec:	9e e8       	ldi	r25, 0x8E	; 142
    16ee:	87 2f       	mov	r24, r23
    16f0:	76 2f       	mov	r23, r22
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <__floatsisf+0x5e>
    16f4:	66 23       	and	r22, r22
    16f6:	71 f0       	breq	.+28     	; 0x1714 <__floatsisf+0x74>
    16f8:	96 e8       	ldi	r25, 0x86	; 134
    16fa:	86 2f       	mov	r24, r22
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	2a f0       	brmi	.+10     	; 0x170c <__floatsisf+0x6c>
    1702:	9a 95       	dec	r25
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	da f7       	brpl	.-10     	; 0x1702 <__floatsisf+0x62>
    170c:	88 0f       	add	r24, r24
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	97 f9       	bld	r25, 7
    1714:	08 95       	ret

00001716 <__fp_inf>:
    1716:	97 f9       	bld	r25, 7
    1718:	9f 67       	ori	r25, 0x7F	; 127
    171a:	80 e8       	ldi	r24, 0x80	; 128
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	08 95       	ret

00001722 <__fp_nan>:
    1722:	9f ef       	ldi	r25, 0xFF	; 255
    1724:	80 ec       	ldi	r24, 0xC0	; 192
    1726:	08 95       	ret

00001728 <__fp_pscA>:
    1728:	00 24       	eor	r0, r0
    172a:	0a 94       	dec	r0
    172c:	16 16       	cp	r1, r22
    172e:	17 06       	cpc	r1, r23
    1730:	18 06       	cpc	r1, r24
    1732:	09 06       	cpc	r0, r25
    1734:	08 95       	ret

00001736 <__fp_pscB>:
    1736:	00 24       	eor	r0, r0
    1738:	0a 94       	dec	r0
    173a:	12 16       	cp	r1, r18
    173c:	13 06       	cpc	r1, r19
    173e:	14 06       	cpc	r1, r20
    1740:	05 06       	cpc	r0, r21
    1742:	08 95       	ret

00001744 <__fp_round>:
    1744:	09 2e       	mov	r0, r25
    1746:	03 94       	inc	r0
    1748:	00 0c       	add	r0, r0
    174a:	11 f4       	brne	.+4      	; 0x1750 <__fp_round+0xc>
    174c:	88 23       	and	r24, r24
    174e:	52 f0       	brmi	.+20     	; 0x1764 <__fp_round+0x20>
    1750:	bb 0f       	add	r27, r27
    1752:	40 f4       	brcc	.+16     	; 0x1764 <__fp_round+0x20>
    1754:	bf 2b       	or	r27, r31
    1756:	11 f4       	brne	.+4      	; 0x175c <__fp_round+0x18>
    1758:	60 ff       	sbrs	r22, 0
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <__fp_round+0x20>
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	08 95       	ret

00001766 <__fp_split3>:
    1766:	57 fd       	sbrc	r21, 7
    1768:	90 58       	subi	r25, 0x80	; 128
    176a:	44 0f       	add	r20, r20
    176c:	55 1f       	adc	r21, r21
    176e:	59 f0       	breq	.+22     	; 0x1786 <__fp_splitA+0x10>
    1770:	5f 3f       	cpi	r21, 0xFF	; 255
    1772:	71 f0       	breq	.+28     	; 0x1790 <__fp_splitA+0x1a>
    1774:	47 95       	ror	r20

00001776 <__fp_splitA>:
    1776:	88 0f       	add	r24, r24
    1778:	97 fb       	bst	r25, 7
    177a:	99 1f       	adc	r25, r25
    177c:	61 f0       	breq	.+24     	; 0x1796 <__fp_splitA+0x20>
    177e:	9f 3f       	cpi	r25, 0xFF	; 255
    1780:	79 f0       	breq	.+30     	; 0x17a0 <__fp_splitA+0x2a>
    1782:	87 95       	ror	r24
    1784:	08 95       	ret
    1786:	12 16       	cp	r1, r18
    1788:	13 06       	cpc	r1, r19
    178a:	14 06       	cpc	r1, r20
    178c:	55 1f       	adc	r21, r21
    178e:	f2 cf       	rjmp	.-28     	; 0x1774 <__fp_split3+0xe>
    1790:	46 95       	lsr	r20
    1792:	f1 df       	rcall	.-30     	; 0x1776 <__fp_splitA>
    1794:	08 c0       	rjmp	.+16     	; 0x17a6 <__fp_splitA+0x30>
    1796:	16 16       	cp	r1, r22
    1798:	17 06       	cpc	r1, r23
    179a:	18 06       	cpc	r1, r24
    179c:	99 1f       	adc	r25, r25
    179e:	f1 cf       	rjmp	.-30     	; 0x1782 <__fp_splitA+0xc>
    17a0:	86 95       	lsr	r24
    17a2:	71 05       	cpc	r23, r1
    17a4:	61 05       	cpc	r22, r1
    17a6:	08 94       	sec
    17a8:	08 95       	ret

000017aa <__fp_zero>:
    17aa:	e8 94       	clt

000017ac <__fp_szero>:
    17ac:	bb 27       	eor	r27, r27
    17ae:	66 27       	eor	r22, r22
    17b0:	77 27       	eor	r23, r23
    17b2:	cb 01       	movw	r24, r22
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__mulsf3>:
    17b8:	0e 94 ef 0b 	call	0x17de	; 0x17de <__mulsf3x>
    17bc:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__fp_round>
    17c0:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fp_pscA>
    17c4:	38 f0       	brcs	.+14     	; 0x17d4 <__mulsf3+0x1c>
    17c6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_pscB>
    17ca:	20 f0       	brcs	.+8      	; 0x17d4 <__mulsf3+0x1c>
    17cc:	95 23       	and	r25, r21
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <__mulsf3+0x1c>
    17d0:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__fp_inf>
    17d4:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_nan>
    17d8:	11 24       	eor	r1, r1
    17da:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_szero>

000017de <__mulsf3x>:
    17de:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_split3>
    17e2:	70 f3       	brcs	.-36     	; 0x17c0 <__mulsf3+0x8>

000017e4 <__mulsf3_pse>:
    17e4:	95 9f       	mul	r25, r21
    17e6:	c1 f3       	breq	.-16     	; 0x17d8 <__mulsf3+0x20>
    17e8:	95 0f       	add	r25, r21
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	55 1f       	adc	r21, r21
    17ee:	62 9f       	mul	r22, r18
    17f0:	f0 01       	movw	r30, r0
    17f2:	72 9f       	mul	r23, r18
    17f4:	bb 27       	eor	r27, r27
    17f6:	f0 0d       	add	r31, r0
    17f8:	b1 1d       	adc	r27, r1
    17fa:	63 9f       	mul	r22, r19
    17fc:	aa 27       	eor	r26, r26
    17fe:	f0 0d       	add	r31, r0
    1800:	b1 1d       	adc	r27, r1
    1802:	aa 1f       	adc	r26, r26
    1804:	64 9f       	mul	r22, r20
    1806:	66 27       	eor	r22, r22
    1808:	b0 0d       	add	r27, r0
    180a:	a1 1d       	adc	r26, r1
    180c:	66 1f       	adc	r22, r22
    180e:	82 9f       	mul	r24, r18
    1810:	22 27       	eor	r18, r18
    1812:	b0 0d       	add	r27, r0
    1814:	a1 1d       	adc	r26, r1
    1816:	62 1f       	adc	r22, r18
    1818:	73 9f       	mul	r23, r19
    181a:	b0 0d       	add	r27, r0
    181c:	a1 1d       	adc	r26, r1
    181e:	62 1f       	adc	r22, r18
    1820:	83 9f       	mul	r24, r19
    1822:	a0 0d       	add	r26, r0
    1824:	61 1d       	adc	r22, r1
    1826:	22 1f       	adc	r18, r18
    1828:	74 9f       	mul	r23, r20
    182a:	33 27       	eor	r19, r19
    182c:	a0 0d       	add	r26, r0
    182e:	61 1d       	adc	r22, r1
    1830:	23 1f       	adc	r18, r19
    1832:	84 9f       	mul	r24, r20
    1834:	60 0d       	add	r22, r0
    1836:	21 1d       	adc	r18, r1
    1838:	82 2f       	mov	r24, r18
    183a:	76 2f       	mov	r23, r22
    183c:	6a 2f       	mov	r22, r26
    183e:	11 24       	eor	r1, r1
    1840:	9f 57       	subi	r25, 0x7F	; 127
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	9a f0       	brmi	.+38     	; 0x186c <__mulsf3_pse+0x88>
    1846:	f1 f0       	breq	.+60     	; 0x1884 <__mulsf3_pse+0xa0>
    1848:	88 23       	and	r24, r24
    184a:	4a f0       	brmi	.+18     	; 0x185e <__mulsf3_pse+0x7a>
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	bb 1f       	adc	r27, r27
    1852:	66 1f       	adc	r22, r22
    1854:	77 1f       	adc	r23, r23
    1856:	88 1f       	adc	r24, r24
    1858:	91 50       	subi	r25, 0x01	; 1
    185a:	50 40       	sbci	r21, 0x00	; 0
    185c:	a9 f7       	brne	.-22     	; 0x1848 <__mulsf3_pse+0x64>
    185e:	9e 3f       	cpi	r25, 0xFE	; 254
    1860:	51 05       	cpc	r21, r1
    1862:	80 f0       	brcs	.+32     	; 0x1884 <__mulsf3_pse+0xa0>
    1864:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__fp_inf>
    1868:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_szero>
    186c:	5f 3f       	cpi	r21, 0xFF	; 255
    186e:	e4 f3       	brlt	.-8      	; 0x1868 <__mulsf3_pse+0x84>
    1870:	98 3e       	cpi	r25, 0xE8	; 232
    1872:	d4 f3       	brlt	.-12     	; 0x1868 <__mulsf3_pse+0x84>
    1874:	86 95       	lsr	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	b7 95       	ror	r27
    187c:	f7 95       	ror	r31
    187e:	e7 95       	ror	r30
    1880:	9f 5f       	subi	r25, 0xFF	; 255
    1882:	c1 f7       	brne	.-16     	; 0x1874 <__mulsf3_pse+0x90>
    1884:	fe 2b       	or	r31, r30
    1886:	88 0f       	add	r24, r24
    1888:	91 1d       	adc	r25, r1
    188a:	96 95       	lsr	r25
    188c:	87 95       	ror	r24
    188e:	97 f9       	bld	r25, 7
    1890:	08 95       	ret

00001892 <eeprom_read_byte>:
    1892:	f9 99       	sbic	0x1f, 1	; 31
    1894:	fe cf       	rjmp	.-4      	; 0x1892 <eeprom_read_byte>
    1896:	92 bd       	out	0x22, r25	; 34
    1898:	81 bd       	out	0x21, r24	; 33
    189a:	f8 9a       	sbi	0x1f, 0	; 31
    189c:	99 27       	eor	r25, r25
    189e:	80 b5       	in	r24, 0x20	; 32
    18a0:	08 95       	ret

000018a2 <eeprom_write_byte>:
    18a2:	26 2f       	mov	r18, r22

000018a4 <eeprom_write_r18>:
    18a4:	f9 99       	sbic	0x1f, 1	; 31
    18a6:	fe cf       	rjmp	.-4      	; 0x18a4 <eeprom_write_r18>
    18a8:	1f ba       	out	0x1f, r1	; 31
    18aa:	92 bd       	out	0x22, r25	; 34
    18ac:	81 bd       	out	0x21, r24	; 33
    18ae:	20 bd       	out	0x20, r18	; 32
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	fa 9a       	sbi	0x1f, 2	; 31
    18b6:	f9 9a       	sbi	0x1f, 1	; 31
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	08 95       	ret

000018be <_exit>:
    18be:	f8 94       	cli

000018c0 <__stop_program>:
    18c0:	ff cf       	rjmp	.-2      	; 0x18c0 <__stop_program>
