
build/minnow_auto_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	b3 05       	cpc	r27, r3
      6a:	0a 06       	cpc	r0, r26
      6c:	1e 06       	cpc	r1, r30
      6e:	4f 06       	cpc	r4, r31
      70:	56 06       	cpc	r5, r22
      72:	35 06       	cpc	r3, r21
      74:	59 06       	cpc	r5, r25
      76:	b7 07       	cpc	r27, r23
      78:	a8 08       	sbc	r10, r8
      7a:	a8 08       	sbc	r10, r8
      7c:	c0 07       	cpc	r28, r16
      7e:	c3 07       	cpc	r28, r19
      80:	c6 07       	cpc	r28, r22
      82:	c8 07       	cpc	r28, r24
      84:	ca 07       	cpc	r28, r26
      86:	cc 07       	cpc	r28, r28
      88:	7d 08       	sbc	r7, r13
      8a:	de 07       	cpc	r29, r30

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e3       	ldi	r30, 0x3A	; 58
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 39       	cpi	r26, 0x92	; 146
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      da:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
int message_sent = 0, new_message = 0, curr = 0, rand = 0, die = 4;
uint32_t last_changed = 0;
int16_t current_light = 0;

message_t recv_message;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  recv_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	ac e1       	ldi	r26, 0x1C	; 28
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  if (recv_message.data[0] == 1) {
      f2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <recv_message>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	31 f4       	brne	.+12     	; 0x106 <message_rx+0x24>
    new_message = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <new_message+0x1>
     102:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <new_message>
     106:	08 95       	ret

00000108 <message_tx>:
}

message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
     108:	88 e2       	ldi	r24, 0x28	; 40
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	08 95       	ret

0000010e <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <message_sent+0x1>
     116:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <message_sent>
     11a:	08 95       	ret

0000011c <sample_light>:
}

int16_t sample_light() {
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     128:	c1 2c       	mov	r12, r1
     12a:	d1 2c       	mov	r13, r1
     12c:	76 01       	movw	r14, r12
void message_tx_success() {
  message_sent = 1;
}

int16_t sample_light() {
    int16_t number_of_samples = 0;
     12e:	c0 e0       	ldi	r28, 0x00	; 0
     130:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();
     132:	0e 94 bc 02 	call	0x578	; 0x578 <get_ambientlight>
        if (sample != -1) {
     136:	8f 3f       	cpi	r24, 0xFF	; 255
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	92 07       	cpc	r25, r18
     13c:	49 f0       	breq	.+18     	; 0x150 <sample_light+0x34>
            sum = sum + sample;
     13e:	09 2e       	mov	r0, r25
     140:	00 0c       	add	r0, r0
     142:	aa 0b       	sbc	r26, r26
     144:	bb 0b       	sbc	r27, r27
     146:	c8 0e       	add	r12, r24
     148:	d9 1e       	adc	r13, r25
     14a:	ea 1e       	adc	r14, r26
     14c:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     14e:	21 96       	adiw	r28, 0x01	; 1
}

int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     150:	cc 32       	cpi	r28, 0x2C	; 44
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	d8 07       	cpc	r29, r24
     156:	6c f3       	brlt	.-38     	; 0x132 <sample_light+0x16>
        if (sample != -1) {
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;
     158:	9e 01       	movw	r18, r28
     15a:	dd 0f       	add	r29, r29
     15c:	44 0b       	sbc	r20, r20
     15e:	55 0b       	sbc	r21, r21
     160:	c7 01       	movw	r24, r14
     162:	b6 01       	movw	r22, r12
     164:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divmodsi4>
}
     168:	c9 01       	movw	r24, r18
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	08 95       	ret

00000178 <setup>:
        }
  }
}

void setup() {
  current_light = sample_light();
     178:	0e 94 8e 00 	call	0x11c	; 0x11c <sample_light>
     17c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     180:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     184:	08 95       	ret

00000186 <set_motion>:
    }
    return sum / number_of_samples;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     186:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <curr>
     18a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <curr+0x1>
     18e:	28 17       	cp	r18, r24
     190:	39 07       	cpc	r19, r25
     192:	09 f1       	breq	.+66     	; 0x1d6 <set_motion+0x50>
        curr = new_motion;
     194:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <curr+0x1>
     198:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <curr>
        if (curr == STOP) {
     19c:	00 97       	sbiw	r24, 0x00	; 0
     19e:	11 f4       	brne	.+4      	; 0x1a4 <set_motion+0x1e>
          set_motors(0,0);
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <set_motion+0x4a>
        } else if (curr == FORWARD) {
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	91 05       	cpc	r25, r1
     1a8:	39 f4       	brne	.+14     	; 0x1b8 <set_motion+0x32>
          spinup_motors();
     1aa:	0e 94 b3 02 	call	0x566	; 0x566 <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     1ae:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_straight_right>
     1b2:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <kilo_straight_left>
     1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <set_motion+0x4c>
        } else if (curr == LEFT) {
     1b8:	02 97       	sbiw	r24, 0x02	; 2
     1ba:	31 f4       	brne	.+12     	; 0x1c8 <set_motion+0x42>
          spinup_motors();
     1bc:	0e 94 b3 02 	call	0x566	; 0x566 <spinup_motors>
          set_motors(kilo_turn_left, 0);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_turn_left>
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <set_motion+0x4c>
        } else {
          spinup_motors();
     1c8:	0e 94 b3 02 	call	0x566	; 0x566 <spinup_motors>
          set_motors(0, kilo_turn_right);
     1cc:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_turn_right>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	0c 94 ae 02 	jmp	0x55c	; 0x55c <set_motors>
     1d6:	08 95       	ret

000001d8 <shark>:
void setup() {
  current_light = sample_light();
}

int16_t shark() {
  transmit_msg.type = NORMAL;
     1d8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <transmit_msg+0x9>
  transmit_msg.data[0] = 1;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <transmit_msg>
  transmit_msg.crc = message_crc(&transmit_msg);
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 bb 08 	call	0x1176	; 0x1176 <message_crc>
     1ea:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <transmit_msg+0xb>
     1ee:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <transmit_msg+0xa>
  if (message_sent == 1) {
     1f2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <message_sent>
     1f6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <message_sent+0x1>
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	d9 f5       	brne	.+118    	; 0x274 <shark+0x9c>
      message_sent = 0;
     1fe:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <message_sent+0x1>
     202:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <message_sent>
      set_color(RED);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
      rand = rand_soft();
     20c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <rand_soft>
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     216:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
      if (die == 0) {
     21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	19 f4       	brne	.+6      	; 0x22c <shark+0x54>
          set_motion(FORWARD);
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	05 c0       	rjmp	.+10     	; 0x236 <shark+0x5e>
      } else if (die == 1) {
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	91 05       	cpc	r25, r1
     230:	29 f4       	brne	.+10     	; 0x23c <shark+0x64>
          set_motion(LEFT);
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 c3 00 	call	0x186	; 0x186 <set_motion>
     23a:	10 c0       	rjmp	.+32     	; 0x25c <shark+0x84>
      } else if (die == 2) {
     23c:	02 97       	sbiw	r24, 0x02	; 2
     23e:	19 f4       	brne	.+6      	; 0x246 <shark+0x6e>
          set_motion(RIGHT);
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	f8 cf       	rjmp	.-16     	; 0x236 <shark+0x5e>
      } else {
          set_color(WHITE);
     246:	85 e1       	ldi	r24, 0x15	; 21
     248:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
          set_motion(STOP);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 c3 00 	call	0x186	; 0x186 <set_motion>
          delay(2500);
     254:	84 ec       	ldi	r24, 0xC4	; 196
     256:	99 e0       	ldi	r25, 0x09	; 9
     258:	0e 94 a3 02 	call	0x546	; 0x546 <delay>
      }
      die = (rand % 3);
     25c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     260:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     264:	63 e0       	ldi	r22, 0x03	; 3
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodhi4>
     26c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();
     274:	0c 94 8e 00 	jmp	0x11c	; 0x11c <sample_light>

00000278 <minnow>:
}

int16_t minnow() {
   if (new_message == 1) {
     278:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <new_message>
     27c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <new_message+0x1>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	71 f4       	brne	.+28     	; 0x2a0 <minnow+0x28>
        set_color(VIOLET);
     284:	81 e1       	ldi	r24, 0x11	; 17
     286:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
        set_motion(STOP);
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 c3 00 	call	0x186	; 0x186 <set_motion>
	delay(1000);
     292:	88 ee       	ldi	r24, 0xE8	; 232
     294:	93 e0       	ldi	r25, 0x03	; 3
     296:	0e 94 a3 02 	call	0x546	; 0x546 <delay>
	shark();
     29a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <shark>
     29e:	24 c0       	rjmp	.+72     	; 0x2e8 <minnow+0x70>
    } else {
        set_color(BLUE);
     2a0:	80 e1       	ldi	r24, 0x10	; 16
     2a2:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
        rand = rand_soft();
     2a6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <rand_soft>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     2b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
        die = (rand % 3);
     2b4:	63 e0       	ldi	r22, 0x03	; 3
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodhi4>
     2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if (die == 0) {
     2c4:	00 97       	sbiw	r24, 0x00	; 0
     2c6:	19 f4       	brne	.+6      	; 0x2ce <minnow+0x56>
          set_motion(FORWARD);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	07 c0       	rjmp	.+14     	; 0x2dc <minnow+0x64>
        } else if (die == 1) {
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <minnow+0x60>
          set_motion(LEFT);
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <minnow+0x64>
        } else {
          set_motion(RIGHT);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 c3 00 	call	0x186	; 0x186 <set_motion>
        }
        delay(100);
     2e0:	84 e6       	ldi	r24, 0x64	; 100
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 a3 02 	call	0x546	; 0x546 <delay>
      }
  return sample_light();
     2e8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <sample_light>

000002ec <loop>:
}

void loop() {
  if (new_message == 1 && current_light > 1000) {
     2ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <new_message>
     2f0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <new_message+0x1>
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	91 05       	cpc	r25, r1
     2f8:	41 f4       	brne	.+16     	; 0x30a <loop+0x1e>
     2fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2fe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     302:	89 3e       	cpi	r24, 0xE9	; 233
     304:	93 40       	sbci	r25, 0x03	; 3
     306:	54 f0       	brlt	.+20     	; 0x31c <loop+0x30>
     308:	13 c0       	rjmp	.+38     	; 0x330 <loop+0x44>
    current_light = shark();
  } else if ((new_message == 0) && (current_light > 1000)) {
     30a:	89 2b       	or	r24, r25
     30c:	39 f4       	brne	.+14     	; 0x31c <loop+0x30>
     30e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     312:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     316:	89 3e       	cpi	r24, 0xE9	; 233
     318:	93 40       	sbci	r25, 0x03	; 3
     31a:	6c f4       	brge	.+26     	; 0x336 <loop+0x4a>
    current_light = minnow();
  } else {
    delay(500);
     31c:	84 ef       	ldi	r24, 0xF4	; 244
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 a3 02 	call	0x546	; 0x546 <delay>
    if (new_message == 1) {
     324:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <new_message>
     328:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <new_message+0x1>
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	19 f4       	brne	.+6      	; 0x336 <loop+0x4a>
	current_light = shark();
     330:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <shark>
     334:	02 c0       	rjmp	.+4      	; 0x33a <loop+0x4e>
    } else {
	current_light = minnow();
     336:	0e 94 3c 01 	call	0x278	; 0x278 <minnow>
     33a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     33e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     342:	08 95       	ret

00000344 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     344:	08 95       	ret

00000346 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	08 95       	ret

0000034c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     34c:	08 95       	ret

0000034e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
    cli();
     35c:	f8 94       	cli

    ports_off();
     35e:	14 b8       	out	0x04, r1	; 4
     360:	17 b8       	out	0x07, r1	; 7
     362:	1a b8       	out	0x0a, r1	; 10
     364:	15 b8       	out	0x05, r1	; 5
     366:	18 b8       	out	0x08, r1	; 8
     368:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     36a:	52 9a       	sbi	0x0a, 2	; 10
     36c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     36e:	14 bc       	out	0x24, r1	; 36
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	85 bd       	out	0x25, r24	; 37
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	87 bd       	out	0x27, r24	; 39
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     37e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     382:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     386:	2f e8       	ldi	r18, 0x8F	; 143
     388:	3b e0       	ldi	r19, 0x0B	; 11
     38a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     38e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     392:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     396:	53 98       	cbi	0x0a, 3	; 10
     398:	23 98       	cbi	0x04, 3	; 4
     39a:	91 ea       	ldi	r25, 0xA1	; 161
     39c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     3a4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     3ac:	8b e0       	ldi	r24, 0x0B	; 11
     3ae:	80 bf       	out	0x30, r24	; 48
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3bc:	83 e8       	ldi	r24, 0x83	; 131
     3be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c6:	80 64       	ori	r24, 0x40	; 64
     3c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3d0:	86 fd       	sbrc	r24, 6
     3d2:	fc cf       	rjmp	.-8      	; 0x3cc <kilo_init+0x7e>
    adc_trigger_high_gain();
     3d4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3d8:	83 ea       	ldi	r24, 0xA3	; 163
     3da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
    if (osccal != 0xFF)
     3ec:	8f 3f       	cpi	r24, 0xFF	; 255
     3ee:	11 f0       	breq	.+4      	; 0x3f4 <kilo_init+0xa6>
        OSCCAL = osccal;
     3f0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     3f4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
    rx_leadingbit = 1;
     3f8:	c1 e0       	ldi	r28, 0x01	; 1
     3fa:	c0 93 34 01 	sts	0x0134, r28	; 0x800134 <rx_leadingbit>
    rx_leadingbyte = 1;
     3fe:	c0 93 78 01 	sts	0x0178, r28	; 0x800178 <rx_leadingbyte>
    rx_byteindex = 0;
     402:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <rx_byteindex>
    rx_bytevalue = 0;
     406:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     40a:	80 e9       	ldi	r24, 0x90	; 144
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     412:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     416:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tx_mask>
     41a:	88 73       	andi	r24, 0x38	; 56
     41c:	11 f0       	breq	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
        tx_mask = TX_MASK_MIN;
     41e:	c0 93 51 01 	sts	0x0151, r28	; 0x800151 <tx_mask>
    tx_clock = 0;
     422:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <tx_clock+0x1>
     426:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tx_clock>
    tx_increment = 255;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <tx_increment+0x1>
     432:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <tx_increment>
    kilo_ticks = 0;
     436:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <kilo_ticks>
     43a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <kilo_ticks+0x1>
     43e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <kilo_ticks+0x2>
     442:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <kilo_ticks+0x3>
    kilo_state = IDLE;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <kilo_state>
    kilo_tx_period = 3906;
     44c:	82 e4       	ldi	r24, 0x42	; 66
     44e:	9f e0       	ldi	r25, 0x0F	; 15
     450:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <kilo_tx_period+0x1>
     454:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     458:	80 eb       	ldi	r24, 0xB0	; 176
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     460:	c8 2f       	mov	r28, r24
     462:	81 eb       	ldi	r24, 0xB1	; 177
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     46a:	2c 2f       	mov	r18, r28
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	38 2b       	or	r19, r24
     470:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <kilo_uid+0x1>
     474:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     478:	85 e0       	ldi	r24, 0x05	; 5
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     480:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     484:	89 e0       	ldi	r24, 0x09	; 9
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     48c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     490:	8c e0       	ldi	r24, 0x0C	; 12
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     498:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     49c:	84 e1       	ldi	r24, 0x14	; 20
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     4a4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <kilo_straight_right>
     4a8:	0c e5       	ldi	r16, 0x5C	; 92
     4aa:	11 e0       	ldi	r17, 0x01	; 1
     4ac:	55 e3       	ldi	r21, 0x35	; 53
     4ae:	e5 2e       	mov	r14, r21
     4b0:	51 e0       	ldi	r21, 0x01	; 1
     4b2:	f5 2e       	mov	r15, r21
     4b4:	c0 e2       	ldi	r28, 0x20	; 32
     4b6:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     4be:	d8 2e       	mov	r13, r24
     4c0:	ce 01       	movw	r24, r28
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     4c8:	2d 2d       	mov	r18, r13
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	32 2f       	mov	r19, r18
     4ce:	22 27       	eor	r18, r18
     4d0:	28 2b       	or	r18, r24
     4d2:	f8 01       	movw	r30, r16
     4d4:	21 93       	st	Z+, r18
     4d6:	31 93       	st	Z+, r19
     4d8:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4da:	ce 01       	movw	r24, r28
     4dc:	c0 96       	adiw	r24, 0x30	; 48
     4de:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     4e2:	d8 2e       	mov	r13, r24
     4e4:	ce 01       	movw	r24, r28
     4e6:	c1 96       	adiw	r24, 0x31	; 49
     4e8:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_read_byte>
     4ec:	2d 2d       	mov	r18, r13
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	32 2f       	mov	r19, r18
     4f2:	22 27       	eor	r18, r18
     4f4:	28 2b       	or	r18, r24
     4f6:	f7 01       	movw	r30, r14
     4f8:	21 93       	st	Z+, r18
     4fa:	31 93       	st	Z+, r19
     4fc:	7f 01       	movw	r14, r30
     4fe:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     500:	cc 33       	cpi	r28, 0x3C	; 60
     502:	d1 05       	cpc	r29, r1
     504:	c9 f6       	brne	.-78     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     506:	78 94       	sei
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	08 95       	ret

00000518 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	8f 93       	push	r24
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	a8 95       	wdr
     52a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     52e:	88 61       	ori	r24, 0x18	; 24
     530:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     534:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     538:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     53a:	8f 91       	pop	r24
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	41 f0       	breq	.+16     	; 0x55a <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54a:	ef ec       	ldi	r30, 0xCF	; 207
     54c:	f7 e0       	ldi	r31, 0x07	; 7
     54e:	31 97       	sbiw	r30, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <delay+0x8>
     552:	00 c0       	rjmp	.+0      	; 0x554 <delay+0xe>
     554:	00 00       	nop
        _delay_ms(1);
        ms--;
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f6 cf       	rjmp	.-20     	; 0x546 <delay>
    }
}
     55a:	08 95       	ret

0000055c <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     55c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     560:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     564:	08 95       	ret

00000566 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     56c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     570:	8f e0       	ldi	r24, 0x0F	; 15
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0c 94 a3 02 	jmp	0x546	; 0x546 <delay>

00000578 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     578:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>
     57c:	81 11       	cpse	r24, r1
     57e:	1e c0       	rjmp	.+60     	; 0x5bc <get_ambientlight+0x44>
        cli();
     580:	f8 94       	cli
        adc_setup_conversion(7);
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     588:	83 e8       	ldi	r24, 0x83	; 131
     58a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     58e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     592:	80 64       	ori	r24, 0x40	; 64
     594:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     598:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59c:	86 fd       	sbrc	r24, 6
     59e:	fc cf       	rjmp	.-8      	; 0x598 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     5a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5a8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5ac:	23 ea       	ldi	r18, 0xA3	; 163
     5ae:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     5b8:	78 94       	sei
     5ba:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     5c0:	08 95       	ret

000005c2 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     5c2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>
     5c6:	81 11       	cpse	r24, r1
     5c8:	1e c0       	rjmp	.+60     	; 0x606 <get_temperature+0x44>
        cli();
     5ca:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     5cc:	88 ec       	ldi	r24, 0xC8	; 200
     5ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     5d2:	87 e8       	ldi	r24, 0x87	; 135
     5d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5dc:	80 64       	ori	r24, 0x40	; 64
     5de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5e6:	86 fd       	sbrc	r24, 6
     5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     5ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5f2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5f6:	23 ea       	ldi	r18, 0xA3	; 163
     5f8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     602:	78 94       	sei
     604:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     60a:	08 95       	ret

0000060c <rand_hard>:

uint8_t rand_hard() {
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     616:	e3 ea       	ldi	r30, 0xA3	; 163
     618:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     61a:	c6 e0       	ldi	r28, 0x06	; 6
     61c:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     61e:	a1 e0       	ldi	r26, 0x01	; 1
     620:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     622:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     624:	f8 94       	cli
            adc_setup_conversion(6);
     626:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     62a:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     62e:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     632:	40 64       	ori	r20, 0x40	; 64
     634:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     638:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     63c:	46 fd       	sbrc	r20, 6
     63e:	fc cf       	rjmp	.-8      	; 0x638 <rand_hard+0x2c>
            a = ADCW&0x1;
     640:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     644:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     648:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     64a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     64e:	50 64       	ori	r21, 0x40	; 64
     650:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     654:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     658:	56 fd       	sbrc	r21, 6
     65a:	fc cf       	rjmp	.-8      	; 0x654 <rand_hard+0x48>
            b = ADCW&0x1;
     65c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     660:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     664:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     668:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     66c:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     670:	78 94       	sei
            tries++;
     672:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     674:	61 70       	andi	r22, 0x01	; 1
     676:	46 17       	cp	r20, r22
     678:	51 f0       	breq	.+20     	; 0x68e <rand_hard+0x82>
        if (a)
     67a:	44 23       	and	r20, r20
     67c:	59 f0       	breq	.+22     	; 0x694 <rand_hard+0x88>
            num |= (1<<i);
     67e:	ad 01       	movw	r20, r26
     680:	02 2e       	mov	r0, r18
     682:	01 c0       	rjmp	.+2      	; 0x686 <rand_hard+0x7a>
     684:	44 0f       	add	r20, r20
     686:	0a 94       	dec	r0
     688:	ea f7       	brpl	.-6      	; 0x684 <rand_hard+0x78>
     68a:	84 2b       	or	r24, r20
     68c:	03 c0       	rjmp	.+6      	; 0x694 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     68e:	90 38       	cpi	r25, 0x80	; 128
     690:	49 f6       	brne	.-110    	; 0x624 <rand_hard+0x18>
     692:	f3 cf       	rjmp	.-26     	; 0x67a <rand_hard+0x6e>
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     698:	28 30       	cpi	r18, 0x08	; 8
     69a:	31 05       	cpc	r19, r1
     69c:	09 f0       	breq	.+2      	; 0x6a0 <rand_hard+0x94>
     69e:	c1 cf       	rjmp	.-126    	; 0x622 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     6a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     6aa:	98 e0       	ldi	r25, 0x08	; 8
     6ac:	89 9f       	mul	r24, r25
     6ae:	90 01       	movw	r18, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     6b4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <accumulator>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 0f       	add	r24, r25
     6bc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <accumulator>
     6c0:	82 2f       	mov	r24, r18
     6c2:	82 95       	swap	r24
     6c4:	86 95       	lsr	r24
     6c6:	87 70       	andi	r24, 0x07	; 7
     6c8:	28 27       	eor	r18, r24
     6ca:	96 95       	lsr	r25
     6cc:	96 95       	lsr	r25
     6ce:	82 2f       	mov	r24, r18
     6d0:	89 27       	eor	r24, r25
     6d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     6d6:	08 95       	ret

000006d8 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     6d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     6dc:	08 95       	ret

000006de <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6de:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>
     6e2:	81 11       	cpse	r24, r1
     6e4:	16 c0       	rjmp	.+44     	; 0x712 <get_voltage+0x34>
        cli();                                    // disable interrupts
     6e6:	f8 94       	cli
        adc_setup_conversion(6);
     6e8:	86 e0       	ldi	r24, 0x06	; 6
     6ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6ee:	83 e8       	ldi	r24, 0x83	; 131
     6f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     6fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     702:	86 fd       	sbrc	r24, 6
     704:	fc cf       	rjmp	.-8      	; 0x6fe <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     706:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     70a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     70e:	78 94       	sei
     710:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     716:	08 95       	ret

00000718 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     718:	2f 92       	push	r2
     71a:	3f 92       	push	r3
     71c:	4f 92       	push	r4
     71e:	5f 92       	push	r5
     720:	6f 92       	push	r6
     722:	7f 92       	push	r7
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     73e:	fc 01       	movw	r30, r24
     740:	c2 81       	ldd	r28, Z+2	; 0x02
     742:	d3 81       	ldd	r29, Z+3	; 0x03
     744:	c4 38       	cpi	r28, 0x84	; 132
     746:	f3 e0       	ldi	r31, 0x03	; 3
     748:	df 07       	cpc	r29, r31
     74a:	0c f0       	brlt	.+2      	; 0x74e <estimate_distance+0x36>
     74c:	7e c0       	rjmp	.+252    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
        if (dist->high_gain > kilo_irhigh[0]) {
     74e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_irhigh>
     752:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_irhigh+0x1>
     756:	8c 17       	cp	r24, r28
     758:	9d 07       	cpc	r25, r29
     75a:	08 f4       	brcc	.+2      	; 0x75e <estimate_distance+0x46>
     75c:	6f c0       	rjmp	.+222    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     75e:	e7 e3       	ldi	r30, 0x37	; 55
     760:	f1 e0       	ldi	r31, 0x01	; 1
     762:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     764:	81 91       	ld	r24, Z+
     766:	91 91       	ld	r25, Z+
     768:	8c 17       	cp	r24, r28
     76a:	9d 07       	cpc	r25, r29
     76c:	20 f0       	brcs	.+8      	; 0x776 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     76e:	1f 5f       	subi	r17, 0xFF	; 255
     770:	1e 30       	cpi	r17, 0x0E	; 14
     772:	c1 f7       	brne	.-16     	; 0x764 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     774:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     776:	81 2f       	mov	r24, r17
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	fc 01       	movw	r30, r24
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	eb 5c       	subi	r30, 0xCB	; 203
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	e0 80       	ld	r14, Z
     786:	f1 80       	ldd	r15, Z+1	; 0x01
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	fc 01       	movw	r30, r24
     78e:	ed 5c       	subi	r30, 0xCD	; 205
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	b7 01       	movw	r22, r14
     798:	68 1b       	sub	r22, r24
     79a:	79 0b       	sbc	r23, r25
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     7ac:	4b 01       	movw	r8, r22
     7ae:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     7b0:	be 01       	movw	r22, r28
     7b2:	0d 2e       	mov	r0, r29
     7b4:	00 0c       	add	r0, r0
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__floatsisf>
     7be:	2b 01       	movw	r4, r22
     7c0:	3c 01       	movw	r6, r24
     7c2:	b7 01       	movw	r22, r14
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	61 2f       	mov	r22, r17
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     7f2:	a5 01       	movw	r20, r10
     7f4:	94 01       	movw	r18, r8
     7f6:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
     7fe:	c7 01       	movw	r24, r14
     800:	b6 01       	movw	r22, r12
     802:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c3 01       	movw	r24, r6
     80c:	b2 01       	movw	r22, r4
     80e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e2       	ldi	r20, 0x20	; 32
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     81e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fixsfsi>
     822:	7b 01       	movw	r14, r22
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fixsfsi>
     82c:	ab 01       	movw	r20, r22
     82e:	bc 01       	movw	r22, r24
     830:	c7 01       	movw	r24, r14
     832:	ba 01       	movw	r22, r20
     834:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodhi4>
     838:	16 2f       	mov	r17, r22
     83a:	01 c0       	rjmp	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     83c:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     83e:	cd 3b       	cpi	r28, 0xBD	; 189
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	d8 07       	cpc	r29, r24
     844:	0c f4       	brge	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	ca c0       	rjmp	.+404    	; 0x9dc <__stack+0xdd>
     848:	01 c0       	rjmp	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     84a:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     84c:	f1 01       	movw	r30, r2
     84e:	c0 80       	ld	r12, Z
     850:	d1 80       	ldd	r13, Z+1	; 0x01
     852:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <kilo_irlow>
     856:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <kilo_irlow+0x1>
     85a:	8c 15       	cp	r24, r12
     85c:	9d 05       	cpc	r25, r13
     85e:	88 f0       	brcs	.+34     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     860:	ee e5       	ldi	r30, 0x5E	; 94
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     86a:	e1 90       	ld	r14, Z+
     86c:	f1 90       	ld	r15, Z+
     86e:	ec 14       	cp	r14, r12
     870:	fd 04       	cpc	r15, r13
     872:	08 f4       	brcc	.+2      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     874:	58 c0       	rjmp	.+176    	; 0x926 <__stack+0x27>
     876:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     878:	8e 30       	cpi	r24, 0x0E	; 14
     87a:	91 05       	cpc	r25, r1
     87c:	a9 f7       	brne	.-22     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     87e:	0a e5       	ldi	r16, 0x5A	; 90
     880:	01 c0       	rjmp	.+2      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     882:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     884:	1f 3f       	cpi	r17, 0xFF	; 255
     886:	09 f4       	brne	.+2      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     888:	4b c0       	rjmp	.+150    	; 0x920 <__stack+0x21>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     88a:	be 01       	movw	r22, r28
     88c:	dd 0f       	add	r29, r29
     88e:	88 0b       	sbc	r24, r24
     890:	99 0b       	sbc	r25, r25
     892:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__floatsisf>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	61 2f       	mov	r22, r17
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     8a6:	4b 01       	movw	r8, r22
     8a8:	5c 01       	movw	r10, r24
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	81 e6       	ldi	r24, 0x61	; 97
     8b4:	94 e4       	ldi	r25, 0x44	; 68
     8b6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	c5 01       	movw	r24, r10
     8c0:	b4 01       	movw	r22, r8
     8c2:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     8c6:	4b 01       	movw	r8, r22
     8c8:	5c 01       	movw	r10, r24
     8ca:	60 2f       	mov	r22, r16
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     8d6:	2b 01       	movw	r4, r22
     8d8:	3c 01       	movw	r6, r24
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	4f e2       	ldi	r20, 0x2F	; 47
     8e0:	54 e4       	ldi	r21, 0x44	; 68
     8e2:	c7 01       	movw	r24, r14
     8e4:	b6 01       	movw	r22, r12
     8e6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
     8ea:	9b 01       	movw	r18, r22
     8ec:	ac 01       	movw	r20, r24
     8ee:	c3 01       	movw	r24, r6
     8f0:	b2 01       	movw	r22, r4
     8f2:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c5 01       	movw	r24, r10
     8fc:	b4 01       	movw	r22, r8
     8fe:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	48 e4       	ldi	r20, 0x48	; 72
     908:	53 e4       	ldi	r21, 0x43	; 67
     90a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__divsf3>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	44 e0       	ldi	r20, 0x04	; 4
     914:	52 e4       	ldi	r21, 0x42	; 66
     916:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     91a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fixunssfsi>
     91e:	60 c0       	rjmp	.+192    	; 0x9e0 <__stack+0xe1>
        } else {
            return 33 + dist_low;
     920:	61 e2       	ldi	r22, 0x21	; 33
     922:	60 0f       	add	r22, r16
     924:	5d c0       	rjmp	.+186    	; 0x9e0 <__stack+0xe1>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	fc 01       	movw	r30, r24
     92c:	e6 5a       	subi	r30, 0xA6	; 166
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	b7 01       	movw	r22, r14
     936:	68 1b       	sub	r22, r24
     938:	79 0b       	sbc	r23, r25
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     94e:	b6 01       	movw	r22, r12
     950:	dd 0c       	add	r13, r13
     952:	88 0b       	sbc	r24, r24
     954:	99 0b       	sbc	r25, r25
     956:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__floatsisf>
     95a:	2b 01       	movw	r4, r22
     95c:	3c 01       	movw	r6, r24
     95e:	b7 01       	movw	r22, r14
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     968:	6b 01       	movw	r12, r22
     96a:	7c 01       	movw	r14, r24
     96c:	63 2d       	mov	r22, r3
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__floatunsisf>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	5f e3       	ldi	r21, 0x3F	; 63
     980:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	a9 01       	movw	r20, r18
     98a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3>
     98e:	a5 01       	movw	r20, r10
     990:	94 01       	movw	r18, r8
     992:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     996:	9b 01       	movw	r18, r22
     998:	ac 01       	movw	r20, r24
     99a:	c7 01       	movw	r24, r14
     99c:	b6 01       	movw	r22, r12
     99e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c3 01       	movw	r24, r6
     9a8:	b2 01       	movw	r22, r4
     9aa:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e2       	ldi	r20, 0x20	; 32
     9b4:	51 e4       	ldi	r21, 0x41	; 65
     9b6:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulsf3>
     9ba:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fixsfsi>
     9be:	7b 01       	movw	r14, r22
     9c0:	c5 01       	movw	r24, r10
     9c2:	b4 01       	movw	r22, r8
     9c4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fixsfsi>
     9c8:	ab 01       	movw	r20, r22
     9ca:	bc 01       	movw	r22, r24
     9cc:	c7 01       	movw	r24, r14
     9ce:	ba 01       	movw	r22, r20
     9d0:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodhi4>
     9d4:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     9d6:	6f 3f       	cpi	r22, 0xFF	; 255
     9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0xdd>
     9da:	54 cf       	rjmp	.-344    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     9dc:	61 e2       	ldi	r22, 0x21	; 33
     9de:	61 0f       	add	r22, r17
    }
}
     9e0:	86 2f       	mov	r24, r22
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	08 95       	ret

00000a08 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	ef 93       	push	r30
     a28:	ff 93       	push	r31
    tx_clock += tx_increment;
     a2a:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <tx_clock>
     a2e:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <tx_clock+0x1>
     a32:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <tx_increment>
     a36:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <tx_increment+0x1>
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_clock+0x1>
     a42:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_clock>
    tx_increment = 0xFF;
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <tx_increment+0x1>
     a4e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <tx_increment>
    OCR0A = tx_increment;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     a56:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <kilo_ticks>
     a5a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <kilo_ticks+0x1>
     a5e:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <kilo_ticks+0x2>
     a62:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <kilo_ticks+0x3>
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	a1 1d       	adc	r26, r1
     a6a:	b1 1d       	adc	r27, r1
     a6c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <kilo_ticks>
     a70:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <kilo_ticks+0x1>
     a74:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <kilo_ticks+0x2>
     a78:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a7c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>
     a80:	81 11       	cpse	r24, r1
     a82:	2d c0       	rjmp	.+90     	; 0xade <__vector_14+0xd6>
     a84:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <kilo_tx_period>
     a88:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <kilo_tx_period+0x1>
     a8c:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <tx_clock>
     a90:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <tx_clock+0x1>
     a94:	82 17       	cp	r24, r18
     a96:	93 07       	cpc	r25, r19
     a98:	10 f5       	brcc	.+68     	; 0xade <__vector_14+0xd6>
     a9a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	f1 f4       	brne	.+60     	; 0xade <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     aa2:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     aa6:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     aaa:	09 95       	icall
        if (msg) {
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	b9 f0       	breq	.+46     	; 0xade <__vector_14+0xd6>
            if (message_send(msg)) {
     ab0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <message_send>
     ab4:	88 23       	and	r24, r24
     ab6:	51 f0       	breq	.+20     	; 0xacc <__vector_14+0xc4>
                kilo_message_tx_success();
     ab8:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     abc:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     ac0:	09 95       	icall
                tx_clock = 0;
     ac2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <tx_clock+0x1>
     ac6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tx_clock>
     aca:	09 c0       	rjmp	.+18     	; 0xade <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     acc:	0e 94 88 00 	call	0x110	; 0x110 <message_tx_success+0x2>
     ad0:	9c 01       	movw	r18, r24
     ad2:	33 27       	eor	r19, r19
     ad4:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <tx_increment+0x1>
     ad8:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <tx_increment>
                OCR0A = tx_increment;
     adc:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	bf 91       	pop	r27
     ae4:	af 91       	pop	r26
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	7f 91       	pop	r23
     aec:	6f 91       	pop	r22
     aee:	5f 91       	pop	r21
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     b00:	80 ff       	sbrs	r24, 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <set_color+0x8>
        DDRD |= (1<<5);
     b04:	55 9a       	sbi	0x0a, 5	; 10
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     b08:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     b0a:	81 ff       	sbrs	r24, 1
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <set_color+0x12>
        DDRD |= (1<<4);
     b0e:	54 9a       	sbi	0x0a, 4	; 10
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     b12:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     b14:	82 ff       	sbrs	r24, 2
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <set_color+0x1c>
        DDRC |= (1<<3);
     b18:	3b 9a       	sbi	0x07, 3	; 7
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     b1c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     b1e:	83 ff       	sbrs	r24, 3
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <set_color+0x26>
        DDRC |= (1<<2);
     b22:	3a 9a       	sbi	0x07, 2	; 7
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     b26:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     b28:	84 ff       	sbrs	r24, 4
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <set_color+0x30>
        DDRC |= (1<<5);
     b2c:	3d 9a       	sbi	0x07, 5	; 7
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     b30:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     b32:	85 ff       	sbrs	r24, 5
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <set_color+0x3a>
        DDRC |= (1<<4);
     b36:	3c 9a       	sbi	0x07, 4	; 7
     b38:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     b3a:	3c 98       	cbi	0x07, 4	; 7
     b3c:	08 95       	ret

00000b3e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     b3e:	8c 01       	movw	r16, r24
     b40:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b42:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b44:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b4a:	98 e1       	ldi	r25, 0x18	; 24
     b4c:	c9 2e       	mov	r12, r25
     b4e:	29 e2       	ldi	r18, 0x29	; 41
     b50:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b52:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <kilo_state>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e7 30       	cpi	r30, 0x07	; 7
     b5a:	f1 05       	cpc	r31, r1
     b5c:	d0 f7       	brcc	.-12     	; 0xb52 <kilo_start+0x14>
     b5e:	ec 5c       	subi	r30, 0xCC	; 204
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__tablejump2__>
            case SLEEPING:
                cli();
     b66:	f8 94       	cli
                acomp_off();
     b68:	80 b7       	in	r24, 0x30	; 48
     b6a:	87 7f       	andi	r24, 0xF7	; 247
     b6c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b72:	8f 77       	andi	r24, 0x7F	; 127
     b74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     b78:	14 b8       	out	0x04, r1	; 4
     b7a:	17 b8       	out	0x07, r1	; 7
     b7c:	1a b8       	out	0x0a, r1	; 10
     b7e:	15 b8       	out	0x05, r1	; 5
     b80:	18 b8       	out	0x08, r1	; 8
     b82:	1b b8       	out	0x0b, r1	; 11
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	a8 95       	wdr
     b8a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b9e:	83 b7       	in	r24, 0x33	; 51
     ba0:	81 7f       	andi	r24, 0xF1	; 241
     ba2:	84 60       	ori	r24, 0x04	; 4
     ba4:	83 bf       	out	0x33, r24	; 51
                cli();
     ba6:	f8 94       	cli
                sleep_enable();
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	83 bf       	out	0x33, r24	; 51
                sei();
     bae:	78 94       	sei
                sleep_cpu();
     bb0:	88 95       	sleep
                sleep_disable();
     bb2:	83 b7       	in	r24, 0x33	; 51
     bb4:	8e 7f       	andi	r24, 0xFE	; 254
     bb6:	83 bf       	out	0x33, r24	; 51
                sei();
     bb8:	78 94       	sei
                rx_busy = 0;
     bba:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
                ports_on();
     bbe:	52 9a       	sbi	0x0a, 2	; 10
     bc0:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     bc2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bcc:	87 e5       	ldi	r24, 0x57	; 87
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <kilo_start+0x92>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <kilo_start+0x98>
     bd6:	00 00       	nop
                _delay_us(300);
                acomp_on();
     bd8:	80 b7       	in	r24, 0x30	; 48
     bda:	88 61       	ori	r24, 0x18	; 24
     bdc:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     bde:	8f e3       	ldi	r24, 0x3F	; 63
     be0:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be4:	ef e1       	ldi	r30, 0x1F	; 31
     be6:	fe e4       	ldi	r31, 0x4E	; 78
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <kilo_start+0xaa>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <kilo_start+0xb0>
     bee:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     bf0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_busy>
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <kilo_start+0xbc>
     bf8:	50 c0       	rjmp	.+160    	; 0xc9a <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c00:	ff ef       	ldi	r31, 0xFF	; 255
     c02:	20 e7       	ldi	r18, 0x70	; 112
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	f1 50       	subi	r31, 0x01	; 1
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <kilo_start+0xc8>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <kilo_start+0xd2>
     c10:	00 00       	nop
     c12:	43 c0       	rjmp	.+134    	; 0xc9a <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c1a:	ef ec       	ldi	r30, 0xCF	; 207
     c1c:	f7 e0       	ldi	r31, 0x07	; 7
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <kilo_start+0xe0>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <kilo_start+0xe6>
     c24:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c2c:	ff ef       	ldi	r31, 0xFF	; 255
     c2e:	21 ee       	ldi	r18, 0xE1	; 225
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	f1 50       	subi	r31, 0x01	; 1
     c34:	20 40       	sbci	r18, 0x00	; 0
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	e1 f7       	brne	.-8      	; 0xc32 <kilo_start+0xf4>
     c3a:	2c c0       	rjmp	.+88     	; 0xc94 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     c3c:	0e 94 6f 03 	call	0x6de	; 0x6de <get_voltage>
                if(voltage > 682)
     c40:	8b 3a       	cpi	r24, 0xAB	; 171
     c42:	e2 e0       	ldi	r30, 0x02	; 2
     c44:	9e 07       	cpc	r25, r30
     c46:	24 f0       	brlt	.+8      	; 0xc50 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     c48:	8c e0       	ldi	r24, 0x0C	; 12
     c4a:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c4e:	81 cf       	rjmp	.-254    	; 0xb52 <kilo_start+0x14>
                else if(voltage > 648)
     c50:	89 38       	cpi	r24, 0x89	; 137
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	9f 07       	cpc	r25, r31
     c56:	14 f0       	brlt	.+4      	; 0xc5c <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     c58:	80 e3       	ldi	r24, 0x30	; 48
     c5a:	f7 cf       	rjmp	.-18     	; 0xc4a <kilo_start+0x10c>
                else if(voltage > 614)
     c5c:	87 36       	cpi	r24, 0x67	; 103
     c5e:	92 40       	sbci	r25, 0x02	; 2
     c60:	14 f0       	brlt	.+4      	; 0xc66 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     c62:	8f e0       	ldi	r24, 0x0F	; 15
     c64:	f2 cf       	rjmp	.-28     	; 0xc4a <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	f0 cf       	rjmp	.-32     	; 0xc4a <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     c6a:	48 99       	sbic	0x09, 0	; 9
     c6c:	16 c0       	rjmp	.+44     	; 0xc9a <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c74:	8f ec       	ldi	r24, 0xCF	; 207
     c76:	97 e0       	ldi	r25, 0x07	; 7
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <kilo_start+0x13a>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <kilo_start+0x140>
     c7e:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
     c86:	9f ef       	ldi	r25, 0xFF	; 255
     c88:	e1 ee       	ldi	r30, 0xE1	; 225
     c8a:	f4 e0       	ldi	r31, 0x04	; 4
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	e0 40       	sbci	r30, 0x00	; 0
     c90:	f0 40       	sbci	r31, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <kilo_start+0x14e>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <kilo_start+0x158>
     c96:	00 00       	nop
     c98:	5c cf       	rjmp	.-328    	; 0xb52 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	d6 cf       	rjmp	.-84     	; 0xc4a <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     c9e:	d1 11       	cpse	r29, r1
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <kilo_start+0x168>
                    setup();
     ca2:	f8 01       	movw	r30, r16
     ca4:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ca6:	d0 92 1b 01 	sts	0x011B, r13	; 0x80011b <kilo_state>
     caa:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     cac:	f7 01       	movw	r30, r14
     cae:	09 95       	icall
                break;
     cb0:	50 cf       	rjmp	.-352    	; 0xb52 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     cb2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cur_motion>
     cb6:	81 11       	cpse	r24, r1
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cbe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     cc2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_motion>
     cc6:	45 cf       	rjmp	.-374    	; 0xb52 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     cc8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cur_motion>
     ccc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <prev_motion>
     cd0:	98 17       	cp	r25, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <kilo_start+0x198>
     cd4:	3e cf       	rjmp	.-388    	; 0xb52 <kilo_start+0x14>
                        prev_motion = cur_motion;
     cd6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cur_motion>
     cda:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     cde:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cur_motion>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	89 f4       	brne	.+34     	; 0xd08 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ce6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cee:	8f e2       	ldi	r24, 0x2F	; 47
     cf0:	95 e7       	ldi	r25, 0x75	; 117
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <kilo_start+0x1b4>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <kilo_start+0x1ba>
     cf8:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cfa:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cfe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d02:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d06:	25 cf       	rjmp	.-438    	; 0xb52 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d08:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d10:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	59 f4       	brne	.+22     	; 0xd2e <kilo_start+0x1f0>
     d18:	ef e2       	ldi	r30, 0x2F	; 47
     d1a:	f5 e7       	ldi	r31, 0x75	; 117
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <kilo_start+0x1de>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <kilo_start+0x1e4>
     d22:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     d24:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d28:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     d2c:	10 c0       	rjmp	.+32     	; 0xd4e <kilo_start+0x210>
     d2e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d32:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d36:	8f e2       	ldi	r24, 0x2F	; 47
     d38:	95 e7       	ldi	r25, 0x75	; 117
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <kilo_start+0x1fc>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <kilo_start+0x202>
     d40:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d42:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <kilo_straight_right>
     d46:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d4a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d4e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d52:	ff ce       	rjmp	.-514    	; 0xb52 <kilo_start+0x14>

00000d54 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
    rx_timer_off();
     d62:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d66:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d6a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rx_leadingbit>
    rx_leadingbyte = 1;
     d74:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_leadingbyte>
    rx_busy = 0;
     d78:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
    adc_trigger_high_gain();
     d7c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d80:	93 ea       	ldi	r25, 0xA3	; 163
     d82:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d86:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     dbe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     dc2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     dcc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_leadingbit>
     dd0:	88 23       	and	r24, r24
     dd2:	21 f1       	breq	.+72     	; 0xe1c <__vector_23+0x84>
        rx_timer_on();
     dd4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dd8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ddc:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     de0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <rx_bytevalue>
        rx_leadingbit = 0;
     de4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_leadingbit>
        if (rx_leadingbyte) {
     de8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_leadingbyte>
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <__vector_23+0x5a>
     df0:	af c1       	rjmp	.+862    	; 0x1150 <__vector_23+0x3b8>
            adc_finish_conversion();
     df2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     df6:	86 fd       	sbrc	r24, 6
     df8:	fc cf       	rjmp	.-8      	; 0xdf2 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     dfa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dfe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e02:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <rx_dist+0x3>
     e06:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_dist+0x2>
            adc_trigger_low_gain();
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e10:	93 ea       	ldi	r25, 0xA3	; 163
     e12:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e16:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e1a:	9a c1       	rjmp	.+820    	; 0x1150 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     e1c:	c9 01       	movw	r24, r18
     e1e:	87 58       	subi	r24, 0x87	; 135
     e20:	91 09       	sbc	r25, r1
     e22:	84 37       	cpi	r24, 0x74	; 116
     e24:	99 40       	sbci	r25, 0x09	; 9
     e26:	a0 f0       	brcs	.+40     	; 0xe50 <__vector_23+0xb8>
            rx_timer_off();
     e28:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e2c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e30:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     e34:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <rx_leadingbit>
            rx_leadingbyte = 1;
     e38:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <rx_leadingbyte>
            rx_busy = 0;
     e3c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
            adc_trigger_high_gain();
     e40:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e44:	83 ea       	ldi	r24, 0xA3	; 163
     e46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e4a:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e4e:	80 c1       	rjmp	.+768    	; 0x1150 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     e50:	26 58       	subi	r18, 0x86	; 134
     e52:	31 09       	sbc	r19, r1
     e54:	a4 ef       	ldi	r26, 0xF4	; 244
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	0e 94 b0 09 	call	0x1360	; 0x1360 <__umulhisi3>
     e5c:	8c 01       	movw	r16, r24
     e5e:	22 27       	eor	r18, r18
     e60:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     e62:	08 30       	cpi	r16, 0x08	; 8
     e64:	60 f4       	brcc	.+24     	; 0xe7e <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <__vector_23+0xd6>
     e6c:	88 0f       	add	r24, r24
     e6e:	0a 95       	dec	r16
     e70:	ea f7       	brpl	.-6      	; 0xe6c <__vector_23+0xd4>
     e72:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <rx_bytevalue>
     e76:	89 2b       	or	r24, r25
     e78:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <rx_bytevalue>
     e7c:	69 c1       	rjmp	.+722    	; 0x1150 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e7e:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <rx_leadingbit>
                if (rx_leadingbyte) {
     e82:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_leadingbyte>
     e86:	88 23       	and	r24, r24
     e88:	41 f1       	breq	.+80     	; 0xeda <__vector_23+0x142>
                    adc_finish_conversion();
     e8a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e8e:	86 fd       	sbrc	r24, 6
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e92:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e96:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e9a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <rx_dist+0x1>
     e9e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <rx_dist>
                    adc_trigger_high_gain();
     ea2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ea6:	83 ea       	ldi	r24, 0xA3	; 163
     ea8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     eb2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <rx_bytevalue>
     eb6:	99 23       	and	r25, r25
     eb8:	59 f0       	breq	.+22     	; 0xed0 <__vector_23+0x138>
                        rx_timer_off();
     eba:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ebe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ec2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ec6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_leadingbyte>
                        rx_busy = 0;
     eca:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>
     ece:	40 c1       	rjmp	.+640    	; 0x1150 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     ed0:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_leadingbyte>
                        rx_byteindex = 0;
     ed4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <rx_byteindex>
     ed8:	3b c1       	rjmp	.+630    	; 0x1150 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     eda:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <rx_byteindex>
     ede:	e8 2f       	mov	r30, r24
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e2 58       	subi	r30, 0x82	; 130
     ee4:	fe 4f       	sbci	r31, 0xFE	; 254
     ee6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <rx_bytevalue>
     eea:	90 83       	st	Z, r25
                    rx_byteindex++;
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ef2:	8c 30       	cpi	r24, 0x0C	; 12
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_23+0x160>
     ef6:	2c c1       	rjmp	.+600    	; 0x1150 <__vector_23+0x3b8>
                        rx_timer_off();
     ef8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     efc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f00:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f04:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <rx_leadingbyte>
                        rx_busy = 0;
     f08:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     f0c:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <rx_msg+0xa>
     f10:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <rx_msg+0xb>
     f14:	8e e7       	ldi	r24, 0x7E	; 126
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 bb 08 	call	0x1176	; 0x1176 <message_crc>
     f1c:	08 17       	cp	r16, r24
     f1e:	19 07       	cpc	r17, r25
     f20:	09 f0       	breq	.+2      	; 0xf24 <__vector_23+0x18c>
     f22:	16 c1       	rjmp	.+556    	; 0x1150 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     f24:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <rx_msg+0x9>
     f28:	e7 fd       	sbrc	r30, 7
     f2a:	0a c0       	rjmp	.+20     	; 0xf40 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     f2c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     f30:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     f34:	63 e5       	ldi	r22, 0x53	; 83
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	8e e7       	ldi	r24, 0x7E	; 126
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	09 95       	icall
     f3e:	08 c1       	rjmp	.+528    	; 0x1150 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f40:	88 e7       	ldi	r24, 0x78	; 120
     f42:	8e 0f       	add	r24, r30
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	30 f0       	brcs	.+12     	; 0xf54 <__vector_23+0x1bc>
        motors_off();
     f48:	53 98       	cbi	0x0a, 3	; 10
     f4a:	23 98       	cbi	0x04, 3	; 4
     f4c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f50:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     f54:	8e 2f       	mov	r24, r30
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	e0 58       	subi	r30, 0x80	; 128
     f5c:	f1 09       	sbc	r31, r1
     f5e:	eb 30       	cpi	r30, 0x0B	; 11
     f60:	f1 05       	cpc	r31, r1
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__vector_23+0x1ce>
     f64:	f5 c0       	rjmp	.+490    	; 0x1150 <__vector_23+0x3b8>
     f66:	e5 5c       	subi	r30, 0xC5	; 197
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     f6e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f72:	8d 7f       	andi	r24, 0xFD	; 253
     f74:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f78:	16 bc       	out	0x26, r1	; 38
            bootload();
     f7a:	e0 e0       	ldi	r30, 0x00	; 0
     f7c:	f0 e7       	ldi	r31, 0x70	; 112
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f80:	e0 e0       	ldi	r30, 0x00	; 0
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f86:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <kilo_state>
     f8a:	e2 c0       	rjmp	.+452    	; 0x1150 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	b2 c0       	rjmp	.+356    	; 0x10f4 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	b0 c0       	rjmp	.+352    	; 0x10f4 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	ae c0       	rjmp	.+348    	; 0x10f4 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f98:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <__vector_23+0x20a>
     fa0:	d7 c0       	rjmp	.+430    	; 0x1150 <__vector_23+0x3b8>
     fa2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	09 f4       	brne	.+2      	; 0xfac <__vector_23+0x214>
     faa:	d2 c0       	rjmp	.+420    	; 0x1150 <__vector_23+0x3b8>
                motors_on();
     fac:	53 9a       	sbi	0x0a, 3	; 10
     fae:	23 9a       	sbi	0x04, 3	; 4
     fb0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fb4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	9c c0       	rjmp	.+312    	; 0x10f4 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fbc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg>
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__vector_23+0x22e>
     fc4:	4b c0       	rjmp	.+150    	; 0x105c <__vector_23+0x2c4>
     fc6:	80 f4       	brcc	.+32     	; 0xfe8 <__vector_23+0x250>
     fc8:	88 23       	and	r24, r24
     fca:	a9 f0       	breq	.+42     	; 0xff6 <__vector_23+0x25e>
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <__vector_23+0x23a>
     fd0:	82 c0       	rjmp	.+260    	; 0x10d6 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     fd2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x1>
     fd6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <rx_msg+0x2>
     fda:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <kilo_uid+0x1>
     fde:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_uid>
                    cur_motion = MOVE_STOP;
     fe2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <cur_motion>
     fe6:	77 c0       	rjmp	.+238    	; 0x10d6 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	09 f4       	brne	.+2      	; 0xfee <__vector_23+0x256>
     fec:	49 c0       	rjmp	.+146    	; 0x1080 <__vector_23+0x2e8>
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	09 f4       	brne	.+2      	; 0xff4 <__vector_23+0x25c>
     ff2:	58 c0       	rjmp	.+176    	; 0x10a4 <__vector_23+0x30c>
     ff4:	70 c0       	rjmp	.+224    	; 0x10d6 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     ff6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
     ffa:	86 30       	cpi	r24, 0x06	; 6
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_23+0x268>
     ffe:	6b c0       	rjmp	.+214    	; 0x10d6 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1000:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <kilo_uid>
    1004:	80 eb       	ldi	r24, 0xB0	; 176
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    100c:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <kilo_uid+0x1>
    1010:	81 eb       	ldi	r24, 0xB1	; 177
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1018:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_turn_left>
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1024:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_turn_right>
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1030:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <kilo_straight_left>
    1034:	8c e0       	ldi	r24, 0x0C	; 12
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    103c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_straight_right>
    1040:	84 e1       	ldi	r24, 0x14	; 20
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_write_byte>
                        motors_off();
    1048:	53 98       	cbi	0x0a, 3	; 10
    104a:	23 98       	cbi	0x04, 3	; 4
    104c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1050:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <kilo_state>
    105a:	3d c0       	rjmp	.+122    	; 0x10d6 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    105c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cur_motion>
    1060:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x3>
    1064:	91 30       	cpi	r25, 0x01	; 1
    1066:	21 f4       	brne	.+8      	; 0x1070 <__vector_23+0x2d8>
    1068:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_turn_left>
    106c:	89 17       	cp	r24, r25
    106e:	99 f1       	breq	.+102    	; 0x10d6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1070:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_motion>
                        cur_motion = MOVE_LEFT;
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    107a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_turn_left>
    107e:	2b c0       	rjmp	.+86     	; 0x10d6 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1080:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cur_motion>
    1084:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rx_msg+0x4>
    1088:	92 30       	cpi	r25, 0x02	; 2
    108a:	21 f4       	brne	.+8      	; 0x1094 <__vector_23+0x2fc>
    108c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_turn_right>
    1090:	89 17       	cp	r24, r25
    1092:	09 f1       	breq	.+66     	; 0x10d6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1094:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    109e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_right>
    10a2:	19 c0       	rjmp	.+50     	; 0x10d6 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10a4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <cur_motion>
    10a8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_msg+0x6>
    10ac:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <rx_msg+0x5>
    10b0:	23 30       	cpi	r18, 0x03	; 3
    10b2:	41 f4       	brne	.+16     	; 0x10c4 <__vector_23+0x32c>
    10b4:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <kilo_straight_right>
    10b8:	82 13       	cpse	r24, r18
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__vector_23+0x32c>
    10bc:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <kilo_straight_left>
    10c0:	92 17       	cp	r25, r18
    10c2:	49 f0       	breq	.+18     	; 0x10d6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    10c4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    10c8:	23 e0       	ldi	r18, 0x03	; 3
    10ca:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    10ce:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    10d2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10d6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg>
    10da:	88 23       	and	r24, r24
    10dc:	c9 f1       	breq	.+114    	; 0x1150 <__vector_23+0x3b8>
    10de:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
    10e2:	86 30       	cpi	r24, 0x06	; 6
    10e4:	a9 f1       	breq	.+106    	; 0x1150 <__vector_23+0x3b8>
                motors_on();
    10e6:	53 9a       	sbi	0x0a, 3	; 10
    10e8:	23 9a       	sbi	0x04, 3	; 4
    10ea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <kilo_state>
    10f8:	2b c0       	rjmp	.+86     	; 0x1150 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_state>
    10fe:	86 30       	cpi	r24, 0x06	; 6
    1100:	81 f0       	breq	.+32     	; 0x1122 <__vector_23+0x38a>
                motors_on();
    1102:	53 9a       	sbi	0x0a, 3	; 10
    1104:	23 9a       	sbi	0x04, 3	; 4
    1106:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    110a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 80 05 	call	0xb00	; 0xb00 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1114:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <cur_motion>
    1118:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_motion>
                kilo_state = MOVING;
    111c:	86 e0       	ldi	r24, 0x06	; 6
    111e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	00 90 7e 01 	lds	r0, 0x017E	; 0x80017e <rx_msg>
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <__vector_23+0x398>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <__vector_23+0x394>
    1134:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <kilo_uid>
    1138:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <kilo_uid+0x1>
    113c:	82 23       	and	r24, r18
    113e:	93 23       	and	r25, r19
    1140:	89 2b       	or	r24, r25
    1142:	21 f0       	breq	.+8      	; 0x114c <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <cur_motion>
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    114c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <cur_motion>
                    }
                }
            }
        }
    }
}
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1176:	fc 01       	movw	r30, r24
    1178:	9c 01       	movw	r18, r24
    117a:	26 5f       	subi	r18, 0xF6	; 246
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1182:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1184:	84 27       	eor	r24, r20
    1186:	08 2e       	mov	r0, r24
    1188:	82 95       	swap	r24
    118a:	80 7f       	andi	r24, 0xF0	; 240
    118c:	80 25       	eor	r24, r0
    118e:	09 2e       	mov	r0, r25
    1190:	98 2f       	mov	r25, r24
    1192:	82 95       	swap	r24
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	08 26       	eor	r0, r24
    1198:	86 95       	lsr	r24
    119a:	98 27       	eor	r25, r24
    119c:	89 27       	eor	r24, r25
    119e:	88 0f       	add	r24, r24
    11a0:	88 0f       	add	r24, r24
    11a2:	88 0f       	add	r24, r24
    11a4:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    11a6:	e2 17       	cp	r30, r18
    11a8:	f3 07       	cpc	r31, r19
    11aa:	59 f7       	brne	.-42     	; 0x1182 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    11ac:	08 95       	ret

000011ae <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    11ae:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    11b0:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    11b2:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    11b4:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <tx_mask>
    or tmpreg1, ddrreg
    11b8:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    11ba:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    11be:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_mask>
    11c2:	20 30       	cpi	r18, 0x00	; 0
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <message_send+0x22>
    11c6:	00 00       	nop
    11c8:	25 b1       	in	r18, 0x05	; 5
    11ca:	23 2b       	or	r18, r19
    11cc:	25 b9       	out	0x05, r18	; 5
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <message_send+0x2a>
    11d0:	00 00       	nop
    11d2:	00 00       	nop
    11d4:	00 00       	nop
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <message_send+0x2a>
    11d8:	00 00       	nop
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	30 95       	com	r19
    11e0:	25 b1       	in	r18, 0x05	; 5
    11e2:	23 23       	and	r18, r19
    11e4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    11e6:	2e ea       	ldi	r18, 0xAE	; 174
    11e8:	2a 95       	dec	r18
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    11ec:	2b ee       	ldi	r18, 0xEB	; 235

000011ee <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    11ee:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    11f0:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11f4:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11f6:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_mask>
    com tmpreg2
    11fa:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11fc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11fe:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1200:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1202:	0f be       	out	0x3f, r0	; 63
    return 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret

00001208 <nocollision>:
nocollision:
    nop
    1208:	00 00       	nop
    dec tmpreg1
    120a:	2a 95       	dec	r18
    brne checkcollision
    120c:	81 f7       	brne	.-32     	; 0x11ee <checkcollision>

    ldi tmpreg1, 0x01
    120e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1210:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_mask>
    1214:	20 30       	cpi	r18, 0x00	; 0
    1216:	29 f0       	breq	.+10     	; 0x1222 <nocollision+0x1a>
    1218:	00 00       	nop
    121a:	25 b1       	in	r18, 0x05	; 5
    121c:	23 2b       	or	r18, r19
    121e:	25 b9       	out	0x05, r18	; 5
    1220:	04 c0       	rjmp	.+8      	; 0x122a <nocollision+0x22>
    1222:	00 00       	nop
    1224:	00 00       	nop
    1226:	00 00       	nop
    1228:	00 c0       	rjmp	.+0      	; 0x122a <nocollision+0x22>
    122a:	00 00       	nop
    122c:	00 00       	nop
    122e:	00 00       	nop
    1230:	30 95       	com	r19
    1232:	25 b1       	in	r18, 0x05	; 5
    1234:	23 23       	and	r18, r19
    1236:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1238:	00 00       	nop
    123a:	24 e5       	ldi	r18, 0x54	; 84
    123c:	2a 95       	dec	r18
    123e:	f1 f7       	brne	.-4      	; 0x123c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1240:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1242:	8c e0       	ldi	r24, 0x0C	; 12

00001244 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1244:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1246:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1248:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    124a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    124c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    124e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1250:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1252:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1254:	50 e0       	ldi	r21, 0x00	; 0

00001256 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1256:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1258:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    125a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    125c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    125e:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_mask>
    1262:	20 30       	cpi	r18, 0x00	; 0
    1264:	29 f0       	breq	.+10     	; 0x1270 <sendbit+0x1a>
    1266:	00 00       	nop
    1268:	25 b1       	in	r18, 0x05	; 5
    126a:	23 2b       	or	r18, r19
    126c:	25 b9       	out	0x05, r18	; 5
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <sendbit+0x22>
    1270:	00 00       	nop
    1272:	00 00       	nop
    1274:	00 00       	nop
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <sendbit+0x22>
    1278:	00 00       	nop
    127a:	00 00       	nop
    127c:	00 00       	nop
    127e:	30 95       	com	r19
    1280:	25 b1       	in	r18, 0x05	; 5
    1282:	23 23       	and	r18, r19
    1284:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1286:	00 00       	nop
    1288:	21 e5       	ldi	r18, 0x51	; 81
    128a:	2a 95       	dec	r18
    128c:	f1 f7       	brne	.-4      	; 0x128a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    128e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1290:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1292:	9a 95       	dec	r25
    brne sendbit
    1294:	01 f7       	brne	.-64     	; 0x1256 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1296:	8a 95       	dec	r24
    brne sendbyte
    1298:	a9 f6       	brne	.-86     	; 0x1244 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    129a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    129c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    129e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    12a0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    12a2:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <tx_mask>
    com tmpreg2
    12a6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    12a8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    12aa:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    12ac:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    12ae:	0f be       	out	0x3f, r0	; 63
    return 1
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	08 95       	ret

000012b4 <main>:
    }
  }
}

int main() {
  kilo_init();
    12b4:	0e 94 a7 01 	call	0x34e	; 0x34e <kilo_init>
  kilo_message_rx = message_rx;
    12b8:	81 e7       	ldi	r24, 0x71	; 113
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <kilo_message_rx+0x1>
    12c0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <kilo_message_rx>
  kilo_message_tx = message_tx;
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    12cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    12d0:	87 e8       	ldi	r24, 0x87	; 135
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    12d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);
    12dc:	66 e7       	ldi	r22, 0x76	; 118
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	8c eb       	ldi	r24, 0xBC	; 188
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <kilo_start>
  return 0;
}
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret

000012ee <__divmodhi4>:
    12ee:	97 fb       	bst	r25, 7
    12f0:	07 2e       	mov	r0, r23
    12f2:	16 f4       	brtc	.+4      	; 0x12f8 <__divmodhi4+0xa>
    12f4:	00 94       	com	r0
    12f6:	07 d0       	rcall	.+14     	; 0x1306 <__divmodhi4_neg1>
    12f8:	77 fd       	sbrc	r23, 7
    12fa:	09 d0       	rcall	.+18     	; 0x130e <__divmodhi4_neg2>
    12fc:	0e 94 bf 09 	call	0x137e	; 0x137e <__udivmodhi4>
    1300:	07 fc       	sbrc	r0, 7
    1302:	05 d0       	rcall	.+10     	; 0x130e <__divmodhi4_neg2>
    1304:	3e f4       	brtc	.+14     	; 0x1314 <__divmodhi4_exit>

00001306 <__divmodhi4_neg1>:
    1306:	90 95       	com	r25
    1308:	81 95       	neg	r24
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__divmodhi4_neg2>:
    130e:	70 95       	com	r23
    1310:	61 95       	neg	r22
    1312:	7f 4f       	sbci	r23, 0xFF	; 255

00001314 <__divmodhi4_exit>:
    1314:	08 95       	ret

00001316 <__divmodsi4>:
    1316:	05 2e       	mov	r0, r21
    1318:	97 fb       	bst	r25, 7
    131a:	1e f4       	brtc	.+6      	; 0x1322 <__divmodsi4+0xc>
    131c:	00 94       	com	r0
    131e:	0e 94 a2 09 	call	0x1344	; 0x1344 <__negsi2>
    1322:	57 fd       	sbrc	r21, 7
    1324:	07 d0       	rcall	.+14     	; 0x1334 <__divmodsi4_neg2>
    1326:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__udivmodsi4>
    132a:	07 fc       	sbrc	r0, 7
    132c:	03 d0       	rcall	.+6      	; 0x1334 <__divmodsi4_neg2>
    132e:	4e f4       	brtc	.+18     	; 0x1342 <__divmodsi4_exit>
    1330:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__negsi2>

00001334 <__divmodsi4_neg2>:
    1334:	50 95       	com	r21
    1336:	40 95       	com	r20
    1338:	30 95       	com	r19
    133a:	21 95       	neg	r18
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	4f 4f       	sbci	r20, 0xFF	; 255
    1340:	5f 4f       	sbci	r21, 0xFF	; 255

00001342 <__divmodsi4_exit>:
    1342:	08 95       	ret

00001344 <__negsi2>:
    1344:	90 95       	com	r25
    1346:	80 95       	com	r24
    1348:	70 95       	com	r23
    134a:	61 95       	neg	r22
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	8f 4f       	sbci	r24, 0xFF	; 255
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	08 95       	ret

00001354 <__tablejump2__>:
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	05 90       	lpm	r0, Z+
    135a:	f4 91       	lpm	r31, Z
    135c:	e0 2d       	mov	r30, r0
    135e:	09 94       	ijmp

00001360 <__umulhisi3>:
    1360:	a2 9f       	mul	r26, r18
    1362:	b0 01       	movw	r22, r0
    1364:	b3 9f       	mul	r27, r19
    1366:	c0 01       	movw	r24, r0
    1368:	a3 9f       	mul	r26, r19
    136a:	70 0d       	add	r23, r0
    136c:	81 1d       	adc	r24, r1
    136e:	11 24       	eor	r1, r1
    1370:	91 1d       	adc	r25, r1
    1372:	b2 9f       	mul	r27, r18
    1374:	70 0d       	add	r23, r0
    1376:	81 1d       	adc	r24, r1
    1378:	11 24       	eor	r1, r1
    137a:	91 1d       	adc	r25, r1
    137c:	08 95       	ret

0000137e <__udivmodhi4>:
    137e:	aa 1b       	sub	r26, r26
    1380:	bb 1b       	sub	r27, r27
    1382:	51 e1       	ldi	r21, 0x11	; 17
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <__udivmodhi4_ep>

00001386 <__udivmodhi4_loop>:
    1386:	aa 1f       	adc	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	a6 17       	cp	r26, r22
    138c:	b7 07       	cpc	r27, r23
    138e:	10 f0       	brcs	.+4      	; 0x1394 <__udivmodhi4_ep>
    1390:	a6 1b       	sub	r26, r22
    1392:	b7 0b       	sbc	r27, r23

00001394 <__udivmodhi4_ep>:
    1394:	88 1f       	adc	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	5a 95       	dec	r21
    139a:	a9 f7       	brne	.-22     	; 0x1386 <__udivmodhi4_loop>
    139c:	80 95       	com	r24
    139e:	90 95       	com	r25
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	08 95       	ret

000013a6 <__udivmodsi4>:
    13a6:	a1 e2       	ldi	r26, 0x21	; 33
    13a8:	1a 2e       	mov	r1, r26
    13aa:	aa 1b       	sub	r26, r26
    13ac:	bb 1b       	sub	r27, r27
    13ae:	fd 01       	movw	r30, r26
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <__udivmodsi4_ep>

000013b2 <__udivmodsi4_loop>:
    13b2:	aa 1f       	adc	r26, r26
    13b4:	bb 1f       	adc	r27, r27
    13b6:	ee 1f       	adc	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	a2 17       	cp	r26, r18
    13bc:	b3 07       	cpc	r27, r19
    13be:	e4 07       	cpc	r30, r20
    13c0:	f5 07       	cpc	r31, r21
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <__udivmodsi4_ep>
    13c4:	a2 1b       	sub	r26, r18
    13c6:	b3 0b       	sbc	r27, r19
    13c8:	e4 0b       	sbc	r30, r20
    13ca:	f5 0b       	sbc	r31, r21

000013cc <__udivmodsi4_ep>:
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	1a 94       	dec	r1
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <__udivmodsi4_loop>
    13d8:	60 95       	com	r22
    13da:	70 95       	com	r23
    13dc:	80 95       	com	r24
    13de:	90 95       	com	r25
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
    13e4:	bd 01       	movw	r22, r26
    13e6:	cf 01       	movw	r24, r30
    13e8:	08 95       	ret

000013ea <__subsf3>:
    13ea:	50 58       	subi	r21, 0x80	; 128

000013ec <__addsf3>:
    13ec:	bb 27       	eor	r27, r27
    13ee:	aa 27       	eor	r26, r26
    13f0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__addsf3x>
    13f4:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_round>
    13f8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_pscA>
    13fc:	38 f0       	brcs	.+14     	; 0x140c <__addsf3+0x20>
    13fe:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_pscB>
    1402:	20 f0       	brcs	.+8      	; 0x140c <__addsf3+0x20>
    1404:	39 f4       	brne	.+14     	; 0x1414 <__addsf3+0x28>
    1406:	9f 3f       	cpi	r25, 0xFF	; 255
    1408:	19 f4       	brne	.+6      	; 0x1410 <__addsf3+0x24>
    140a:	26 f4       	brtc	.+8      	; 0x1414 <__addsf3+0x28>
    140c:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>
    1410:	0e f4       	brtc	.+2      	; 0x1414 <__addsf3+0x28>
    1412:	e0 95       	com	r30
    1414:	e7 fb       	bst	r30, 7
    1416:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>

0000141a <__addsf3x>:
    141a:	e9 2f       	mov	r30, r25
    141c:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fp_split3>
    1420:	58 f3       	brcs	.-42     	; 0x13f8 <__addsf3+0xc>
    1422:	ba 17       	cp	r27, r26
    1424:	62 07       	cpc	r22, r18
    1426:	73 07       	cpc	r23, r19
    1428:	84 07       	cpc	r24, r20
    142a:	95 07       	cpc	r25, r21
    142c:	20 f0       	brcs	.+8      	; 0x1436 <__addsf3x+0x1c>
    142e:	79 f4       	brne	.+30     	; 0x144e <__addsf3x+0x34>
    1430:	a6 f5       	brtc	.+104    	; 0x149a <__addsf3x+0x80>
    1432:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_zero>
    1436:	0e f4       	brtc	.+2      	; 0x143a <__addsf3x+0x20>
    1438:	e0 95       	com	r30
    143a:	0b 2e       	mov	r0, r27
    143c:	ba 2f       	mov	r27, r26
    143e:	a0 2d       	mov	r26, r0
    1440:	0b 01       	movw	r0, r22
    1442:	b9 01       	movw	r22, r18
    1444:	90 01       	movw	r18, r0
    1446:	0c 01       	movw	r0, r24
    1448:	ca 01       	movw	r24, r20
    144a:	a0 01       	movw	r20, r0
    144c:	11 24       	eor	r1, r1
    144e:	ff 27       	eor	r31, r31
    1450:	59 1b       	sub	r21, r25
    1452:	99 f0       	breq	.+38     	; 0x147a <__addsf3x+0x60>
    1454:	59 3f       	cpi	r21, 0xF9	; 249
    1456:	50 f4       	brcc	.+20     	; 0x146c <__addsf3x+0x52>
    1458:	50 3e       	cpi	r21, 0xE0	; 224
    145a:	68 f1       	brcs	.+90     	; 0x14b6 <__addsf3x+0x9c>
    145c:	1a 16       	cp	r1, r26
    145e:	f0 40       	sbci	r31, 0x00	; 0
    1460:	a2 2f       	mov	r26, r18
    1462:	23 2f       	mov	r18, r19
    1464:	34 2f       	mov	r19, r20
    1466:	44 27       	eor	r20, r20
    1468:	58 5f       	subi	r21, 0xF8	; 248
    146a:	f3 cf       	rjmp	.-26     	; 0x1452 <__addsf3x+0x38>
    146c:	46 95       	lsr	r20
    146e:	37 95       	ror	r19
    1470:	27 95       	ror	r18
    1472:	a7 95       	ror	r26
    1474:	f0 40       	sbci	r31, 0x00	; 0
    1476:	53 95       	inc	r21
    1478:	c9 f7       	brne	.-14     	; 0x146c <__addsf3x+0x52>
    147a:	7e f4       	brtc	.+30     	; 0x149a <__addsf3x+0x80>
    147c:	1f 16       	cp	r1, r31
    147e:	ba 0b       	sbc	r27, r26
    1480:	62 0b       	sbc	r22, r18
    1482:	73 0b       	sbc	r23, r19
    1484:	84 0b       	sbc	r24, r20
    1486:	ba f0       	brmi	.+46     	; 0x14b6 <__addsf3x+0x9c>
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	a1 f0       	breq	.+40     	; 0x14b4 <__addsf3x+0x9a>
    148c:	ff 0f       	add	r31, r31
    148e:	bb 1f       	adc	r27, r27
    1490:	66 1f       	adc	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	c2 f7       	brpl	.-16     	; 0x1488 <__addsf3x+0x6e>
    1498:	0e c0       	rjmp	.+28     	; 0x14b6 <__addsf3x+0x9c>
    149a:	ba 0f       	add	r27, r26
    149c:	62 1f       	adc	r22, r18
    149e:	73 1f       	adc	r23, r19
    14a0:	84 1f       	adc	r24, r20
    14a2:	48 f4       	brcc	.+18     	; 0x14b6 <__addsf3x+0x9c>
    14a4:	87 95       	ror	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	f7 95       	ror	r31
    14ae:	9e 3f       	cpi	r25, 0xFE	; 254
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <__addsf3x+0x9a>
    14b2:	b0 cf       	rjmp	.-160    	; 0x1414 <__addsf3+0x28>
    14b4:	93 95       	inc	r25
    14b6:	88 0f       	add	r24, r24
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <__addsf3x+0xa2>
    14ba:	99 27       	eor	r25, r25
    14bc:	ee 0f       	add	r30, r30
    14be:	97 95       	ror	r25
    14c0:	87 95       	ror	r24
    14c2:	08 95       	ret

000014c4 <__divsf3>:
    14c4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__divsf3x>
    14c8:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_round>
    14cc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_pscB>
    14d0:	58 f0       	brcs	.+22     	; 0x14e8 <__divsf3+0x24>
    14d2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_pscA>
    14d6:	40 f0       	brcs	.+16     	; 0x14e8 <__divsf3+0x24>
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <__divsf3+0x20>
    14da:	5f 3f       	cpi	r21, 0xFF	; 255
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__divsf3+0x24>
    14de:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    14e2:	51 11       	cpse	r21, r1
    14e4:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_szero>
    14e8:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>

000014ec <__divsf3x>:
    14ec:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fp_split3>
    14f0:	68 f3       	brcs	.-38     	; 0x14cc <__divsf3+0x8>

000014f2 <__divsf3_pse>:
    14f2:	99 23       	and	r25, r25
    14f4:	b1 f3       	breq	.-20     	; 0x14e2 <__divsf3+0x1e>
    14f6:	55 23       	and	r21, r21
    14f8:	91 f3       	breq	.-28     	; 0x14de <__divsf3+0x1a>
    14fa:	95 1b       	sub	r25, r21
    14fc:	55 0b       	sbc	r21, r21
    14fe:	bb 27       	eor	r27, r27
    1500:	aa 27       	eor	r26, r26
    1502:	62 17       	cp	r22, r18
    1504:	73 07       	cpc	r23, r19
    1506:	84 07       	cpc	r24, r20
    1508:	38 f0       	brcs	.+14     	; 0x1518 <__divsf3_pse+0x26>
    150a:	9f 5f       	subi	r25, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	44 1f       	adc	r20, r20
    1514:	aa 1f       	adc	r26, r26
    1516:	a9 f3       	breq	.-22     	; 0x1502 <__divsf3_pse+0x10>
    1518:	35 d0       	rcall	.+106    	; 0x1584 <__divsf3_pse+0x92>
    151a:	0e 2e       	mov	r0, r30
    151c:	3a f0       	brmi	.+14     	; 0x152c <__divsf3_pse+0x3a>
    151e:	e0 e8       	ldi	r30, 0x80	; 128
    1520:	32 d0       	rcall	.+100    	; 0x1586 <__divsf3_pse+0x94>
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	e6 95       	lsr	r30
    1528:	00 1c       	adc	r0, r0
    152a:	ca f7       	brpl	.-14     	; 0x151e <__divsf3_pse+0x2c>
    152c:	2b d0       	rcall	.+86     	; 0x1584 <__divsf3_pse+0x92>
    152e:	fe 2f       	mov	r31, r30
    1530:	29 d0       	rcall	.+82     	; 0x1584 <__divsf3_pse+0x92>
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	bb 1f       	adc	r27, r27
    153a:	26 17       	cp	r18, r22
    153c:	37 07       	cpc	r19, r23
    153e:	48 07       	cpc	r20, r24
    1540:	ab 07       	cpc	r26, r27
    1542:	b0 e8       	ldi	r27, 0x80	; 128
    1544:	09 f0       	breq	.+2      	; 0x1548 <__divsf3_pse+0x56>
    1546:	bb 0b       	sbc	r27, r27
    1548:	80 2d       	mov	r24, r0
    154a:	bf 01       	movw	r22, r30
    154c:	ff 27       	eor	r31, r31
    154e:	93 58       	subi	r25, 0x83	; 131
    1550:	5f 4f       	sbci	r21, 0xFF	; 255
    1552:	3a f0       	brmi	.+14     	; 0x1562 <__divsf3_pse+0x70>
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	51 05       	cpc	r21, r1
    1558:	78 f0       	brcs	.+30     	; 0x1578 <__divsf3_pse+0x86>
    155a:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    155e:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_szero>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	e4 f3       	brlt	.-8      	; 0x155e <__divsf3_pse+0x6c>
    1566:	98 3e       	cpi	r25, 0xE8	; 232
    1568:	d4 f3       	brlt	.-12     	; 0x155e <__divsf3_pse+0x6c>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	9f 5f       	subi	r25, 0xFF	; 255
    1576:	c9 f7       	brne	.-14     	; 0x156a <__divsf3_pse+0x78>
    1578:	88 0f       	add	r24, r24
    157a:	91 1d       	adc	r25, r1
    157c:	96 95       	lsr	r25
    157e:	87 95       	ror	r24
    1580:	97 f9       	bld	r25, 7
    1582:	08 95       	ret
    1584:	e1 e0       	ldi	r30, 0x01	; 1
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	bb 1f       	adc	r27, r27
    158e:	62 17       	cp	r22, r18
    1590:	73 07       	cpc	r23, r19
    1592:	84 07       	cpc	r24, r20
    1594:	ba 07       	cpc	r27, r26
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__divsf3_pse+0xae>
    1598:	62 1b       	sub	r22, r18
    159a:	73 0b       	sbc	r23, r19
    159c:	84 0b       	sbc	r24, r20
    159e:	ba 0b       	sbc	r27, r26
    15a0:	ee 1f       	adc	r30, r30
    15a2:	88 f7       	brcc	.-30     	; 0x1586 <__divsf3_pse+0x94>
    15a4:	e0 95       	com	r30
    15a6:	08 95       	ret

000015a8 <__fixsfsi>:
    15a8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fixunssfsi>
    15ac:	68 94       	set
    15ae:	b1 11       	cpse	r27, r1
    15b0:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_szero>
    15b4:	08 95       	ret

000015b6 <__fixunssfsi>:
    15b6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_splitA>
    15ba:	88 f0       	brcs	.+34     	; 0x15de <__fixunssfsi+0x28>
    15bc:	9f 57       	subi	r25, 0x7F	; 127
    15be:	98 f0       	brcs	.+38     	; 0x15e6 <__fixunssfsi+0x30>
    15c0:	b9 2f       	mov	r27, r25
    15c2:	99 27       	eor	r25, r25
    15c4:	b7 51       	subi	r27, 0x17	; 23
    15c6:	b0 f0       	brcs	.+44     	; 0x15f4 <__fixunssfsi+0x3e>
    15c8:	e1 f0       	breq	.+56     	; 0x1602 <__fixunssfsi+0x4c>
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	1a f0       	brmi	.+6      	; 0x15da <__fixunssfsi+0x24>
    15d4:	ba 95       	dec	r27
    15d6:	c9 f7       	brne	.-14     	; 0x15ca <__fixunssfsi+0x14>
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <__fixunssfsi+0x4c>
    15da:	b1 30       	cpi	r27, 0x01	; 1
    15dc:	91 f0       	breq	.+36     	; 0x1602 <__fixunssfsi+0x4c>
    15de:	0e 94 91 0b 	call	0x1722	; 0x1722 <__fp_zero>
    15e2:	b1 e0       	ldi	r27, 0x01	; 1
    15e4:	08 95       	ret
    15e6:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_zero>
    15ea:	67 2f       	mov	r22, r23
    15ec:	78 2f       	mov	r23, r24
    15ee:	88 27       	eor	r24, r24
    15f0:	b8 5f       	subi	r27, 0xF8	; 248
    15f2:	39 f0       	breq	.+14     	; 0x1602 <__fixunssfsi+0x4c>
    15f4:	b9 3f       	cpi	r27, 0xF9	; 249
    15f6:	cc f3       	brlt	.-14     	; 0x15ea <__fixunssfsi+0x34>
    15f8:	86 95       	lsr	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b3 95       	inc	r27
    1600:	d9 f7       	brne	.-10     	; 0x15f8 <__fixunssfsi+0x42>
    1602:	3e f4       	brtc	.+14     	; 0x1612 <__fixunssfsi+0x5c>
    1604:	90 95       	com	r25
    1606:	80 95       	com	r24
    1608:	70 95       	com	r23
    160a:	61 95       	neg	r22
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	8f 4f       	sbci	r24, 0xFF	; 255
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	08 95       	ret

00001614 <__floatunsisf>:
    1614:	e8 94       	clt
    1616:	09 c0       	rjmp	.+18     	; 0x162a <__floatsisf+0x12>

00001618 <__floatsisf>:
    1618:	97 fb       	bst	r25, 7
    161a:	3e f4       	brtc	.+14     	; 0x162a <__floatsisf+0x12>
    161c:	90 95       	com	r25
    161e:	80 95       	com	r24
    1620:	70 95       	com	r23
    1622:	61 95       	neg	r22
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	8f 4f       	sbci	r24, 0xFF	; 255
    1628:	9f 4f       	sbci	r25, 0xFF	; 255
    162a:	99 23       	and	r25, r25
    162c:	a9 f0       	breq	.+42     	; 0x1658 <__floatsisf+0x40>
    162e:	f9 2f       	mov	r31, r25
    1630:	96 e9       	ldi	r25, 0x96	; 150
    1632:	bb 27       	eor	r27, r27
    1634:	93 95       	inc	r25
    1636:	f6 95       	lsr	r31
    1638:	87 95       	ror	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	b7 95       	ror	r27
    1640:	f1 11       	cpse	r31, r1
    1642:	f8 cf       	rjmp	.-16     	; 0x1634 <__floatsisf+0x1c>
    1644:	fa f4       	brpl	.+62     	; 0x1684 <__floatsisf+0x6c>
    1646:	bb 0f       	add	r27, r27
    1648:	11 f4       	brne	.+4      	; 0x164e <__floatsisf+0x36>
    164a:	60 ff       	sbrs	r22, 0
    164c:	1b c0       	rjmp	.+54     	; 0x1684 <__floatsisf+0x6c>
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	16 c0       	rjmp	.+44     	; 0x1684 <__floatsisf+0x6c>
    1658:	88 23       	and	r24, r24
    165a:	11 f0       	breq	.+4      	; 0x1660 <__floatsisf+0x48>
    165c:	96 e9       	ldi	r25, 0x96	; 150
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <__floatsisf+0x6a>
    1660:	77 23       	and	r23, r23
    1662:	21 f0       	breq	.+8      	; 0x166c <__floatsisf+0x54>
    1664:	9e e8       	ldi	r25, 0x8E	; 142
    1666:	87 2f       	mov	r24, r23
    1668:	76 2f       	mov	r23, r22
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <__floatsisf+0x5e>
    166c:	66 23       	and	r22, r22
    166e:	71 f0       	breq	.+28     	; 0x168c <__floatsisf+0x74>
    1670:	96 e8       	ldi	r25, 0x86	; 134
    1672:	86 2f       	mov	r24, r22
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	2a f0       	brmi	.+10     	; 0x1684 <__floatsisf+0x6c>
    167a:	9a 95       	dec	r25
    167c:	66 0f       	add	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	88 1f       	adc	r24, r24
    1682:	da f7       	brpl	.-10     	; 0x167a <__floatsisf+0x62>
    1684:	88 0f       	add	r24, r24
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	97 f9       	bld	r25, 7
    168c:	08 95       	ret

0000168e <__fp_inf>:
    168e:	97 f9       	bld	r25, 7
    1690:	9f 67       	ori	r25, 0x7F	; 127
    1692:	80 e8       	ldi	r24, 0x80	; 128
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	08 95       	ret

0000169a <__fp_nan>:
    169a:	9f ef       	ldi	r25, 0xFF	; 255
    169c:	80 ec       	ldi	r24, 0xC0	; 192
    169e:	08 95       	ret

000016a0 <__fp_pscA>:
    16a0:	00 24       	eor	r0, r0
    16a2:	0a 94       	dec	r0
    16a4:	16 16       	cp	r1, r22
    16a6:	17 06       	cpc	r1, r23
    16a8:	18 06       	cpc	r1, r24
    16aa:	09 06       	cpc	r0, r25
    16ac:	08 95       	ret

000016ae <__fp_pscB>:
    16ae:	00 24       	eor	r0, r0
    16b0:	0a 94       	dec	r0
    16b2:	12 16       	cp	r1, r18
    16b4:	13 06       	cpc	r1, r19
    16b6:	14 06       	cpc	r1, r20
    16b8:	05 06       	cpc	r0, r21
    16ba:	08 95       	ret

000016bc <__fp_round>:
    16bc:	09 2e       	mov	r0, r25
    16be:	03 94       	inc	r0
    16c0:	00 0c       	add	r0, r0
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <__fp_round+0xc>
    16c4:	88 23       	and	r24, r24
    16c6:	52 f0       	brmi	.+20     	; 0x16dc <__fp_round+0x20>
    16c8:	bb 0f       	add	r27, r27
    16ca:	40 f4       	brcc	.+16     	; 0x16dc <__fp_round+0x20>
    16cc:	bf 2b       	or	r27, r31
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <__fp_round+0x18>
    16d0:	60 ff       	sbrs	r22, 0
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__fp_round+0x20>
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	8f 4f       	sbci	r24, 0xFF	; 255
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	08 95       	ret

000016de <__fp_split3>:
    16de:	57 fd       	sbrc	r21, 7
    16e0:	90 58       	subi	r25, 0x80	; 128
    16e2:	44 0f       	add	r20, r20
    16e4:	55 1f       	adc	r21, r21
    16e6:	59 f0       	breq	.+22     	; 0x16fe <__fp_splitA+0x10>
    16e8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ea:	71 f0       	breq	.+28     	; 0x1708 <__fp_splitA+0x1a>
    16ec:	47 95       	ror	r20

000016ee <__fp_splitA>:
    16ee:	88 0f       	add	r24, r24
    16f0:	97 fb       	bst	r25, 7
    16f2:	99 1f       	adc	r25, r25
    16f4:	61 f0       	breq	.+24     	; 0x170e <__fp_splitA+0x20>
    16f6:	9f 3f       	cpi	r25, 0xFF	; 255
    16f8:	79 f0       	breq	.+30     	; 0x1718 <__fp_splitA+0x2a>
    16fa:	87 95       	ror	r24
    16fc:	08 95       	ret
    16fe:	12 16       	cp	r1, r18
    1700:	13 06       	cpc	r1, r19
    1702:	14 06       	cpc	r1, r20
    1704:	55 1f       	adc	r21, r21
    1706:	f2 cf       	rjmp	.-28     	; 0x16ec <__fp_split3+0xe>
    1708:	46 95       	lsr	r20
    170a:	f1 df       	rcall	.-30     	; 0x16ee <__fp_splitA>
    170c:	08 c0       	rjmp	.+16     	; 0x171e <__fp_splitA+0x30>
    170e:	16 16       	cp	r1, r22
    1710:	17 06       	cpc	r1, r23
    1712:	18 06       	cpc	r1, r24
    1714:	99 1f       	adc	r25, r25
    1716:	f1 cf       	rjmp	.-30     	; 0x16fa <__fp_splitA+0xc>
    1718:	86 95       	lsr	r24
    171a:	71 05       	cpc	r23, r1
    171c:	61 05       	cpc	r22, r1
    171e:	08 94       	sec
    1720:	08 95       	ret

00001722 <__fp_zero>:
    1722:	e8 94       	clt

00001724 <__fp_szero>:
    1724:	bb 27       	eor	r27, r27
    1726:	66 27       	eor	r22, r22
    1728:	77 27       	eor	r23, r23
    172a:	cb 01       	movw	r24, r22
    172c:	97 f9       	bld	r25, 7
    172e:	08 95       	ret

00001730 <__mulsf3>:
    1730:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsf3x>
    1734:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__fp_round>
    1738:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_pscA>
    173c:	38 f0       	brcs	.+14     	; 0x174c <__mulsf3+0x1c>
    173e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_pscB>
    1742:	20 f0       	brcs	.+8      	; 0x174c <__mulsf3+0x1c>
    1744:	95 23       	and	r25, r21
    1746:	11 f0       	breq	.+4      	; 0x174c <__mulsf3+0x1c>
    1748:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    174c:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__fp_nan>
    1750:	11 24       	eor	r1, r1
    1752:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_szero>

00001756 <__mulsf3x>:
    1756:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fp_split3>
    175a:	70 f3       	brcs	.-36     	; 0x1738 <__mulsf3+0x8>

0000175c <__mulsf3_pse>:
    175c:	95 9f       	mul	r25, r21
    175e:	c1 f3       	breq	.-16     	; 0x1750 <__mulsf3+0x20>
    1760:	95 0f       	add	r25, r21
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	55 1f       	adc	r21, r21
    1766:	62 9f       	mul	r22, r18
    1768:	f0 01       	movw	r30, r0
    176a:	72 9f       	mul	r23, r18
    176c:	bb 27       	eor	r27, r27
    176e:	f0 0d       	add	r31, r0
    1770:	b1 1d       	adc	r27, r1
    1772:	63 9f       	mul	r22, r19
    1774:	aa 27       	eor	r26, r26
    1776:	f0 0d       	add	r31, r0
    1778:	b1 1d       	adc	r27, r1
    177a:	aa 1f       	adc	r26, r26
    177c:	64 9f       	mul	r22, r20
    177e:	66 27       	eor	r22, r22
    1780:	b0 0d       	add	r27, r0
    1782:	a1 1d       	adc	r26, r1
    1784:	66 1f       	adc	r22, r22
    1786:	82 9f       	mul	r24, r18
    1788:	22 27       	eor	r18, r18
    178a:	b0 0d       	add	r27, r0
    178c:	a1 1d       	adc	r26, r1
    178e:	62 1f       	adc	r22, r18
    1790:	73 9f       	mul	r23, r19
    1792:	b0 0d       	add	r27, r0
    1794:	a1 1d       	adc	r26, r1
    1796:	62 1f       	adc	r22, r18
    1798:	83 9f       	mul	r24, r19
    179a:	a0 0d       	add	r26, r0
    179c:	61 1d       	adc	r22, r1
    179e:	22 1f       	adc	r18, r18
    17a0:	74 9f       	mul	r23, r20
    17a2:	33 27       	eor	r19, r19
    17a4:	a0 0d       	add	r26, r0
    17a6:	61 1d       	adc	r22, r1
    17a8:	23 1f       	adc	r18, r19
    17aa:	84 9f       	mul	r24, r20
    17ac:	60 0d       	add	r22, r0
    17ae:	21 1d       	adc	r18, r1
    17b0:	82 2f       	mov	r24, r18
    17b2:	76 2f       	mov	r23, r22
    17b4:	6a 2f       	mov	r22, r26
    17b6:	11 24       	eor	r1, r1
    17b8:	9f 57       	subi	r25, 0x7F	; 127
    17ba:	50 40       	sbci	r21, 0x00	; 0
    17bc:	9a f0       	brmi	.+38     	; 0x17e4 <__mulsf3_pse+0x88>
    17be:	f1 f0       	breq	.+60     	; 0x17fc <__mulsf3_pse+0xa0>
    17c0:	88 23       	and	r24, r24
    17c2:	4a f0       	brmi	.+18     	; 0x17d6 <__mulsf3_pse+0x7a>
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	bb 1f       	adc	r27, r27
    17ca:	66 1f       	adc	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	91 50       	subi	r25, 0x01	; 1
    17d2:	50 40       	sbci	r21, 0x00	; 0
    17d4:	a9 f7       	brne	.-22     	; 0x17c0 <__mulsf3_pse+0x64>
    17d6:	9e 3f       	cpi	r25, 0xFE	; 254
    17d8:	51 05       	cpc	r21, r1
    17da:	80 f0       	brcs	.+32     	; 0x17fc <__mulsf3_pse+0xa0>
    17dc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_inf>
    17e0:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_szero>
    17e4:	5f 3f       	cpi	r21, 0xFF	; 255
    17e6:	e4 f3       	brlt	.-8      	; 0x17e0 <__mulsf3_pse+0x84>
    17e8:	98 3e       	cpi	r25, 0xE8	; 232
    17ea:	d4 f3       	brlt	.-12     	; 0x17e0 <__mulsf3_pse+0x84>
    17ec:	86 95       	lsr	r24
    17ee:	77 95       	ror	r23
    17f0:	67 95       	ror	r22
    17f2:	b7 95       	ror	r27
    17f4:	f7 95       	ror	r31
    17f6:	e7 95       	ror	r30
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
    17fa:	c1 f7       	brne	.-16     	; 0x17ec <__mulsf3_pse+0x90>
    17fc:	fe 2b       	or	r31, r30
    17fe:	88 0f       	add	r24, r24
    1800:	91 1d       	adc	r25, r1
    1802:	96 95       	lsr	r25
    1804:	87 95       	ror	r24
    1806:	97 f9       	bld	r25, 7
    1808:	08 95       	ret

0000180a <eeprom_read_byte>:
    180a:	f9 99       	sbic	0x1f, 1	; 31
    180c:	fe cf       	rjmp	.-4      	; 0x180a <eeprom_read_byte>
    180e:	92 bd       	out	0x22, r25	; 34
    1810:	81 bd       	out	0x21, r24	; 33
    1812:	f8 9a       	sbi	0x1f, 0	; 31
    1814:	99 27       	eor	r25, r25
    1816:	80 b5       	in	r24, 0x20	; 32
    1818:	08 95       	ret

0000181a <eeprom_write_byte>:
    181a:	26 2f       	mov	r18, r22

0000181c <eeprom_write_r18>:
    181c:	f9 99       	sbic	0x1f, 1	; 31
    181e:	fe cf       	rjmp	.-4      	; 0x181c <eeprom_write_r18>
    1820:	1f ba       	out	0x1f, r1	; 31
    1822:	92 bd       	out	0x22, r25	; 34
    1824:	81 bd       	out	0x21, r24	; 33
    1826:	20 bd       	out	0x20, r18	; 32
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	fa 9a       	sbi	0x1f, 2	; 31
    182e:	f9 9a       	sbi	0x1f, 1	; 31
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	08 95       	ret

00001836 <_exit>:
    1836:	f8 94       	cli

00001838 <__stop_program>:
    1838:	ff cf       	rjmp	.-2      	; 0x1838 <__stop_program>
