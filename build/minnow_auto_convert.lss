
build/minnow_auto_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	b4 05       	cpc	r27, r4
      6a:	0b 06       	cpc	r0, r27
      6c:	1f 06       	cpc	r1, r31
      6e:	50 06       	cpc	r5, r16
      70:	57 06       	cpc	r5, r23
      72:	36 06       	cpc	r3, r22
      74:	5a 06       	cpc	r5, r26
      76:	b8 07       	cpc	r27, r24
      78:	a9 08       	sbc	r10, r9
      7a:	a9 08       	sbc	r10, r9
      7c:	c1 07       	cpc	r28, r17
      7e:	c4 07       	cpc	r28, r20
      80:	c7 07       	cpc	r28, r23
      82:	c9 07       	cpc	r28, r25
      84:	cb 07       	cpc	r28, r27
      86:	cd 07       	cpc	r28, r29
      88:	7e 08       	sbc	r7, r14
      8a:	df 07       	cpc	r29, r31

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e3       	ldi	r30, 0x3C	; 60
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 39       	cpi	r26, 0x94	; 148
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <main>
      da:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
uint32_t last_changed = 0;
int16_t current_light = 0;

// Function that listens for an incoming message and sets new_message flag on reception
message_t recv_message;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  recv_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	ae e1       	ldi	r26, 0x1E	; 30
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  if (recv_message.data[0] == 1) {
      f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <recv_message>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	31 f4       	brne	.+12     	; 0x106 <message_rx+0x24>
    new_message = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <new_message+0x1>
     102:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <new_message>
     106:	08 95       	ret

00000108 <message_tx>:
/* Functions continuously called once minnow converted to shark to
   emit a message, like a beacon */
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	08 95       	ret

0000010e <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <message_sent+0x1>
     116:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <message_sent>
     11a:	08 95       	ret

0000011c <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
     11c:	0e 94 b4 02 	call	0x568	; 0x568 <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
     120:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
     124:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_straight_left>
     128:	0c 94 af 02 	jmp	0x55e	; 0x55e <set_motors>

0000012c <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     138:	c1 2c       	mov	r12, r1
     13a:	d1 2c       	mov	r13, r1
     13c:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     142:	0e 94 bd 02 	call	0x57a	; 0x57a <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	92 07       	cpc	r25, r18
     14c:	49 f0       	breq	.+18     	; 0x160 <sample_light+0x34>
            sum = sum + sample;
     14e:	09 2e       	mov	r0, r25
     150:	00 0c       	add	r0, r0
     152:	aa 0b       	sbc	r26, r26
     154:	bb 0b       	sbc	r27, r27
     156:	c8 0e       	add	r12, r24
     158:	d9 1e       	adc	r13, r25
     15a:	ea 1e       	adc	r14, r26
     15c:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     15e:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     160:	cc 32       	cpi	r28, 0x2C	; 44
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	d8 07       	cpc	r29, r24
     166:	6c f3       	brlt	.-38     	; 0x142 <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     168:	9e 01       	movw	r18, r28
     16a:	dd 0f       	add	r29, r29
     16c:	44 0b       	sbc	r20, r20
     16e:	55 0b       	sbc	r21, r21
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 8c 09 	call	0x1318	; 0x1318 <__divmodsi4>
}
     178:	c9 01       	movw	r24, r18
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	08 95       	ret

00000188 <setup>:
}

/* Function runs once upon program initialization
   takes measurement of light at beginning of execution */
void setup() {
  current_light = sample_light();
     188:	0e 94 96 00 	call	0x12c	; 0x12c <sample_light>
     18c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     194:	08 95       	ret

00000196 <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <set_motion+0x12>
     1a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     1a8:	02 97       	sbiw	r24, 0x02	; 2
     1aa:	31 f4       	brne	.+12     	; 0x1b8 <set_motion+0x22>
    spinup_motors();
     1ac:	0e 94 b4 02 	call	0x568	; 0x568 <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <set_motion+0x2c>
  } else {
    spinup_motors();
     1b8:	0e 94 b4 02 	call	0x568	; 0x568 <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1bc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0c 94 af 02 	jmp	0x55e	; 0x55e <set_motors>

000001c6 <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	19 f4       	brne	.+6      	; 0x1d0 <random_walk+0xa>
     1ca:	0e 94 8e 00 	call	0x11c	; 0x11c <set_motion.part.0>
     1ce:	18 c0       	rjmp	.+48     	; 0x200 <random_walk+0x3a>
          set_motion(FORWARD);
      } else if (die == 1) {
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	19 f4       	brne	.+6      	; 0x1dc <random_walk+0x16>
          set_motion(LEFT);
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <random_walk+0x1e>
      } else if (die == 2) {
     1dc:	02 97       	sbiw	r24, 0x02	; 2
     1de:	29 f4       	brne	.+10     	; 0x1ea <random_walk+0x24>
          set_motion(RIGHT);
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <random_walk+0x3a>
      } else {                                  // Error handling, shouldn't reach unless for shark init
          set_color(YELLOW);
     1ea:	85 e0       	ldi	r24, 0x05	; 5
     1ec:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
          set_motion(STOP);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	  delay(1500);
     1f8:	8c ed       	ldi	r24, 0xDC	; 220
     1fa:	95 e0       	ldi	r25, 0x05	; 5
     1fc:	0e 94 a4 02 	call	0x548	; 0x548 <delay>
      }
      delay(100);
     200:	84 e6       	ldi	r24, 0x64	; 100
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0c 94 a4 02 	jmp	0x548	; 0x548 <delay>

00000208 <shark>:
}

// Function called once converted to shark
int16_t shark() {
  transmit_msg.type = NORMAL;			// Set message parameters
     208:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <transmit_msg+0x9>
  transmit_msg.data[0] = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <transmit_msg>
  transmit_msg.crc = message_crc(&transmit_msg);
     212:	8a e2       	ldi	r24, 0x2A	; 42
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0e 94 bc 08 	call	0x1178	; 0x1178 <message_crc>
     21a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <transmit_msg+0xb>
     21e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <transmit_msg+0xa>
  set_color(RED);				// Sharks are always red
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
  if (message_sent == 1) {
     228:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message_sent>
     22c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <message_sent+0x1>
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	e9 f4       	brne	.+58     	; 0x26e <shark+0x66>
      message_sent = 0;				// Reset flag so message needs to send again
     234:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <message_sent+0x1>
     238:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <message_sent>
      rand = rand_soft();			// Creating random number generator
     23c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <rand_soft>
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     246:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
      random_walk(die);
     24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     252:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
      die = (rand % 3);				// Generate new random value
     256:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     25a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     25e:	63 e0       	ldi	r22, 0x03	; 3
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divmodhi4>
     266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();			// Return current light conditions to main loop
     26e:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

00000272 <minnow>:
}


// Function initially called when minnow has not yet been converted
int16_t minnow() {
   if (new_message == 1) {	// Indicates transition behavior (turn purple, pause)
     272:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_message>
     276:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <new_message+0x1>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	91 05       	cpc	r25, r1
     27e:	81 f4       	brne	.+32     	; 0x2a0 <minnow+0x2e>
	tagged = 1;
     280:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <tagged+0x1>
     284:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tagged>
	set_color(VIOLET);
     288:	81 e1       	ldi	r24, 0x11	; 17
     28a:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
	set_motion(STOP);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	delay(1500);		// 1.5 second conversion delay
     296:	8c ed       	ldi	r24, 0xDC	; 220
     298:	95 e0       	ldi	r25, 0x05	; 5
     29a:	0e 94 a4 02 	call	0x548	; 0x548 <delay>
     29e:	14 c0       	rjmp	.+40     	; 0x2c8 <minnow+0x56>
	return sample_light();
    } else {
        set_color(BLUE); // Indicates random walk behavior with blue light for minnow
     2a0:	80 e1       	ldi	r24, 0x10	; 16
     2a2:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
        rand = rand_soft();
     2a6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <rand_soft>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     2b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
        die = (rand % 3);
     2b4:	63 e0       	ldi	r22, 0x03	; 3
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divmodhi4>
     2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	random_walk(die);
     2c4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
    }
  return sample_light(); // Again return current light conditions to main loop
     2c8:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

000002cc <loop>:
}

void loop() {
  if (tagged == 1 && current_light > 1000) {  // Shark, no delay as current_light is above threshold (nonshadow)
     2cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     2d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	91 05       	cpc	r25, r1
     2d8:	71 f4       	brne	.+28     	; 0x2f6 <loop+0x2a>
     2da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     2e2:	89 3e       	cpi	r24, 0xE9	; 233
     2e4:	93 40       	sbci	r25, 0x03	; 3
     2e6:	84 f0       	brlt	.+32     	; 0x308 <loop+0x3c>
    current_light = shark(message_sent);
     2e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message_sent>
     2ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <message_sent+0x1>
     2f0:	0e 94 04 01 	call	0x208	; 0x208 <shark>
     2f4:	23 c0       	rjmp	.+70     	; 0x33c <loop+0x70>
  } else if ((tagged == 0) && (current_light > 1000)) {
     2f6:	89 2b       	or	r24, r25
     2f8:	39 f4       	brne	.+14     	; 0x308 <loop+0x3c>
     2fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2fe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     302:	89 3e       	cpi	r24, 0xE9	; 233
     304:	93 40       	sbci	r25, 0x03	; 3
     306:	c4 f4       	brge	.+48     	; 0x338 <loop+0x6c>
    current_light = minnow();			// Minnow, no delay as current_light is above threshold (nonshadow)
  } else {
    set_motion(STOP);				// 1/2 second delay/movement blocking for either if in shadow
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
    set_color(WHITE);
     310:	85 e1       	ldi	r24, 0x15	; 21
     312:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
    delay(250);
     316:	8a ef       	ldi	r24, 0xFA	; 250
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 a4 02 	call	0x548	; 0x548 <delay>
    if (tagged == 1) {
     31e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     322:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	29 f4       	brne	.+10     	; 0x334 <loop+0x68>
	shark();
     32a:	0e 94 04 01 	call	0x208	; 0x208 <shark>
	current_light = shark();		// If shark, proceed with shark code and take new light measurement
     32e:	0e 94 04 01 	call	0x208	; 0x208 <shark>
     332:	04 c0       	rjmp	.+8      	; 0x33c <loop+0x70>
    } else {
	minnow();
     334:	0e 94 39 01 	call	0x272	; 0x272 <minnow>
	current_light = minnow();		// If minnow, proceed with shark code and take new light measurement
     338:	0e 94 39 01 	call	0x272	; 0x272 <minnow>
     33c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     340:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     344:	08 95       	ret

00000346 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     346:	08 95       	ret

00000348 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     34e:	08 95       	ret

00000350 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
    cli();
     35e:	f8 94       	cli

    ports_off();
     360:	14 b8       	out	0x04, r1	; 4
     362:	17 b8       	out	0x07, r1	; 7
     364:	1a b8       	out	0x0a, r1	; 10
     366:	15 b8       	out	0x05, r1	; 5
     368:	18 b8       	out	0x08, r1	; 8
     36a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     36c:	52 9a       	sbi	0x0a, 2	; 10
     36e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     370:	14 bc       	out	0x24, r1	; 36
     372:	85 e0       	ldi	r24, 0x05	; 5
     374:	85 bd       	out	0x25, r24	; 37
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	87 bd       	out	0x27, r24	; 39
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     380:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     384:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     388:	2f e8       	ldi	r18, 0x8F	; 143
     38a:	3b e0       	ldi	r19, 0x0B	; 11
     38c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     390:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     394:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     398:	53 98       	cbi	0x0a, 3	; 10
     39a:	23 98       	cbi	0x04, 3	; 4
     39c:	91 ea       	ldi	r25, 0xA1	; 161
     39e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     3a6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3aa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     3ae:	8b e0       	ldi	r24, 0x0B	; 11
     3b0:	80 bf       	out	0x30, r24	; 48
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     3b8:	86 e0       	ldi	r24, 0x06	; 6
     3ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3be:	83 e8       	ldi	r24, 0x83	; 131
     3c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3d2:	86 fd       	sbrc	r24, 6
     3d4:	fc cf       	rjmp	.-8      	; 0x3ce <kilo_init+0x7e>
    adc_trigger_high_gain();
     3d6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3da:	83 ea       	ldi	r24, 0xA3	; 163
     3dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
    if (osccal != 0xFF)
     3ee:	8f 3f       	cpi	r24, 0xFF	; 255
     3f0:	11 f0       	breq	.+4      	; 0x3f6 <kilo_init+0xa6>
        OSCCAL = osccal;
     3f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     3f6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    rx_leadingbit = 1;
     3fa:	c1 e0       	ldi	r28, 0x01	; 1
     3fc:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     400:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <rx_leadingbyte>
    rx_byteindex = 0;
     404:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
    rx_bytevalue = 0;
     408:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     40c:	80 e9       	ldi	r24, 0x90	; 144
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     414:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     418:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <tx_mask>
     41c:	88 73       	andi	r24, 0x38	; 56
     41e:	11 f0       	breq	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
        tx_mask = TX_MASK_MIN;
     420:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <tx_mask>
    tx_clock = 0;
     424:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     428:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
    tx_increment = 255;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     434:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    kilo_ticks = 0;
     438:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <kilo_ticks>
     43c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <kilo_ticks+0x1>
     440:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <kilo_ticks+0x2>
     444:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <kilo_ticks+0x3>
    kilo_state = IDLE;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    kilo_tx_period = 3906;
     44e:	82 e4       	ldi	r24, 0x42	; 66
     450:	9f e0       	ldi	r25, 0x0F	; 15
     452:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <kilo_tx_period+0x1>
     456:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     45a:	80 eb       	ldi	r24, 0xB0	; 176
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     462:	c8 2f       	mov	r28, r24
     464:	81 eb       	ldi	r24, 0xB1	; 177
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     46c:	2c 2f       	mov	r18, r28
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	38 2b       	or	r19, r24
     472:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <kilo_uid+0x1>
     476:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     47a:	85 e0       	ldi	r24, 0x05	; 5
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     482:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     486:	89 e0       	ldi	r24, 0x09	; 9
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     48e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     492:	8c e0       	ldi	r24, 0x0C	; 12
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     49a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     49e:	84 e1       	ldi	r24, 0x14	; 20
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4a6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
     4aa:	0e e5       	ldi	r16, 0x5E	; 94
     4ac:	11 e0       	ldi	r17, 0x01	; 1
     4ae:	57 e3       	ldi	r21, 0x37	; 55
     4b0:	e5 2e       	mov	r14, r21
     4b2:	51 e0       	ldi	r21, 0x01	; 1
     4b4:	f5 2e       	mov	r15, r21
     4b6:	c0 e2       	ldi	r28, 0x20	; 32
     4b8:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     4ba:	ce 01       	movw	r24, r28
     4bc:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4c0:	d8 2e       	mov	r13, r24
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4ca:	2d 2d       	mov	r18, r13
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	32 2f       	mov	r19, r18
     4d0:	22 27       	eor	r18, r18
     4d2:	28 2b       	or	r18, r24
     4d4:	f8 01       	movw	r30, r16
     4d6:	21 93       	st	Z+, r18
     4d8:	31 93       	st	Z+, r19
     4da:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4dc:	ce 01       	movw	r24, r28
     4de:	c0 96       	adiw	r24, 0x30	; 48
     4e0:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4e4:	d8 2e       	mov	r13, r24
     4e6:	ce 01       	movw	r24, r28
     4e8:	c1 96       	adiw	r24, 0x31	; 49
     4ea:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4ee:	2d 2d       	mov	r18, r13
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	32 2f       	mov	r19, r18
     4f4:	22 27       	eor	r18, r18
     4f6:	28 2b       	or	r18, r24
     4f8:	f7 01       	movw	r30, r14
     4fa:	21 93       	st	Z+, r18
     4fc:	31 93       	st	Z+, r19
     4fe:	7f 01       	movw	r14, r30
     500:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     502:	cc 33       	cpi	r28, 0x3C	; 60
     504:	d1 05       	cpc	r29, r1
     506:	c9 f6       	brne	.-78     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     508:	78 94       	sei
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	08 95       	ret

0000051a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
     524:	8f 93       	push	r24
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	a8 95       	wdr
     52c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     530:	88 61       	ori	r24, 0x18	; 24
     532:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     536:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     53a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     53c:	8f 91       	pop	r24
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	41 f0       	breq	.+16     	; 0x55c <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54c:	ef ec       	ldi	r30, 0xCF	; 207
     54e:	f7 e0       	ldi	r31, 0x07	; 7
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <delay+0x8>
     554:	00 c0       	rjmp	.+0      	; 0x556 <delay+0xe>
     556:	00 00       	nop
        _delay_ms(1);
        ms--;
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f6 cf       	rjmp	.-20     	; 0x548 <delay>
    }
}
     55c:	08 95       	ret

0000055e <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     55e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     562:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     566:	08 95       	ret

00000568 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     56e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     572:	8f e0       	ldi	r24, 0x0F	; 15
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0c 94 a4 02 	jmp	0x548	; 0x548 <delay>

0000057a <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     57a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     57e:	81 11       	cpse	r24, r1
     580:	1e c0       	rjmp	.+60     	; 0x5be <get_ambientlight+0x44>
        cli();
     582:	f8 94       	cli
        adc_setup_conversion(7);
     584:	87 e0       	ldi	r24, 0x07	; 7
     586:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     58a:	83 e8       	ldi	r24, 0x83	; 131
     58c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     590:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     594:	80 64       	ori	r24, 0x40	; 64
     596:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     59a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59e:	86 fd       	sbrc	r24, 6
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     5a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5aa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5ae:	23 ea       	ldi	r18, 0xA3	; 163
     5b0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     5ba:	78 94       	sei
     5bc:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     5c2:	08 95       	ret

000005c4 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     5c4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     5c8:	81 11       	cpse	r24, r1
     5ca:	1e c0       	rjmp	.+60     	; 0x608 <get_temperature+0x44>
        cli();
     5cc:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     5ce:	88 ec       	ldi	r24, 0xC8	; 200
     5d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     5d4:	87 e8       	ldi	r24, 0x87	; 135
     5d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5e8:	86 fd       	sbrc	r24, 6
     5ea:	fc cf       	rjmp	.-8      	; 0x5e4 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     5ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5f4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5f8:	23 ea       	ldi	r18, 0xA3	; 163
     5fa:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     604:	78 94       	sei
     606:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     60c:	08 95       	ret

0000060e <rand_hard>:

uint8_t rand_hard() {
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     616:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     618:	e3 ea       	ldi	r30, 0xA3	; 163
     61a:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     61c:	c6 e0       	ldi	r28, 0x06	; 6
     61e:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     620:	a1 e0       	ldi	r26, 0x01	; 1
     622:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     624:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     626:	f8 94       	cli
            adc_setup_conversion(6);
     628:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     62c:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     630:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     634:	40 64       	ori	r20, 0x40	; 64
     636:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     63a:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     63e:	46 fd       	sbrc	r20, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <rand_hard+0x2c>
            a = ADCW&0x1;
     642:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     646:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     64a:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     64c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     650:	50 64       	ori	r21, 0x40	; 64
     652:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     656:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     65a:	56 fd       	sbrc	r21, 6
     65c:	fc cf       	rjmp	.-8      	; 0x656 <rand_hard+0x48>
            b = ADCW&0x1;
     65e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     662:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     666:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     66a:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     66e:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     672:	78 94       	sei
            tries++;
     674:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     676:	61 70       	andi	r22, 0x01	; 1
     678:	46 17       	cp	r20, r22
     67a:	51 f0       	breq	.+20     	; 0x690 <rand_hard+0x82>
        if (a)
     67c:	44 23       	and	r20, r20
     67e:	59 f0       	breq	.+22     	; 0x696 <rand_hard+0x88>
            num |= (1<<i);
     680:	ad 01       	movw	r20, r26
     682:	02 2e       	mov	r0, r18
     684:	01 c0       	rjmp	.+2      	; 0x688 <rand_hard+0x7a>
     686:	44 0f       	add	r20, r20
     688:	0a 94       	dec	r0
     68a:	ea f7       	brpl	.-6      	; 0x686 <rand_hard+0x78>
     68c:	84 2b       	or	r24, r20
     68e:	03 c0       	rjmp	.+6      	; 0x696 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     690:	90 38       	cpi	r25, 0x80	; 128
     692:	49 f6       	brne	.-110    	; 0x626 <rand_hard+0x18>
     694:	f3 cf       	rjmp	.-26     	; 0x67c <rand_hard+0x6e>
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     69a:	28 30       	cpi	r18, 0x08	; 8
     69c:	31 05       	cpc	r19, r1
     69e:	09 f0       	breq	.+2      	; 0x6a2 <rand_hard+0x94>
     6a0:	c1 cf       	rjmp	.-126    	; 0x624 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     6a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     6ac:	98 e0       	ldi	r25, 0x08	; 8
     6ae:	89 9f       	mul	r24, r25
     6b0:	90 01       	movw	r18, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     6b6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accumulator>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	89 0f       	add	r24, r25
     6be:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <accumulator>
     6c2:	82 2f       	mov	r24, r18
     6c4:	82 95       	swap	r24
     6c6:	86 95       	lsr	r24
     6c8:	87 70       	andi	r24, 0x07	; 7
     6ca:	28 27       	eor	r18, r24
     6cc:	96 95       	lsr	r25
     6ce:	96 95       	lsr	r25
     6d0:	82 2f       	mov	r24, r18
     6d2:	89 27       	eor	r24, r25
     6d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     6d8:	08 95       	ret

000006da <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     6da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     6de:	08 95       	ret

000006e0 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6e0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     6e4:	81 11       	cpse	r24, r1
     6e6:	16 c0       	rjmp	.+44     	; 0x714 <get_voltage+0x34>
        cli();                                    // disable interrupts
     6e8:	f8 94       	cli
        adc_setup_conversion(6);
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6f0:	83 e8       	ldi	r24, 0x83	; 131
     6f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6fa:	80 64       	ori	r24, 0x40	; 64
     6fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     700:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     704:	86 fd       	sbrc	r24, 6
     706:	fc cf       	rjmp	.-8      	; 0x700 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     708:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     70c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     710:	78 94       	sei
     712:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     718:	08 95       	ret

0000071a <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     71a:	2f 92       	push	r2
     71c:	3f 92       	push	r3
     71e:	4f 92       	push	r4
     720:	5f 92       	push	r5
     722:	6f 92       	push	r6
     724:	7f 92       	push	r7
     726:	8f 92       	push	r8
     728:	9f 92       	push	r9
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     740:	fc 01       	movw	r30, r24
     742:	c2 81       	ldd	r28, Z+2	; 0x02
     744:	d3 81       	ldd	r29, Z+3	; 0x03
     746:	c4 38       	cpi	r28, 0x84	; 132
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	df 07       	cpc	r29, r31
     74c:	0c f0       	brlt	.+2      	; 0x750 <estimate_distance+0x36>
     74e:	7e c0       	rjmp	.+252    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
        if (dist->high_gain > kilo_irhigh[0]) {
     750:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <kilo_irhigh>
     754:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <kilo_irhigh+0x1>
     758:	8c 17       	cp	r24, r28
     75a:	9d 07       	cpc	r25, r29
     75c:	08 f4       	brcc	.+2      	; 0x760 <estimate_distance+0x46>
     75e:	6f c0       	rjmp	.+222    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     760:	e9 e3       	ldi	r30, 0x39	; 57
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     766:	81 91       	ld	r24, Z+
     768:	91 91       	ld	r25, Z+
     76a:	8c 17       	cp	r24, r28
     76c:	9d 07       	cpc	r25, r29
     76e:	20 f0       	brcs	.+8      	; 0x778 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     770:	1f 5f       	subi	r17, 0xFF	; 255
     772:	1e 30       	cpi	r17, 0x0E	; 14
     774:	c1 f7       	brne	.-16     	; 0x766 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     776:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     778:	81 2f       	mov	r24, r17
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e9 5c       	subi	r30, 0xC9	; 201
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	e0 80       	ld	r14, Z
     788:	f1 80       	ldd	r15, Z+1	; 0x01
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	fc 01       	movw	r30, r24
     790:	eb 5c       	subi	r30, 0xCB	; 203
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	b7 01       	movw	r22, r14
     79a:	68 1b       	sub	r22, r24
     79c:	79 0b       	sbc	r23, r25
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     7ae:	4b 01       	movw	r8, r22
     7b0:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     7b2:	be 01       	movw	r22, r28
     7b4:	0d 2e       	mov	r0, r29
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 0d 0b 	call	0x161a	; 0x161a <__floatsisf>
     7c0:	2b 01       	movw	r4, r22
     7c2:	3c 01       	movw	r6, r24
     7c4:	b7 01       	movw	r22, r14
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     7ce:	6b 01       	movw	r12, r22
     7d0:	7c 01       	movw	r14, r24
     7d2:	61 2f       	mov	r22, r17
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	a9 01       	movw	r20, r18
     7f0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     7f4:	a5 01       	movw	r20, r10
     7f6:	94 01       	movw	r18, r8
     7f8:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     808:	9b 01       	movw	r18, r22
     80a:	ac 01       	movw	r20, r24
     80c:	c3 01       	movw	r24, r6
     80e:	b2 01       	movw	r22, r4
     810:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e2       	ldi	r20, 0x20	; 32
     81a:	51 e4       	ldi	r21, 0x41	; 65
     81c:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     820:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixsfsi>
     824:	7b 01       	movw	r14, r22
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixsfsi>
     82e:	ab 01       	movw	r20, r22
     830:	bc 01       	movw	r22, r24
     832:	c7 01       	movw	r24, r14
     834:	ba 01       	movw	r22, r20
     836:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divmodhi4>
     83a:	16 2f       	mov	r17, r22
     83c:	01 c0       	rjmp	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     83e:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     840:	cd 3b       	cpi	r28, 0xBD	; 189
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	d8 07       	cpc	r29, r24
     846:	0c f4       	brge	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	ca c0       	rjmp	.+404    	; 0x9de <__stack+0xdf>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     84c:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     84e:	f1 01       	movw	r30, r2
     850:	c0 80       	ld	r12, Z
     852:	d1 80       	ldd	r13, Z+1	; 0x01
     854:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <kilo_irlow>
     858:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <kilo_irlow+0x1>
     85c:	8c 15       	cp	r24, r12
     85e:	9d 05       	cpc	r25, r13
     860:	88 f0       	brcs	.+34     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     862:	e0 e6       	ldi	r30, 0x60	; 96
     864:	f1 e0       	ldi	r31, 0x01	; 1
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     86c:	e1 90       	ld	r14, Z+
     86e:	f1 90       	ld	r15, Z+
     870:	ec 14       	cp	r14, r12
     872:	fd 04       	cpc	r15, r13
     874:	08 f4       	brcc	.+2      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     876:	58 c0       	rjmp	.+176    	; 0x928 <__stack+0x29>
     878:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     87a:	8e 30       	cpi	r24, 0x0E	; 14
     87c:	91 05       	cpc	r25, r1
     87e:	a9 f7       	brne	.-22     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     880:	0a e5       	ldi	r16, 0x5A	; 90
     882:	01 c0       	rjmp	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     884:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     886:	1f 3f       	cpi	r17, 0xFF	; 255
     888:	09 f4       	brne	.+2      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     88a:	4b c0       	rjmp	.+150    	; 0x922 <__stack+0x23>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     88c:	be 01       	movw	r22, r28
     88e:	dd 0f       	add	r29, r29
     890:	88 0b       	sbc	r24, r24
     892:	99 0b       	sbc	r25, r25
     894:	0e 94 0d 0b 	call	0x161a	; 0x161a <__floatsisf>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
     89c:	61 2f       	mov	r22, r17
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     8a8:	4b 01       	movw	r8, r22
     8aa:	5c 01       	movw	r10, r24
     8ac:	a7 01       	movw	r20, r14
     8ae:	96 01       	movw	r18, r12
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e6       	ldi	r24, 0x61	; 97
     8b6:	94 e4       	ldi	r25, 0x44	; 68
     8b8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     8c8:	4b 01       	movw	r8, r22
     8ca:	5c 01       	movw	r10, r24
     8cc:	60 2f       	mov	r22, r16
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     8d8:	2b 01       	movw	r4, r22
     8da:	3c 01       	movw	r6, r24
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	4f e2       	ldi	r20, 0x2F	; 47
     8e2:	54 e4       	ldi	r21, 0x44	; 68
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c3 01       	movw	r24, r6
     8f2:	b2 01       	movw	r22, r4
     8f4:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c5 01       	movw	r24, r10
     8fe:	b4 01       	movw	r22, r8
     900:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	48 e4       	ldi	r20, 0x48	; 72
     90a:	53 e4       	ldi	r21, 0x43	; 67
     90c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	44 e0       	ldi	r20, 0x04	; 4
     916:	52 e4       	ldi	r21, 0x42	; 66
     918:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     91c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fixunssfsi>
     920:	60 c0       	rjmp	.+192    	; 0x9e2 <__stack+0xe3>
        } else {
            return 33 + dist_low;
     922:	61 e2       	ldi	r22, 0x21	; 33
     924:	60 0f       	add	r22, r16
     926:	5d c0       	rjmp	.+186    	; 0x9e2 <__stack+0xe3>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	fc 01       	movw	r30, r24
     92e:	e4 5a       	subi	r30, 0xA4	; 164
     930:	fe 4f       	sbci	r31, 0xFE	; 254
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	b7 01       	movw	r22, r14
     938:	68 1b       	sub	r22, r24
     93a:	79 0b       	sbc	r23, r25
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     944:	9b 01       	movw	r18, r22
     946:	ac 01       	movw	r20, r24
     948:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     94c:	4b 01       	movw	r8, r22
     94e:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     950:	b6 01       	movw	r22, r12
     952:	dd 0c       	add	r13, r13
     954:	88 0b       	sbc	r24, r24
     956:	99 0b       	sbc	r25, r25
     958:	0e 94 0d 0b 	call	0x161a	; 0x161a <__floatsisf>
     95c:	2b 01       	movw	r4, r22
     95e:	3c 01       	movw	r6, r24
     960:	b7 01       	movw	r22, r14
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	63 2d       	mov	r22, r3
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatunsisf>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     990:	a5 01       	movw	r20, r10
     992:	94 01       	movw	r18, r8
     994:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	c3 01       	movw	r24, r6
     9aa:	b2 01       	movw	r22, r4
     9ac:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulsf3>
     9bc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixsfsi>
     9c0:	7b 01       	movw	r14, r22
     9c2:	c5 01       	movw	r24, r10
     9c4:	b4 01       	movw	r22, r8
     9c6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixsfsi>
     9ca:	ab 01       	movw	r20, r22
     9cc:	bc 01       	movw	r22, r24
     9ce:	c7 01       	movw	r24, r14
     9d0:	ba 01       	movw	r22, r20
     9d2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__divmodhi4>
     9d6:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     9d8:	6f 3f       	cpi	r22, 0xFF	; 255
     9da:	09 f0       	breq	.+2      	; 0x9de <__stack+0xdf>
     9dc:	54 cf       	rjmp	.-344    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     9de:	61 e2       	ldi	r22, 0x21	; 33
     9e0:	61 0f       	add	r22, r17
    }
}
     9e2:	86 2f       	mov	r24, r22
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	7f 90       	pop	r7
     9fe:	6f 90       	pop	r6
     a00:	5f 90       	pop	r5
     a02:	4f 90       	pop	r4
     a04:	3f 90       	pop	r3
     a06:	2f 90       	pop	r2
     a08:	08 95       	ret

00000a0a <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	2f 93       	push	r18
     a16:	3f 93       	push	r19
     a18:	4f 93       	push	r20
     a1a:	5f 93       	push	r21
     a1c:	6f 93       	push	r22
     a1e:	7f 93       	push	r23
     a20:	8f 93       	push	r24
     a22:	9f 93       	push	r25
     a24:	af 93       	push	r26
     a26:	bf 93       	push	r27
     a28:	ef 93       	push	r30
     a2a:	ff 93       	push	r31
    tx_clock += tx_increment;
     a2c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     a30:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     a34:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tx_increment>
     a38:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tx_increment+0x1>
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tx_clock+0x1>
     a44:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tx_clock>
    tx_increment = 0xFF;
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     a50:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    OCR0A = tx_increment;
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     a58:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_ticks>
     a5c:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <kilo_ticks+0x1>
     a60:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <kilo_ticks+0x2>
     a64:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <kilo_ticks+0x3>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_ticks>
     a72:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <kilo_ticks+0x1>
     a76:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <kilo_ticks+0x2>
     a7a:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a7e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     a82:	81 11       	cpse	r24, r1
     a84:	2d c0       	rjmp	.+90     	; 0xae0 <__vector_14+0xd6>
     a86:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_tx_period>
     a8a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <kilo_tx_period+0x1>
     a8e:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     a92:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     a96:	82 17       	cp	r24, r18
     a98:	93 07       	cpc	r25, r19
     a9a:	10 f5       	brcc	.+68     	; 0xae0 <__vector_14+0xd6>
     a9c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	f1 f4       	brne	.+60     	; 0xae0 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     aa4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     aa8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     aac:	09 95       	icall
        if (msg) {
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	b9 f0       	breq	.+46     	; 0xae0 <__vector_14+0xd6>
            if (message_send(msg)) {
     ab2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <message_send>
     ab6:	88 23       	and	r24, r24
     ab8:	51 f0       	breq	.+20     	; 0xace <__vector_14+0xc4>
                kilo_message_tx_success();
     aba:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     abe:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     ac2:	09 95       	icall
                tx_clock = 0;
     ac4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     ac8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     ace:	0e 94 88 00 	call	0x110	; 0x110 <message_tx_success+0x2>
     ad2:	9c 01       	movw	r18, r24
     ad4:	33 27       	eor	r19, r19
     ad6:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <tx_increment+0x1>
     ada:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <tx_increment>
                OCR0A = tx_increment;
     ade:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     b02:	80 ff       	sbrs	r24, 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <set_color+0x8>
        DDRD |= (1<<5);
     b06:	55 9a       	sbi	0x0a, 5	; 10
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     b0a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     b0c:	81 ff       	sbrs	r24, 1
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <set_color+0x12>
        DDRD |= (1<<4);
     b10:	54 9a       	sbi	0x0a, 4	; 10
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     b14:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     b16:	82 ff       	sbrs	r24, 2
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <set_color+0x1c>
        DDRC |= (1<<3);
     b1a:	3b 9a       	sbi	0x07, 3	; 7
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     b1e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     b20:	83 ff       	sbrs	r24, 3
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <set_color+0x26>
        DDRC |= (1<<2);
     b24:	3a 9a       	sbi	0x07, 2	; 7
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     b28:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     b2a:	84 ff       	sbrs	r24, 4
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <set_color+0x30>
        DDRC |= (1<<5);
     b2e:	3d 9a       	sbi	0x07, 5	; 7
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     b32:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     b34:	85 ff       	sbrs	r24, 5
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <set_color+0x3a>
        DDRC |= (1<<4);
     b38:	3c 9a       	sbi	0x07, 4	; 7
     b3a:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     b3c:	3c 98       	cbi	0x07, 4	; 7
     b3e:	08 95       	ret

00000b40 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     b40:	8c 01       	movw	r16, r24
     b42:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b44:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b46:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b4c:	98 e1       	ldi	r25, 0x18	; 24
     b4e:	c9 2e       	mov	r12, r25
     b50:	29 e2       	ldi	r18, 0x29	; 41
     b52:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b54:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <kilo_state>
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	e7 30       	cpi	r30, 0x07	; 7
     b5c:	f1 05       	cpc	r31, r1
     b5e:	d0 f7       	brcc	.-12     	; 0xb54 <kilo_start+0x14>
     b60:	ec 5c       	subi	r30, 0xCC	; 204
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__tablejump2__>
            case SLEEPING:
                cli();
     b68:	f8 94       	cli
                acomp_off();
     b6a:	80 b7       	in	r24, 0x30	; 48
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b70:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     b7a:	14 b8       	out	0x04, r1	; 4
     b7c:	17 b8       	out	0x07, r1	; 7
     b7e:	1a b8       	out	0x0a, r1	; 10
     b80:	15 b8       	out	0x05, r1	; 5
     b82:	18 b8       	out	0x08, r1	; 8
     b84:	1b b8       	out	0x0b, r1	; 11
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	a8 95       	wdr
     b8c:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ba0:	83 b7       	in	r24, 0x33	; 51
     ba2:	81 7f       	andi	r24, 0xF1	; 241
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	83 bf       	out	0x33, r24	; 51
                cli();
     ba8:	f8 94       	cli
                sleep_enable();
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	83 bf       	out	0x33, r24	; 51
                sei();
     bb0:	78 94       	sei
                sleep_cpu();
     bb2:	88 95       	sleep
                sleep_disable();
     bb4:	83 b7       	in	r24, 0x33	; 51
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	83 bf       	out	0x33, r24	; 51
                sei();
     bba:	78 94       	sei
                rx_busy = 0;
     bbc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
                ports_on();
     bc0:	52 9a       	sbi	0x0a, 2	; 10
     bc2:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     bc4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bce:	87 e5       	ldi	r24, 0x57	; 87
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <kilo_start+0x92>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <kilo_start+0x98>
     bd8:	00 00       	nop
                _delay_us(300);
                acomp_on();
     bda:	80 b7       	in	r24, 0x30	; 48
     bdc:	88 61       	ori	r24, 0x18	; 24
     bde:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be6:	ef e1       	ldi	r30, 0x1F	; 31
     be8:	fe e4       	ldi	r31, 0x4E	; 78
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <kilo_start+0xaa>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <kilo_start+0xb0>
     bf0:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     bf2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     bf6:	88 23       	and	r24, r24
     bf8:	09 f4       	brne	.+2      	; 0xbfc <kilo_start+0xbc>
     bfa:	50 c0       	rjmp	.+160    	; 0xc9c <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c02:	ff ef       	ldi	r31, 0xFF	; 255
     c04:	20 e7       	ldi	r18, 0x70	; 112
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	f1 50       	subi	r31, 0x01	; 1
     c0a:	20 40       	sbci	r18, 0x00	; 0
     c0c:	80 40       	sbci	r24, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <kilo_start+0xc8>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <kilo_start+0xd2>
     c12:	00 00       	nop
     c14:	43 c0       	rjmp	.+134    	; 0xc9c <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     c16:	8c e0       	ldi	r24, 0x0C	; 12
     c18:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c1c:	ef ec       	ldi	r30, 0xCF	; 207
     c1e:	f7 e0       	ldi	r31, 0x07	; 7
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <kilo_start+0xe0>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <kilo_start+0xe6>
     c26:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c2e:	ff ef       	ldi	r31, 0xFF	; 255
     c30:	21 ee       	ldi	r18, 0xE1	; 225
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	f1 50       	subi	r31, 0x01	; 1
     c36:	20 40       	sbci	r18, 0x00	; 0
     c38:	80 40       	sbci	r24, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <kilo_start+0xf4>
     c3c:	2c c0       	rjmp	.+88     	; 0xc96 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     c3e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <get_voltage>
                if(voltage > 682)
     c42:	8b 3a       	cpi	r24, 0xAB	; 171
     c44:	e2 e0       	ldi	r30, 0x02	; 2
     c46:	9e 07       	cpc	r25, r30
     c48:	24 f0       	brlt	.+8      	; 0xc52 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     c4a:	8c e0       	ldi	r24, 0x0C	; 12
     c4c:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c50:	81 cf       	rjmp	.-254    	; 0xb54 <kilo_start+0x14>
                else if(voltage > 648)
     c52:	89 38       	cpi	r24, 0x89	; 137
     c54:	f2 e0       	ldi	r31, 0x02	; 2
     c56:	9f 07       	cpc	r25, r31
     c58:	14 f0       	brlt	.+4      	; 0xc5e <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	f7 cf       	rjmp	.-18     	; 0xc4c <kilo_start+0x10c>
                else if(voltage > 614)
     c5e:	87 36       	cpi	r24, 0x67	; 103
     c60:	92 40       	sbci	r25, 0x02	; 2
     c62:	14 f0       	brlt	.+4      	; 0xc68 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     c64:	8f e0       	ldi	r24, 0x0F	; 15
     c66:	f2 cf       	rjmp	.-28     	; 0xc4c <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	f0 cf       	rjmp	.-32     	; 0xc4c <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     c6c:	48 99       	sbic	0x09, 0	; 9
     c6e:	16 c0       	rjmp	.+44     	; 0xc9c <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c76:	8f ec       	ldi	r24, 0xCF	; 207
     c78:	97 e0       	ldi	r25, 0x07	; 7
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <kilo_start+0x13a>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <kilo_start+0x140>
     c80:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	e1 ee       	ldi	r30, 0xE1	; 225
     c8c:	f4 e0       	ldi	r31, 0x04	; 4
     c8e:	91 50       	subi	r25, 0x01	; 1
     c90:	e0 40       	sbci	r30, 0x00	; 0
     c92:	f0 40       	sbci	r31, 0x00	; 0
     c94:	e1 f7       	brne	.-8      	; 0xc8e <kilo_start+0x14e>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <kilo_start+0x158>
     c98:	00 00       	nop
     c9a:	5c cf       	rjmp	.-328    	; 0xb54 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	d6 cf       	rjmp	.-84     	; 0xc4c <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     ca0:	d1 11       	cpse	r29, r1
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <kilo_start+0x168>
                    setup();
     ca4:	f8 01       	movw	r30, r16
     ca6:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ca8:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <kilo_state>
     cac:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     cae:	f7 01       	movw	r30, r14
     cb0:	09 95       	icall
                break;
     cb2:	50 cf       	rjmp	.-352    	; 0xb54 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     cb4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     cb8:	81 11       	cpse	r24, r1
     cba:	07 c0       	rjmp	.+14     	; 0xcca <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cbc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cc0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     cc4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
     cc8:	45 cf       	rjmp	.-374    	; 0xb54 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     cca:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
     cce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <prev_motion>
     cd2:	98 17       	cp	r25, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <kilo_start+0x198>
     cd6:	3e cf       	rjmp	.-388    	; 0xb54 <kilo_start+0x14>
                        prev_motion = cur_motion;
     cd8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     cdc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ce0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	89 f4       	brne	.+34     	; 0xd0a <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ce8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cec:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cf0:	8f e2       	ldi	r24, 0x2F	; 47
     cf2:	95 e7       	ldi	r25, 0x75	; 117
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <kilo_start+0x1b4>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <kilo_start+0x1ba>
     cfa:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cfc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d00:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d04:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d08:	25 cf       	rjmp	.-438    	; 0xb54 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d0a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d12:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	59 f4       	brne	.+22     	; 0xd30 <kilo_start+0x1f0>
     d1a:	ef e2       	ldi	r30, 0x2F	; 47
     d1c:	f5 e7       	ldi	r31, 0x75	; 117
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <kilo_start+0x1de>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <kilo_start+0x1e4>
     d24:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     d26:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d2a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     d2e:	10 c0       	rjmp	.+32     	; 0xd50 <kilo_start+0x210>
     d30:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d34:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d38:	8f e2       	ldi	r24, 0x2F	; 47
     d3a:	95 e7       	ldi	r25, 0x75	; 117
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <kilo_start+0x1fc>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <kilo_start+0x202>
     d42:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d44:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <kilo_straight_right>
     d48:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d4c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d50:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d54:	ff ce       	rjmp	.-514    	; 0xb54 <kilo_start+0x14>

00000d56 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
    rx_timer_off();
     d64:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d68:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d6c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     d76:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
    rx_busy = 0;
     d7a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    adc_trigger_high_gain();
     d7e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d82:	93 ea       	ldi	r25, 0xA3	; 163
     d84:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d88:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     dc0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     dc4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     dce:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rx_leadingbit>
     dd2:	88 23       	and	r24, r24
     dd4:	21 f1       	breq	.+72     	; 0xe1e <__vector_23+0x84>
        rx_timer_on();
     dd6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dda:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     dde:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     de2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
        rx_leadingbit = 0;
     de6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rx_leadingbit>
        if (rx_leadingbyte) {
     dea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <__vector_23+0x5a>
     df2:	af c1       	rjmp	.+862    	; 0x1152 <__vector_23+0x3b8>
            adc_finish_conversion();
     df4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     df8:	86 fd       	sbrc	r24, 6
     dfa:	fc cf       	rjmp	.-8      	; 0xdf4 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     dfc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e00:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e04:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <rx_dist+0x3>
     e08:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_dist+0x2>
            adc_trigger_low_gain();
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e12:	93 ea       	ldi	r25, 0xA3	; 163
     e14:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e18:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e1c:	9a c1       	rjmp	.+820    	; 0x1152 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     e1e:	c9 01       	movw	r24, r18
     e20:	87 58       	subi	r24, 0x87	; 135
     e22:	91 09       	sbc	r25, r1
     e24:	84 37       	cpi	r24, 0x74	; 116
     e26:	99 40       	sbci	r25, 0x09	; 9
     e28:	a0 f0       	brcs	.+40     	; 0xe52 <__vector_23+0xb8>
            rx_timer_off();
     e2a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e2e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e32:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     e36:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
            rx_leadingbyte = 1;
     e3a:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
            rx_busy = 0;
     e3e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
            adc_trigger_high_gain();
     e42:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e46:	83 ea       	ldi	r24, 0xA3	; 163
     e48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e4c:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e50:	80 c1       	rjmp	.+768    	; 0x1152 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     e52:	26 58       	subi	r18, 0x86	; 134
     e54:	31 09       	sbc	r19, r1
     e56:	a4 ef       	ldi	r26, 0xF4	; 244
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__umulhisi3>
     e5e:	8c 01       	movw	r16, r24
     e60:	22 27       	eor	r18, r18
     e62:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     e64:	08 30       	cpi	r16, 0x08	; 8
     e66:	60 f4       	brcc	.+24     	; 0xe80 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <__vector_23+0xd6>
     e6e:	88 0f       	add	r24, r24
     e70:	0a 95       	dec	r16
     e72:	ea f7       	brpl	.-6      	; 0xe6e <__vector_23+0xd4>
     e74:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     e78:	89 2b       	or	r24, r25
     e7a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rx_bytevalue>
     e7e:	69 c1       	rjmp	.+722    	; 0x1152 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e80:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
                if (rx_leadingbyte) {
     e84:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     e88:	88 23       	and	r24, r24
     e8a:	41 f1       	breq	.+80     	; 0xedc <__vector_23+0x142>
                    adc_finish_conversion();
     e8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e90:	86 fd       	sbrc	r24, 6
     e92:	fc cf       	rjmp	.-8      	; 0xe8c <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e94:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e98:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e9c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <rx_dist+0x1>
     ea0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_dist>
                    adc_trigger_high_gain();
     ea4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ea8:	83 ea       	ldi	r24, 0xA3	; 163
     eaa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     eb4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     eb8:	99 23       	and	r25, r25
     eba:	59 f0       	breq	.+22     	; 0xed2 <__vector_23+0x138>
                        rx_timer_off();
     ebc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ec0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ec4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ec8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     ecc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
     ed0:	40 c1       	rjmp	.+640    	; 0x1152 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     ed2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_leadingbyte>
                        rx_byteindex = 0;
     ed6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
     eda:	3b c1       	rjmp	.+630    	; 0x1152 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     edc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_byteindex>
     ee0:	e8 2f       	mov	r30, r24
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	e0 58       	subi	r30, 0x80	; 128
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     eec:	90 83       	st	Z, r25
                    rx_byteindex++;
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ef4:	8c 30       	cpi	r24, 0x0C	; 12
     ef6:	09 f0       	breq	.+2      	; 0xefa <__vector_23+0x160>
     ef8:	2c c1       	rjmp	.+600    	; 0x1152 <__vector_23+0x3b8>
                        rx_timer_off();
     efa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     efe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f02:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f06:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     f0a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     f0e:	00 91 8a 01 	lds	r16, 0x018A	; 0x80018a <rx_msg+0xa>
     f12:	10 91 8b 01 	lds	r17, 0x018B	; 0x80018b <rx_msg+0xb>
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 bc 08 	call	0x1178	; 0x1178 <message_crc>
     f1e:	08 17       	cp	r16, r24
     f20:	19 07       	cpc	r17, r25
     f22:	09 f0       	breq	.+2      	; 0xf26 <__vector_23+0x18c>
     f24:	16 c1       	rjmp	.+556    	; 0x1152 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     f26:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <rx_msg+0x9>
     f2a:	e7 fd       	sbrc	r30, 7
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     f2e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     f32:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     f36:	65 e5       	ldi	r22, 0x55	; 85
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	09 95       	icall
     f40:	08 c1       	rjmp	.+528    	; 0x1152 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f42:	88 e7       	ldi	r24, 0x78	; 120
     f44:	8e 0f       	add	r24, r30
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	30 f0       	brcs	.+12     	; 0xf56 <__vector_23+0x1bc>
        motors_off();
     f4a:	53 98       	cbi	0x0a, 3	; 10
     f4c:	23 98       	cbi	0x04, 3	; 4
     f4e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f52:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     f56:	8e 2f       	mov	r24, r30
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fc 01       	movw	r30, r24
     f5c:	e0 58       	subi	r30, 0x80	; 128
     f5e:	f1 09       	sbc	r31, r1
     f60:	eb 30       	cpi	r30, 0x0B	; 11
     f62:	f1 05       	cpc	r31, r1
     f64:	08 f0       	brcs	.+2      	; 0xf68 <__vector_23+0x1ce>
     f66:	f5 c0       	rjmp	.+490    	; 0x1152 <__vector_23+0x3b8>
     f68:	e5 5c       	subi	r30, 0xC5	; 197
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     f70:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f74:	8d 7f       	andi	r24, 0xFD	; 253
     f76:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f7a:	16 bc       	out	0x26, r1	; 38
            bootload();
     f7c:	e0 e0       	ldi	r30, 0x00	; 0
     f7e:	f0 e7       	ldi	r31, 0x70	; 112
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f82:	e0 e0       	ldi	r30, 0x00	; 0
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f88:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <kilo_state>
     f8c:	e2 c0       	rjmp	.+452    	; 0x1152 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	b2 c0       	rjmp	.+356    	; 0x10f6 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	b0 c0       	rjmp	.+352    	; 0x10f6 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	ae c0       	rjmp	.+348    	; 0x10f6 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f9a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__vector_23+0x20a>
     fa2:	d7 c0       	rjmp	.+430    	; 0x1152 <__vector_23+0x3b8>
     fa4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     fa8:	84 30       	cpi	r24, 0x04	; 4
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_23+0x214>
     fac:	d2 c0       	rjmp	.+420    	; 0x1152 <__vector_23+0x3b8>
                motors_on();
     fae:	53 9a       	sbi	0x0a, 3	; 10
     fb0:	23 9a       	sbi	0x04, 3	; 4
     fb2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fb6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	9c c0       	rjmp	.+312    	; 0x10f6 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fbe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <__vector_23+0x22e>
     fc6:	4b c0       	rjmp	.+150    	; 0x105e <__vector_23+0x2c4>
     fc8:	80 f4       	brcc	.+32     	; 0xfea <__vector_23+0x250>
     fca:	88 23       	and	r24, r24
     fcc:	a9 f0       	breq	.+42     	; 0xff8 <__vector_23+0x25e>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__vector_23+0x23a>
     fd2:	82 c0       	rjmp	.+260    	; 0x10d8 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     fd4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x1>
     fd8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <rx_msg+0x2>
     fdc:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <kilo_uid+0x1>
     fe0:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_uid>
                    cur_motion = MOVE_STOP;
     fe4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
     fe8:	77 c0       	rjmp	.+238    	; 0x10d8 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	09 f4       	brne	.+2      	; 0xff0 <__vector_23+0x256>
     fee:	49 c0       	rjmp	.+146    	; 0x1082 <__vector_23+0x2e8>
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__vector_23+0x25c>
     ff4:	58 c0       	rjmp	.+176    	; 0x10a6 <__vector_23+0x30c>
     ff6:	70 c0       	rjmp	.+224    	; 0x10d8 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     ff8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     ffc:	86 30       	cpi	r24, 0x06	; 6
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__vector_23+0x268>
    1000:	6b c0       	rjmp	.+214    	; 0x10d8 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1002:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <kilo_uid>
    1006:	80 eb       	ldi	r24, 0xB0	; 176
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    100e:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_uid+0x1>
    1012:	81 eb       	ldi	r24, 0xB1	; 177
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    101a:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_turn_left>
    101e:	85 e0       	ldi	r24, 0x05	; 5
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1026:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
    102a:	89 e0       	ldi	r24, 0x09	; 9
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1032:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_straight_left>
    1036:	8c e0       	ldi	r24, 0x0C	; 12
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    103e:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
    1042:	84 e1       	ldi	r24, 0x14	; 20
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        motors_off();
    104a:	53 98       	cbi	0x0a, 3	; 10
    104c:	23 98       	cbi	0x04, 3	; 4
    104e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1052:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    105c:	3d c0       	rjmp	.+122    	; 0x10d8 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    105e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    1062:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <rx_msg+0x3>
    1066:	91 30       	cpi	r25, 0x01	; 1
    1068:	21 f4       	brne	.+8      	; 0x1072 <__vector_23+0x2d8>
    106a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <kilo_turn_left>
    106e:	89 17       	cp	r24, r25
    1070:	99 f1       	breq	.+102    	; 0x10d8 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1072:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_LEFT;
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    107c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    1080:	2b c0       	rjmp	.+86     	; 0x10d8 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1082:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    1086:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_msg+0x4>
    108a:	92 30       	cpi	r25, 0x02	; 2
    108c:	21 f4       	brne	.+8      	; 0x1096 <__vector_23+0x2fc>
    108e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_right>
    1092:	89 17       	cp	r24, r25
    1094:	09 f1       	breq	.+66     	; 0x10d8 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1096:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_RIGHT;
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    10a0:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    10a4:	19 c0       	rjmp	.+50     	; 0x10d8 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10a6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <cur_motion>
    10aa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <rx_msg+0x6>
    10ae:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rx_msg+0x5>
    10b2:	23 30       	cpi	r18, 0x03	; 3
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <__vector_23+0x32c>
    10b6:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <kilo_straight_right>
    10ba:	82 13       	cpse	r24, r18
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <__vector_23+0x32c>
    10be:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <kilo_straight_left>
    10c2:	92 17       	cp	r25, r18
    10c4:	49 f0       	breq	.+18     	; 0x10d8 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    10c6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    10ca:	23 e0       	ldi	r18, 0x03	; 3
    10cc:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    10d0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    10d4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10d8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
    10dc:	88 23       	and	r24, r24
    10de:	c9 f1       	breq	.+114    	; 0x1152 <__vector_23+0x3b8>
    10e0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    10e4:	86 30       	cpi	r24, 0x06	; 6
    10e6:	a9 f1       	breq	.+106    	; 0x1152 <__vector_23+0x3b8>
                motors_on();
    10e8:	53 9a       	sbi	0x0a, 3	; 10
    10ea:	23 9a       	sbi	0x04, 3	; 4
    10ec:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    10f4:	86 e0       	ldi	r24, 0x06	; 6
    10f6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    10fa:	2b c0       	rjmp	.+86     	; 0x1152 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10fc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1100:	86 30       	cpi	r24, 0x06	; 6
    1102:	81 f0       	breq	.+32     	; 0x1124 <__vector_23+0x38a>
                motors_on();
    1104:	53 9a       	sbi	0x0a, 3	; 10
    1106:	23 9a       	sbi	0x04, 3	; 4
    1108:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    110c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0e 94 81 05 	call	0xb02	; 0xb02 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1116:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
    111a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                kilo_state = MOVING;
    111e:	86 e0       	ldi	r24, 0x06	; 6
    1120:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	00 90 80 01 	lds	r0, 0x0180	; 0x800180 <rx_msg>
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__vector_23+0x398>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <__vector_23+0x394>
    1136:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <kilo_uid>
    113a:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <kilo_uid+0x1>
    113e:	82 23       	and	r24, r18
    1140:	93 23       	and	r25, r19
    1142:	89 2b       	or	r24, r25
    1144:	21 f0       	breq	.+8      	; 0x114e <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cur_motion>
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    114e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
                    }
                }
            }
        }
    }
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1178:	fc 01       	movw	r30, r24
    117a:	9c 01       	movw	r18, r24
    117c:	26 5f       	subi	r18, 0xF6	; 246
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1184:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1186:	84 27       	eor	r24, r20
    1188:	08 2e       	mov	r0, r24
    118a:	82 95       	swap	r24
    118c:	80 7f       	andi	r24, 0xF0	; 240
    118e:	80 25       	eor	r24, r0
    1190:	09 2e       	mov	r0, r25
    1192:	98 2f       	mov	r25, r24
    1194:	82 95       	swap	r24
    1196:	8f 70       	andi	r24, 0x0F	; 15
    1198:	08 26       	eor	r0, r24
    119a:	86 95       	lsr	r24
    119c:	98 27       	eor	r25, r24
    119e:	89 27       	eor	r24, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	88 0f       	add	r24, r24
    11a4:	88 0f       	add	r24, r24
    11a6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    11a8:	e2 17       	cp	r30, r18
    11aa:	f3 07       	cpc	r31, r19
    11ac:	59 f7       	brne	.-42     	; 0x1184 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    11ae:	08 95       	ret

000011b0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    11b0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    11b2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    11b4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    11b6:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <tx_mask>
    or tmpreg1, ddrreg
    11ba:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    11bc:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    11be:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    11c0:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    11c4:	20 30       	cpi	r18, 0x00	; 0
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <message_send+0x22>
    11c8:	00 00       	nop
    11ca:	25 b1       	in	r18, 0x05	; 5
    11cc:	23 2b       	or	r18, r19
    11ce:	25 b9       	out	0x05, r18	; 5
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <message_send+0x2a>
    11d2:	00 00       	nop
    11d4:	00 00       	nop
    11d6:	00 00       	nop
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <message_send+0x2a>
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	00 00       	nop
    11e0:	30 95       	com	r19
    11e2:	25 b1       	in	r18, 0x05	; 5
    11e4:	23 23       	and	r18, r19
    11e6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    11e8:	2e ea       	ldi	r18, 0xAE	; 174
    11ea:	2a 95       	dec	r18
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    11ee:	2b ee       	ldi	r18, 0xEB	; 235

000011f0 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    11f0:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    11f2:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    11f4:	0a c0       	rjmp	.+20     	; 0x120a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11f6:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11f8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    11fc:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11fe:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1200:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1202:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1204:	0f be       	out	0x3f, r0	; 63
    return 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	08 95       	ret

0000120a <nocollision>:
nocollision:
    nop
    120a:	00 00       	nop
    dec tmpreg1
    120c:	2a 95       	dec	r18
    brne checkcollision
    120e:	81 f7       	brne	.-32     	; 0x11f0 <checkcollision>

    ldi tmpreg1, 0x01
    1210:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1212:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    1216:	20 30       	cpi	r18, 0x00	; 0
    1218:	29 f0       	breq	.+10     	; 0x1224 <nocollision+0x1a>
    121a:	00 00       	nop
    121c:	25 b1       	in	r18, 0x05	; 5
    121e:	23 2b       	or	r18, r19
    1220:	25 b9       	out	0x05, r18	; 5
    1222:	04 c0       	rjmp	.+8      	; 0x122c <nocollision+0x22>
    1224:	00 00       	nop
    1226:	00 00       	nop
    1228:	00 00       	nop
    122a:	00 c0       	rjmp	.+0      	; 0x122c <nocollision+0x22>
    122c:	00 00       	nop
    122e:	00 00       	nop
    1230:	00 00       	nop
    1232:	30 95       	com	r19
    1234:	25 b1       	in	r18, 0x05	; 5
    1236:	23 23       	and	r18, r19
    1238:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    123a:	00 00       	nop
    123c:	24 e5       	ldi	r18, 0x54	; 84
    123e:	2a 95       	dec	r18
    1240:	f1 f7       	brne	.-4      	; 0x123e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1242:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1244:	8c e0       	ldi	r24, 0x0C	; 12

00001246 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1246:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1248:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    124a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    124c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    124e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1250:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1252:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1254:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1256:	50 e0       	ldi	r21, 0x00	; 0

00001258 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1258:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    125a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    125c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    125e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1260:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    1264:	20 30       	cpi	r18, 0x00	; 0
    1266:	29 f0       	breq	.+10     	; 0x1272 <sendbit+0x1a>
    1268:	00 00       	nop
    126a:	25 b1       	in	r18, 0x05	; 5
    126c:	23 2b       	or	r18, r19
    126e:	25 b9       	out	0x05, r18	; 5
    1270:	04 c0       	rjmp	.+8      	; 0x127a <sendbit+0x22>
    1272:	00 00       	nop
    1274:	00 00       	nop
    1276:	00 00       	nop
    1278:	00 c0       	rjmp	.+0      	; 0x127a <sendbit+0x22>
    127a:	00 00       	nop
    127c:	00 00       	nop
    127e:	00 00       	nop
    1280:	30 95       	com	r19
    1282:	25 b1       	in	r18, 0x05	; 5
    1284:	23 23       	and	r18, r19
    1286:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1288:	00 00       	nop
    128a:	21 e5       	ldi	r18, 0x51	; 81
    128c:	2a 95       	dec	r18
    128e:	f1 f7       	brne	.-4      	; 0x128c <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1290:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1292:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1294:	9a 95       	dec	r25
    brne sendbit
    1296:	01 f7       	brne	.-64     	; 0x1258 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1298:	8a 95       	dec	r24
    brne sendbyte
    129a:	a9 f6       	brne	.-86     	; 0x1246 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    129c:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    129e:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    12a0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    12a2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    12a4:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    12a8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    12aa:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    12ac:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    12ae:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    12b0:	0f be       	out	0x3f, r0	; 63
    return 1
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	08 95       	ret

000012b6 <main>:
    }
  }
}

int main() {
  kilo_init();				// Begin program execution
    12b6:	0e 94 a8 01 	call	0x350	; 0x350 <kilo_init>
  kilo_message_rx = message_rx;		// Begin listening loop
    12ba:	81 e7       	ldi	r24, 0x71	; 113
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <kilo_message_rx+0x1>
    12c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <kilo_message_rx>
  kilo_message_tx = message_tx;		// Begin speaker loop
    12c6:	84 e8       	ldi	r24, 0x84	; 132
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    12ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;	// Begin speaker validation loop
    12d2:	87 e8       	ldi	r24, 0x87	; 135
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    12da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);		// Begin motion
    12de:	66 e6       	ldi	r22, 0x66	; 102
    12e0:	71 e0       	ldi	r23, 0x01	; 1
    12e2:	84 ec       	ldi	r24, 0xC4	; 196
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 a0 05 	call	0xb40	; 0xb40 <kilo_start>
  return 0;
}
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <__divmodhi4>:
    12f0:	97 fb       	bst	r25, 7
    12f2:	07 2e       	mov	r0, r23
    12f4:	16 f4       	brtc	.+4      	; 0x12fa <__divmodhi4+0xa>
    12f6:	00 94       	com	r0
    12f8:	07 d0       	rcall	.+14     	; 0x1308 <__divmodhi4_neg1>
    12fa:	77 fd       	sbrc	r23, 7
    12fc:	09 d0       	rcall	.+18     	; 0x1310 <__divmodhi4_neg2>
    12fe:	0e 94 c0 09 	call	0x1380	; 0x1380 <__udivmodhi4>
    1302:	07 fc       	sbrc	r0, 7
    1304:	05 d0       	rcall	.+10     	; 0x1310 <__divmodhi4_neg2>
    1306:	3e f4       	brtc	.+14     	; 0x1316 <__divmodhi4_exit>

00001308 <__divmodhi4_neg1>:
    1308:	90 95       	com	r25
    130a:	81 95       	neg	r24
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__divmodhi4_neg2>:
    1310:	70 95       	com	r23
    1312:	61 95       	neg	r22
    1314:	7f 4f       	sbci	r23, 0xFF	; 255

00001316 <__divmodhi4_exit>:
    1316:	08 95       	ret

00001318 <__divmodsi4>:
    1318:	05 2e       	mov	r0, r21
    131a:	97 fb       	bst	r25, 7
    131c:	1e f4       	brtc	.+6      	; 0x1324 <__divmodsi4+0xc>
    131e:	00 94       	com	r0
    1320:	0e 94 a3 09 	call	0x1346	; 0x1346 <__negsi2>
    1324:	57 fd       	sbrc	r21, 7
    1326:	07 d0       	rcall	.+14     	; 0x1336 <__divmodsi4_neg2>
    1328:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__udivmodsi4>
    132c:	07 fc       	sbrc	r0, 7
    132e:	03 d0       	rcall	.+6      	; 0x1336 <__divmodsi4_neg2>
    1330:	4e f4       	brtc	.+18     	; 0x1344 <__divmodsi4_exit>
    1332:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__negsi2>

00001336 <__divmodsi4_neg2>:
    1336:	50 95       	com	r21
    1338:	40 95       	com	r20
    133a:	30 95       	com	r19
    133c:	21 95       	neg	r18
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	4f 4f       	sbci	r20, 0xFF	; 255
    1342:	5f 4f       	sbci	r21, 0xFF	; 255

00001344 <__divmodsi4_exit>:
    1344:	08 95       	ret

00001346 <__negsi2>:
    1346:	90 95       	com	r25
    1348:	80 95       	com	r24
    134a:	70 95       	com	r23
    134c:	61 95       	neg	r22
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	08 95       	ret

00001356 <__tablejump2__>:
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	05 90       	lpm	r0, Z+
    135c:	f4 91       	lpm	r31, Z
    135e:	e0 2d       	mov	r30, r0
    1360:	09 94       	ijmp

00001362 <__umulhisi3>:
    1362:	a2 9f       	mul	r26, r18
    1364:	b0 01       	movw	r22, r0
    1366:	b3 9f       	mul	r27, r19
    1368:	c0 01       	movw	r24, r0
    136a:	a3 9f       	mul	r26, r19
    136c:	70 0d       	add	r23, r0
    136e:	81 1d       	adc	r24, r1
    1370:	11 24       	eor	r1, r1
    1372:	91 1d       	adc	r25, r1
    1374:	b2 9f       	mul	r27, r18
    1376:	70 0d       	add	r23, r0
    1378:	81 1d       	adc	r24, r1
    137a:	11 24       	eor	r1, r1
    137c:	91 1d       	adc	r25, r1
    137e:	08 95       	ret

00001380 <__udivmodhi4>:
    1380:	aa 1b       	sub	r26, r26
    1382:	bb 1b       	sub	r27, r27
    1384:	51 e1       	ldi	r21, 0x11	; 17
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <__udivmodhi4_ep>

00001388 <__udivmodhi4_loop>:
    1388:	aa 1f       	adc	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	a6 17       	cp	r26, r22
    138e:	b7 07       	cpc	r27, r23
    1390:	10 f0       	brcs	.+4      	; 0x1396 <__udivmodhi4_ep>
    1392:	a6 1b       	sub	r26, r22
    1394:	b7 0b       	sbc	r27, r23

00001396 <__udivmodhi4_ep>:
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	5a 95       	dec	r21
    139c:	a9 f7       	brne	.-22     	; 0x1388 <__udivmodhi4_loop>
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	08 95       	ret

000013a8 <__udivmodsi4>:
    13a8:	a1 e2       	ldi	r26, 0x21	; 33
    13aa:	1a 2e       	mov	r1, r26
    13ac:	aa 1b       	sub	r26, r26
    13ae:	bb 1b       	sub	r27, r27
    13b0:	fd 01       	movw	r30, r26
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <__udivmodsi4_ep>

000013b4 <__udivmodsi4_loop>:
    13b4:	aa 1f       	adc	r26, r26
    13b6:	bb 1f       	adc	r27, r27
    13b8:	ee 1f       	adc	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	a2 17       	cp	r26, r18
    13be:	b3 07       	cpc	r27, r19
    13c0:	e4 07       	cpc	r30, r20
    13c2:	f5 07       	cpc	r31, r21
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__udivmodsi4_ep>
    13c6:	a2 1b       	sub	r26, r18
    13c8:	b3 0b       	sbc	r27, r19
    13ca:	e4 0b       	sbc	r30, r20
    13cc:	f5 0b       	sbc	r31, r21

000013ce <__udivmodsi4_ep>:
    13ce:	66 1f       	adc	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	1a 94       	dec	r1
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <__udivmodsi4_loop>
    13da:	60 95       	com	r22
    13dc:	70 95       	com	r23
    13de:	80 95       	com	r24
    13e0:	90 95       	com	r25
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	bd 01       	movw	r22, r26
    13e8:	cf 01       	movw	r24, r30
    13ea:	08 95       	ret

000013ec <__subsf3>:
    13ec:	50 58       	subi	r21, 0x80	; 128

000013ee <__addsf3>:
    13ee:	bb 27       	eor	r27, r27
    13f0:	aa 27       	eor	r26, r26
    13f2:	0e 94 0e 0a 	call	0x141c	; 0x141c <__addsf3x>
    13f6:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_round>
    13fa:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_pscA>
    13fe:	38 f0       	brcs	.+14     	; 0x140e <__addsf3+0x20>
    1400:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscB>
    1404:	20 f0       	brcs	.+8      	; 0x140e <__addsf3+0x20>
    1406:	39 f4       	brne	.+14     	; 0x1416 <__addsf3+0x28>
    1408:	9f 3f       	cpi	r25, 0xFF	; 255
    140a:	19 f4       	brne	.+6      	; 0x1412 <__addsf3+0x24>
    140c:	26 f4       	brtc	.+8      	; 0x1416 <__addsf3+0x28>
    140e:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__fp_nan>
    1412:	0e f4       	brtc	.+2      	; 0x1416 <__addsf3+0x28>
    1414:	e0 95       	com	r30
    1416:	e7 fb       	bst	r30, 7
    1418:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>

0000141c <__addsf3x>:
    141c:	e9 2f       	mov	r30, r25
    141e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fp_split3>
    1422:	58 f3       	brcs	.-42     	; 0x13fa <__addsf3+0xc>
    1424:	ba 17       	cp	r27, r26
    1426:	62 07       	cpc	r22, r18
    1428:	73 07       	cpc	r23, r19
    142a:	84 07       	cpc	r24, r20
    142c:	95 07       	cpc	r25, r21
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__addsf3x+0x1c>
    1430:	79 f4       	brne	.+30     	; 0x1450 <__addsf3x+0x34>
    1432:	a6 f5       	brtc	.+104    	; 0x149c <__addsf3x+0x80>
    1434:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_zero>
    1438:	0e f4       	brtc	.+2      	; 0x143c <__addsf3x+0x20>
    143a:	e0 95       	com	r30
    143c:	0b 2e       	mov	r0, r27
    143e:	ba 2f       	mov	r27, r26
    1440:	a0 2d       	mov	r26, r0
    1442:	0b 01       	movw	r0, r22
    1444:	b9 01       	movw	r22, r18
    1446:	90 01       	movw	r18, r0
    1448:	0c 01       	movw	r0, r24
    144a:	ca 01       	movw	r24, r20
    144c:	a0 01       	movw	r20, r0
    144e:	11 24       	eor	r1, r1
    1450:	ff 27       	eor	r31, r31
    1452:	59 1b       	sub	r21, r25
    1454:	99 f0       	breq	.+38     	; 0x147c <__addsf3x+0x60>
    1456:	59 3f       	cpi	r21, 0xF9	; 249
    1458:	50 f4       	brcc	.+20     	; 0x146e <__addsf3x+0x52>
    145a:	50 3e       	cpi	r21, 0xE0	; 224
    145c:	68 f1       	brcs	.+90     	; 0x14b8 <__addsf3x+0x9c>
    145e:	1a 16       	cp	r1, r26
    1460:	f0 40       	sbci	r31, 0x00	; 0
    1462:	a2 2f       	mov	r26, r18
    1464:	23 2f       	mov	r18, r19
    1466:	34 2f       	mov	r19, r20
    1468:	44 27       	eor	r20, r20
    146a:	58 5f       	subi	r21, 0xF8	; 248
    146c:	f3 cf       	rjmp	.-26     	; 0x1454 <__addsf3x+0x38>
    146e:	46 95       	lsr	r20
    1470:	37 95       	ror	r19
    1472:	27 95       	ror	r18
    1474:	a7 95       	ror	r26
    1476:	f0 40       	sbci	r31, 0x00	; 0
    1478:	53 95       	inc	r21
    147a:	c9 f7       	brne	.-14     	; 0x146e <__addsf3x+0x52>
    147c:	7e f4       	brtc	.+30     	; 0x149c <__addsf3x+0x80>
    147e:	1f 16       	cp	r1, r31
    1480:	ba 0b       	sbc	r27, r26
    1482:	62 0b       	sbc	r22, r18
    1484:	73 0b       	sbc	r23, r19
    1486:	84 0b       	sbc	r24, r20
    1488:	ba f0       	brmi	.+46     	; 0x14b8 <__addsf3x+0x9c>
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	a1 f0       	breq	.+40     	; 0x14b6 <__addsf3x+0x9a>
    148e:	ff 0f       	add	r31, r31
    1490:	bb 1f       	adc	r27, r27
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	c2 f7       	brpl	.-16     	; 0x148a <__addsf3x+0x6e>
    149a:	0e c0       	rjmp	.+28     	; 0x14b8 <__addsf3x+0x9c>
    149c:	ba 0f       	add	r27, r26
    149e:	62 1f       	adc	r22, r18
    14a0:	73 1f       	adc	r23, r19
    14a2:	84 1f       	adc	r24, r20
    14a4:	48 f4       	brcc	.+18     	; 0x14b8 <__addsf3x+0x9c>
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	9e 3f       	cpi	r25, 0xFE	; 254
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <__addsf3x+0x9a>
    14b4:	b0 cf       	rjmp	.-160    	; 0x1416 <__addsf3+0x28>
    14b6:	93 95       	inc	r25
    14b8:	88 0f       	add	r24, r24
    14ba:	08 f0       	brcs	.+2      	; 0x14be <__addsf3x+0xa2>
    14bc:	99 27       	eor	r25, r25
    14be:	ee 0f       	add	r30, r30
    14c0:	97 95       	ror	r25
    14c2:	87 95       	ror	r24
    14c4:	08 95       	ret

000014c6 <__divsf3>:
    14c6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divsf3x>
    14ca:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_round>
    14ce:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscB>
    14d2:	58 f0       	brcs	.+22     	; 0x14ea <__divsf3+0x24>
    14d4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_pscA>
    14d8:	40 f0       	brcs	.+16     	; 0x14ea <__divsf3+0x24>
    14da:	29 f4       	brne	.+10     	; 0x14e6 <__divsf3+0x20>
    14dc:	5f 3f       	cpi	r21, 0xFF	; 255
    14de:	29 f0       	breq	.+10     	; 0x14ea <__divsf3+0x24>
    14e0:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    14e4:	51 11       	cpse	r21, r1
    14e6:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_szero>
    14ea:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__fp_nan>

000014ee <__divsf3x>:
    14ee:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fp_split3>
    14f2:	68 f3       	brcs	.-38     	; 0x14ce <__divsf3+0x8>

000014f4 <__divsf3_pse>:
    14f4:	99 23       	and	r25, r25
    14f6:	b1 f3       	breq	.-20     	; 0x14e4 <__divsf3+0x1e>
    14f8:	55 23       	and	r21, r21
    14fa:	91 f3       	breq	.-28     	; 0x14e0 <__divsf3+0x1a>
    14fc:	95 1b       	sub	r25, r21
    14fe:	55 0b       	sbc	r21, r21
    1500:	bb 27       	eor	r27, r27
    1502:	aa 27       	eor	r26, r26
    1504:	62 17       	cp	r22, r18
    1506:	73 07       	cpc	r23, r19
    1508:	84 07       	cpc	r24, r20
    150a:	38 f0       	brcs	.+14     	; 0x151a <__divsf3_pse+0x26>
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	44 1f       	adc	r20, r20
    1516:	aa 1f       	adc	r26, r26
    1518:	a9 f3       	breq	.-22     	; 0x1504 <__divsf3_pse+0x10>
    151a:	35 d0       	rcall	.+106    	; 0x1586 <__divsf3_pse+0x92>
    151c:	0e 2e       	mov	r0, r30
    151e:	3a f0       	brmi	.+14     	; 0x152e <__divsf3_pse+0x3a>
    1520:	e0 e8       	ldi	r30, 0x80	; 128
    1522:	32 d0       	rcall	.+100    	; 0x1588 <__divsf3_pse+0x94>
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	e6 95       	lsr	r30
    152a:	00 1c       	adc	r0, r0
    152c:	ca f7       	brpl	.-14     	; 0x1520 <__divsf3_pse+0x2c>
    152e:	2b d0       	rcall	.+86     	; 0x1586 <__divsf3_pse+0x92>
    1530:	fe 2f       	mov	r31, r30
    1532:	29 d0       	rcall	.+82     	; 0x1586 <__divsf3_pse+0x92>
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	bb 1f       	adc	r27, r27
    153c:	26 17       	cp	r18, r22
    153e:	37 07       	cpc	r19, r23
    1540:	48 07       	cpc	r20, r24
    1542:	ab 07       	cpc	r26, r27
    1544:	b0 e8       	ldi	r27, 0x80	; 128
    1546:	09 f0       	breq	.+2      	; 0x154a <__divsf3_pse+0x56>
    1548:	bb 0b       	sbc	r27, r27
    154a:	80 2d       	mov	r24, r0
    154c:	bf 01       	movw	r22, r30
    154e:	ff 27       	eor	r31, r31
    1550:	93 58       	subi	r25, 0x83	; 131
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	3a f0       	brmi	.+14     	; 0x1564 <__divsf3_pse+0x70>
    1556:	9e 3f       	cpi	r25, 0xFE	; 254
    1558:	51 05       	cpc	r21, r1
    155a:	78 f0       	brcs	.+30     	; 0x157a <__divsf3_pse+0x86>
    155c:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    1560:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_szero>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	e4 f3       	brlt	.-8      	; 0x1560 <__divsf3_pse+0x6c>
    1568:	98 3e       	cpi	r25, 0xE8	; 232
    156a:	d4 f3       	brlt	.-12     	; 0x1560 <__divsf3_pse+0x6c>
    156c:	86 95       	lsr	r24
    156e:	77 95       	ror	r23
    1570:	67 95       	ror	r22
    1572:	b7 95       	ror	r27
    1574:	f7 95       	ror	r31
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	c9 f7       	brne	.-14     	; 0x156c <__divsf3_pse+0x78>
    157a:	88 0f       	add	r24, r24
    157c:	91 1d       	adc	r25, r1
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	97 f9       	bld	r25, 7
    1584:	08 95       	ret
    1586:	e1 e0       	ldi	r30, 0x01	; 1
    1588:	66 0f       	add	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	bb 1f       	adc	r27, r27
    1590:	62 17       	cp	r22, r18
    1592:	73 07       	cpc	r23, r19
    1594:	84 07       	cpc	r24, r20
    1596:	ba 07       	cpc	r27, r26
    1598:	20 f0       	brcs	.+8      	; 0x15a2 <__divsf3_pse+0xae>
    159a:	62 1b       	sub	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	ba 0b       	sbc	r27, r26
    15a2:	ee 1f       	adc	r30, r30
    15a4:	88 f7       	brcc	.-30     	; 0x1588 <__divsf3_pse+0x94>
    15a6:	e0 95       	com	r30
    15a8:	08 95       	ret

000015aa <__fixsfsi>:
    15aa:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fixunssfsi>
    15ae:	68 94       	set
    15b0:	b1 11       	cpse	r27, r1
    15b2:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_szero>
    15b6:	08 95       	ret

000015b8 <__fixunssfsi>:
    15b8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fp_splitA>
    15bc:	88 f0       	brcs	.+34     	; 0x15e0 <__fixunssfsi+0x28>
    15be:	9f 57       	subi	r25, 0x7F	; 127
    15c0:	98 f0       	brcs	.+38     	; 0x15e8 <__fixunssfsi+0x30>
    15c2:	b9 2f       	mov	r27, r25
    15c4:	99 27       	eor	r25, r25
    15c6:	b7 51       	subi	r27, 0x17	; 23
    15c8:	b0 f0       	brcs	.+44     	; 0x15f6 <__fixunssfsi+0x3e>
    15ca:	e1 f0       	breq	.+56     	; 0x1604 <__fixunssfsi+0x4c>
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	1a f0       	brmi	.+6      	; 0x15dc <__fixunssfsi+0x24>
    15d6:	ba 95       	dec	r27
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <__fixunssfsi+0x14>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <__fixunssfsi+0x4c>
    15dc:	b1 30       	cpi	r27, 0x01	; 1
    15de:	91 f0       	breq	.+36     	; 0x1604 <__fixunssfsi+0x4c>
    15e0:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fp_zero>
    15e4:	b1 e0       	ldi	r27, 0x01	; 1
    15e6:	08 95       	ret
    15e8:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_zero>
    15ec:	67 2f       	mov	r22, r23
    15ee:	78 2f       	mov	r23, r24
    15f0:	88 27       	eor	r24, r24
    15f2:	b8 5f       	subi	r27, 0xF8	; 248
    15f4:	39 f0       	breq	.+14     	; 0x1604 <__fixunssfsi+0x4c>
    15f6:	b9 3f       	cpi	r27, 0xF9	; 249
    15f8:	cc f3       	brlt	.-14     	; 0x15ec <__fixunssfsi+0x34>
    15fa:	86 95       	lsr	r24
    15fc:	77 95       	ror	r23
    15fe:	67 95       	ror	r22
    1600:	b3 95       	inc	r27
    1602:	d9 f7       	brne	.-10     	; 0x15fa <__fixunssfsi+0x42>
    1604:	3e f4       	brtc	.+14     	; 0x1614 <__fixunssfsi+0x5c>
    1606:	90 95       	com	r25
    1608:	80 95       	com	r24
    160a:	70 95       	com	r23
    160c:	61 95       	neg	r22
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	8f 4f       	sbci	r24, 0xFF	; 255
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	08 95       	ret

00001616 <__floatunsisf>:
    1616:	e8 94       	clt
    1618:	09 c0       	rjmp	.+18     	; 0x162c <__floatsisf+0x12>

0000161a <__floatsisf>:
    161a:	97 fb       	bst	r25, 7
    161c:	3e f4       	brtc	.+14     	; 0x162c <__floatsisf+0x12>
    161e:	90 95       	com	r25
    1620:	80 95       	com	r24
    1622:	70 95       	com	r23
    1624:	61 95       	neg	r22
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	8f 4f       	sbci	r24, 0xFF	; 255
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	99 23       	and	r25, r25
    162e:	a9 f0       	breq	.+42     	; 0x165a <__floatsisf+0x40>
    1630:	f9 2f       	mov	r31, r25
    1632:	96 e9       	ldi	r25, 0x96	; 150
    1634:	bb 27       	eor	r27, r27
    1636:	93 95       	inc	r25
    1638:	f6 95       	lsr	r31
    163a:	87 95       	ror	r24
    163c:	77 95       	ror	r23
    163e:	67 95       	ror	r22
    1640:	b7 95       	ror	r27
    1642:	f1 11       	cpse	r31, r1
    1644:	f8 cf       	rjmp	.-16     	; 0x1636 <__floatsisf+0x1c>
    1646:	fa f4       	brpl	.+62     	; 0x1686 <__floatsisf+0x6c>
    1648:	bb 0f       	add	r27, r27
    164a:	11 f4       	brne	.+4      	; 0x1650 <__floatsisf+0x36>
    164c:	60 ff       	sbrs	r22, 0
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <__floatsisf+0x6c>
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <__floatsisf+0x6c>
    165a:	88 23       	and	r24, r24
    165c:	11 f0       	breq	.+4      	; 0x1662 <__floatsisf+0x48>
    165e:	96 e9       	ldi	r25, 0x96	; 150
    1660:	11 c0       	rjmp	.+34     	; 0x1684 <__floatsisf+0x6a>
    1662:	77 23       	and	r23, r23
    1664:	21 f0       	breq	.+8      	; 0x166e <__floatsisf+0x54>
    1666:	9e e8       	ldi	r25, 0x8E	; 142
    1668:	87 2f       	mov	r24, r23
    166a:	76 2f       	mov	r23, r22
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <__floatsisf+0x5e>
    166e:	66 23       	and	r22, r22
    1670:	71 f0       	breq	.+28     	; 0x168e <__floatsisf+0x74>
    1672:	96 e8       	ldi	r25, 0x86	; 134
    1674:	86 2f       	mov	r24, r22
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	2a f0       	brmi	.+10     	; 0x1686 <__floatsisf+0x6c>
    167c:	9a 95       	dec	r25
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	da f7       	brpl	.-10     	; 0x167c <__floatsisf+0x62>
    1686:	88 0f       	add	r24, r24
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <__fp_inf>:
    1690:	97 f9       	bld	r25, 7
    1692:	9f 67       	ori	r25, 0x7F	; 127
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	08 95       	ret

0000169c <__fp_nan>:
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	80 ec       	ldi	r24, 0xC0	; 192
    16a0:	08 95       	ret

000016a2 <__fp_pscA>:
    16a2:	00 24       	eor	r0, r0
    16a4:	0a 94       	dec	r0
    16a6:	16 16       	cp	r1, r22
    16a8:	17 06       	cpc	r1, r23
    16aa:	18 06       	cpc	r1, r24
    16ac:	09 06       	cpc	r0, r25
    16ae:	08 95       	ret

000016b0 <__fp_pscB>:
    16b0:	00 24       	eor	r0, r0
    16b2:	0a 94       	dec	r0
    16b4:	12 16       	cp	r1, r18
    16b6:	13 06       	cpc	r1, r19
    16b8:	14 06       	cpc	r1, r20
    16ba:	05 06       	cpc	r0, r21
    16bc:	08 95       	ret

000016be <__fp_round>:
    16be:	09 2e       	mov	r0, r25
    16c0:	03 94       	inc	r0
    16c2:	00 0c       	add	r0, r0
    16c4:	11 f4       	brne	.+4      	; 0x16ca <__fp_round+0xc>
    16c6:	88 23       	and	r24, r24
    16c8:	52 f0       	brmi	.+20     	; 0x16de <__fp_round+0x20>
    16ca:	bb 0f       	add	r27, r27
    16cc:	40 f4       	brcc	.+16     	; 0x16de <__fp_round+0x20>
    16ce:	bf 2b       	or	r27, r31
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__fp_round+0x18>
    16d2:	60 ff       	sbrs	r22, 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <__fp_round+0x20>
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__fp_split3>:
    16e0:	57 fd       	sbrc	r21, 7
    16e2:	90 58       	subi	r25, 0x80	; 128
    16e4:	44 0f       	add	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	59 f0       	breq	.+22     	; 0x1700 <__fp_splitA+0x10>
    16ea:	5f 3f       	cpi	r21, 0xFF	; 255
    16ec:	71 f0       	breq	.+28     	; 0x170a <__fp_splitA+0x1a>
    16ee:	47 95       	ror	r20

000016f0 <__fp_splitA>:
    16f0:	88 0f       	add	r24, r24
    16f2:	97 fb       	bst	r25, 7
    16f4:	99 1f       	adc	r25, r25
    16f6:	61 f0       	breq	.+24     	; 0x1710 <__fp_splitA+0x20>
    16f8:	9f 3f       	cpi	r25, 0xFF	; 255
    16fa:	79 f0       	breq	.+30     	; 0x171a <__fp_splitA+0x2a>
    16fc:	87 95       	ror	r24
    16fe:	08 95       	ret
    1700:	12 16       	cp	r1, r18
    1702:	13 06       	cpc	r1, r19
    1704:	14 06       	cpc	r1, r20
    1706:	55 1f       	adc	r21, r21
    1708:	f2 cf       	rjmp	.-28     	; 0x16ee <__fp_split3+0xe>
    170a:	46 95       	lsr	r20
    170c:	f1 df       	rcall	.-30     	; 0x16f0 <__fp_splitA>
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <__fp_splitA+0x30>
    1710:	16 16       	cp	r1, r22
    1712:	17 06       	cpc	r1, r23
    1714:	18 06       	cpc	r1, r24
    1716:	99 1f       	adc	r25, r25
    1718:	f1 cf       	rjmp	.-30     	; 0x16fc <__fp_splitA+0xc>
    171a:	86 95       	lsr	r24
    171c:	71 05       	cpc	r23, r1
    171e:	61 05       	cpc	r22, r1
    1720:	08 94       	sec
    1722:	08 95       	ret

00001724 <__fp_zero>:
    1724:	e8 94       	clt

00001726 <__fp_szero>:
    1726:	bb 27       	eor	r27, r27
    1728:	66 27       	eor	r22, r22
    172a:	77 27       	eor	r23, r23
    172c:	cb 01       	movw	r24, r22
    172e:	97 f9       	bld	r25, 7
    1730:	08 95       	ret

00001732 <__mulsf3>:
    1732:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__mulsf3x>
    1736:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_round>
    173a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_pscA>
    173e:	38 f0       	brcs	.+14     	; 0x174e <__mulsf3+0x1c>
    1740:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscB>
    1744:	20 f0       	brcs	.+8      	; 0x174e <__mulsf3+0x1c>
    1746:	95 23       	and	r25, r21
    1748:	11 f0       	breq	.+4      	; 0x174e <__mulsf3+0x1c>
    174a:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    174e:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__fp_nan>
    1752:	11 24       	eor	r1, r1
    1754:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_szero>

00001758 <__mulsf3x>:
    1758:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fp_split3>
    175c:	70 f3       	brcs	.-36     	; 0x173a <__mulsf3+0x8>

0000175e <__mulsf3_pse>:
    175e:	95 9f       	mul	r25, r21
    1760:	c1 f3       	breq	.-16     	; 0x1752 <__mulsf3+0x20>
    1762:	95 0f       	add	r25, r21
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	55 1f       	adc	r21, r21
    1768:	62 9f       	mul	r22, r18
    176a:	f0 01       	movw	r30, r0
    176c:	72 9f       	mul	r23, r18
    176e:	bb 27       	eor	r27, r27
    1770:	f0 0d       	add	r31, r0
    1772:	b1 1d       	adc	r27, r1
    1774:	63 9f       	mul	r22, r19
    1776:	aa 27       	eor	r26, r26
    1778:	f0 0d       	add	r31, r0
    177a:	b1 1d       	adc	r27, r1
    177c:	aa 1f       	adc	r26, r26
    177e:	64 9f       	mul	r22, r20
    1780:	66 27       	eor	r22, r22
    1782:	b0 0d       	add	r27, r0
    1784:	a1 1d       	adc	r26, r1
    1786:	66 1f       	adc	r22, r22
    1788:	82 9f       	mul	r24, r18
    178a:	22 27       	eor	r18, r18
    178c:	b0 0d       	add	r27, r0
    178e:	a1 1d       	adc	r26, r1
    1790:	62 1f       	adc	r22, r18
    1792:	73 9f       	mul	r23, r19
    1794:	b0 0d       	add	r27, r0
    1796:	a1 1d       	adc	r26, r1
    1798:	62 1f       	adc	r22, r18
    179a:	83 9f       	mul	r24, r19
    179c:	a0 0d       	add	r26, r0
    179e:	61 1d       	adc	r22, r1
    17a0:	22 1f       	adc	r18, r18
    17a2:	74 9f       	mul	r23, r20
    17a4:	33 27       	eor	r19, r19
    17a6:	a0 0d       	add	r26, r0
    17a8:	61 1d       	adc	r22, r1
    17aa:	23 1f       	adc	r18, r19
    17ac:	84 9f       	mul	r24, r20
    17ae:	60 0d       	add	r22, r0
    17b0:	21 1d       	adc	r18, r1
    17b2:	82 2f       	mov	r24, r18
    17b4:	76 2f       	mov	r23, r22
    17b6:	6a 2f       	mov	r22, r26
    17b8:	11 24       	eor	r1, r1
    17ba:	9f 57       	subi	r25, 0x7F	; 127
    17bc:	50 40       	sbci	r21, 0x00	; 0
    17be:	9a f0       	brmi	.+38     	; 0x17e6 <__mulsf3_pse+0x88>
    17c0:	f1 f0       	breq	.+60     	; 0x17fe <__mulsf3_pse+0xa0>
    17c2:	88 23       	and	r24, r24
    17c4:	4a f0       	brmi	.+18     	; 0x17d8 <__mulsf3_pse+0x7a>
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	bb 1f       	adc	r27, r27
    17cc:	66 1f       	adc	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	88 1f       	adc	r24, r24
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	a9 f7       	brne	.-22     	; 0x17c2 <__mulsf3_pse+0x64>
    17d8:	9e 3f       	cpi	r25, 0xFE	; 254
    17da:	51 05       	cpc	r21, r1
    17dc:	80 f0       	brcs	.+32     	; 0x17fe <__mulsf3_pse+0xa0>
    17de:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    17e2:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_szero>
    17e6:	5f 3f       	cpi	r21, 0xFF	; 255
    17e8:	e4 f3       	brlt	.-8      	; 0x17e2 <__mulsf3_pse+0x84>
    17ea:	98 3e       	cpi	r25, 0xE8	; 232
    17ec:	d4 f3       	brlt	.-12     	; 0x17e2 <__mulsf3_pse+0x84>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f7 95       	ror	r31
    17f8:	e7 95       	ror	r30
    17fa:	9f 5f       	subi	r25, 0xFF	; 255
    17fc:	c1 f7       	brne	.-16     	; 0x17ee <__mulsf3_pse+0x90>
    17fe:	fe 2b       	or	r31, r30
    1800:	88 0f       	add	r24, r24
    1802:	91 1d       	adc	r25, r1
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret

0000180c <eeprom_read_byte>:
    180c:	f9 99       	sbic	0x1f, 1	; 31
    180e:	fe cf       	rjmp	.-4      	; 0x180c <eeprom_read_byte>
    1810:	92 bd       	out	0x22, r25	; 34
    1812:	81 bd       	out	0x21, r24	; 33
    1814:	f8 9a       	sbi	0x1f, 0	; 31
    1816:	99 27       	eor	r25, r25
    1818:	80 b5       	in	r24, 0x20	; 32
    181a:	08 95       	ret

0000181c <eeprom_write_byte>:
    181c:	26 2f       	mov	r18, r22

0000181e <eeprom_write_r18>:
    181e:	f9 99       	sbic	0x1f, 1	; 31
    1820:	fe cf       	rjmp	.-4      	; 0x181e <eeprom_write_r18>
    1822:	1f ba       	out	0x1f, r1	; 31
    1824:	92 bd       	out	0x22, r25	; 34
    1826:	81 bd       	out	0x21, r24	; 33
    1828:	20 bd       	out	0x20, r18	; 32
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	fa 9a       	sbi	0x1f, 2	; 31
    1830:	f9 9a       	sbi	0x1f, 1	; 31
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	08 95       	ret

00001838 <_exit>:
    1838:	f8 94       	cli

0000183a <__stop_program>:
    183a:	ff cf       	rjmp	.-2      	; 0x183a <__stop_program>
