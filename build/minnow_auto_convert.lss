
build/minnow_auto_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f2 05       	cpc	r31, r2
      6a:	49 06       	cpc	r4, r25
      6c:	5d 06       	cpc	r5, r29
      6e:	8e 06       	cpc	r8, r30
      70:	95 06       	cpc	r9, r21
      72:	74 06       	cpc	r7, r20
      74:	98 06       	cpc	r9, r24
      76:	f6 07       	cpc	r31, r22
      78:	e7 08       	sbc	r14, r7
      7a:	e7 08       	sbc	r14, r7
      7c:	ff 07       	cpc	r31, r31
      7e:	02 08       	sbc	r0, r2
      80:	05 08       	sbc	r0, r5
      82:	07 08       	sbc	r0, r7
      84:	09 08       	sbc	r0, r9
      86:	0b 08       	sbc	r0, r11
      88:	bc 08       	sbc	r11, r12
      8a:	1d 08       	sbc	r1, r13

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 eb       	ldi	r30, 0xB8	; 184
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 39       	cpi	r26, 0x94	; 148
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 99 09 	call	0x1332	; 0x1332 <main>
      da:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
uint32_t last_changed = 0;
int16_t current_light = 0;

// Function that listens for an incoming message and sets new_message flag on reception
message_t recv_message;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  recv_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	ae e1       	ldi	r26, 0x1E	; 30
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  if (recv_message.data[0] == 1) {
      f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <recv_message>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	31 f4       	brne	.+12     	; 0x106 <message_rx+0x24>
    new_message = 1;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <new_message+0x1>
     102:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <new_message>
     106:	08 95       	ret

00000108 <message_tx>:
/* Functions continuously called once minnow converted to shark to
   emit a message, like a beacon */
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
     108:	8a e2       	ldi	r24, 0x2A	; 42
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	08 95       	ret

0000010e <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <message_sent+0x1>
     116:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <message_sent>
     11a:	08 95       	ret

0000011c <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
     11c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
     120:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
     124:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_straight_left>
     128:	0c 94 ed 02 	jmp	0x5da	; 0x5da <set_motors>

0000012c <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     138:	c1 2c       	mov	r12, r1
     13a:	d1 2c       	mov	r13, r1
     13c:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     142:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     146:	8f 3f       	cpi	r24, 0xFF	; 255
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	92 07       	cpc	r25, r18
     14c:	49 f0       	breq	.+18     	; 0x160 <sample_light+0x34>
            sum = sum + sample;
     14e:	09 2e       	mov	r0, r25
     150:	00 0c       	add	r0, r0
     152:	aa 0b       	sbc	r26, r26
     154:	bb 0b       	sbc	r27, r27
     156:	c8 0e       	add	r12, r24
     158:	d9 1e       	adc	r13, r25
     15a:	ea 1e       	adc	r14, r26
     15c:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     15e:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     160:	cc 32       	cpi	r28, 0x2C	; 44
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	d8 07       	cpc	r29, r24
     166:	6c f3       	brlt	.-38     	; 0x142 <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     168:	9e 01       	movw	r18, r28
     16a:	dd 0f       	add	r29, r29
     16c:	44 0b       	sbc	r20, r20
     16e:	55 0b       	sbc	r21, r21
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divmodsi4>
}
     178:	c9 01       	movw	r24, r18
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	08 95       	ret

00000188 <setup>:
}

/* Function runs once upon program initialization
   takes measurement of light at beginning of execution */
void setup() {
  current_light = sample_light();
     188:	0e 94 96 00 	call	0x12c	; 0x12c <sample_light>
     18c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     194:	08 95       	ret

00000196 <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <set_motion+0x12>
     1a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     1a8:	02 97       	sbiw	r24, 0x02	; 2
     1aa:	31 f4       	brne	.+12     	; 0x1b8 <set_motion+0x22>
    spinup_motors();
     1ac:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <set_motion+0x2c>
  } else {
    spinup_motors();
     1b8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1bc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0c 94 ed 02 	jmp	0x5da	; 0x5da <set_motors>

000001c6 <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	19 f4       	brne	.+6      	; 0x1d0 <random_walk+0xa>
     1ca:	0e 94 8e 00 	call	0x11c	; 0x11c <set_motion.part.0>
     1ce:	2f c0       	rjmp	.+94     	; 0x22e <random_walk+0x68>
          set_motion(FORWARD);
      } else if (die == 1) {
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	19 f4       	brne	.+6      	; 0x1dc <random_walk+0x16>
          set_motion(LEFT);
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <random_walk+0x20>
      } else if (die == 2) {
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	91 05       	cpc	r25, r1
     1e0:	29 f4       	brne	.+10     	; 0x1ec <random_walk+0x26>
          set_motion(RIGHT);
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
     1ea:	21 c0       	rjmp	.+66     	; 0x22e <random_walk+0x68>
      } else if (die == 3) {                                  // Error handling, shouldn't reach unless for shark init
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	91 05       	cpc	r25, r1
     1f0:	51 f4       	brne	.+20     	; 0x206 <random_walk+0x40>
          set_color(GREEN);
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
          set_motion(STOP);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	  delay(2000);
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	97 e0       	ldi	r25, 0x07	; 7
     204:	12 c0       	rjmp	.+36     	; 0x22a <random_walk+0x64>
      } else if (die == 4) {
     206:	04 97       	sbiw	r24, 0x04	; 4
     208:	91 f4       	brne	.+36     	; 0x22e <random_walk+0x68>
          set_motion(STOP);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
          set_color(WHITE);
     212:	85 e1       	ldi	r24, 0x15	; 21
     214:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
	  delay(1000);
     218:	88 ee       	ldi	r24, 0xE8	; 232
     21a:	93 e0       	ldi	r25, 0x03	; 3
     21c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delay>
          set_color(GREEN);
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
	  delay(1000);
     226:	88 ee       	ldi	r24, 0xE8	; 232
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delay>
      }
      delay(100);
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delay>

00000236 <shark>:
}

// Function called once converted to shark
int16_t shark() {
  transmit_msg.type = NORMAL;			// Set message parameters
     236:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <transmit_msg+0x9>
  transmit_msg.data[0] = 1;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <transmit_msg>
  transmit_msg.crc = message_crc(&transmit_msg);
     240:	8a e2       	ldi	r24, 0x2A	; 42
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <message_crc>
     248:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <transmit_msg+0xb>
     24c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <transmit_msg+0xa>
  set_color(RED);				// Sharks are always red
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
  if (message_sent == 1) {
     256:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <message_sent>
     25a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <message_sent+0x1>
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	e9 f4       	brne	.+58     	; 0x29c <shark+0x66>
      message_sent = 0;				// Reset flag so message needs to send again
     262:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <message_sent+0x1>
     266:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <message_sent>
      rand = rand_soft();			// Creating random number generator
     26a:	0e 94 92 03 	call	0x724	; 0x724 <rand_soft>
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     274:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
      random_walk(die);
     278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     280:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
      die = (rand % 3);				// Generate new random value
     284:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     288:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     28c:	63 e0       	ldi	r22, 0x03	; 3
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	0e 94 b6 09 	call	0x136c	; 0x136c <__divmodhi4>
     294:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();			// Return current light conditions to main loop
     29c:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

000002a0 <minnow>:
}

// Function initially called when minnow has not yet been converted
int16_t minnow() {
   if (new_message == 1) {	// Indicates transition behavior (turn purple, pause)
     2a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <new_message>
     2a4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <new_message+0x1>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	91 05       	cpc	r25, r1
     2ac:	81 f4       	brne	.+32     	; 0x2ce <minnow+0x2e>
	tagged = 1;
     2ae:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <tagged+0x1>
     2b2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tagged>
	set_color(VIOLET);
     2b6:	81 e1       	ldi	r24, 0x11	; 17
     2b8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
	set_motion(STOP);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
	delay(1500);		// 1.5 second conversion delay
     2c4:	8c ed       	ldi	r24, 0xDC	; 220
     2c6:	95 e0       	ldi	r25, 0x05	; 5
     2c8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delay>
     2cc:	1c c0       	rjmp	.+56     	; 0x306 <minnow+0x66>
	return sample_light();
    } else {
        set_color(BLUE); // Indicates random walk behavior with blue light for minnow
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
        rand = rand_soft();
     2d4:	0e 94 92 03 	call	0x724	; 0x724 <rand_soft>
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     2de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
	random_walk(die);
     2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <random_walk>
        die = (rand % 3);
     2ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rand>
     2f2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rand+0x1>
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 b6 09 	call	0x136c	; 0x136c <__divmodhi4>
     2fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
  return sample_light(); // Again return current light conditions to main loop
     306:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

0000030a <random_delayed>:
}

int16_t random_delayed() {
  last_changed = kilo_ticks;
     30a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_ticks>
     30e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <kilo_ticks+0x1>
     312:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <kilo_ticks+0x2>
     316:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <kilo_ticks+0x3>
     31a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_changed>
     31e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <last_changed+0x1>
     322:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <last_changed+0x2>
     326:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <last_changed+0x3>
  while (kilo_ticks < last_changed + 32) {
     32a:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <kilo_ticks>
     32e:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <kilo_ticks+0x1>
     332:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_ticks+0x2>
     336:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <kilo_ticks+0x3>
     33a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_changed>
     33e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <last_changed+0x1>
     342:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <last_changed+0x2>
     346:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <last_changed+0x3>
     34a:	80 96       	adiw	r24, 0x20	; 32
     34c:	a1 1d       	adc	r26, r1
     34e:	b1 1d       	adc	r27, r1
     350:	48 17       	cp	r20, r24
     352:	59 07       	cpc	r21, r25
     354:	6a 07       	cpc	r22, r26
     356:	7b 07       	cpc	r23, r27
     358:	60 f4       	brcc	.+24     	; 0x372 <random_delayed+0x68>
    if (tagged == 1) {
     35a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     35e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	19 f4       	brne	.+6      	; 0x36c <random_delayed+0x62>
      shark();
     366:	0e 94 1b 01 	call	0x236	; 0x236 <shark>
     36a:	df cf       	rjmp	.-66     	; 0x32a <random_delayed+0x20>
    } else {
      minnow();
     36c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <minnow>
     370:	dc cf       	rjmp	.-72     	; 0x32a <random_delayed+0x20>
    }
  }
  return sample_light();
     372:	0c 94 96 00 	jmp	0x12c	; 0x12c <sample_light>

00000376 <loop>:
}

void loop() {
  if (current_light < 1020 && current_light > 1000) {
     376:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     37a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     37e:	89 5e       	subi	r24, 0xE9	; 233
     380:	93 40       	sbci	r25, 0x03	; 3
     382:	43 97       	sbiw	r24, 0x13	; 19
     384:	70 f4       	brcc	.+28     	; 0x3a2 <loop+0x2c>
    set_motion(STOP);				// 1/2 second delay/movement blocking for either if in shadow
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 cb 00 	call	0x196	; 0x196 <set_motion>
    set_color(GREEN);
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
    delay(500);
     394:	84 ef       	ldi	r24, 0xF4	; 244
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <delay>
    current_light = random_delayed();
     39c:	0e 94 85 01 	call	0x30a	; 0x30a <random_delayed>
     3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <loop+0x42>
  } else {
    if (tagged == 1) {  // Shark, no delay as current_light is above threshold (nonshadow)
     3a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tagged>
     3a6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <tagged+0x1>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <loop+0x3e>
      current_light = shark();
     3ae:	0e 94 1b 01 	call	0x236	; 0x236 <shark>
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <loop+0x42>
    } else {
      current_light = minnow();			// Minnow, no delay as current_light is above threshold (nonshadow)
     3b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <minnow>
     3b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     3bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     3c0:	08 95       	ret

000003c2 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3c2:	08 95       	ret

000003c4 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	08 95       	ret

000003ca <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3ca:	08 95       	ret

000003cc <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
    cli();
     3da:	f8 94       	cli

    ports_off();
     3dc:	14 b8       	out	0x04, r1	; 4
     3de:	17 b8       	out	0x07, r1	; 7
     3e0:	1a b8       	out	0x0a, r1	; 10
     3e2:	15 b8       	out	0x05, r1	; 5
     3e4:	18 b8       	out	0x08, r1	; 8
     3e6:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     3e8:	52 9a       	sbi	0x0a, 2	; 10
     3ea:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     3ec:	14 bc       	out	0x24, r1	; 36
     3ee:	85 e0       	ldi	r24, 0x05	; 5
     3f0:	85 bd       	out	0x25, r24	; 37
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	87 bd       	out	0x27, r24	; 39
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     3fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     400:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     404:	2f e8       	ldi	r18, 0x8F	; 143
     406:	3b e0       	ldi	r19, 0x0B	; 11
     408:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     40c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     410:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     414:	53 98       	cbi	0x0a, 3	; 10
     416:	23 98       	cbi	0x04, 3	; 4
     418:	91 ea       	ldi	r25, 0xA1	; 161
     41a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     41e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     422:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     426:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     42a:	8b e0       	ldi	r24, 0x0B	; 11
     42c:	80 bf       	out	0x30, r24	; 48
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     434:	86 e0       	ldi	r24, 0x06	; 6
     436:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     43a:	83 e8       	ldi	r24, 0x83	; 131
     43c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44e:	86 fd       	sbrc	r24, 6
     450:	fc cf       	rjmp	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
    adc_trigger_high_gain();
     452:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     456:	83 ea       	ldi	r24, 0xA3	; 163
     458:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
    if (osccal != 0xFF)
     46a:	8f 3f       	cpi	r24, 0xFF	; 255
     46c:	11 f0       	breq	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
        OSCCAL = osccal;
     46e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     472:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    rx_leadingbit = 1;
     476:	c1 e0       	ldi	r28, 0x01	; 1
     478:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     47c:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <rx_leadingbyte>
    rx_byteindex = 0;
     480:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
    rx_bytevalue = 0;
     484:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     490:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     494:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <tx_mask>
     498:	88 73       	andi	r24, 0x38	; 56
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
        tx_mask = TX_MASK_MIN;
     49c:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <tx_mask>
    tx_clock = 0;
     4a0:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     4a4:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
    tx_increment = 255;
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     4b0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    kilo_ticks = 0;
     4b4:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <kilo_ticks>
     4b8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <kilo_ticks+0x1>
     4bc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <kilo_ticks+0x2>
     4c0:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <kilo_ticks+0x3>
    kilo_state = IDLE;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    kilo_tx_period = 3906;
     4ca:	82 e4       	ldi	r24, 0x42	; 66
     4cc:	9f e0       	ldi	r25, 0x0F	; 15
     4ce:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <kilo_tx_period+0x1>
     4d2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4d6:	80 eb       	ldi	r24, 0xB0	; 176
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     4de:	c8 2f       	mov	r28, r24
     4e0:	81 eb       	ldi	r24, 0xB1	; 177
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     4e8:	2c 2f       	mov	r18, r28
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	38 2b       	or	r19, r24
     4ee:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <kilo_uid+0x1>
     4f2:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     4f6:	85 e0       	ldi	r24, 0x05	; 5
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     4fe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     502:	89 e0       	ldi	r24, 0x09	; 9
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     50a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     50e:	8c e0       	ldi	r24, 0x0C	; 12
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     516:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     522:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
     526:	0e e5       	ldi	r16, 0x5E	; 94
     528:	11 e0       	ldi	r17, 0x01	; 1
     52a:	57 e3       	ldi	r21, 0x37	; 55
     52c:	e5 2e       	mov	r14, r21
     52e:	51 e0       	ldi	r21, 0x01	; 1
     530:	f5 2e       	mov	r15, r21
     532:	c0 e2       	ldi	r28, 0x20	; 32
     534:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     536:	ce 01       	movw	r24, r28
     538:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     53c:	d8 2e       	mov	r13, r24
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     546:	2d 2d       	mov	r18, r13
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	32 2f       	mov	r19, r18
     54c:	22 27       	eor	r18, r18
     54e:	28 2b       	or	r18, r24
     550:	f8 01       	movw	r30, r16
     552:	21 93       	st	Z+, r18
     554:	31 93       	st	Z+, r19
     556:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     558:	ce 01       	movw	r24, r28
     55a:	c0 96       	adiw	r24, 0x30	; 48
     55c:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     560:	d8 2e       	mov	r13, r24
     562:	ce 01       	movw	r24, r28
     564:	c1 96       	adiw	r24, 0x31	; 49
     566:	0e 94 44 0c 	call	0x1888	; 0x1888 <eeprom_read_byte>
     56a:	2d 2d       	mov	r18, r13
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	32 2f       	mov	r19, r18
     570:	22 27       	eor	r18, r18
     572:	28 2b       	or	r18, r24
     574:	f7 01       	movw	r30, r14
     576:	21 93       	st	Z+, r18
     578:	31 93       	st	Z+, r19
     57a:	7f 01       	movw	r14, r30
     57c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     57e:	cc 33       	cpi	r28, 0x3C	; 60
     580:	d1 05       	cpc	r29, r1
     582:	c9 f6       	brne	.-78     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     584:	78 94       	sei
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	08 95       	ret

00000596 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	8f 93       	push	r24
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	a8 95       	wdr
     5a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5ac:	88 61       	ori	r24, 0x18	; 24
     5ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     5b6:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5b8:	8f 91       	pop	r24
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	41 f0       	breq	.+16     	; 0x5d8 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c8:	ef ec       	ldi	r30, 0xCF	; 207
     5ca:	f7 e0       	ldi	r31, 0x07	; 7
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <delay+0x8>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <delay+0xe>
     5d2:	00 00       	nop
        _delay_ms(1);
        ms--;
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f6 cf       	rjmp	.-20     	; 0x5c4 <delay>
    }
}
     5d8:	08 95       	ret

000005da <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     5de:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     5e2:	08 95       	ret

000005e4 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     5ea:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     5ee:	8f e0       	ldi	r24, 0x0F	; 15
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <delay>

000005f6 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5f6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     5fa:	81 11       	cpse	r24, r1
     5fc:	1e c0       	rjmp	.+60     	; 0x63a <get_ambientlight+0x44>
        cli();
     5fe:	f8 94       	cli
        adc_setup_conversion(7);
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     606:	83 e8       	ldi	r24, 0x83	; 131
     608:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     60c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     610:	80 64       	ori	r24, 0x40	; 64
     612:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     61a:	86 fd       	sbrc	r24, 6
     61c:	fc cf       	rjmp	.-8      	; 0x616 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     61e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     622:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     626:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     62a:	23 ea       	ldi	r18, 0xA3	; 163
     62c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     636:	78 94       	sei
     638:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     63e:	08 95       	ret

00000640 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     640:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     644:	81 11       	cpse	r24, r1
     646:	1e c0       	rjmp	.+60     	; 0x684 <get_temperature+0x44>
        cli();
     648:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     64a:	88 ec       	ldi	r24, 0xC8	; 200
     64c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     650:	87 e8       	ldi	r24, 0x87	; 135
     652:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     656:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     660:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     664:	86 fd       	sbrc	r24, 6
     666:	fc cf       	rjmp	.-8      	; 0x660 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     668:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     66c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     670:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     674:	23 ea       	ldi	r18, 0xA3	; 163
     676:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     680:	78 94       	sei
     682:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     688:	08 95       	ret

0000068a <rand_hard>:

uint8_t rand_hard() {
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     692:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     694:	e3 ea       	ldi	r30, 0xA3	; 163
     696:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     698:	c6 e0       	ldi	r28, 0x06	; 6
     69a:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     69c:	a1 e0       	ldi	r26, 0x01	; 1
     69e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     6a0:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6a2:	f8 94       	cli
            adc_setup_conversion(6);
     6a4:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6a8:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     6ac:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6b0:	40 64       	ori	r20, 0x40	; 64
     6b2:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     6b6:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ba:	46 fd       	sbrc	r20, 6
     6bc:	fc cf       	rjmp	.-8      	; 0x6b6 <rand_hard+0x2c>
            a = ADCW&0x1;
     6be:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6c2:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6c6:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     6c8:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6cc:	50 64       	ori	r21, 0x40	; 64
     6ce:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     6d2:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6d6:	56 fd       	sbrc	r21, 6
     6d8:	fc cf       	rjmp	.-8      	; 0x6d2 <rand_hard+0x48>
            b = ADCW&0x1;
     6da:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6de:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     6e2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6e6:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ea:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     6ee:	78 94       	sei
            tries++;
     6f0:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     6f2:	61 70       	andi	r22, 0x01	; 1
     6f4:	46 17       	cp	r20, r22
     6f6:	51 f0       	breq	.+20     	; 0x70c <rand_hard+0x82>
        if (a)
     6f8:	44 23       	and	r20, r20
     6fa:	59 f0       	breq	.+22     	; 0x712 <rand_hard+0x88>
            num |= (1<<i);
     6fc:	ad 01       	movw	r20, r26
     6fe:	02 2e       	mov	r0, r18
     700:	01 c0       	rjmp	.+2      	; 0x704 <rand_hard+0x7a>
     702:	44 0f       	add	r20, r20
     704:	0a 94       	dec	r0
     706:	ea f7       	brpl	.-6      	; 0x702 <rand_hard+0x78>
     708:	84 2b       	or	r24, r20
     70a:	03 c0       	rjmp	.+6      	; 0x712 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     70c:	90 38       	cpi	r25, 0x80	; 128
     70e:	49 f6       	brne	.-110    	; 0x6a2 <rand_hard+0x18>
     710:	f3 cf       	rjmp	.-26     	; 0x6f8 <rand_hard+0x6e>
     712:	2f 5f       	subi	r18, 0xFF	; 255
     714:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     716:	28 30       	cpi	r18, 0x08	; 8
     718:	31 05       	cpc	r19, r1
     71a:	09 f0       	breq	.+2      	; 0x71e <rand_hard+0x94>
     71c:	c1 cf       	rjmp	.-126    	; 0x6a0 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     724:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     728:	98 e0       	ldi	r25, 0x08	; 8
     72a:	89 9f       	mul	r24, r25
     72c:	90 01       	movw	r18, r0
     72e:	11 24       	eor	r1, r1
     730:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     732:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <accumulator>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	89 0f       	add	r24, r25
     73a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <accumulator>
     73e:	82 2f       	mov	r24, r18
     740:	82 95       	swap	r24
     742:	86 95       	lsr	r24
     744:	87 70       	andi	r24, 0x07	; 7
     746:	28 27       	eor	r18, r24
     748:	96 95       	lsr	r25
     74a:	96 95       	lsr	r25
     74c:	82 2f       	mov	r24, r18
     74e:	89 27       	eor	r24, r25
     750:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     754:	08 95       	ret

00000756 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     756:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     75a:	08 95       	ret

0000075c <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     75c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     760:	81 11       	cpse	r24, r1
     762:	16 c0       	rjmp	.+44     	; 0x790 <get_voltage+0x34>
        cli();                                    // disable interrupts
     764:	f8 94       	cli
        adc_setup_conversion(6);
     766:	86 e0       	ldi	r24, 0x06	; 6
     768:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     76c:	83 e8       	ldi	r24, 0x83	; 131
     76e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     772:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     776:	80 64       	ori	r24, 0x40	; 64
     778:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     77c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     780:	86 fd       	sbrc	r24, 6
     782:	fc cf       	rjmp	.-8      	; 0x77c <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     784:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     788:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     78c:	78 94       	sei
     78e:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     794:	08 95       	ret

00000796 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     796:	2f 92       	push	r2
     798:	3f 92       	push	r3
     79a:	4f 92       	push	r4
     79c:	5f 92       	push	r5
     79e:	6f 92       	push	r6
     7a0:	7f 92       	push	r7
     7a2:	8f 92       	push	r8
     7a4:	9f 92       	push	r9
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7bc:	fc 01       	movw	r30, r24
     7be:	c2 81       	ldd	r28, Z+2	; 0x02
     7c0:	d3 81       	ldd	r29, Z+3	; 0x03
     7c2:	c4 38       	cpi	r28, 0x84	; 132
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	df 07       	cpc	r29, r31
     7c8:	0c f0       	brlt	.+2      	; 0x7cc <estimate_distance+0x36>
     7ca:	7e c0       	rjmp	.+252    	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
        if (dist->high_gain > kilo_irhigh[0]) {
     7cc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <kilo_irhigh>
     7d0:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <kilo_irhigh+0x1>
     7d4:	8c 17       	cp	r24, r28
     7d6:	9d 07       	cpc	r25, r29
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <estimate_distance+0x46>
     7da:	6f c0       	rjmp	.+222    	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     7dc:	e9 e3       	ldi	r30, 0x39	; 57
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7e2:	81 91       	ld	r24, Z+
     7e4:	91 91       	ld	r25, Z+
     7e6:	8c 17       	cp	r24, r28
     7e8:	9d 07       	cpc	r25, r29
     7ea:	20 f0       	brcs	.+8      	; 0x7f4 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     7ec:	1f 5f       	subi	r17, 0xFF	; 255
     7ee:	1e 30       	cpi	r17, 0x0E	; 14
     7f0:	c1 f7       	brne	.-16     	; 0x7e2 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     7f2:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     7f4:	81 2f       	mov	r24, r17
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e9 5c       	subi	r30, 0xC9	; 201
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	e0 80       	ld	r14, Z
     804:	f1 80       	ldd	r15, Z+1	; 0x01
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	fc 01       	movw	r30, r24
     80c:	eb 5c       	subi	r30, 0xCB	; 203
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	b7 01       	movw	r22, r14
     816:	68 1b       	sub	r22, r24
     818:	79 0b       	sbc	r23, r25
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     82a:	4b 01       	movw	r8, r22
     82c:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     82e:	be 01       	movw	r22, r28
     830:	0d 2e       	mov	r0, r29
     832:	00 0c       	add	r0, r0
     834:	88 0b       	sbc	r24, r24
     836:	99 0b       	sbc	r25, r25
     838:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     83c:	2b 01       	movw	r4, r22
     83e:	3c 01       	movw	r6, r24
     840:	b7 01       	movw	r22, r14
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
     84e:	61 2f       	mov	r22, r17
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	5f e3       	ldi	r21, 0x3F	; 63
     862:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	a9 01       	movw	r20, r18
     86c:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     870:	a5 01       	movw	r20, r10
     872:	94 01       	movw	r18, r8
     874:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c3 01       	movw	r24, r6
     88a:	b2 01       	movw	r22, r4
     88c:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e2       	ldi	r20, 0x20	; 32
     896:	51 e4       	ldi	r21, 0x41	; 65
     898:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     89c:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     8a0:	7b 01       	movw	r14, r22
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     8aa:	ab 01       	movw	r20, r22
     8ac:	bc 01       	movw	r22, r24
     8ae:	c7 01       	movw	r24, r14
     8b0:	ba 01       	movw	r22, r20
     8b2:	0e 94 b6 09 	call	0x136c	; 0x136c <__divmodhi4>
     8b6:	16 2f       	mov	r17, r22
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     8ba:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     8bc:	cd 3b       	cpi	r28, 0xBD	; 189
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	d8 07       	cpc	r29, r24
     8c2:	0c f4       	brge	.+2      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     8c4:	ca c0       	rjmp	.+404    	; 0xa5a <__stack+0x15b>
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     8c8:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     8ca:	f1 01       	movw	r30, r2
     8cc:	c0 80       	ld	r12, Z
     8ce:	d1 80       	ldd	r13, Z+1	; 0x01
     8d0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <kilo_irlow>
     8d4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <kilo_irlow+0x1>
     8d8:	8c 15       	cp	r24, r12
     8da:	9d 05       	cpc	r25, r13
     8dc:	88 f0       	brcs	.+34     	; 0x900 <__stack+0x1>
     8de:	e0 e6       	ldi	r30, 0x60	; 96
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     8e8:	e1 90       	ld	r14, Z+
     8ea:	f1 90       	ld	r15, Z+
     8ec:	ec 14       	cp	r14, r12
     8ee:	fd 04       	cpc	r15, r13
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     8f2:	58 c0       	rjmp	.+176    	; 0x9a4 <__stack+0xa5>
     8f4:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     8f6:	8e 30       	cpi	r24, 0x0E	; 14
     8f8:	91 05       	cpc	r25, r1
     8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     8fc:	0a e5       	ldi	r16, 0x5A	; 90
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     900:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     902:	1f 3f       	cpi	r17, 0xFF	; 255
     904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
     906:	4b c0       	rjmp	.+150    	; 0x99e <__stack+0x9f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     908:	be 01       	movw	r22, r28
     90a:	dd 0f       	add	r29, r29
     90c:	88 0b       	sbc	r24, r24
     90e:	99 0b       	sbc	r25, r25
     910:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     914:	6b 01       	movw	r12, r22
     916:	7c 01       	movw	r14, r24
     918:	61 2f       	mov	r22, r17
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     924:	4b 01       	movw	r8, r22
     926:	5c 01       	movw	r10, r24
     928:	a7 01       	movw	r20, r14
     92a:	96 01       	movw	r18, r12
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	81 e6       	ldi	r24, 0x61	; 97
     932:	94 e4       	ldi	r25, 0x44	; 68
     934:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	c5 01       	movw	r24, r10
     93e:	b4 01       	movw	r22, r8
     940:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     944:	4b 01       	movw	r8, r22
     946:	5c 01       	movw	r10, r24
     948:	60 2f       	mov	r22, r16
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     954:	2b 01       	movw	r4, r22
     956:	3c 01       	movw	r6, r24
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4f e2       	ldi	r20, 0x2F	; 47
     95e:	54 e4       	ldi	r21, 0x44	; 68
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	c3 01       	movw	r24, r6
     96e:	b2 01       	movw	r22, r4
     970:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     974:	9b 01       	movw	r18, r22
     976:	ac 01       	movw	r20, r24
     978:	c5 01       	movw	r24, r10
     97a:	b4 01       	movw	r22, r8
     97c:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	48 e4       	ldi	r20, 0x48	; 72
     986:	53 e4       	ldi	r21, 0x43	; 67
     988:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__divsf3>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	44 e0       	ldi	r20, 0x04	; 4
     992:	52 e4       	ldi	r21, 0x42	; 66
     994:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     998:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
     99c:	60 c0       	rjmp	.+192    	; 0xa5e <__stack+0x15f>
        } else {
            return 33 + dist_low;
     99e:	61 e2       	ldi	r22, 0x21	; 33
     9a0:	60 0f       	add	r22, r16
     9a2:	5d c0       	rjmp	.+186    	; 0xa5e <__stack+0x15f>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	fc 01       	movw	r30, r24
     9aa:	e4 5a       	subi	r30, 0xA4	; 164
     9ac:	fe 4f       	sbci	r31, 0xFE	; 254
     9ae:	80 81       	ld	r24, Z
     9b0:	91 81       	ldd	r25, Z+1	; 0x01
     9b2:	b7 01       	movw	r22, r14
     9b4:	68 1b       	sub	r22, r24
     9b6:	79 0b       	sbc	r23, r25
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     9c8:	4b 01       	movw	r8, r22
     9ca:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     9cc:	b6 01       	movw	r22, r12
     9ce:	dd 0c       	add	r13, r13
     9d0:	88 0b       	sbc	r24, r24
     9d2:	99 0b       	sbc	r25, r25
     9d4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__floatsisf>
     9d8:	2b 01       	movw	r4, r22
     9da:	3c 01       	movw	r6, r24
     9dc:	b7 01       	movw	r22, r14
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     9e6:	6b 01       	movw	r12, r22
     9e8:	7c 01       	movw	r14, r24
     9ea:	63 2d       	mov	r22, r3
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatunsisf>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	5f e3       	ldi	r21, 0x3F	; 63
     9fe:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	a9 01       	movw	r20, r18
     a08:	0e 94 35 0a 	call	0x146a	; 0x146a <__addsf3>
     a0c:	a5 01       	movw	r20, r10
     a0e:	94 01       	movw	r18, r8
     a10:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	0e 94 34 0a 	call	0x1468	; 0x1468 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__mulsf3>
     a38:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     a3c:	7b 01       	movw	r14, r22
     a3e:	c5 01       	movw	r24, r10
     a40:	b4 01       	movw	r22, r8
     a42:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fixsfsi>
     a46:	ab 01       	movw	r20, r22
     a48:	bc 01       	movw	r22, r24
     a4a:	c7 01       	movw	r24, r14
     a4c:	ba 01       	movw	r22, r20
     a4e:	0e 94 b6 09 	call	0x136c	; 0x136c <__divmodhi4>
     a52:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     a54:	6f 3f       	cpi	r22, 0xFF	; 255
     a56:	09 f0       	breq	.+2      	; 0xa5a <__stack+0x15b>
     a58:	54 cf       	rjmp	.-344    	; 0x902 <__stack+0x3>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     a5a:	61 e2       	ldi	r22, 0x21	; 33
     a5c:	61 0f       	add	r22, r17
    }
}
     a5e:	86 2f       	mov	r24, r22
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	08 95       	ret

00000a86 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
    tx_clock += tx_increment;
     aa8:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     aac:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     ab0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tx_increment>
     ab4:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <tx_increment+0x1>
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tx_clock+0x1>
     ac0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tx_clock>
    tx_increment = 0xFF;
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <tx_increment+0x1>
     acc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_increment>
    OCR0A = tx_increment;
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     ad4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_ticks>
     ad8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <kilo_ticks+0x1>
     adc:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <kilo_ticks+0x2>
     ae0:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <kilo_ticks+0x3>
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	a1 1d       	adc	r26, r1
     ae8:	b1 1d       	adc	r27, r1
     aea:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_ticks>
     aee:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <kilo_ticks+0x1>
     af2:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <kilo_ticks+0x2>
     af6:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     afa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     afe:	81 11       	cpse	r24, r1
     b00:	2d c0       	rjmp	.+90     	; 0xb5c <__vector_14+0xd6>
     b02:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_tx_period>
     b06:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <kilo_tx_period+0x1>
     b0a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tx_clock>
     b0e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tx_clock+0x1>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	10 f5       	brcc	.+68     	; 0xb5c <__vector_14+0xd6>
     b18:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
     b1c:	84 30       	cpi	r24, 0x04	; 4
     b1e:	f1 f4       	brne	.+60     	; 0xb5c <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     b20:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     b24:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     b28:	09 95       	icall
        if (msg) {
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	b9 f0       	breq	.+46     	; 0xb5c <__vector_14+0xd6>
            if (message_send(msg)) {
     b2e:	0e 94 16 09 	call	0x122c	; 0x122c <message_send>
     b32:	88 23       	and	r24, r24
     b34:	51 f0       	breq	.+20     	; 0xb4a <__vector_14+0xc4>
                kilo_message_tx_success();
     b36:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     b3a:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     b3e:	09 95       	icall
                tx_clock = 0;
     b40:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tx_clock+0x1>
     b44:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <tx_clock>
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     b4a:	0e 94 88 00 	call	0x110	; 0x110 <message_tx_success+0x2>
     b4e:	9c 01       	movw	r18, r24
     b50:	33 27       	eor	r19, r19
     b52:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <tx_increment+0x1>
     b56:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <tx_increment>
                OCR0A = tx_increment;
     b5a:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     b7e:	80 ff       	sbrs	r24, 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <set_color+0x8>
        DDRD |= (1<<5);
     b82:	55 9a       	sbi	0x0a, 5	; 10
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     b86:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     b88:	81 ff       	sbrs	r24, 1
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <set_color+0x12>
        DDRD |= (1<<4);
     b8c:	54 9a       	sbi	0x0a, 4	; 10
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     b90:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     b92:	82 ff       	sbrs	r24, 2
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <set_color+0x1c>
        DDRC |= (1<<3);
     b96:	3b 9a       	sbi	0x07, 3	; 7
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     b9a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     b9c:	83 ff       	sbrs	r24, 3
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <set_color+0x26>
        DDRC |= (1<<2);
     ba0:	3a 9a       	sbi	0x07, 2	; 7
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     ba4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ba6:	84 ff       	sbrs	r24, 4
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <set_color+0x30>
        DDRC |= (1<<5);
     baa:	3d 9a       	sbi	0x07, 5	; 7
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     bae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     bb0:	85 ff       	sbrs	r24, 5
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <set_color+0x3a>
        DDRC |= (1<<4);
     bb4:	3c 9a       	sbi	0x07, 4	; 7
     bb6:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     bb8:	3c 98       	cbi	0x07, 4	; 7
     bba:	08 95       	ret

00000bbc <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     bbc:	8c 01       	movw	r16, r24
     bbe:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     bc0:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     bc2:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     bc8:	98 e1       	ldi	r25, 0x18	; 24
     bca:	c9 2e       	mov	r12, r25
     bcc:	29 e2       	ldi	r18, 0x29	; 41
     bce:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     bd0:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <kilo_state>
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e7 30       	cpi	r30, 0x07	; 7
     bd8:	f1 05       	cpc	r31, r1
     bda:	d0 f7       	brcc	.-12     	; 0xbd0 <kilo_start+0x14>
     bdc:	ec 5c       	subi	r30, 0xCC	; 204
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__tablejump2__>
            case SLEEPING:
                cli();
     be4:	f8 94       	cli
                acomp_off();
     be6:	80 b7       	in	r24, 0x30	; 48
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	80 bf       	out	0x30, r24	; 48
                adc_off();
     bec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bf0:	8f 77       	andi	r24, 0x7F	; 127
     bf2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     bf6:	14 b8       	out	0x04, r1	; 4
     bf8:	17 b8       	out	0x07, r1	; 7
     bfa:	1a b8       	out	0x0a, r1	; 10
     bfc:	15 b8       	out	0x05, r1	; 5
     bfe:	18 b8       	out	0x08, r1	; 8
     c00:	1b b8       	out	0x0b, r1	; 11
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	a8 95       	wdr
     c08:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     c12:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     c1c:	83 b7       	in	r24, 0x33	; 51
     c1e:	81 7f       	andi	r24, 0xF1	; 241
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	83 bf       	out	0x33, r24	; 51
                cli();
     c24:	f8 94       	cli
                sleep_enable();
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	83 bf       	out	0x33, r24	; 51
                sei();
     c2c:	78 94       	sei
                sleep_cpu();
     c2e:	88 95       	sleep
                sleep_disable();
     c30:	83 b7       	in	r24, 0x33	; 51
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	83 bf       	out	0x33, r24	; 51
                sei();
     c36:	78 94       	sei
                rx_busy = 0;
     c38:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
                ports_on();
     c3c:	52 9a       	sbi	0x0a, 2	; 10
     c3e:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     c40:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4a:	87 e5       	ldi	r24, 0x57	; 87
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <kilo_start+0x92>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <kilo_start+0x98>
     c54:	00 00       	nop
                _delay_us(300);
                acomp_on();
     c56:	80 b7       	in	r24, 0x30	; 48
     c58:	88 61       	ori	r24, 0x18	; 24
     c5a:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     c5c:	8f e3       	ldi	r24, 0x3F	; 63
     c5e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c62:	ef e1       	ldi	r30, 0x1F	; 31
     c64:	fe e4       	ldi	r31, 0x4E	; 78
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <kilo_start+0xaa>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <kilo_start+0xb0>
     c6c:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     c6e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_busy>
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <kilo_start+0xbc>
     c76:	50 c0       	rjmp	.+160    	; 0xd18 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     c7e:	ff ef       	ldi	r31, 0xFF	; 255
     c80:	20 e7       	ldi	r18, 0x70	; 112
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	f1 50       	subi	r31, 0x01	; 1
     c86:	20 40       	sbci	r18, 0x00	; 0
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <kilo_start+0xc8>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <kilo_start+0xd2>
     c8e:	00 00       	nop
     c90:	43 c0       	rjmp	.+134    	; 0xd18 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     c98:	ef ec       	ldi	r30, 0xCF	; 207
     c9a:	f7 e0       	ldi	r31, 0x07	; 7
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <kilo_start+0xe0>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <kilo_start+0xe6>
     ca2:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     caa:	ff ef       	ldi	r31, 0xFF	; 255
     cac:	21 ee       	ldi	r18, 0xE1	; 225
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	f1 50       	subi	r31, 0x01	; 1
     cb2:	20 40       	sbci	r18, 0x00	; 0
     cb4:	80 40       	sbci	r24, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <kilo_start+0xf4>
     cb8:	2c c0       	rjmp	.+88     	; 0xd12 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     cba:	0e 94 ae 03 	call	0x75c	; 0x75c <get_voltage>
                if(voltage > 682)
     cbe:	8b 3a       	cpi	r24, 0xAB	; 171
     cc0:	e2 e0       	ldi	r30, 0x02	; 2
     cc2:	9e 07       	cpc	r25, r30
     cc4:	24 f0       	brlt	.+8      	; 0xcce <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     cc6:	8c e0       	ldi	r24, 0x0C	; 12
     cc8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     ccc:	81 cf       	rjmp	.-254    	; 0xbd0 <kilo_start+0x14>
                else if(voltage > 648)
     cce:	89 38       	cpi	r24, 0x89	; 137
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	9f 07       	cpc	r25, r31
     cd4:	14 f0       	brlt	.+4      	; 0xcda <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     cd6:	80 e3       	ldi	r24, 0x30	; 48
     cd8:	f7 cf       	rjmp	.-18     	; 0xcc8 <kilo_start+0x10c>
                else if(voltage > 614)
     cda:	87 36       	cpi	r24, 0x67	; 103
     cdc:	92 40       	sbci	r25, 0x02	; 2
     cde:	14 f0       	brlt	.+4      	; 0xce4 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	f2 cf       	rjmp	.-28     	; 0xcc8 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	f0 cf       	rjmp	.-32     	; 0xcc8 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     ce8:	48 99       	sbic	0x09, 0	; 9
     cea:	16 c0       	rjmp	.+44     	; 0xd18 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     cf2:	8f ec       	ldi	r24, 0xCF	; 207
     cf4:	97 e0       	ldi	r25, 0x07	; 7
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <kilo_start+0x13a>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <kilo_start+0x140>
     cfc:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	e1 ee       	ldi	r30, 0xE1	; 225
     d08:	f4 e0       	ldi	r31, 0x04	; 4
     d0a:	91 50       	subi	r25, 0x01	; 1
     d0c:	e0 40       	sbci	r30, 0x00	; 0
     d0e:	f0 40       	sbci	r31, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <kilo_start+0x14e>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <kilo_start+0x158>
     d14:	00 00       	nop
     d16:	5c cf       	rjmp	.-328    	; 0xbd0 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	d6 cf       	rjmp	.-84     	; 0xcc8 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     d1c:	d1 11       	cpse	r29, r1
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <kilo_start+0x168>
                    setup();
     d20:	f8 01       	movw	r30, r16
     d22:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     d24:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <kilo_state>
     d28:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     d2a:	f7 01       	movw	r30, r14
     d2c:	09 95       	icall
                break;
     d2e:	50 cf       	rjmp	.-352    	; 0xbd0 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     d30:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d34:	81 11       	cpse	r24, r1
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d38:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d3c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     d40:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
     d44:	45 cf       	rjmp	.-374    	; 0xbd0 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     d46:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
     d4a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <prev_motion>
     d4e:	98 17       	cp	r25, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <kilo_start+0x198>
     d52:	3e cf       	rjmp	.-388    	; 0xbd0 <kilo_start+0x14>
                        prev_motion = cur_motion;
     d54:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d58:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     d5c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	89 f4       	brne	.+34     	; 0xd86 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d64:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d68:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d6c:	8f e2       	ldi	r24, 0x2F	; 47
     d6e:	95 e7       	ldi	r25, 0x75	; 117
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <kilo_start+0x1b4>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <kilo_start+0x1ba>
     d76:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     d78:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d7c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d80:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d84:	25 cf       	rjmp	.-438    	; 0xbd0 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d86:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d8a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d8e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	59 f4       	brne	.+22     	; 0xdac <kilo_start+0x1f0>
     d96:	ef e2       	ldi	r30, 0x2F	; 47
     d98:	f5 e7       	ldi	r31, 0x75	; 117
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <kilo_start+0x1de>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <kilo_start+0x1e4>
     da0:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     da2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     da6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     daa:	10 c0       	rjmp	.+32     	; 0xdcc <kilo_start+0x210>
     dac:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     db0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     db4:	8f e2       	ldi	r24, 0x2F	; 47
     db6:	95 e7       	ldi	r25, 0x75	; 117
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <kilo_start+0x1fc>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <kilo_start+0x202>
     dbe:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     dc0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <kilo_straight_right>
     dc4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     dc8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     dcc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dd0:	ff ce       	rjmp	.-514    	; 0xbd0 <kilo_start+0x14>

00000dd2 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
    rx_timer_off();
     de0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     de4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     de8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rx_leadingbit>
    rx_leadingbyte = 1;
     df2:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
    rx_busy = 0;
     df6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
    adc_trigger_high_gain();
     dfa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     dfe:	93 ea       	ldi	r25, 0xA3	; 163
     e00:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e04:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     e08:	9f 91       	pop	r25
     e0a:	8f 91       	pop	r24
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     e3c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e40:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     e4a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rx_leadingbit>
     e4e:	88 23       	and	r24, r24
     e50:	21 f1       	breq	.+72     	; 0xe9a <__vector_23+0x84>
        rx_timer_on();
     e52:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e56:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     e5a:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     e5e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <rx_bytevalue>
        rx_leadingbit = 0;
     e62:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rx_leadingbit>
        if (rx_leadingbyte) {
     e66:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     e6a:	88 23       	and	r24, r24
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__vector_23+0x5a>
     e6e:	af c1       	rjmp	.+862    	; 0x11ce <__vector_23+0x3b8>
            adc_finish_conversion();
     e70:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e74:	86 fd       	sbrc	r24, 6
     e76:	fc cf       	rjmp	.-8      	; 0xe70 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     e78:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e7c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e80:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <rx_dist+0x3>
     e84:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_dist+0x2>
            adc_trigger_low_gain();
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e8e:	93 ea       	ldi	r25, 0xA3	; 163
     e90:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e94:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e98:	9a c1       	rjmp	.+820    	; 0x11ce <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     e9a:	c9 01       	movw	r24, r18
     e9c:	87 58       	subi	r24, 0x87	; 135
     e9e:	91 09       	sbc	r25, r1
     ea0:	84 37       	cpi	r24, 0x74	; 116
     ea2:	99 40       	sbci	r25, 0x09	; 9
     ea4:	a0 f0       	brcs	.+40     	; 0xece <__vector_23+0xb8>
            rx_timer_off();
     ea6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     eaa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     eae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     eb2:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
            rx_leadingbyte = 1;
     eb6:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
            rx_busy = 0;
     eba:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
            adc_trigger_high_gain();
     ebe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ec2:	83 ea       	ldi	r24, 0xA3	; 163
     ec4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ec8:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     ecc:	80 c1       	rjmp	.+768    	; 0x11ce <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     ece:	26 58       	subi	r18, 0x86	; 134
     ed0:	31 09       	sbc	r19, r1
     ed2:	a4 ef       	ldi	r26, 0xF4	; 244
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	0e 94 ef 09 	call	0x13de	; 0x13de <__umulhisi3>
     eda:	8c 01       	movw	r16, r24
     edc:	22 27       	eor	r18, r18
     ede:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     ee0:	08 30       	cpi	r16, 0x08	; 8
     ee2:	60 f4       	brcc	.+24     	; 0xefc <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <__vector_23+0xd6>
     eea:	88 0f       	add	r24, r24
     eec:	0a 95       	dec	r16
     eee:	ea f7       	brpl	.-6      	; 0xeea <__vector_23+0xd4>
     ef0:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     ef4:	89 2b       	or	r24, r25
     ef6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rx_bytevalue>
     efa:	69 c1       	rjmp	.+722    	; 0x11ce <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     efc:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <rx_leadingbit>
                if (rx_leadingbyte) {
     f00:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_leadingbyte>
     f04:	88 23       	and	r24, r24
     f06:	41 f1       	breq	.+80     	; 0xf58 <__vector_23+0x142>
                    adc_finish_conversion();
     f08:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f0c:	86 fd       	sbrc	r24, 6
     f0e:	fc cf       	rjmp	.-8      	; 0xf08 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     f10:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f14:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f18:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <rx_dist+0x1>
     f1c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_dist>
                    adc_trigger_high_gain();
     f20:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f24:	83 ea       	ldi	r24, 0xA3	; 163
     f26:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     f30:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     f34:	99 23       	and	r25, r25
     f36:	59 f0       	breq	.+22     	; 0xf4e <__vector_23+0x138>
                        rx_timer_off();
     f38:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f3c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f40:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f44:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     f48:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>
     f4c:	40 c1       	rjmp	.+640    	; 0x11ce <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     f4e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_leadingbyte>
                        rx_byteindex = 0;
     f52:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_byteindex>
     f56:	3b c1       	rjmp	.+630    	; 0x11ce <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f58:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_byteindex>
     f5c:	e8 2f       	mov	r30, r24
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	e0 58       	subi	r30, 0x80	; 128
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_bytevalue>
     f68:	90 83       	st	Z, r25
                    rx_byteindex++;
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     f70:	8c 30       	cpi	r24, 0x0C	; 12
     f72:	09 f0       	breq	.+2      	; 0xf76 <__vector_23+0x160>
     f74:	2c c1       	rjmp	.+600    	; 0x11ce <__vector_23+0x3b8>
                        rx_timer_off();
     f76:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     f82:	40 93 7a 01 	sts	0x017A, r20	; 0x80017a <rx_leadingbyte>
                        rx_busy = 0;
     f86:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     f8a:	00 91 8a 01 	lds	r16, 0x018A	; 0x80018a <rx_msg+0xa>
     f8e:	10 91 8b 01 	lds	r17, 0x018B	; 0x80018b <rx_msg+0xb>
     f92:	80 e8       	ldi	r24, 0x80	; 128
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <message_crc>
     f9a:	08 17       	cp	r16, r24
     f9c:	19 07       	cpc	r17, r25
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__vector_23+0x18c>
     fa0:	16 c1       	rjmp	.+556    	; 0x11ce <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fa2:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <rx_msg+0x9>
     fa6:	e7 fd       	sbrc	r30, 7
     fa8:	0a c0       	rjmp	.+20     	; 0xfbe <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     faa:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     fae:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     fb2:	65 e5       	ldi	r22, 0x55	; 85
     fb4:	71 e0       	ldi	r23, 0x01	; 1
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	09 95       	icall
     fbc:	08 c1       	rjmp	.+528    	; 0x11ce <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fbe:	88 e7       	ldi	r24, 0x78	; 120
     fc0:	8e 0f       	add	r24, r30
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	30 f0       	brcs	.+12     	; 0xfd2 <__vector_23+0x1bc>
        motors_off();
     fc6:	53 98       	cbi	0x0a, 3	; 10
     fc8:	23 98       	cbi	0x04, 3	; 4
     fca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     fd2:	8e 2f       	mov	r24, r30
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	fc 01       	movw	r30, r24
     fd8:	e0 58       	subi	r30, 0x80	; 128
     fda:	f1 09       	sbc	r31, r1
     fdc:	eb 30       	cpi	r30, 0x0B	; 11
     fde:	f1 05       	cpc	r31, r1
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <__vector_23+0x1ce>
     fe2:	f5 c0       	rjmp	.+490    	; 0x11ce <__vector_23+0x3b8>
     fe4:	e5 5c       	subi	r30, 0xC5	; 197
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     fec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ff6:	16 bc       	out	0x26, r1	; 38
            bootload();
     ff8:	e0 e0       	ldi	r30, 0x00	; 0
     ffa:	f0 e7       	ldi	r31, 0x70	; 112
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1004:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <kilo_state>
    1008:	e2 c0       	rjmp	.+452    	; 0x11ce <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	b2 c0       	rjmp	.+356    	; 0x1172 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    100e:	85 e0       	ldi	r24, 0x05	; 5
    1010:	b0 c0       	rjmp	.+352    	; 0x1172 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	ae c0       	rjmp	.+348    	; 0x1172 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1016:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	09 f4       	brne	.+2      	; 0x1020 <__vector_23+0x20a>
    101e:	d7 c0       	rjmp	.+430    	; 0x11ce <__vector_23+0x3b8>
    1020:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	09 f4       	brne	.+2      	; 0x102a <__vector_23+0x214>
    1028:	d2 c0       	rjmp	.+420    	; 0x11ce <__vector_23+0x3b8>
                motors_on();
    102a:	53 9a       	sbi	0x0a, 3	; 10
    102c:	23 9a       	sbi	0x04, 3	; 4
    102e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1032:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	9c c0       	rjmp	.+312    	; 0x1172 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    103a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	09 f4       	brne	.+2      	; 0x1044 <__vector_23+0x22e>
    1042:	4b c0       	rjmp	.+150    	; 0x10da <__vector_23+0x2c4>
    1044:	80 f4       	brcc	.+32     	; 0x1066 <__vector_23+0x250>
    1046:	88 23       	and	r24, r24
    1048:	a9 f0       	breq	.+42     	; 0x1074 <__vector_23+0x25e>
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <__vector_23+0x23a>
    104e:	82 c0       	rjmp	.+260    	; 0x1154 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1050:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x1>
    1054:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <rx_msg+0x2>
    1058:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <kilo_uid+0x1>
    105c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_uid>
                    cur_motion = MOVE_STOP;
    1060:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
    1064:	77 c0       	rjmp	.+238    	; 0x1154 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	09 f4       	brne	.+2      	; 0x106c <__vector_23+0x256>
    106a:	49 c0       	rjmp	.+146    	; 0x10fe <__vector_23+0x2e8>
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	09 f4       	brne	.+2      	; 0x1072 <__vector_23+0x25c>
    1070:	58 c0       	rjmp	.+176    	; 0x1122 <__vector_23+0x30c>
    1072:	70 c0       	rjmp	.+224    	; 0x1154 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1074:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1078:	86 30       	cpi	r24, 0x06	; 6
    107a:	09 f0       	breq	.+2      	; 0x107e <__vector_23+0x268>
    107c:	6b c0       	rjmp	.+214    	; 0x1154 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    107e:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <kilo_uid>
    1082:	80 eb       	ldi	r24, 0xB0	; 176
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    108a:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <kilo_uid+0x1>
    108e:	81 eb       	ldi	r24, 0xB1	; 177
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1096:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_turn_left>
    109a:	85 e0       	ldi	r24, 0x05	; 5
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    10a2:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_right>
    10a6:	89 e0       	ldi	r24, 0x09	; 9
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    10ae:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_straight_left>
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    10ba:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_straight_right>
    10be:	84 e1       	ldi	r24, 0x14	; 20
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <eeprom_write_byte>
                        motors_off();
    10c6:	53 98       	cbi	0x0a, 3	; 10
    10c8:	23 98       	cbi	0x04, 3	; 4
    10ca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    10d8:	3d c0       	rjmp	.+122    	; 0x1154 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    10da:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    10de:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <rx_msg+0x3>
    10e2:	91 30       	cpi	r25, 0x01	; 1
    10e4:	21 f4       	brne	.+8      	; 0x10ee <__vector_23+0x2d8>
    10e6:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <kilo_turn_left>
    10ea:	89 17       	cp	r24, r25
    10ec:	99 f1       	breq	.+102    	; 0x1154 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    10ee:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_LEFT;
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    10f8:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_turn_left>
    10fc:	2b c0       	rjmp	.+86     	; 0x1154 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    10fe:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
    1102:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_msg+0x4>
    1106:	92 30       	cpi	r25, 0x02	; 2
    1108:	21 f4       	brne	.+8      	; 0x1112 <__vector_23+0x2fc>
    110a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_right>
    110e:	89 17       	cp	r24, r25
    1110:	09 f1       	breq	.+66     	; 0x1154 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1112:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    111c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_right>
    1120:	19 c0       	rjmp	.+50     	; 0x1154 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1122:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <cur_motion>
    1126:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <rx_msg+0x6>
    112a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rx_msg+0x5>
    112e:	23 30       	cpi	r18, 0x03	; 3
    1130:	41 f4       	brne	.+16     	; 0x1142 <__vector_23+0x32c>
    1132:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <kilo_straight_right>
    1136:	82 13       	cpse	r24, r18
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <__vector_23+0x32c>
    113a:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <kilo_straight_left>
    113e:	92 17       	cp	r25, r18
    1140:	49 f0       	breq	.+18     	; 0x1154 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1142:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1146:	23 e0       	ldi	r18, 0x03	; 3
    1148:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    114c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1150:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1154:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg>
    1158:	88 23       	and	r24, r24
    115a:	c9 f1       	breq	.+114    	; 0x11ce <__vector_23+0x3b8>
    115c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    1160:	86 30       	cpi	r24, 0x06	; 6
    1162:	a9 f1       	breq	.+106    	; 0x11ce <__vector_23+0x3b8>
                motors_on();
    1164:	53 9a       	sbi	0x0a, 3	; 10
    1166:	23 9a       	sbi	0x04, 3	; 4
    1168:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    116c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
    1176:	2b c0       	rjmp	.+86     	; 0x11ce <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1178:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kilo_state>
    117c:	86 30       	cpi	r24, 0x06	; 6
    117e:	81 f0       	breq	.+32     	; 0x11a0 <__vector_23+0x38a>
                motors_on();
    1180:	53 9a       	sbi	0x0a, 3	; 10
    1182:	23 9a       	sbi	0x04, 3	; 4
    1184:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1188:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1192:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
    1196:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_motion>
                kilo_state = MOVING;
    119a:	86 e0       	ldi	r24, 0x06	; 6
    119c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	00 90 80 01 	lds	r0, 0x0180	; 0x800180 <rx_msg>
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <__vector_23+0x398>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <__vector_23+0x394>
    11b2:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <kilo_uid>
    11b6:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <kilo_uid+0x1>
    11ba:	82 23       	and	r24, r18
    11bc:	93 23       	and	r25, r19
    11be:	89 2b       	or	r24, r25
    11c0:	21 f0       	breq	.+8      	; 0x11ca <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cur_motion>
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    11ca:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cur_motion>
                    }
                }
            }
        }
    }
}
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    11f4:	fc 01       	movw	r30, r24
    11f6:	9c 01       	movw	r18, r24
    11f8:	26 5f       	subi	r18, 0xF6	; 246
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1200:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1202:	84 27       	eor	r24, r20
    1204:	08 2e       	mov	r0, r24
    1206:	82 95       	swap	r24
    1208:	80 7f       	andi	r24, 0xF0	; 240
    120a:	80 25       	eor	r24, r0
    120c:	09 2e       	mov	r0, r25
    120e:	98 2f       	mov	r25, r24
    1210:	82 95       	swap	r24
    1212:	8f 70       	andi	r24, 0x0F	; 15
    1214:	08 26       	eor	r0, r24
    1216:	86 95       	lsr	r24
    1218:	98 27       	eor	r25, r24
    121a:	89 27       	eor	r24, r25
    121c:	88 0f       	add	r24, r24
    121e:	88 0f       	add	r24, r24
    1220:	88 0f       	add	r24, r24
    1222:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1224:	e2 17       	cp	r30, r18
    1226:	f3 07       	cpc	r31, r19
    1228:	59 f7       	brne	.-42     	; 0x1200 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    122a:	08 95       	ret

0000122c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    122c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    122e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1230:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1232:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <tx_mask>
    or tmpreg1, ddrreg
    1236:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1238:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    123a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    123c:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    1240:	20 30       	cpi	r18, 0x00	; 0
    1242:	29 f0       	breq	.+10     	; 0x124e <message_send+0x22>
    1244:	00 00       	nop
    1246:	25 b1       	in	r18, 0x05	; 5
    1248:	23 2b       	or	r18, r19
    124a:	25 b9       	out	0x05, r18	; 5
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <message_send+0x2a>
    124e:	00 00       	nop
    1250:	00 00       	nop
    1252:	00 00       	nop
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <message_send+0x2a>
    1256:	00 00       	nop
    1258:	00 00       	nop
    125a:	00 00       	nop
    125c:	30 95       	com	r19
    125e:	25 b1       	in	r18, 0x05	; 5
    1260:	23 23       	and	r18, r19
    1262:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1264:	2e ea       	ldi	r18, 0xAE	; 174
    1266:	2a 95       	dec	r18
    1268:	f1 f7       	brne	.-4      	; 0x1266 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    126a:	2b ee       	ldi	r18, 0xEB	; 235

0000126c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    126c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    126e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1270:	0a c0       	rjmp	.+20     	; 0x1286 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1272:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1274:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    1278:	30 95       	com	r19
    in tmpreg1, IR_PORT
    127a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    127c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    127e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1280:	0f be       	out	0x3f, r0	; 63
    return 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret

00001286 <nocollision>:
nocollision:
    nop
    1286:	00 00       	nop
    dec tmpreg1
    1288:	2a 95       	dec	r18
    brne checkcollision
    128a:	81 f7       	brne	.-32     	; 0x126c <checkcollision>

    ldi tmpreg1, 0x01
    128c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    128e:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    1292:	20 30       	cpi	r18, 0x00	; 0
    1294:	29 f0       	breq	.+10     	; 0x12a0 <nocollision+0x1a>
    1296:	00 00       	nop
    1298:	25 b1       	in	r18, 0x05	; 5
    129a:	23 2b       	or	r18, r19
    129c:	25 b9       	out	0x05, r18	; 5
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <nocollision+0x22>
    12a0:	00 00       	nop
    12a2:	00 00       	nop
    12a4:	00 00       	nop
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <nocollision+0x22>
    12a8:	00 00       	nop
    12aa:	00 00       	nop
    12ac:	00 00       	nop
    12ae:	30 95       	com	r19
    12b0:	25 b1       	in	r18, 0x05	; 5
    12b2:	23 23       	and	r18, r19
    12b4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    12b6:	00 00       	nop
    12b8:	24 e5       	ldi	r18, 0x54	; 84
    12ba:	2a 95       	dec	r18
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    12be:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    12c0:	8c e0       	ldi	r24, 0x0C	; 12

000012c2 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    12c2:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    12c6:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    12c8:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    12ca:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    12cc:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    12ce:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    12d2:	50 e0       	ldi	r21, 0x00	; 0

000012d4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    12d4:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    12d6:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    12d8:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    12da:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    12dc:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    12e0:	20 30       	cpi	r18, 0x00	; 0
    12e2:	29 f0       	breq	.+10     	; 0x12ee <sendbit+0x1a>
    12e4:	00 00       	nop
    12e6:	25 b1       	in	r18, 0x05	; 5
    12e8:	23 2b       	or	r18, r19
    12ea:	25 b9       	out	0x05, r18	; 5
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <sendbit+0x22>
    12ee:	00 00       	nop
    12f0:	00 00       	nop
    12f2:	00 00       	nop
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <sendbit+0x22>
    12f6:	00 00       	nop
    12f8:	00 00       	nop
    12fa:	00 00       	nop
    12fc:	30 95       	com	r19
    12fe:	25 b1       	in	r18, 0x05	; 5
    1300:	23 23       	and	r18, r19
    1302:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1304:	00 00       	nop
    1306:	21 e5       	ldi	r18, 0x51	; 81
    1308:	2a 95       	dec	r18
    130a:	f1 f7       	brne	.-4      	; 0x1308 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    130c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    130e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1310:	9a 95       	dec	r25
    brne sendbit
    1312:	01 f7       	brne	.-64     	; 0x12d4 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1314:	8a 95       	dec	r24
    brne sendbyte
    1316:	a9 f6       	brne	.-86     	; 0x12c2 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1318:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    131a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    131c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    131e:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1320:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <tx_mask>
    com tmpreg2
    1324:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1326:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1328:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    132a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    132c:	0f be       	out	0x3f, r0	; 63
    return 1
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	08 95       	ret

00001332 <main>:
    }
  }
}

int main() {
  kilo_init();				// Begin program execution
    1332:	0e 94 e6 01 	call	0x3cc	; 0x3cc <kilo_init>
  kilo_message_rx = message_rx;		// Begin listening loop
    1336:	81 e7       	ldi	r24, 0x71	; 113
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <kilo_message_rx+0x1>
    133e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <kilo_message_rx>
  kilo_message_tx = message_tx;		// Begin speaker loop
    1342:	84 e8       	ldi	r24, 0x84	; 132
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    134a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;	// Begin speaker validation loop
    134e:	87 e8       	ldi	r24, 0x87	; 135
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    1356:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);		// Begin motion
    135a:	6b eb       	ldi	r22, 0xBB	; 187
    135c:	71 e0       	ldi	r23, 0x01	; 1
    135e:	84 ec       	ldi	r24, 0xC4	; 196
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 de 05 	call	0xbbc	; 0xbbc <kilo_start>
  return 0;
}
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	08 95       	ret

0000136c <__divmodhi4>:
    136c:	97 fb       	bst	r25, 7
    136e:	07 2e       	mov	r0, r23
    1370:	16 f4       	brtc	.+4      	; 0x1376 <__divmodhi4+0xa>
    1372:	00 94       	com	r0
    1374:	07 d0       	rcall	.+14     	; 0x1384 <__divmodhi4_neg1>
    1376:	77 fd       	sbrc	r23, 7
    1378:	09 d0       	rcall	.+18     	; 0x138c <__divmodhi4_neg2>
    137a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__udivmodhi4>
    137e:	07 fc       	sbrc	r0, 7
    1380:	05 d0       	rcall	.+10     	; 0x138c <__divmodhi4_neg2>
    1382:	3e f4       	brtc	.+14     	; 0x1392 <__divmodhi4_exit>

00001384 <__divmodhi4_neg1>:
    1384:	90 95       	com	r25
    1386:	81 95       	neg	r24
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	08 95       	ret

0000138c <__divmodhi4_neg2>:
    138c:	70 95       	com	r23
    138e:	61 95       	neg	r22
    1390:	7f 4f       	sbci	r23, 0xFF	; 255

00001392 <__divmodhi4_exit>:
    1392:	08 95       	ret

00001394 <__divmodsi4>:
    1394:	05 2e       	mov	r0, r21
    1396:	97 fb       	bst	r25, 7
    1398:	1e f4       	brtc	.+6      	; 0x13a0 <__divmodsi4+0xc>
    139a:	00 94       	com	r0
    139c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__negsi2>
    13a0:	57 fd       	sbrc	r21, 7
    13a2:	07 d0       	rcall	.+14     	; 0x13b2 <__divmodsi4_neg2>
    13a4:	0e 94 12 0a 	call	0x1424	; 0x1424 <__udivmodsi4>
    13a8:	07 fc       	sbrc	r0, 7
    13aa:	03 d0       	rcall	.+6      	; 0x13b2 <__divmodsi4_neg2>
    13ac:	4e f4       	brtc	.+18     	; 0x13c0 <__divmodsi4_exit>
    13ae:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__negsi2>

000013b2 <__divmodsi4_neg2>:
    13b2:	50 95       	com	r21
    13b4:	40 95       	com	r20
    13b6:	30 95       	com	r19
    13b8:	21 95       	neg	r18
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	4f 4f       	sbci	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255

000013c0 <__divmodsi4_exit>:
    13c0:	08 95       	ret

000013c2 <__negsi2>:
    13c2:	90 95       	com	r25
    13c4:	80 95       	com	r24
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__tablejump2__>:
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	05 90       	lpm	r0, Z+
    13d8:	f4 91       	lpm	r31, Z
    13da:	e0 2d       	mov	r30, r0
    13dc:	09 94       	ijmp

000013de <__umulhisi3>:
    13de:	a2 9f       	mul	r26, r18
    13e0:	b0 01       	movw	r22, r0
    13e2:	b3 9f       	mul	r27, r19
    13e4:	c0 01       	movw	r24, r0
    13e6:	a3 9f       	mul	r26, r19
    13e8:	70 0d       	add	r23, r0
    13ea:	81 1d       	adc	r24, r1
    13ec:	11 24       	eor	r1, r1
    13ee:	91 1d       	adc	r25, r1
    13f0:	b2 9f       	mul	r27, r18
    13f2:	70 0d       	add	r23, r0
    13f4:	81 1d       	adc	r24, r1
    13f6:	11 24       	eor	r1, r1
    13f8:	91 1d       	adc	r25, r1
    13fa:	08 95       	ret

000013fc <__udivmodhi4>:
    13fc:	aa 1b       	sub	r26, r26
    13fe:	bb 1b       	sub	r27, r27
    1400:	51 e1       	ldi	r21, 0x11	; 17
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <__udivmodhi4_ep>

00001404 <__udivmodhi4_loop>:
    1404:	aa 1f       	adc	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	a6 17       	cp	r26, r22
    140a:	b7 07       	cpc	r27, r23
    140c:	10 f0       	brcs	.+4      	; 0x1412 <__udivmodhi4_ep>
    140e:	a6 1b       	sub	r26, r22
    1410:	b7 0b       	sbc	r27, r23

00001412 <__udivmodhi4_ep>:
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	5a 95       	dec	r21
    1418:	a9 f7       	brne	.-22     	; 0x1404 <__udivmodhi4_loop>
    141a:	80 95       	com	r24
    141c:	90 95       	com	r25
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	08 95       	ret

00001424 <__udivmodsi4>:
    1424:	a1 e2       	ldi	r26, 0x21	; 33
    1426:	1a 2e       	mov	r1, r26
    1428:	aa 1b       	sub	r26, r26
    142a:	bb 1b       	sub	r27, r27
    142c:	fd 01       	movw	r30, r26
    142e:	0d c0       	rjmp	.+26     	; 0x144a <__udivmodsi4_ep>

00001430 <__udivmodsi4_loop>:
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	ee 1f       	adc	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	a2 17       	cp	r26, r18
    143a:	b3 07       	cpc	r27, r19
    143c:	e4 07       	cpc	r30, r20
    143e:	f5 07       	cpc	r31, r21
    1440:	20 f0       	brcs	.+8      	; 0x144a <__udivmodsi4_ep>
    1442:	a2 1b       	sub	r26, r18
    1444:	b3 0b       	sbc	r27, r19
    1446:	e4 0b       	sbc	r30, r20
    1448:	f5 0b       	sbc	r31, r21

0000144a <__udivmodsi4_ep>:
    144a:	66 1f       	adc	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	1a 94       	dec	r1
    1454:	69 f7       	brne	.-38     	; 0x1430 <__udivmodsi4_loop>
    1456:	60 95       	com	r22
    1458:	70 95       	com	r23
    145a:	80 95       	com	r24
    145c:	90 95       	com	r25
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	bd 01       	movw	r22, r26
    1464:	cf 01       	movw	r24, r30
    1466:	08 95       	ret

00001468 <__subsf3>:
    1468:	50 58       	subi	r21, 0x80	; 128

0000146a <__addsf3>:
    146a:	bb 27       	eor	r27, r27
    146c:	aa 27       	eor	r26, r26
    146e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__addsf3x>
    1472:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_round>
    1476:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fp_pscA>
    147a:	38 f0       	brcs	.+14     	; 0x148a <__addsf3+0x20>
    147c:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_pscB>
    1480:	20 f0       	brcs	.+8      	; 0x148a <__addsf3+0x20>
    1482:	39 f4       	brne	.+14     	; 0x1492 <__addsf3+0x28>
    1484:	9f 3f       	cpi	r25, 0xFF	; 255
    1486:	19 f4       	brne	.+6      	; 0x148e <__addsf3+0x24>
    1488:	26 f4       	brtc	.+8      	; 0x1492 <__addsf3+0x28>
    148a:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__fp_nan>
    148e:	0e f4       	brtc	.+2      	; 0x1492 <__addsf3+0x28>
    1490:	e0 95       	com	r30
    1492:	e7 fb       	bst	r30, 7
    1494:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_inf>

00001498 <__addsf3x>:
    1498:	e9 2f       	mov	r30, r25
    149a:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_split3>
    149e:	58 f3       	brcs	.-42     	; 0x1476 <__addsf3+0xc>
    14a0:	ba 17       	cp	r27, r26
    14a2:	62 07       	cpc	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	95 07       	cpc	r25, r21
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <__addsf3x+0x1c>
    14ac:	79 f4       	brne	.+30     	; 0x14cc <__addsf3x+0x34>
    14ae:	a6 f5       	brtc	.+104    	; 0x1518 <__addsf3x+0x80>
    14b0:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_zero>
    14b4:	0e f4       	brtc	.+2      	; 0x14b8 <__addsf3x+0x20>
    14b6:	e0 95       	com	r30
    14b8:	0b 2e       	mov	r0, r27
    14ba:	ba 2f       	mov	r27, r26
    14bc:	a0 2d       	mov	r26, r0
    14be:	0b 01       	movw	r0, r22
    14c0:	b9 01       	movw	r22, r18
    14c2:	90 01       	movw	r18, r0
    14c4:	0c 01       	movw	r0, r24
    14c6:	ca 01       	movw	r24, r20
    14c8:	a0 01       	movw	r20, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	ff 27       	eor	r31, r31
    14ce:	59 1b       	sub	r21, r25
    14d0:	99 f0       	breq	.+38     	; 0x14f8 <__addsf3x+0x60>
    14d2:	59 3f       	cpi	r21, 0xF9	; 249
    14d4:	50 f4       	brcc	.+20     	; 0x14ea <__addsf3x+0x52>
    14d6:	50 3e       	cpi	r21, 0xE0	; 224
    14d8:	68 f1       	brcs	.+90     	; 0x1534 <__addsf3x+0x9c>
    14da:	1a 16       	cp	r1, r26
    14dc:	f0 40       	sbci	r31, 0x00	; 0
    14de:	a2 2f       	mov	r26, r18
    14e0:	23 2f       	mov	r18, r19
    14e2:	34 2f       	mov	r19, r20
    14e4:	44 27       	eor	r20, r20
    14e6:	58 5f       	subi	r21, 0xF8	; 248
    14e8:	f3 cf       	rjmp	.-26     	; 0x14d0 <__addsf3x+0x38>
    14ea:	46 95       	lsr	r20
    14ec:	37 95       	ror	r19
    14ee:	27 95       	ror	r18
    14f0:	a7 95       	ror	r26
    14f2:	f0 40       	sbci	r31, 0x00	; 0
    14f4:	53 95       	inc	r21
    14f6:	c9 f7       	brne	.-14     	; 0x14ea <__addsf3x+0x52>
    14f8:	7e f4       	brtc	.+30     	; 0x1518 <__addsf3x+0x80>
    14fa:	1f 16       	cp	r1, r31
    14fc:	ba 0b       	sbc	r27, r26
    14fe:	62 0b       	sbc	r22, r18
    1500:	73 0b       	sbc	r23, r19
    1502:	84 0b       	sbc	r24, r20
    1504:	ba f0       	brmi	.+46     	; 0x1534 <__addsf3x+0x9c>
    1506:	91 50       	subi	r25, 0x01	; 1
    1508:	a1 f0       	breq	.+40     	; 0x1532 <__addsf3x+0x9a>
    150a:	ff 0f       	add	r31, r31
    150c:	bb 1f       	adc	r27, r27
    150e:	66 1f       	adc	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	c2 f7       	brpl	.-16     	; 0x1506 <__addsf3x+0x6e>
    1516:	0e c0       	rjmp	.+28     	; 0x1534 <__addsf3x+0x9c>
    1518:	ba 0f       	add	r27, r26
    151a:	62 1f       	adc	r22, r18
    151c:	73 1f       	adc	r23, r19
    151e:	84 1f       	adc	r24, r20
    1520:	48 f4       	brcc	.+18     	; 0x1534 <__addsf3x+0x9c>
    1522:	87 95       	ror	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	b7 95       	ror	r27
    152a:	f7 95       	ror	r31
    152c:	9e 3f       	cpi	r25, 0xFE	; 254
    152e:	08 f0       	brcs	.+2      	; 0x1532 <__addsf3x+0x9a>
    1530:	b0 cf       	rjmp	.-160    	; 0x1492 <__addsf3+0x28>
    1532:	93 95       	inc	r25
    1534:	88 0f       	add	r24, r24
    1536:	08 f0       	brcs	.+2      	; 0x153a <__addsf3x+0xa2>
    1538:	99 27       	eor	r25, r25
    153a:	ee 0f       	add	r30, r30
    153c:	97 95       	ror	r25
    153e:	87 95       	ror	r24
    1540:	08 95       	ret

00001542 <__divsf3>:
    1542:	0e 94 b5 0a 	call	0x156a	; 0x156a <__divsf3x>
    1546:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_round>
    154a:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_pscB>
    154e:	58 f0       	brcs	.+22     	; 0x1566 <__divsf3+0x24>
    1550:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fp_pscA>
    1554:	40 f0       	brcs	.+16     	; 0x1566 <__divsf3+0x24>
    1556:	29 f4       	brne	.+10     	; 0x1562 <__divsf3+0x20>
    1558:	5f 3f       	cpi	r21, 0xFF	; 255
    155a:	29 f0       	breq	.+10     	; 0x1566 <__divsf3+0x24>
    155c:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_inf>
    1560:	51 11       	cpse	r21, r1
    1562:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_szero>
    1566:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__fp_nan>

0000156a <__divsf3x>:
    156a:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_split3>
    156e:	68 f3       	brcs	.-38     	; 0x154a <__divsf3+0x8>

00001570 <__divsf3_pse>:
    1570:	99 23       	and	r25, r25
    1572:	b1 f3       	breq	.-20     	; 0x1560 <__divsf3+0x1e>
    1574:	55 23       	and	r21, r21
    1576:	91 f3       	breq	.-28     	; 0x155c <__divsf3+0x1a>
    1578:	95 1b       	sub	r25, r21
    157a:	55 0b       	sbc	r21, r21
    157c:	bb 27       	eor	r27, r27
    157e:	aa 27       	eor	r26, r26
    1580:	62 17       	cp	r22, r18
    1582:	73 07       	cpc	r23, r19
    1584:	84 07       	cpc	r24, r20
    1586:	38 f0       	brcs	.+14     	; 0x1596 <__divsf3_pse+0x26>
    1588:	9f 5f       	subi	r25, 0xFF	; 255
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	44 1f       	adc	r20, r20
    1592:	aa 1f       	adc	r26, r26
    1594:	a9 f3       	breq	.-22     	; 0x1580 <__divsf3_pse+0x10>
    1596:	35 d0       	rcall	.+106    	; 0x1602 <__divsf3_pse+0x92>
    1598:	0e 2e       	mov	r0, r30
    159a:	3a f0       	brmi	.+14     	; 0x15aa <__divsf3_pse+0x3a>
    159c:	e0 e8       	ldi	r30, 0x80	; 128
    159e:	32 d0       	rcall	.+100    	; 0x1604 <__divsf3_pse+0x94>
    15a0:	91 50       	subi	r25, 0x01	; 1
    15a2:	50 40       	sbci	r21, 0x00	; 0
    15a4:	e6 95       	lsr	r30
    15a6:	00 1c       	adc	r0, r0
    15a8:	ca f7       	brpl	.-14     	; 0x159c <__divsf3_pse+0x2c>
    15aa:	2b d0       	rcall	.+86     	; 0x1602 <__divsf3_pse+0x92>
    15ac:	fe 2f       	mov	r31, r30
    15ae:	29 d0       	rcall	.+82     	; 0x1602 <__divsf3_pse+0x92>
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	bb 1f       	adc	r27, r27
    15b8:	26 17       	cp	r18, r22
    15ba:	37 07       	cpc	r19, r23
    15bc:	48 07       	cpc	r20, r24
    15be:	ab 07       	cpc	r26, r27
    15c0:	b0 e8       	ldi	r27, 0x80	; 128
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <__divsf3_pse+0x56>
    15c4:	bb 0b       	sbc	r27, r27
    15c6:	80 2d       	mov	r24, r0
    15c8:	bf 01       	movw	r22, r30
    15ca:	ff 27       	eor	r31, r31
    15cc:	93 58       	subi	r25, 0x83	; 131
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	3a f0       	brmi	.+14     	; 0x15e0 <__divsf3_pse+0x70>
    15d2:	9e 3f       	cpi	r25, 0xFE	; 254
    15d4:	51 05       	cpc	r21, r1
    15d6:	78 f0       	brcs	.+30     	; 0x15f6 <__divsf3_pse+0x86>
    15d8:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_inf>
    15dc:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_szero>
    15e0:	5f 3f       	cpi	r21, 0xFF	; 255
    15e2:	e4 f3       	brlt	.-8      	; 0x15dc <__divsf3_pse+0x6c>
    15e4:	98 3e       	cpi	r25, 0xE8	; 232
    15e6:	d4 f3       	brlt	.-12     	; 0x15dc <__divsf3_pse+0x6c>
    15e8:	86 95       	lsr	r24
    15ea:	77 95       	ror	r23
    15ec:	67 95       	ror	r22
    15ee:	b7 95       	ror	r27
    15f0:	f7 95       	ror	r31
    15f2:	9f 5f       	subi	r25, 0xFF	; 255
    15f4:	c9 f7       	brne	.-14     	; 0x15e8 <__divsf3_pse+0x78>
    15f6:	88 0f       	add	r24, r24
    15f8:	91 1d       	adc	r25, r1
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	97 f9       	bld	r25, 7
    1600:	08 95       	ret
    1602:	e1 e0       	ldi	r30, 0x01	; 1
    1604:	66 0f       	add	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	bb 1f       	adc	r27, r27
    160c:	62 17       	cp	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	84 07       	cpc	r24, r20
    1612:	ba 07       	cpc	r27, r26
    1614:	20 f0       	brcs	.+8      	; 0x161e <__divsf3_pse+0xae>
    1616:	62 1b       	sub	r22, r18
    1618:	73 0b       	sbc	r23, r19
    161a:	84 0b       	sbc	r24, r20
    161c:	ba 0b       	sbc	r27, r26
    161e:	ee 1f       	adc	r30, r30
    1620:	88 f7       	brcc	.-30     	; 0x1604 <__divsf3_pse+0x94>
    1622:	e0 95       	com	r30
    1624:	08 95       	ret

00001626 <__fixsfsi>:
    1626:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixunssfsi>
    162a:	68 94       	set
    162c:	b1 11       	cpse	r27, r1
    162e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_szero>
    1632:	08 95       	ret

00001634 <__fixunssfsi>:
    1634:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fp_splitA>
    1638:	88 f0       	brcs	.+34     	; 0x165c <__fixunssfsi+0x28>
    163a:	9f 57       	subi	r25, 0x7F	; 127
    163c:	98 f0       	brcs	.+38     	; 0x1664 <__fixunssfsi+0x30>
    163e:	b9 2f       	mov	r27, r25
    1640:	99 27       	eor	r25, r25
    1642:	b7 51       	subi	r27, 0x17	; 23
    1644:	b0 f0       	brcs	.+44     	; 0x1672 <__fixunssfsi+0x3e>
    1646:	e1 f0       	breq	.+56     	; 0x1680 <__fixunssfsi+0x4c>
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	1a f0       	brmi	.+6      	; 0x1658 <__fixunssfsi+0x24>
    1652:	ba 95       	dec	r27
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__fixunssfsi+0x14>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <__fixunssfsi+0x4c>
    1658:	b1 30       	cpi	r27, 0x01	; 1
    165a:	91 f0       	breq	.+36     	; 0x1680 <__fixunssfsi+0x4c>
    165c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_zero>
    1660:	b1 e0       	ldi	r27, 0x01	; 1
    1662:	08 95       	ret
    1664:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_zero>
    1668:	67 2f       	mov	r22, r23
    166a:	78 2f       	mov	r23, r24
    166c:	88 27       	eor	r24, r24
    166e:	b8 5f       	subi	r27, 0xF8	; 248
    1670:	39 f0       	breq	.+14     	; 0x1680 <__fixunssfsi+0x4c>
    1672:	b9 3f       	cpi	r27, 0xF9	; 249
    1674:	cc f3       	brlt	.-14     	; 0x1668 <__fixunssfsi+0x34>
    1676:	86 95       	lsr	r24
    1678:	77 95       	ror	r23
    167a:	67 95       	ror	r22
    167c:	b3 95       	inc	r27
    167e:	d9 f7       	brne	.-10     	; 0x1676 <__fixunssfsi+0x42>
    1680:	3e f4       	brtc	.+14     	; 0x1690 <__fixunssfsi+0x5c>
    1682:	90 95       	com	r25
    1684:	80 95       	com	r24
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__floatunsisf>:
    1692:	e8 94       	clt
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <__floatsisf+0x12>

00001696 <__floatsisf>:
    1696:	97 fb       	bst	r25, 7
    1698:	3e f4       	brtc	.+14     	; 0x16a8 <__floatsisf+0x12>
    169a:	90 95       	com	r25
    169c:	80 95       	com	r24
    169e:	70 95       	com	r23
    16a0:	61 95       	neg	r22
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	8f 4f       	sbci	r24, 0xFF	; 255
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	99 23       	and	r25, r25
    16aa:	a9 f0       	breq	.+42     	; 0x16d6 <__floatsisf+0x40>
    16ac:	f9 2f       	mov	r31, r25
    16ae:	96 e9       	ldi	r25, 0x96	; 150
    16b0:	bb 27       	eor	r27, r27
    16b2:	93 95       	inc	r25
    16b4:	f6 95       	lsr	r31
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	f1 11       	cpse	r31, r1
    16c0:	f8 cf       	rjmp	.-16     	; 0x16b2 <__floatsisf+0x1c>
    16c2:	fa f4       	brpl	.+62     	; 0x1702 <__floatsisf+0x6c>
    16c4:	bb 0f       	add	r27, r27
    16c6:	11 f4       	brne	.+4      	; 0x16cc <__floatsisf+0x36>
    16c8:	60 ff       	sbrs	r22, 0
    16ca:	1b c0       	rjmp	.+54     	; 0x1702 <__floatsisf+0x6c>
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <__floatsisf+0x6c>
    16d6:	88 23       	and	r24, r24
    16d8:	11 f0       	breq	.+4      	; 0x16de <__floatsisf+0x48>
    16da:	96 e9       	ldi	r25, 0x96	; 150
    16dc:	11 c0       	rjmp	.+34     	; 0x1700 <__floatsisf+0x6a>
    16de:	77 23       	and	r23, r23
    16e0:	21 f0       	breq	.+8      	; 0x16ea <__floatsisf+0x54>
    16e2:	9e e8       	ldi	r25, 0x8E	; 142
    16e4:	87 2f       	mov	r24, r23
    16e6:	76 2f       	mov	r23, r22
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__floatsisf+0x5e>
    16ea:	66 23       	and	r22, r22
    16ec:	71 f0       	breq	.+28     	; 0x170a <__floatsisf+0x74>
    16ee:	96 e8       	ldi	r25, 0x86	; 134
    16f0:	86 2f       	mov	r24, r22
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	2a f0       	brmi	.+10     	; 0x1702 <__floatsisf+0x6c>
    16f8:	9a 95       	dec	r25
    16fa:	66 0f       	add	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	da f7       	brpl	.-10     	; 0x16f8 <__floatsisf+0x62>
    1702:	88 0f       	add	r24, r24
    1704:	96 95       	lsr	r25
    1706:	87 95       	ror	r24
    1708:	97 f9       	bld	r25, 7
    170a:	08 95       	ret

0000170c <__fp_inf>:
    170c:	97 f9       	bld	r25, 7
    170e:	9f 67       	ori	r25, 0x7F	; 127
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	08 95       	ret

00001718 <__fp_nan>:
    1718:	9f ef       	ldi	r25, 0xFF	; 255
    171a:	80 ec       	ldi	r24, 0xC0	; 192
    171c:	08 95       	ret

0000171e <__fp_pscA>:
    171e:	00 24       	eor	r0, r0
    1720:	0a 94       	dec	r0
    1722:	16 16       	cp	r1, r22
    1724:	17 06       	cpc	r1, r23
    1726:	18 06       	cpc	r1, r24
    1728:	09 06       	cpc	r0, r25
    172a:	08 95       	ret

0000172c <__fp_pscB>:
    172c:	00 24       	eor	r0, r0
    172e:	0a 94       	dec	r0
    1730:	12 16       	cp	r1, r18
    1732:	13 06       	cpc	r1, r19
    1734:	14 06       	cpc	r1, r20
    1736:	05 06       	cpc	r0, r21
    1738:	08 95       	ret

0000173a <__fp_round>:
    173a:	09 2e       	mov	r0, r25
    173c:	03 94       	inc	r0
    173e:	00 0c       	add	r0, r0
    1740:	11 f4       	brne	.+4      	; 0x1746 <__fp_round+0xc>
    1742:	88 23       	and	r24, r24
    1744:	52 f0       	brmi	.+20     	; 0x175a <__fp_round+0x20>
    1746:	bb 0f       	add	r27, r27
    1748:	40 f4       	brcc	.+16     	; 0x175a <__fp_round+0x20>
    174a:	bf 2b       	or	r27, r31
    174c:	11 f4       	brne	.+4      	; 0x1752 <__fp_round+0x18>
    174e:	60 ff       	sbrs	r22, 0
    1750:	04 c0       	rjmp	.+8      	; 0x175a <__fp_round+0x20>
    1752:	6f 5f       	subi	r22, 0xFF	; 255
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	08 95       	ret

0000175c <__fp_split3>:
    175c:	57 fd       	sbrc	r21, 7
    175e:	90 58       	subi	r25, 0x80	; 128
    1760:	44 0f       	add	r20, r20
    1762:	55 1f       	adc	r21, r21
    1764:	59 f0       	breq	.+22     	; 0x177c <__fp_splitA+0x10>
    1766:	5f 3f       	cpi	r21, 0xFF	; 255
    1768:	71 f0       	breq	.+28     	; 0x1786 <__fp_splitA+0x1a>
    176a:	47 95       	ror	r20

0000176c <__fp_splitA>:
    176c:	88 0f       	add	r24, r24
    176e:	97 fb       	bst	r25, 7
    1770:	99 1f       	adc	r25, r25
    1772:	61 f0       	breq	.+24     	; 0x178c <__fp_splitA+0x20>
    1774:	9f 3f       	cpi	r25, 0xFF	; 255
    1776:	79 f0       	breq	.+30     	; 0x1796 <__fp_splitA+0x2a>
    1778:	87 95       	ror	r24
    177a:	08 95       	ret
    177c:	12 16       	cp	r1, r18
    177e:	13 06       	cpc	r1, r19
    1780:	14 06       	cpc	r1, r20
    1782:	55 1f       	adc	r21, r21
    1784:	f2 cf       	rjmp	.-28     	; 0x176a <__fp_split3+0xe>
    1786:	46 95       	lsr	r20
    1788:	f1 df       	rcall	.-30     	; 0x176c <__fp_splitA>
    178a:	08 c0       	rjmp	.+16     	; 0x179c <__fp_splitA+0x30>
    178c:	16 16       	cp	r1, r22
    178e:	17 06       	cpc	r1, r23
    1790:	18 06       	cpc	r1, r24
    1792:	99 1f       	adc	r25, r25
    1794:	f1 cf       	rjmp	.-30     	; 0x1778 <__fp_splitA+0xc>
    1796:	86 95       	lsr	r24
    1798:	71 05       	cpc	r23, r1
    179a:	61 05       	cpc	r22, r1
    179c:	08 94       	sec
    179e:	08 95       	ret

000017a0 <__fp_zero>:
    17a0:	e8 94       	clt

000017a2 <__fp_szero>:
    17a2:	bb 27       	eor	r27, r27
    17a4:	66 27       	eor	r22, r22
    17a6:	77 27       	eor	r23, r23
    17a8:	cb 01       	movw	r24, r22
    17aa:	97 f9       	bld	r25, 7
    17ac:	08 95       	ret

000017ae <__mulsf3>:
    17ae:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__mulsf3x>
    17b2:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_round>
    17b6:	0e 94 8f 0b 	call	0x171e	; 0x171e <__fp_pscA>
    17ba:	38 f0       	brcs	.+14     	; 0x17ca <__mulsf3+0x1c>
    17bc:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_pscB>
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <__mulsf3+0x1c>
    17c2:	95 23       	and	r25, r21
    17c4:	11 f0       	breq	.+4      	; 0x17ca <__mulsf3+0x1c>
    17c6:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_inf>
    17ca:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__fp_nan>
    17ce:	11 24       	eor	r1, r1
    17d0:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_szero>

000017d4 <__mulsf3x>:
    17d4:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fp_split3>
    17d8:	70 f3       	brcs	.-36     	; 0x17b6 <__mulsf3+0x8>

000017da <__mulsf3_pse>:
    17da:	95 9f       	mul	r25, r21
    17dc:	c1 f3       	breq	.-16     	; 0x17ce <__mulsf3+0x20>
    17de:	95 0f       	add	r25, r21
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	55 1f       	adc	r21, r21
    17e4:	62 9f       	mul	r22, r18
    17e6:	f0 01       	movw	r30, r0
    17e8:	72 9f       	mul	r23, r18
    17ea:	bb 27       	eor	r27, r27
    17ec:	f0 0d       	add	r31, r0
    17ee:	b1 1d       	adc	r27, r1
    17f0:	63 9f       	mul	r22, r19
    17f2:	aa 27       	eor	r26, r26
    17f4:	f0 0d       	add	r31, r0
    17f6:	b1 1d       	adc	r27, r1
    17f8:	aa 1f       	adc	r26, r26
    17fa:	64 9f       	mul	r22, r20
    17fc:	66 27       	eor	r22, r22
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	66 1f       	adc	r22, r22
    1804:	82 9f       	mul	r24, r18
    1806:	22 27       	eor	r18, r18
    1808:	b0 0d       	add	r27, r0
    180a:	a1 1d       	adc	r26, r1
    180c:	62 1f       	adc	r22, r18
    180e:	73 9f       	mul	r23, r19
    1810:	b0 0d       	add	r27, r0
    1812:	a1 1d       	adc	r26, r1
    1814:	62 1f       	adc	r22, r18
    1816:	83 9f       	mul	r24, r19
    1818:	a0 0d       	add	r26, r0
    181a:	61 1d       	adc	r22, r1
    181c:	22 1f       	adc	r18, r18
    181e:	74 9f       	mul	r23, r20
    1820:	33 27       	eor	r19, r19
    1822:	a0 0d       	add	r26, r0
    1824:	61 1d       	adc	r22, r1
    1826:	23 1f       	adc	r18, r19
    1828:	84 9f       	mul	r24, r20
    182a:	60 0d       	add	r22, r0
    182c:	21 1d       	adc	r18, r1
    182e:	82 2f       	mov	r24, r18
    1830:	76 2f       	mov	r23, r22
    1832:	6a 2f       	mov	r22, r26
    1834:	11 24       	eor	r1, r1
    1836:	9f 57       	subi	r25, 0x7F	; 127
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	9a f0       	brmi	.+38     	; 0x1862 <__mulsf3_pse+0x88>
    183c:	f1 f0       	breq	.+60     	; 0x187a <__mulsf3_pse+0xa0>
    183e:	88 23       	and	r24, r24
    1840:	4a f0       	brmi	.+18     	; 0x1854 <__mulsf3_pse+0x7a>
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	bb 1f       	adc	r27, r27
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	50 40       	sbci	r21, 0x00	; 0
    1852:	a9 f7       	brne	.-22     	; 0x183e <__mulsf3_pse+0x64>
    1854:	9e 3f       	cpi	r25, 0xFE	; 254
    1856:	51 05       	cpc	r21, r1
    1858:	80 f0       	brcs	.+32     	; 0x187a <__mulsf3_pse+0xa0>
    185a:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_inf>
    185e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_szero>
    1862:	5f 3f       	cpi	r21, 0xFF	; 255
    1864:	e4 f3       	brlt	.-8      	; 0x185e <__mulsf3_pse+0x84>
    1866:	98 3e       	cpi	r25, 0xE8	; 232
    1868:	d4 f3       	brlt	.-12     	; 0x185e <__mulsf3_pse+0x84>
    186a:	86 95       	lsr	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f7 95       	ror	r31
    1874:	e7 95       	ror	r30
    1876:	9f 5f       	subi	r25, 0xFF	; 255
    1878:	c1 f7       	brne	.-16     	; 0x186a <__mulsf3_pse+0x90>
    187a:	fe 2b       	or	r31, r30
    187c:	88 0f       	add	r24, r24
    187e:	91 1d       	adc	r25, r1
    1880:	96 95       	lsr	r25
    1882:	87 95       	ror	r24
    1884:	97 f9       	bld	r25, 7
    1886:	08 95       	ret

00001888 <eeprom_read_byte>:
    1888:	f9 99       	sbic	0x1f, 1	; 31
    188a:	fe cf       	rjmp	.-4      	; 0x1888 <eeprom_read_byte>
    188c:	92 bd       	out	0x22, r25	; 34
    188e:	81 bd       	out	0x21, r24	; 33
    1890:	f8 9a       	sbi	0x1f, 0	; 31
    1892:	99 27       	eor	r25, r25
    1894:	80 b5       	in	r24, 0x20	; 32
    1896:	08 95       	ret

00001898 <eeprom_write_byte>:
    1898:	26 2f       	mov	r18, r22

0000189a <eeprom_write_r18>:
    189a:	f9 99       	sbic	0x1f, 1	; 31
    189c:	fe cf       	rjmp	.-4      	; 0x189a <eeprom_write_r18>
    189e:	1f ba       	out	0x1f, r1	; 31
    18a0:	92 bd       	out	0x22, r25	; 34
    18a2:	81 bd       	out	0x21, r24	; 33
    18a4:	20 bd       	out	0x20, r18	; 32
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	fa 9a       	sbi	0x1f, 2	; 31
    18ac:	f9 9a       	sbi	0x1f, 1	; 31
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	08 95       	ret

000018b4 <_exit>:
    18b4:	f8 94       	cli

000018b6 <__stop_program>:
    18b6:	ff cf       	rjmp	.-2      	; 0x18b6 <__stop_program>
