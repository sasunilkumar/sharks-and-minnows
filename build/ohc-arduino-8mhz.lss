
build/ohc-arduino-8mhz.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  88:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
    uint8_t rx = UDR0;
  b0:	30 91 c6 00 	lds	r19, 0x00C6

    packet_checksum ^= packet_buffer[packet_head];
  b4:	80 91 04 01 	lds	r24, 0x0104
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	eb 5f       	subi	r30, 0xFB	; 251
  be:	fe 4f       	sbci	r31, 0xFE	; 254
  c0:	20 81       	ld	r18, Z
  c2:	90 91 03 01 	lds	r25, 0x0103
  c6:	93 27       	eor	r25, r19
    packet_buffer[packet_head] = rx;
  c8:	30 83       	st	Z, r19
    packet_checksum ^= rx;
  ca:	92 27       	eor	r25, r18
  cc:	90 93 03 01 	sts	0x0103, r25
    packet_head++;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
    if (packet_head >= PACKET_SIZE)
  d2:	84 38       	cpi	r24, 0x84	; 132
  d4:	18 f4       	brcc	.+6      	; 0xdc <__vector_18+0x4c>
    uint8_t rx = UDR0;

    packet_checksum ^= packet_buffer[packet_head];
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
    packet_head++;
  d6:	80 93 04 01 	sts	0x0104, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__vector_18+0x50>
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;
  dc:	10 92 04 01 	sts	0x0104, r1

    if (packet_buffer[packet_head] == PACKET_HEADER) {
  e0:	20 91 04 01 	lds	r18, 0x0104
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	eb 5f       	subi	r30, 0xFB	; 251
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	80 81       	ld	r24, Z
  ee:	85 35       	cpi	r24, 0x55	; 85
  f0:	69 f5       	brne	.+90     	; 0x14c <__vector_18+0xbc>
        if (packet_checksum == 0) {
  f2:	91 11       	cpse	r25, r1
  f4:	2b c0       	rjmp	.+86     	; 0x14c <__vector_18+0xbc>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
  f6:	44 e8       	ldi	r20, 0x84	; 132
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	42 1b       	sub	r20, r18
  fc:	53 0b       	sbc	r21, r19
  fe:	a8 e9       	ldi	r26, 0x98	; 152
 100:	b1 e0       	ldi	r27, 0x01	; 1
            for (i = 0; i < num; i++)
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	84 17       	cp	r24, r20
 108:	95 07       	cpc	r25, r21
 10a:	49 f0       	breq	.+18     	; 0x11e <__vector_18+0x8e>
 10c:	fc 01       	movw	r30, r24
 10e:	e2 0f       	add	r30, r18
 110:	f3 1f       	adc	r31, r19
 112:	eb 5f       	subi	r30, 0xFB	; 251
 114:	fe 4f       	sbci	r31, 0xFE	; 254
                new_packet[i] = packet_buffer[i+packet_head];
 116:	60 81       	ld	r22, Z
 118:	6d 93       	st	X+, r22

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	f4 cf       	rjmp	.-24     	; 0x106 <__vector_18+0x76>
 11e:	dc 01       	movw	r26, r24
 120:	a8 56       	subi	r26, 0x68	; 104
 122:	be 4f       	sbci	r27, 0xFE	; 254
 124:	e5 e0       	ldi	r30, 0x05	; 5
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	85 50       	subi	r24, 0x05	; 5
 12a:	91 40       	sbci	r25, 0x01	; 1
 12c:	9c 01       	movw	r18, r24
 12e:	2e 0f       	add	r18, r30
 130:	3f 1f       	adc	r19, r31
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
 132:	24 38       	cpi	r18, 0x84	; 132
 134:	31 05       	cpc	r19, r1
 136:	18 f4       	brcc	.+6      	; 0x13e <__vector_18+0xae>
                new_packet[i] = packet_buffer[i-num];
 138:	21 91       	ld	r18, Z+
 13a:	2d 93       	st	X+, r18
 13c:	f7 cf       	rjmp	.-18     	; 0x12c <__vector_18+0x9c>
            has_new_packet = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 02 01 	sts	0x0102, r24
            packet_type = new_packet[1];
 144:	80 91 99 01 	lds	r24, 0x0199
 148:	80 93 97 01 	sts	0x0197, r24
        }
    }
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
 16c:	fc 01       	movw	r30, r24
 16e:	9c 01       	movw	r18, r24
 170:	26 5f       	subi	r18, 0xF6	; 246
 172:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
 178:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 17a:	84 27       	eor	r24, r20
 17c:	08 2e       	mov	r0, r24
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	80 25       	eor	r24, r0
 184:	09 2e       	mov	r0, r25
 186:	98 2f       	mov	r25, r24
 188:	82 95       	swap	r24
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	08 26       	eor	r0, r24
 18e:	86 95       	lsr	r24
 190:	98 27       	eor	r25, r24
 192:	89 27       	eor	r24, r25
 194:	88 0f       	add	r24, r24
 196:	88 0f       	add	r24, r24
 198:	88 0f       	add	r24, r24
 19a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
 19c:	e2 17       	cp	r30, r18
 19e:	f3 07       	cpc	r31, r19
 1a0:	59 f7       	brne	.-42     	; 0x178 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
 1a2:	08 95       	ret

000001a4 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
 1a4:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
 1a6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
 1a8:	20 91 01 01 	lds	r18, 0x0101
    or tmpreg1, ddrreg
 1ac:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
 1ae:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
 1b0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
 1b2:	30 91 01 01 	lds	r19, 0x0101
 1b6:	20 30       	cpi	r18, 0x00	; 0
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <message_send+0x20>
 1ba:	00 00       	nop
 1bc:	25 b1       	in	r18, 0x05	; 5
 1be:	23 2b       	or	r18, r19
 1c0:	25 b9       	out	0x05, r18	; 5
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <message_send+0x28>
 1c4:	00 00       	nop
 1c6:	00 00       	nop
 1c8:	00 00       	nop
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <message_send+0x28>
 1cc:	00 00       	nop
 1ce:	00 00       	nop
 1d0:	00 00       	nop
 1d2:	30 95       	com	r19
 1d4:	25 b1       	in	r18, 0x05	; 5
 1d6:	23 23       	and	r18, r19
 1d8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
 1da:	2e ea       	ldi	r18, 0xAE	; 174
 1dc:	2a 95       	dec	r18
 1de:	f1 f7       	brne	.-4      	; 0x1dc <message_send+0x38>

    ldi tmpreg1, rx_bitcycles*7/8
 1e0:	2b ee       	ldi	r18, 0xEB	; 235

000001e2 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
 1e2:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
 1e4:	35 ff       	sbrs	r19, 5
    rjmp nocollision
 1e6:	0a c0       	rjmp	.+20     	; 0x1fc <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 1e8:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 1ea:	30 91 01 01 	lds	r19, 0x0101
    com tmpreg2
 1ee:	30 95       	com	r19
    in tmpreg1, IR_PORT
 1f0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
 1f2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
 1f4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 1f6:	0f be       	out	0x3f, r0	; 63
    return 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret

000001fc <nocollision>:
nocollision:
    nop
 1fc:	00 00       	nop
    dec tmpreg1
 1fe:	2a 95       	dec	r18
    brne checkcollision
 200:	81 f7       	brne	.-32     	; 0x1e2 <checkcollision>

    ldi tmpreg1, 0x01
 202:	21 e0       	ldi	r18, 0x01	; 1
    irsend
 204:	30 91 01 01 	lds	r19, 0x0101
 208:	20 30       	cpi	r18, 0x00	; 0
 20a:	29 f0       	breq	.+10     	; 0x216 <nocollision+0x1a>
 20c:	00 00       	nop
 20e:	25 b1       	in	r18, 0x05	; 5
 210:	23 2b       	or	r18, r19
 212:	25 b9       	out	0x05, r18	; 5
 214:	04 c0       	rjmp	.+8      	; 0x21e <nocollision+0x22>
 216:	00 00       	nop
 218:	00 00       	nop
 21a:	00 00       	nop
 21c:	00 c0       	rjmp	.+0      	; 0x21e <nocollision+0x22>
 21e:	00 00       	nop
 220:	00 00       	nop
 222:	00 00       	nop
 224:	30 95       	com	r19
 226:	25 b1       	in	r18, 0x05	; 5
 228:	23 23       	and	r18, r19
 22a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
 22c:	00 00       	nop
 22e:	24 e5       	ldi	r18, 0x54	; 84
 230:	2a 95       	dec	r18
 232:	f1 f7       	brne	.-4      	; 0x230 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
 234:	fc 01       	movw	r30, r24
    ldi byteidx, 12
 236:	8c e0       	ldi	r24, 0x0C	; 12

00000238 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
 238:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
 23a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
 23c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
 23e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
 240:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
 242:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
 244:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
 246:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
 248:	50 e0       	ldi	r21, 0x00	; 0

0000024a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
 24a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
 24c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
 24e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
 250:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
 252:	30 91 01 01 	lds	r19, 0x0101
 256:	20 30       	cpi	r18, 0x00	; 0
 258:	29 f0       	breq	.+10     	; 0x264 <sendbit+0x1a>
 25a:	00 00       	nop
 25c:	25 b1       	in	r18, 0x05	; 5
 25e:	23 2b       	or	r18, r19
 260:	25 b9       	out	0x05, r18	; 5
 262:	04 c0       	rjmp	.+8      	; 0x26c <sendbit+0x22>
 264:	00 00       	nop
 266:	00 00       	nop
 268:	00 00       	nop
 26a:	00 c0       	rjmp	.+0      	; 0x26c <sendbit+0x22>
 26c:	00 00       	nop
 26e:	00 00       	nop
 270:	00 00       	nop
 272:	30 95       	com	r19
 274:	25 b1       	in	r18, 0x05	; 5
 276:	23 23       	and	r18, r19
 278:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
 27a:	00 00       	nop
 27c:	21 e5       	ldi	r18, 0x51	; 81
 27e:	2a 95       	dec	r18
 280:	f1 f7       	brne	.-4      	; 0x27e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
 282:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
 284:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
 286:	9a 95       	dec	r25
    brne sendbit
 288:	01 f7       	brne	.-64     	; 0x24a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
 28a:	8a 95       	dec	r24
    brne sendbyte
 28c:	a9 f6       	brne	.-86     	; 0x238 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
 28e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
 290:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
 292:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 294:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 296:	30 91 01 01 	lds	r19, 0x0101
    com tmpreg2
 29a:	30 95       	com	r19
    in tmpreg1, IR_PORT
 29c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
 29e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
 2a0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 2a2:	0f be       	out	0x3f, r0	; 63
    return 1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	08 95       	ret

000002a8 <main>:
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
    cli();
 2a8:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
 2aa:	21 9a       	sbi	0x04, 1	; 4
    led_ddr |= led_mask;
 2ac:	25 9a       	sbi	0x04, 5	; 4
    // Turn off all leds
    led_port &= ~led_mask;
 2ae:	2d 98       	cbi	0x05, 5	; 5
    ir_port &= ~ir_mask;
 2b0:	29 98       	cbi	0x05, 1	; 5
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
 2b2:	80 b7       	in	r24, 0x30	; 48
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 bf       	out	0x30, r24	; 48
    CLKPR = 1;
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 c5 00 	sts	0x00C5, r25
 2c0:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
 2c4:	80 91 c0 00 	lds	r24, 0x00C0
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	80 93 c0 00 	sts	0x00C0, r24
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
 2ce:	80 91 c2 00 	lds	r24, 0x00C2
 2d2:	86 60       	ori	r24, 0x06	; 6
 2d4:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
 2d8:	80 91 c1 00 	lds	r24, 0x00C1
 2dc:	88 69       	ori	r24, 0x98	; 152
 2de:	80 93 c1 00 	sts	0x00C1, r24
    sei();
 2e2:	78 94       	sei

    tx_mask = ir_mask;
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 01 01 	sts	0x0101, r24
    bootmsg = (bootmsg_t*)msg.data;
 2ea:	8b e8       	ldi	r24, 0x8B	; 139
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	90 93 8a 01 	sts	0x018A, r25
 2f2:	80 93 89 01 	sts	0x0189, r24
    gpsmsg = (gpsmsg_t*)msg.data;
 2f6:	90 93 1f 02 	sts	0x021F, r25
 2fa:	80 93 1e 02 	sts	0x021E, r24
    rawmsg = (uint8_t*)&msg;
 2fe:	90 93 1d 02 	sts	0x021D, r25
 302:	80 93 1c 02 	sts	0x021C, r24
 306:	85 e0       	ldi	r24, 0x05	; 5

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
 308:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	31 ee       	ldi	r19, 0xE1	; 225
 30e:	94 e0       	ldi	r25, 0x04	; 4
 310:	21 50       	subi	r18, 0x01	; 1
 312:	30 40       	sbci	r19, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x68>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x72>
 31a:	00 00       	nop
        _delay_ms(200);
        led_port &= ~led_mask;
 31c:	2d 98       	cbi	0x05, 5	; 5
 31e:	af ef       	ldi	r26, 0xFF	; 255
 320:	b1 ee       	ldi	r27, 0xE1	; 225
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	a1 50       	subi	r26, 0x01	; 1
 326:	b0 40       	sbci	r27, 0x00	; 0
 328:	20 40       	sbci	r18, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x7c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x86>
 32e:	00 00       	nop
 330:	81 50       	subi	r24, 0x01	; 1
    gpsmsg = (gpsmsg_t*)msg.data;
    rawmsg = (uint8_t*)&msg;

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
 332:	51 f7       	brne	.-44     	; 0x308 <main+0x60>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 334:	ca e0       	ldi	r28, 0x0A	; 10
                msg.type = GPS;
 336:	d1 e0       	ldi	r29, 0x01	; 1
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 338:	18 e0       	ldi	r17, 0x08	; 8
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
 33a:	01 e8       	ldi	r16, 0x81	; 129
                bootmsg->page_address = new_packet[2];
                bootmsg->unused = 0;
                cli();
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
                    bootmsg->page_offset = i/2;
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	f8 2e       	mov	r15, r24
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 340:	80 91 02 01 	lds	r24, 0x0102
 344:	88 23       	and	r24, r24
 346:	e1 f3       	breq	.-8      	; 0x340 <main+0x98>
            has_new_packet = 0;
 348:	10 92 02 01 	sts	0x0102, r1
            switch(packet_type) {
 34c:	80 91 97 01 	lds	r24, 0x0197
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	09 f4       	brne	.+2      	; 0x356 <main+0xae>
 354:	75 c0       	rjmp	.+234    	; 0x440 <main+0x198>
 356:	38 f4       	brcc	.+14     	; 0x366 <main+0xbe>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	79 f0       	breq	.+30     	; 0x37a <main+0xd2>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	81 f7       	brne	.-32     	; 0x340 <main+0x98>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	17 c0       	rjmp	.+46     	; 0x394 <main+0xec>
 366:	85 30       	cpi	r24, 0x05	; 5
 368:	09 f4       	brne	.+2      	; 0x36c <main+0xc4>
 36a:	ca c0       	rjmp	.+404    	; 0x500 <main+0x258>
 36c:	08 f4       	brcc	.+2      	; 0x370 <main+0xc8>
 36e:	90 c0       	rjmp	.+288    	; 0x490 <main+0x1e8>
 370:	86 30       	cpi	r24, 0x06	; 6
 372:	31 f7       	brne	.-52     	; 0x340 <main+0x98>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	3b c0       	rjmp	.+118    	; 0x3f0 <main+0x148>
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 91 00 01 	lds	r25, 0x0100
 380:	91 11       	cpse	r25, r1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	80 93 00 01 	sts	0x0100, r24
                if (leds_toggle) {
 388:	88 23       	and	r24, r24
 38a:	11 f0       	breq	.+4      	; 0x390 <main+0xe8>
                    led_port |= led_mask;
 38c:	2d 9a       	sbi	0x05, 5	; 5
 38e:	d8 cf       	rjmp	.-80     	; 0x340 <main+0x98>
                } else {
                    led_port &= ~led_mask;
 390:	2d 98       	cbi	0x05, 5	; 5
 392:	d6 cf       	rjmp	.-84     	; 0x340 <main+0x98>
 394:	fc 01       	movw	r30, r24
 396:	e8 56       	subi	r30, 0x68	; 104
 398:	fe 4f       	sbci	r31, 0xFE	; 254
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 39a:	22 81       	ldd	r18, Z+2	; 0x02
 39c:	e0 91 1c 02 	lds	r30, 0x021C
 3a0:	f0 91 1d 02 	lds	r31, 0x021D
 3a4:	e8 0f       	add	r30, r24
 3a6:	f9 1f       	adc	r31, r25
 3a8:	20 83       	st	Z, r18
 3aa:	01 96       	adiw	r24, 0x01	; 1
                } else {
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
 3ac:	8a 30       	cpi	r24, 0x0A	; 10
 3ae:	91 05       	cpc	r25, r1
 3b0:	89 f7       	brne	.-30     	; 0x394 <main+0xec>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
 3b2:	8b e8       	ldi	r24, 0x8B	; 139
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 b6 00 	call	0x16c	; 0x16c <message_crc>
 3ba:	90 93 96 01 	sts	0x0196, r25
 3be:	80 93 95 01 	sts	0x0195, r24
                while(!has_new_packet) {
 3c2:	80 91 02 01 	lds	r24, 0x0102
 3c6:	81 11       	cpse	r24, r1
 3c8:	bb cf       	rjmp	.-138    	; 0x340 <main+0x98>
                    message_send(&msg);
 3ca:	8b e8       	ldi	r24, 0x8B	; 139
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <message_send>
                    led_port |= led_mask;
 3d2:	2d 9a       	sbi	0x05, 5	; 5
 3d4:	8f e6       	ldi	r24, 0x6F	; 111
 3d6:	97 e1       	ldi	r25, 0x17	; 23
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x130>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x136>
 3de:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
 3e0:	2d 98       	cbi	0x05, 5	; 5
 3e2:	af e6       	ldi	r26, 0x6F	; 111
 3e4:	b7 e1       	ldi	r27, 0x17	; 23
 3e6:	11 97       	sbiw	r26, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <main+0x13e>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x144>
 3ec:	00 00       	nop
 3ee:	e9 cf       	rjmp	.-46     	; 0x3c2 <main+0x11a>
 3f0:	fc 01       	movw	r30, r24
 3f2:	e8 56       	subi	r30, 0x68	; 104
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 3f6:	22 81       	ldd	r18, Z+2	; 0x02
 3f8:	e0 91 1c 02 	lds	r30, 0x021C
 3fc:	f0 91 1d 02 	lds	r31, 0x021D
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	20 83       	st	Z, r18
 406:	01 96       	adiw	r24, 0x01	; 1
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	91 05       	cpc	r25, r1
 40c:	89 f7       	brne	.-30     	; 0x3f0 <main+0x148>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
 40e:	8b e8       	ldi	r24, 0x8B	; 139
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 b6 00 	call	0x16c	; 0x16c <message_crc>
 416:	90 93 96 01 	sts	0x0196, r25
 41a:	80 93 95 01 	sts	0x0195, r24
                message_send(&msg);
 41e:	8b e8       	ldi	r24, 0x8B	; 139
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <message_send>
                led_port |= led_mask;
 426:	2d 9a       	sbi	0x05, 5	; 5
 428:	8f e6       	ldi	r24, 0x6F	; 111
 42a:	97 e1       	ldi	r25, 0x17	; 23
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <main+0x184>
 430:	00 c0       	rjmp	.+0      	; 0x432 <main+0x18a>
 432:	00 00       	nop
                _delay_ms(3);
                led_port &= ~led_mask;
 434:	2d 98       	cbi	0x05, 5	; 5
 436:	af e6       	ldi	r26, 0x6F	; 111
 438:	b7 e1       	ldi	r27, 0x17	; 23
 43a:	11 97       	sbiw	r26, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <main+0x192>
 43e:	9c c0       	rjmp	.+312    	; 0x578 <main+0x2d0>
    }

    while(1) {
        if (has_new_packet) {
            has_new_packet = 0;
            switch(packet_type) {
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	e8 56       	subi	r30, 0x68	; 104
 448:	fe 4f       	sbci	r31, 0xFE	; 254
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
 44a:	22 81       	ldd	r18, Z+2	; 0x02
 44c:	e0 91 1c 02 	lds	r30, 0x021C
 450:	f0 91 1d 02 	lds	r31, 0x021D
 454:	e8 0f       	add	r30, r24
 456:	f9 1f       	adc	r31, r25
 458:	20 83       	st	Z, r18
 45a:	01 96       	adiw	r24, 0x01	; 1
                _delay_ms(3);
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
 45c:	8c 30       	cpi	r24, 0x0C	; 12
 45e:	91 05       	cpc	r25, r1
 460:	89 f7       	brne	.-30     	; 0x444 <main+0x19c>
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
 462:	80 91 02 01 	lds	r24, 0x0102
 466:	81 11       	cpse	r24, r1
 468:	6b cf       	rjmp	.-298    	; 0x340 <main+0x98>
                    message_send(&msg);
 46a:	8b e8       	ldi	r24, 0x8B	; 139
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <message_send>
                    led_port |= led_mask;
 472:	2d 9a       	sbi	0x05, 5	; 5
 474:	8f e6       	ldi	r24, 0x6F	; 111
 476:	97 e1       	ldi	r25, 0x17	; 23
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <main+0x1d0>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x1d6>
 47e:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
 480:	2d 98       	cbi	0x05, 5	; 5
 482:	af e6       	ldi	r26, 0x6F	; 111
 484:	b7 e1       	ldi	r27, 0x17	; 23
 486:	11 97       	sbiw	r26, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <main+0x1de>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x1e4>
 48c:	00 00       	nop
 48e:	e9 cf       	rjmp	.-46     	; 0x462 <main+0x1ba>
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
 490:	00 93 94 01 	sts	0x0194, r16
                bootmsg->page_address = new_packet[2];
 494:	e0 91 89 01 	lds	r30, 0x0189
 498:	f0 91 8a 01 	lds	r31, 0x018A
 49c:	80 91 9a 01 	lds	r24, 0x019A
 4a0:	80 83       	st	Z, r24
                bootmsg->unused = 0;
 4a2:	10 86       	std	Z+8, r1	; 0x08
                cli();
 4a4:	f8 94       	cli
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 4a6:	e0 e0       	ldi	r30, 0x00	; 0
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	8e 2f       	mov	r24, r30
 4ac:	e4 38       	cpi	r30, 0x84	; 132
 4ae:	f1 05       	cpc	r31, r1
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <main+0x20c>
 4b2:	55 c0       	rjmp	.+170    	; 0x55e <main+0x2b6>
 4b4:	90 91 02 01 	lds	r25, 0x0102
 4b8:	6f 01       	movw	r12, r30
 4ba:	b6 e0       	ldi	r27, 0x06	; 6
 4bc:	cb 0e       	add	r12, r27
 4be:	d1 1c       	adc	r13, r1
 4c0:	91 11       	cpse	r25, r1
 4c2:	4d c0       	rjmp	.+154    	; 0x55e <main+0x2b6>
                    bootmsg->page_offset = i/2;
 4c4:	a0 91 89 01 	lds	r26, 0x0189
 4c8:	b0 91 8a 01 	lds	r27, 0x018A
 4cc:	86 95       	lsr	r24
 4ce:	11 96       	adiw	r26, 0x01	; 1
 4d0:	8c 93       	st	X, r24
 4d2:	11 97       	sbiw	r26, 0x01	; 1
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	e5 56       	subi	r30, 0x65	; 101
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	8f 2d       	mov	r24, r15
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x234>
                    msg.crc = message_crc(&msg);
 4e4:	8b e8       	ldi	r24, 0x8B	; 139
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 b6 00 	call	0x16c	; 0x16c <message_crc>
 4ec:	90 93 96 01 	sts	0x0196, r25
 4f0:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 4f4:	8b e8       	ldi	r24, 0x8B	; 139
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <message_send>
 4fc:	f6 01       	movw	r30, r12
 4fe:	d5 cf       	rjmp	.-86     	; 0x4aa <main+0x202>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 500:	eb e8       	ldi	r30, 0x8B	; 139
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	df 01       	movw	r26, r30
 506:	2c 2f       	mov	r18, r28
 508:	1d 92       	st	X+, r1
 50a:	2a 95       	dec	r18
 50c:	e9 f7       	brne	.-6      	; 0x508 <main+0x260>
                msg.type = GPS;
 50e:	d0 93 94 01 	sts	0x0194, r29
                cli();
 512:	f8 94       	cli
 514:	c1 2c       	mov	r12, r1
 516:	d1 2c       	mov	r13, r1
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 518:	a0 91 1e 02 	lds	r26, 0x021E
 51c:	b0 91 1f 02 	lds	r27, 0x021F
 520:	f6 01       	movw	r30, r12
 522:	e6 56       	subi	r30, 0x66	; 102
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	81 2f       	mov	r24, r17
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <main+0x280>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 530:	e0 91 1e 02 	lds	r30, 0x021E
 534:	f0 91 1f 02 	lds	r31, 0x021F
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	89 2b       	or	r24, r25
 53e:	f9 f4       	brne	.+62     	; 0x57e <main+0x2d6>
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	89 2b       	or	r24, r25
 546:	d9 f4       	brne	.+54     	; 0x57e <main+0x2d6>
 548:	84 81       	ldd	r24, Z+4	; 0x04
 54a:	95 81       	ldd	r25, Z+5	; 0x05
 54c:	89 2b       	or	r24, r25
 54e:	b9 f4       	brne	.+46     	; 0x57e <main+0x2d6>
 550:	86 81       	ldd	r24, Z+6	; 0x06
 552:	81 11       	cpse	r24, r1
 554:	14 c0       	rjmp	.+40     	; 0x57e <main+0x2d6>
 556:	87 81       	ldd	r24, Z+7	; 0x07
 558:	90 85       	ldd	r25, Z+8	; 0x08
 55a:	89 2b       	or	r24, r25
 55c:	81 f4       	brne	.+32     	; 0x57e <main+0x2d6>
                        break;
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
 55e:	78 94       	sei
                led_port |= led_mask;
 560:	2d 9a       	sbi	0x05, 5	; 5
 562:	8f e1       	ldi	r24, 0x1F	; 31
 564:	9e e4       	ldi	r25, 0x4E	; 78
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <main+0x2be>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <main+0x2c4>
 56c:	00 00       	nop
                _delay_ms(10);
                led_port &= ~led_mask;
 56e:	2d 98       	cbi	0x05, 5	; 5
 570:	af e1       	ldi	r26, 0x1F	; 31
 572:	be e4       	ldi	r27, 0x4E	; 78
 574:	11 97       	sbiw	r26, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <main+0x2cc>
 578:	00 c0       	rjmp	.+0      	; 0x57a <main+0x2d2>
 57a:	00 00       	nop
 57c:	e1 ce       	rjmp	.-574    	; 0x340 <main+0x98>
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
                        break;
                    msg.crc = message_crc(&msg);
 57e:	8b e8       	ldi	r24, 0x8B	; 139
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	0e 94 b6 00 	call	0x16c	; 0x16c <message_crc>
 586:	90 93 96 01 	sts	0x0196, r25
 58a:	80 93 95 01 	sts	0x0195, r24
                    message_send(&msg);
 58e:	8b e8       	ldi	r24, 0x8B	; 139
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	b5 e8       	ldi	r27, 0x85	; 133
 598:	ba 95       	dec	r27
 59a:	f1 f7       	brne	.-4      	; 0x598 <main+0x2f0>
 59c:	00 00       	nop
 59e:	28 e0       	ldi	r18, 0x08	; 8
 5a0:	c2 0e       	add	r12, r18
 5a2:	d1 1c       	adc	r13, r1
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 5a4:	30 e8       	ldi	r19, 0x80	; 128
 5a6:	c3 16       	cp	r12, r19
 5a8:	d1 04       	cpc	r13, r1
 5aa:	09 f0       	breq	.+2      	; 0x5ae <main+0x306>
 5ac:	b5 cf       	rjmp	.-150    	; 0x518 <main+0x270>
 5ae:	d7 cf       	rjmp	.-82     	; 0x55e <main+0x2b6>

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
