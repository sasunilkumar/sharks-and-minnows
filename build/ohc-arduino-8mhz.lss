
build/ohc-arduino-8mhz.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 49 01 	call	0x292	; 0x292 <main>
  88:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
    uint8_t rx = UDR0;
  aa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    packet_checksum ^= packet_buffer[packet_head];
  ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <packet_head>
  b2:	e9 2f       	mov	r30, r25
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	eb 5f       	subi	r30, 0xFB	; 251
  b8:	fe 4f       	sbci	r31, 0xFE	; 254
  ba:	30 81       	ld	r19, Z
  bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <packet_checksum>
  c0:	82 27       	eor	r24, r18
    packet_buffer[packet_head] = rx;
  c2:	20 83       	st	Z, r18
    packet_checksum ^= rx;
  c4:	83 27       	eor	r24, r19
  c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <packet_checksum>
    packet_head++;
  ca:	9f 5f       	subi	r25, 0xFF	; 255
    if (packet_head >= PACKET_SIZE)
  cc:	94 38       	cpi	r25, 0x84	; 132
  ce:	18 f4       	brcc	.+6      	; 0xd6 <__vector_18+0x46>
    uint8_t rx = UDR0;

    packet_checksum ^= packet_buffer[packet_head];
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
    packet_head++;
  d0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <packet_head>
  d4:	02 c0       	rjmp	.+4      	; 0xda <__vector_18+0x4a>
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;
  d6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <packet_head>

    if (packet_buffer[packet_head] == PACKET_HEADER) {
  da:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <packet_head>
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	eb 5f       	subi	r30, 0xFB	; 251
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	90 81       	ld	r25, Z
  e8:	95 35       	cpi	r25, 0x55	; 85
  ea:	41 f5       	brne	.+80     	; 0x13c <__vector_18+0xac>
        if (packet_checksum == 0) {
  ec:	81 11       	cpse	r24, r1
  ee:	26 c0       	rjmp	.+76     	; 0x13c <__vector_18+0xac>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	82 1b       	sub	r24, r18
  f6:	93 0b       	sbc	r25, r19
            for (i = 0; i < num; i++)
  f8:	a8 e9       	ldi	r26, 0x98	; 152
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	9d 01       	movw	r18, r26
  fe:	28 59       	subi	r18, 0x98	; 152
 100:	31 40       	sbci	r19, 0x01	; 1
 102:	28 17       	cp	r18, r24
 104:	39 07       	cpc	r19, r25
 106:	18 f4       	brcc	.+6      	; 0x10e <__vector_18+0x7e>
                new_packet[i] = packet_buffer[i+packet_head];
 108:	21 91       	ld	r18, Z+
 10a:	2d 93       	st	X+, r18
 10c:	f7 cf       	rjmp	.-18     	; 0xfc <__vector_18+0x6c>
 10e:	dc 01       	movw	r26, r24
 110:	a8 56       	subi	r26, 0x68	; 104
 112:	be 4f       	sbci	r27, 0xFE	; 254

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
 114:	e5 e0       	ldi	r30, 0x05	; 5
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	85 50       	subi	r24, 0x05	; 5
 11a:	91 40       	sbci	r25, 0x01	; 1
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
 11c:	9f 01       	movw	r18, r30
 11e:	28 0f       	add	r18, r24
 120:	39 1f       	adc	r19, r25
 122:	24 38       	cpi	r18, 0x84	; 132
 124:	31 05       	cpc	r19, r1
 126:	18 f4       	brcc	.+6      	; 0x12e <__vector_18+0x9e>
                new_packet[i] = packet_buffer[i-num];
 128:	21 91       	ld	r18, Z+
 12a:	2d 93       	st	X+, r18
 12c:	f7 cf       	rjmp	.-18     	; 0x11c <__vector_18+0x8c>
            has_new_packet = 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <has_new_packet>
            packet_type = new_packet[1];
 134:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <new_packet+0x1>
 138:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <packet_type>
        }
    }
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
 156:	fc 01       	movw	r30, r24
 158:	9c 01       	movw	r18, r24
 15a:	26 5f       	subi	r18, 0xF6	; 246
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
 162:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 164:	84 27       	eor	r24, r20
 166:	08 2e       	mov	r0, r24
 168:	82 95       	swap	r24
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	80 25       	eor	r24, r0
 16e:	09 2e       	mov	r0, r25
 170:	98 2f       	mov	r25, r24
 172:	82 95       	swap	r24
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	08 26       	eor	r0, r24
 178:	86 95       	lsr	r24
 17a:	98 27       	eor	r25, r24
 17c:	89 27       	eor	r24, r25
 17e:	88 0f       	add	r24, r24
 180:	88 0f       	add	r24, r24
 182:	88 0f       	add	r24, r24
 184:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
 186:	e2 17       	cp	r30, r18
 188:	f3 07       	cpc	r31, r19
 18a:	59 f7       	brne	.-42     	; 0x162 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
 18c:	08 95       	ret

0000018e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
 18e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
 190:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
 192:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tx_mask>
    or tmpreg1, ddrreg
 196:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
 198:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
 19a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
 19c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 1a0:	20 30       	cpi	r18, 0x00	; 0
 1a2:	29 f0       	breq	.+10     	; 0x1ae <message_send+0x20>
 1a4:	00 00       	nop
 1a6:	25 b1       	in	r18, 0x05	; 5
 1a8:	23 2b       	or	r18, r19
 1aa:	25 b9       	out	0x05, r18	; 5
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <message_send+0x28>
 1ae:	00 00       	nop
 1b0:	00 00       	nop
 1b2:	00 00       	nop
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <message_send+0x28>
 1b6:	00 00       	nop
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	30 95       	com	r19
 1be:	25 b1       	in	r18, 0x05	; 5
 1c0:	23 23       	and	r18, r19
 1c2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
 1c4:	2e ea       	ldi	r18, 0xAE	; 174
 1c6:	2a 95       	dec	r18
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <message_send+0x38>

    ldi tmpreg1, rx_bitcycles*7/8
 1ca:	2b ee       	ldi	r18, 0xEB	; 235

000001cc <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
 1cc:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
 1ce:	35 ff       	sbrs	r19, 5
    rjmp nocollision
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 1d2:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 1d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
 1d8:	30 95       	com	r19
    in tmpreg1, IR_PORT
 1da:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
 1dc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
 1de:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 1e0:	0f be       	out	0x3f, r0	; 63
    return 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret

000001e6 <nocollision>:
nocollision:
    nop
 1e6:	00 00       	nop
    dec tmpreg1
 1e8:	2a 95       	dec	r18
    brne checkcollision
 1ea:	81 f7       	brne	.-32     	; 0x1cc <checkcollision>

    ldi tmpreg1, 0x01
 1ec:	21 e0       	ldi	r18, 0x01	; 1
    irsend
 1ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 1f2:	20 30       	cpi	r18, 0x00	; 0
 1f4:	29 f0       	breq	.+10     	; 0x200 <nocollision+0x1a>
 1f6:	00 00       	nop
 1f8:	25 b1       	in	r18, 0x05	; 5
 1fa:	23 2b       	or	r18, r19
 1fc:	25 b9       	out	0x05, r18	; 5
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <nocollision+0x22>
 200:	00 00       	nop
 202:	00 00       	nop
 204:	00 00       	nop
 206:	00 c0       	rjmp	.+0      	; 0x208 <nocollision+0x22>
 208:	00 00       	nop
 20a:	00 00       	nop
 20c:	00 00       	nop
 20e:	30 95       	com	r19
 210:	25 b1       	in	r18, 0x05	; 5
 212:	23 23       	and	r18, r19
 214:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
 216:	00 00       	nop
 218:	24 e5       	ldi	r18, 0x54	; 84
 21a:	2a 95       	dec	r18
 21c:	f1 f7       	brne	.-4      	; 0x21a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
 21e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
 220:	8c e0       	ldi	r24, 0x0C	; 12

00000222 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
 222:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
 224:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
 226:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
 228:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
 22a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
 22c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
 22e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
 230:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
 232:	50 e0       	ldi	r21, 0x00	; 0

00000234 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
 234:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
 236:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
 238:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
 23a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
 23c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 240:	20 30       	cpi	r18, 0x00	; 0
 242:	29 f0       	breq	.+10     	; 0x24e <sendbit+0x1a>
 244:	00 00       	nop
 246:	25 b1       	in	r18, 0x05	; 5
 248:	23 2b       	or	r18, r19
 24a:	25 b9       	out	0x05, r18	; 5
 24c:	04 c0       	rjmp	.+8      	; 0x256 <sendbit+0x22>
 24e:	00 00       	nop
 250:	00 00       	nop
 252:	00 00       	nop
 254:	00 c0       	rjmp	.+0      	; 0x256 <sendbit+0x22>
 256:	00 00       	nop
 258:	00 00       	nop
 25a:	00 00       	nop
 25c:	30 95       	com	r19
 25e:	25 b1       	in	r18, 0x05	; 5
 260:	23 23       	and	r18, r19
 262:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
 264:	00 00       	nop
 266:	21 e5       	ldi	r18, 0x51	; 81
 268:	2a 95       	dec	r18
 26a:	f1 f7       	brne	.-4      	; 0x268 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
 26c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
 26e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
 270:	9a 95       	dec	r25
    brne sendbit
 272:	01 f7       	brne	.-64     	; 0x234 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
 274:	8a 95       	dec	r24
    brne sendbyte
 276:	a9 f6       	brne	.-86     	; 0x222 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
 278:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
 27a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
 27c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 27e:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 280:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
 284:	30 95       	com	r19
    in tmpreg1, IR_PORT
 286:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
 288:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
 28a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 28c:	0f be       	out	0x3f, r0	; 63
    return 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret

00000292 <main>:
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
    cli();
 292:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
 294:	21 9a       	sbi	0x04, 1	; 4
    led_ddr |= led_mask;
 296:	25 9a       	sbi	0x04, 5	; 4
    // Turn off all leds
    led_port &= ~led_mask;
 298:	2d 98       	cbi	0x05, 5	; 5
    ir_port &= ~ir_mask;
 29a:	29 98       	cbi	0x05, 1	; 5
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
 29c:	80 b7       	in	r24, 0x30	; 48
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	80 bf       	out	0x30, r24	; 48
    CLKPR = 1;
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
 2ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
 2b8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2bc:	86 60       	ori	r24, 0x06	; 6
 2be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
 2c2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2c6:	88 69       	ori	r24, 0x98	; 152
 2c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    sei();
 2cc:	78 94       	sei

    tx_mask = ir_mask;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx_mask>
    bootmsg = (bootmsg_t*)msg.data;
 2d4:	8b e8       	ldi	r24, 0x8B	; 139
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <bootmsg+0x1>
 2dc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bootmsg>
    gpsmsg = (gpsmsg_t*)msg.data;
 2e0:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <gpsmsg+0x1>
 2e4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <gpsmsg>
    rawmsg = (uint8_t*)&msg;
 2e8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <rawmsg+0x1>
 2ec:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <rawmsg>
 2f0:	85 e0       	ldi	r24, 0x05	; 5

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
 2f2:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	31 ee       	ldi	r19, 0xE1	; 225
 2f8:	94 e0       	ldi	r25, 0x04	; 4
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	30 40       	sbci	r19, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x68>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x72>
 304:	00 00       	nop
        _delay_ms(200);
        led_port &= ~led_mask;
 306:	2d 98       	cbi	0x05, 5	; 5
 308:	af ef       	ldi	r26, 0xFF	; 255
 30a:	b1 ee       	ldi	r27, 0xE1	; 225
 30c:	24 e0       	ldi	r18, 0x04	; 4
 30e:	a1 50       	subi	r26, 0x01	; 1
 310:	b0 40       	sbci	r27, 0x00	; 0
 312:	20 40       	sbci	r18, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x7c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x86>
 318:	00 00       	nop
 31a:	81 50       	subi	r24, 0x01	; 1
    gpsmsg = (gpsmsg_t*)msg.data;
    rawmsg = (uint8_t*)&msg;

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
 31c:	51 f7       	brne	.-44     	; 0x2f2 <main+0x60>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 31e:	1a e0       	ldi	r17, 0x0A	; 10
                msg.type = GPS;
 320:	01 e0       	ldi	r16, 0x01	; 1
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
 322:	81 e8       	ldi	r24, 0x81	; 129
 324:	f8 2e       	mov	r15, r24
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
 326:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
 32a:	88 23       	and	r24, r24
 32c:	e1 f3       	breq	.-8      	; 0x326 <main+0x94>
            has_new_packet = 0;
 32e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <has_new_packet>
            switch(packet_type) {
 332:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <packet_type>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	09 f4       	brne	.+2      	; 0x33c <main+0xaa>
 33a:	73 c0       	rjmp	.+230    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 33c:	48 f4       	brcc	.+18     	; 0x350 <main+0xbe>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	99 f0       	breq	.+38     	; 0x368 <main+0xd6>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	81 f7       	brne	.-32     	; 0x326 <main+0x94>
 346:	aa e9       	ldi	r26, 0x9A	; 154
 348:	b1 e0       	ldi	r27, 0x01	; 1
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	19 c0       	rjmp	.+50     	; 0x382 <main+0xf0>
 350:	85 30       	cpi	r24, 0x05	; 5
 352:	09 f4       	brne	.+2      	; 0x356 <main+0xc4>
 354:	c3 c0       	rjmp	.+390    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 356:	08 f4       	brcc	.+2      	; 0x35a <main+0xc8>
 358:	8b c0       	rjmp	.+278    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 35a:	86 30       	cpi	r24, 0x06	; 6
 35c:	21 f7       	brne	.-56     	; 0x326 <main+0x94>
 35e:	aa e9       	ldi	r26, 0x9A	; 154
 360:	b1 e0       	ldi	r27, 0x01	; 1
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	38 c0       	rjmp	.+112    	; 0x3d8 <main+0x146>
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	81 11       	cpse	r24, r1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
                if (leds_toggle) {
 376:	81 11       	cpse	r24, r1
 378:	02 c0       	rjmp	.+4      	; 0x37e <main+0xec>
                    led_port |= led_mask;
 37a:	2d 9a       	sbi	0x05, 5	; 5
 37c:	d4 cf       	rjmp	.-88     	; 0x326 <main+0x94>
                } else {
                    led_port &= ~led_mask;
 37e:	2d 98       	cbi	0x05, 5	; 5
 380:	d2 cf       	rjmp	.-92     	; 0x326 <main+0x94>
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 382:	2d 91       	ld	r18, X+
 384:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 388:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
 38c:	e8 0f       	add	r30, r24
 38e:	f9 1f       	adc	r31, r25
 390:	20 83       	st	Z, r18
 392:	01 96       	adiw	r24, 0x01	; 1
                } else {
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
 394:	8a 30       	cpi	r24, 0x0A	; 10
 396:	91 05       	cpc	r25, r1
 398:	a1 f7       	brne	.-24     	; 0x382 <main+0xf0>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
 39a:	8b e8       	ldi	r24, 0x8B	; 139
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 ab 00 	call	0x156	; 0x156 <message_crc>
 3a2:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 3a6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                while(!has_new_packet) {
 3aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
 3ae:	81 11       	cpse	r24, r1
 3b0:	ba cf       	rjmp	.-140    	; 0x326 <main+0x94>
                    message_send(&msg);
 3b2:	8b e8       	ldi	r24, 0x8B	; 139
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 c7 00 	call	0x18e	; 0x18e <message_send>
                    led_port |= led_mask;
 3ba:	2d 9a       	sbi	0x05, 5	; 5
 3bc:	8f e6       	ldi	r24, 0x6F	; 111
 3be:	97 e1       	ldi	r25, 0x17	; 23
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <main+0x12e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x134>
 3c6:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
 3c8:	2d 98       	cbi	0x05, 5	; 5
 3ca:	af e6       	ldi	r26, 0x6F	; 111
 3cc:	b7 e1       	ldi	r27, 0x17	; 23
 3ce:	11 97       	sbiw	r26, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x13c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x142>
 3d4:	00 00       	nop
 3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <main+0x118>
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
 3d8:	2d 91       	ld	r18, X+
 3da:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 3de:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
 3e2:	e8 0f       	add	r30, r24
 3e4:	f9 1f       	adc	r31, r25
 3e6:	20 83       	st	Z, r18
 3e8:	01 96       	adiw	r24, 0x01	; 1
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
 3ea:	8a 30       	cpi	r24, 0x0A	; 10
 3ec:	91 05       	cpc	r25, r1
 3ee:	a1 f7       	brne	.-24     	; 0x3d8 <main+0x146>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
 3f0:	8b e8       	ldi	r24, 0x8B	; 139
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 ab 00 	call	0x156	; 0x156 <message_crc>
 3f8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 3fc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                message_send(&msg);
 400:	8b e8       	ldi	r24, 0x8B	; 139
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 c7 00 	call	0x18e	; 0x18e <message_send>
                led_port |= led_mask;
 408:	2d 9a       	sbi	0x05, 5	; 5
 40a:	8f e6       	ldi	r24, 0x6F	; 111
 40c:	97 e1       	ldi	r25, 0x17	; 23
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
                _delay_ms(3);
                led_port &= ~led_mask;
 416:	2d 98       	cbi	0x05, 5	; 5
 418:	af e6       	ldi	r26, 0x6F	; 111
 41a:	b7 e1       	ldi	r27, 0x17	; 23
 41c:	11 97       	sbiw	r26, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	99 c0       	rjmp	.+306    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 422:	aa e9       	ldi	r26, 0x9A	; 154
 424:	b1 e0       	ldi	r27, 0x01	; 1
    }

    while(1) {
        if (has_new_packet) {
            has_new_packet = 0;
            switch(packet_type) {
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
 42a:	2d 91       	ld	r18, X+
 42c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 430:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
 434:	e8 0f       	add	r30, r24
 436:	f9 1f       	adc	r31, r25
 438:	20 83       	st	Z, r18
 43a:	01 96       	adiw	r24, 0x01	; 1
                _delay_ms(3);
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
 43c:	8c 30       	cpi	r24, 0x0C	; 12
 43e:	91 05       	cpc	r25, r1
 440:	a1 f7       	brne	.-24     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
 442:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
 446:	81 11       	cpse	r24, r1
 448:	6e cf       	rjmp	.-292    	; 0x326 <main+0x94>
                    message_send(&msg);
 44a:	8b e8       	ldi	r24, 0x8B	; 139
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 c7 00 	call	0x18e	; 0x18e <message_send>
                    led_port |= led_mask;
 452:	2d 9a       	sbi	0x05, 5	; 5
 454:	8f e6       	ldi	r24, 0x6F	; 111
 456:	97 e1       	ldi	r25, 0x17	; 23
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
 460:	2d 98       	cbi	0x05, 5	; 5
 462:	af e6       	ldi	r26, 0x6F	; 111
 464:	b7 e1       	ldi	r27, 0x17	; 23
 466:	11 97       	sbiw	r26, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
 46e:	e9 cf       	rjmp	.-46     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
 470:	f0 92 94 01 	sts	0x0194, r15	; 0x800194 <msg+0x9>
                bootmsg->page_address = new_packet[2];
 474:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <bootmsg>
 478:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <bootmsg+0x1>
 47c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
 480:	80 83       	st	Z, r24
                bootmsg->unused = 0;
 482:	10 86       	std	Z+8, r1	; 0x08
                cli();
 484:	f8 94       	cli
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	8e 2f       	mov	r24, r30
 48c:	e4 38       	cpi	r30, 0x84	; 132
 48e:	f1 05       	cpc	r31, r1
 490:	09 f4       	brne	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 492:	53 c0       	rjmp	.+166    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 494:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <has_new_packet>
 498:	ef 01       	movw	r28, r30
 49a:	26 96       	adiw	r28, 0x06	; 6
 49c:	91 11       	cpse	r25, r1
 49e:	4d c0       	rjmp	.+154    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
                    bootmsg->page_offset = i/2;
 4a0:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
 4a4:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>
 4a8:	86 95       	lsr	r24
 4aa:	11 96       	adiw	r26, 0x01	; 1
 4ac:	8c 93       	st	X, r24
 4ae:	11 97       	sbiw	r26, 0x01	; 1
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 4b0:	12 96       	adiw	r26, 0x02	; 2
 4b2:	e5 56       	subi	r30, 0x65	; 101
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	86 e0       	ldi	r24, 0x06	; 6
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
                    msg.crc = message_crc(&msg);
 4c0:	8b e8       	ldi	r24, 0x8B	; 139
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 ab 00 	call	0x156	; 0x156 <message_crc>
 4c8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 4cc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
 4d0:	8b e8       	ldi	r24, 0x8B	; 139
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 c7 00 	call	0x18e	; 0x18e <message_send>
 4d8:	fe 01       	movw	r30, r28
 4da:	d7 cf       	rjmp	.-82     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 4dc:	eb e8       	ldi	r30, 0x8B	; 139
 4de:	f1 e0       	ldi	r31, 0x01	; 1
 4e0:	df 01       	movw	r26, r30
 4e2:	21 2f       	mov	r18, r17
 4e4:	1d 92       	st	X+, r1
 4e6:	2a 95       	dec	r18
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
                msg.type = GPS;
 4ea:	00 93 94 01 	sts	0x0194, r16	; 0x800194 <msg+0x9>
                cli();
 4ee:	f8 94       	cli
 4f0:	c0 e0       	ldi	r28, 0x00	; 0
 4f2:	d0 e0       	ldi	r29, 0x00	; 0
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 4f4:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <gpsmsg>
 4f8:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <gpsmsg+0x1>
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	fe 01       	movw	r30, r28
 500:	e6 56       	subi	r30, 0x66	; 102
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	01 90       	ld	r0, Z+
 506:	0d 92       	st	X+, r0
 508:	8a 95       	dec	r24
 50a:	e1 f7       	brne	.-8      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 50c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <gpsmsg>
 510:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <gpsmsg+0x1>
 514:	80 81       	ld	r24, Z
 516:	91 81       	ldd	r25, Z+1	; 0x01
 518:	89 2b       	or	r24, r25
 51a:	f9 f4       	brne	.+62     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 51c:	82 81       	ldd	r24, Z+2	; 0x02
 51e:	93 81       	ldd	r25, Z+3	; 0x03
 520:	89 2b       	or	r24, r25
 522:	d9 f4       	brne	.+54     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 524:	84 81       	ldd	r24, Z+4	; 0x04
 526:	95 81       	ldd	r25, Z+5	; 0x05
 528:	89 2b       	or	r24, r25
 52a:	b9 f4       	brne	.+46     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 52c:	86 81       	ldd	r24, Z+6	; 0x06
 52e:	81 11       	cpse	r24, r1
 530:	14 c0       	rjmp	.+40     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 532:	87 81       	ldd	r24, Z+7	; 0x07
 534:	90 85       	ldd	r25, Z+8	; 0x08
 536:	89 2b       	or	r24, r25
 538:	81 f4       	brne	.+32     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
                        break;
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
 53a:	78 94       	sei
                led_port |= led_mask;
 53c:	2d 9a       	sbi	0x05, 5	; 5
 53e:	8f e1       	ldi	r24, 0x1F	; 31
 540:	9e e4       	ldi	r25, 0x4E	; 78
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 548:	00 00       	nop
                _delay_ms(10);
                led_port &= ~led_mask;
 54a:	2d 98       	cbi	0x05, 5	; 5
 54c:	af e1       	ldi	r26, 0x1F	; 31
 54e:	be e4       	ldi	r27, 0x4E	; 78
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 556:	00 00       	nop
 558:	e6 ce       	rjmp	.-564    	; 0x326 <main+0x94>
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
                        break;
                    msg.crc = message_crc(&msg);
 55a:	8b e8       	ldi	r24, 0x8B	; 139
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 ab 00 	call	0x156	; 0x156 <message_crc>
 562:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 566:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
 56a:	8b e8       	ldi	r24, 0x8B	; 139
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 c7 00 	call	0x18e	; 0x18e <message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	b5 e8       	ldi	r27, 0x85	; 133
 574:	ba 95       	dec	r27
 576:	f1 f7       	brne	.-4      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 578:	00 00       	nop
 57a:	28 96       	adiw	r28, 0x08	; 8
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 57c:	c0 38       	cpi	r28, 0x80	; 128
 57e:	d1 05       	cpc	r29, r1
 580:	09 f0       	breq	.+2      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 582:	b8 cf       	rjmp	.-144    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 584:	da cf       	rjmp	.-76     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
