
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	fb 04       	cpc	r15, r11
      6a:	52 05       	cpc	r21, r2
      6c:	66 05       	cpc	r22, r6
      6e:	97 05       	cpc	r25, r7
      70:	9e 05       	cpc	r25, r14
      72:	7d 05       	cpc	r23, r13
      74:	a1 05       	cpc	r26, r1
      76:	ff 06       	cpc	r15, r31
      78:	f0 07       	cpc	r31, r16
      7a:	f0 07       	cpc	r31, r16
      7c:	08 07       	cpc	r16, r24
      7e:	0b 07       	cpc	r16, r27
      80:	0e 07       	cpc	r16, r30
      82:	10 07       	cpc	r17, r16
      84:	12 07       	cpc	r17, r18
      86:	14 07       	cpc	r17, r20
      88:	c5 07       	cpc	r28, r21
      8a:	26 07       	cpc	r18, r22

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e3       	ldi	r30, 0x3C	; 60
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a8 30       	cpi	r26, 0x08	; 8
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a8 e0       	ldi	r26, 0x08	; 8
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 a2 08 	call	0x1144	; 0x1144 <main>
      da:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

int message_sent = 0, new_message = 0, die = 0, rand = 0, curr;
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <message_sent+0x1>
      f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <message_sent>
      f4:	08 95       	ret

000000f6 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  transmit_msg.type = NORMAL;
      fa:	c6 e1       	ldi	r28, 0x16	; 22
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 0;
     100:	18 82       	st	Y, r1
  transmit_msg.crc = message_crc(&transmit_msg);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 03 08 	call	0x1006	; 0x1006 <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <set_motion>:
void message_tx_success() {
  message_sent = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     112:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <curr>
     116:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <curr+0x1>
     11a:	28 17       	cp	r18, r24
     11c:	39 07       	cpc	r19, r25
     11e:	09 f1       	breq	.+66     	; 0x162 <set_motion+0x50>
        curr = new_motion;
     120:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <curr+0x1>
     124:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <curr>
        if (curr == STOP) {
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	11 f4       	brne	.+4      	; 0x130 <set_motion+0x1e>
          set_motors(0,0);
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	16 c0       	rjmp	.+44     	; 0x15c <set_motion+0x4a>
        } else if (curr == FORWARD) {
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	39 f4       	brne	.+14     	; 0x144 <set_motion+0x32>
          spinup_motors();
     136:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     13a:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     13e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     142:	0d c0       	rjmp	.+26     	; 0x15e <set_motion+0x4c>
        } else if (curr == LEFT) {
     144:	02 97       	sbiw	r24, 0x02	; 2
     146:	31 f4       	brne	.+12     	; 0x154 <set_motion+0x42>
          spinup_motors();
     148:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <spinup_motors>
          set_motors(kilo_turn_left, 0);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     152:	05 c0       	rjmp	.+10     	; 0x15e <set_motion+0x4c>
        } else {
          spinup_motors();
     154:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <spinup_motors>
          set_motors(0, kilo_turn_right);
     158:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <set_motors>
     162:	08 95       	ret

00000164 <loop>:
  transmit_msg.data[0] = 0;
  transmit_msg.crc = message_crc(&transmit_msg);
}

void loop() {
  if (message_sent == 1) {
     164:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <message_sent>
     168:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <message_sent+0x1>
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	59 f5       	brne	.+86     	; 0x1c6 <loop+0x62>
      message_sent = 0;
     170:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <message_sent+0x1>
     174:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent>
      set_color(RED);
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
      delay(100);
     17e:	84 e6       	ldi	r24, 0x64	; 100
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay>
      set_color(OFF);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
      rand = rand_soft();
     18c:	0e 94 9b 02 	call	0x536	; 0x536 <rand_soft>
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
      die = (rand % 3);
     19a:	63 e0       	ldi	r22, 0x03	; 3
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     1a2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <die+0x1>
     1a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <die>
      if (die == 0) {
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	19 f4       	brne	.+6      	; 0x1b4 <loop+0x50>
          set_motion(FORWARD);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <loop+0x5e>
      } else if (die == 1) {
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	19 f4       	brne	.+6      	; 0x1be <loop+0x5a>
          set_motion(LEFT);
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <loop+0x5e>
      } else {
          set_motion(RIGHT);
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 89 00 	call	0x112	; 0x112 <set_motion>
      }
  }
  delay(200);
     1c6:	88 ec       	ldi	r24, 0xC8	; 200
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay>
  set_color(WHITE);
     1ce:	85 e1       	ldi	r24, 0x15	; 21
     1d0:	0c 94 c8 04 	jmp	0x990	; 0x990 <set_color>

000001d4 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1d4:	08 95       	ret

000001d6 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	08 95       	ret

000001dc <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1dc:	08 95       	ret

000001de <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
    cli();
     1ec:	f8 94       	cli

    ports_off();
     1ee:	14 b8       	out	0x04, r1	; 4
     1f0:	17 b8       	out	0x07, r1	; 7
     1f2:	1a b8       	out	0x0a, r1	; 10
     1f4:	15 b8       	out	0x05, r1	; 5
     1f6:	18 b8       	out	0x08, r1	; 8
     1f8:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1fa:	52 9a       	sbi	0x0a, 2	; 10
     1fc:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1fe:	14 bc       	out	0x24, r1	; 36
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	85 bd       	out	0x25, r24	; 37
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	87 bd       	out	0x27, r24	; 39
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     20e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     212:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     216:	2f e8       	ldi	r18, 0x8F	; 143
     218:	3b e0       	ldi	r19, 0x0B	; 11
     21a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     21e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     226:	53 98       	cbi	0x0a, 3	; 10
     228:	23 98       	cbi	0x04, 3	; 4
     22a:	91 ea       	ldi	r25, 0xA1	; 161
     22c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     230:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     234:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     238:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     23c:	8b e0       	ldi	r24, 0x0B	; 11
     23e:	80 bf       	out	0x30, r24	; 48
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     24c:	83 e8       	ldi	r24, 0x83	; 131
     24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     256:	80 64       	ori	r24, 0x40	; 64
     258:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     25c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     260:	86 fd       	sbrc	r24, 6
     262:	fc cf       	rjmp	.-8      	; 0x25c <kilo_init+0x7e>
    adc_trigger_high_gain();
     264:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     268:	83 ea       	ldi	r24, 0xA3	; 163
     26a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
    if (osccal != 0xFF)
     27c:	8f 3f       	cpi	r24, 0xFF	; 255
     27e:	11 f0       	breq	.+4      	; 0x284 <kilo_init+0xa6>
        OSCCAL = osccal;
     280:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     284:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     288:	c1 e0       	ldi	r28, 0x01	; 1
     28a:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     28e:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     292:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     296:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     29a:	80 e9       	ldi	r24, 0x90	; 144
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     2a2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2a6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     2aa:	88 73       	andi	r24, 0x38	; 56
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2ae:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     2b2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     2b6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     2c2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     2c6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     2ca:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     2ce:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     2d2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     2dc:	82 e4       	ldi	r24, 0x42	; 66
     2de:	9f e0       	ldi	r25, 0x0F	; 15
     2e0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     2e4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2e8:	80 eb       	ldi	r24, 0xB0	; 176
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     2f0:	c8 2f       	mov	r28, r24
     2f2:	81 eb       	ldi	r24, 0xB1	; 177
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     2fa:	2c 2f       	mov	r18, r28
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	38 2b       	or	r19, r24
     300:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     304:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     310:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     314:	89 e0       	ldi	r24, 0x09	; 9
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     31c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     320:	8c e0       	ldi	r24, 0x0C	; 12
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     328:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     32c:	84 e1       	ldi	r24, 0x14	; 20
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     334:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     338:	0a e4       	ldi	r16, 0x4A	; 74
     33a:	11 e0       	ldi	r17, 0x01	; 1
     33c:	53 e2       	ldi	r21, 0x23	; 35
     33e:	e5 2e       	mov	r14, r21
     340:	51 e0       	ldi	r21, 0x01	; 1
     342:	f5 2e       	mov	r15, r21
     344:	c0 e2       	ldi	r28, 0x20	; 32
     346:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     348:	ce 01       	movw	r24, r28
     34a:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     34e:	d8 2e       	mov	r13, r24
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     358:	2d 2d       	mov	r18, r13
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	32 2f       	mov	r19, r18
     35e:	22 27       	eor	r18, r18
     360:	28 2b       	or	r18, r24
     362:	f8 01       	movw	r30, r16
     364:	21 93       	st	Z+, r18
     366:	31 93       	st	Z+, r19
     368:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     36a:	ce 01       	movw	r24, r28
     36c:	c0 96       	adiw	r24, 0x30	; 48
     36e:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     372:	d8 2e       	mov	r13, r24
     374:	ce 01       	movw	r24, r28
     376:	c1 96       	adiw	r24, 0x31	; 49
     378:	0e 94 06 0b 	call	0x160c	; 0x160c <eeprom_read_byte>
     37c:	2d 2d       	mov	r18, r13
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	32 2f       	mov	r19, r18
     382:	22 27       	eor	r18, r18
     384:	28 2b       	or	r18, r24
     386:	f7 01       	movw	r30, r14
     388:	21 93       	st	Z+, r18
     38a:	31 93       	st	Z+, r19
     38c:	7f 01       	movw	r14, r30
     38e:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     390:	cc 33       	cpi	r28, 0x3C	; 60
     392:	d1 05       	cpc	r29, r1
     394:	c9 f6       	brne	.-78     	; 0x348 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     396:	78 94       	sei
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	08 95       	ret

000003a8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 93       	push	r24
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	a8 95       	wdr
     3ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3be:	88 61       	ori	r24, 0x18	; 24
     3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3c8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	41 f0       	breq	.+16     	; 0x3ea <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3da:	ef ec       	ldi	r30, 0xCF	; 207
     3dc:	f7 e0       	ldi	r31, 0x07	; 7
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <delay+0x8>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <delay+0xe>
     3e4:	00 00       	nop
        _delay_ms(1);
        ms--;
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f6 cf       	rjmp	.-20     	; 0x3d6 <delay>
    }
}
     3ea:	08 95       	ret

000003ec <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3ec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3f0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3f4:	08 95       	ret

000003f6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3fc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <delay>

00000408 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     408:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     40c:	81 11       	cpse	r24, r1
     40e:	1e c0       	rjmp	.+60     	; 0x44c <get_ambientlight+0x44>
        cli();
     410:	f8 94       	cli
        adc_setup_conversion(7);
     412:	87 e0       	ldi	r24, 0x07	; 7
     414:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     418:	83 e8       	ldi	r24, 0x83	; 131
     41a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     41e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     422:	80 64       	ori	r24, 0x40	; 64
     424:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     428:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42c:	86 fd       	sbrc	r24, 6
     42e:	fc cf       	rjmp	.-8      	; 0x428 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     430:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     434:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     438:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     43c:	23 ea       	ldi	r18, 0xA3	; 163
     43e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     448:	78 94       	sei
     44a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     450:	08 95       	ret

00000452 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     452:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     456:	81 11       	cpse	r24, r1
     458:	1e c0       	rjmp	.+60     	; 0x496 <get_temperature+0x44>
        cli();
     45a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     45c:	88 ec       	ldi	r24, 0xC8	; 200
     45e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     462:	87 e8       	ldi	r24, 0x87	; 135
     464:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     468:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     472:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     476:	86 fd       	sbrc	r24, 6
     478:	fc cf       	rjmp	.-8      	; 0x472 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     47a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     47e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     482:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     486:	23 ea       	ldi	r18, 0xA3	; 163
     488:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     492:	78 94       	sei
     494:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     49a:	08 95       	ret

0000049c <rand_hard>:

uint8_t rand_hard() {
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4a4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4a6:	e3 ea       	ldi	r30, 0xA3	; 163
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4aa:	c6 e0       	ldi	r28, 0x06	; 6
     4ac:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4ae:	a1 e0       	ldi	r26, 0x01	; 1
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4b2:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4b4:	f8 94       	cli
            adc_setup_conversion(6);
     4b6:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ba:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4be:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4c2:	40 64       	ori	r20, 0x40	; 64
     4c4:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4c8:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4cc:	46 fd       	sbrc	r20, 6
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <rand_hard+0x2c>
            a = ADCW&0x1;
     4d0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4d4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4d8:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     4da:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4de:	50 64       	ori	r21, 0x40	; 64
     4e0:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4e4:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e8:	56 fd       	sbrc	r21, 6
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <rand_hard+0x48>
            b = ADCW&0x1;
     4ec:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4f0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     4f4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4f8:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fc:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     500:	78 94       	sei
            tries++;
     502:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     504:	61 70       	andi	r22, 0x01	; 1
     506:	46 17       	cp	r20, r22
     508:	51 f0       	breq	.+20     	; 0x51e <rand_hard+0x82>
        if (a)
     50a:	44 23       	and	r20, r20
     50c:	59 f0       	breq	.+22     	; 0x524 <rand_hard+0x88>
            num |= (1<<i);
     50e:	ad 01       	movw	r20, r26
     510:	02 2e       	mov	r0, r18
     512:	01 c0       	rjmp	.+2      	; 0x516 <rand_hard+0x7a>
     514:	44 0f       	add	r20, r20
     516:	0a 94       	dec	r0
     518:	ea f7       	brpl	.-6      	; 0x514 <rand_hard+0x78>
     51a:	84 2b       	or	r24, r20
     51c:	03 c0       	rjmp	.+6      	; 0x524 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     51e:	90 38       	cpi	r25, 0x80	; 128
     520:	49 f6       	brne	.-110    	; 0x4b4 <rand_hard+0x18>
     522:	f3 cf       	rjmp	.-26     	; 0x50a <rand_hard+0x6e>
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     528:	28 30       	cpi	r18, 0x08	; 8
     52a:	31 05       	cpc	r19, r1
     52c:	09 f0       	breq	.+2      	; 0x530 <rand_hard+0x94>
     52e:	c1 cf       	rjmp	.-126    	; 0x4b2 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     536:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     53a:	98 e0       	ldi	r25, 0x08	; 8
     53c:	89 9f       	mul	r24, r25
     53e:	90 01       	movw	r18, r0
     540:	11 24       	eor	r1, r1
     542:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     544:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	89 0f       	add	r24, r25
     54c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     550:	82 2f       	mov	r24, r18
     552:	82 95       	swap	r24
     554:	86 95       	lsr	r24
     556:	87 70       	andi	r24, 0x07	; 7
     558:	28 27       	eor	r18, r24
     55a:	96 95       	lsr	r25
     55c:	96 95       	lsr	r25
     55e:	82 2f       	mov	r24, r18
     560:	89 27       	eor	r24, r25
     562:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     566:	08 95       	ret

00000568 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     568:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     56c:	08 95       	ret

0000056e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     56e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     572:	81 11       	cpse	r24, r1
     574:	16 c0       	rjmp	.+44     	; 0x5a2 <get_voltage+0x34>
        cli();                                    // disable interrupts
     576:	f8 94       	cli
        adc_setup_conversion(6);
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     57e:	83 e8       	ldi	r24, 0x83	; 131
     580:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     584:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     588:	80 64       	ori	r24, 0x40	; 64
     58a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     58e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     592:	86 fd       	sbrc	r24, 6
     594:	fc cf       	rjmp	.-8      	; 0x58e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     596:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     59a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     59e:	78 94       	sei
     5a0:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5a6:	08 95       	ret

000005a8 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5a8:	2f 92       	push	r2
     5aa:	3f 92       	push	r3
     5ac:	4f 92       	push	r4
     5ae:	5f 92       	push	r5
     5b0:	6f 92       	push	r6
     5b2:	7f 92       	push	r7
     5b4:	8f 92       	push	r8
     5b6:	9f 92       	push	r9
     5b8:	af 92       	push	r10
     5ba:	bf 92       	push	r11
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5ce:	fc 01       	movw	r30, r24
     5d0:	c2 81       	ldd	r28, Z+2	; 0x02
     5d2:	d3 81       	ldd	r29, Z+3	; 0x03
     5d4:	c4 38       	cpi	r28, 0x84	; 132
     5d6:	f3 e0       	ldi	r31, 0x03	; 3
     5d8:	df 07       	cpc	r29, r31
     5da:	0c f0       	brlt	.+2      	; 0x5de <estimate_distance+0x36>
     5dc:	7e c0       	rjmp	.+252    	; 0x6da <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     5de:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     5e2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     5e6:	8c 17       	cp	r24, r28
     5e8:	9d 07       	cpc	r25, r29
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <estimate_distance+0x46>
     5ec:	6f c0       	rjmp	.+222    	; 0x6cc <estimate_distance+0x124>
     5ee:	e5 e2       	ldi	r30, 0x25	; 37
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     5f4:	81 91       	ld	r24, Z+
     5f6:	91 91       	ld	r25, Z+
     5f8:	8c 17       	cp	r24, r28
     5fa:	9d 07       	cpc	r25, r29
     5fc:	20 f0       	brcs	.+8      	; 0x606 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     5fe:	1f 5f       	subi	r17, 0xFF	; 255
     600:	1e 30       	cpi	r17, 0x0E	; 14
     602:	c1 f7       	brne	.-16     	; 0x5f4 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     604:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     606:	81 2f       	mov	r24, r17
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	ed 5d       	subi	r30, 0xDD	; 221
     612:	fe 4f       	sbci	r31, 0xFE	; 254
     614:	e0 80       	ld	r14, Z
     616:	f1 80       	ldd	r15, Z+1	; 0x01
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	fc 01       	movw	r30, r24
     61e:	ef 5d       	subi	r30, 0xDF	; 223
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
     626:	b7 01       	movw	r22, r14
     628:	68 1b       	sub	r22, r24
     62a:	79 0b       	sbc	r23, r25
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     63c:	4b 01       	movw	r8, r22
     63e:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     640:	be 01       	movw	r22, r28
     642:	0d 2e       	mov	r0, r29
     644:	00 0c       	add	r0, r0
     646:	88 0b       	sbc	r24, r24
     648:	99 0b       	sbc	r25, r25
     64a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__floatsisf>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
     652:	b7 01       	movw	r22, r14
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     65c:	6b 01       	movw	r12, r22
     65e:	7c 01       	movw	r14, r24
     660:	61 2f       	mov	r22, r17
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     682:	a5 01       	movw	r20, r10
     684:	94 01       	movw	r18, r8
     686:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c7 01       	movw	r24, r14
     690:	b6 01       	movw	r22, r12
     692:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
     696:	9b 01       	movw	r18, r22
     698:	ac 01       	movw	r20, r24
     69a:	c3 01       	movw	r24, r6
     69c:	b2 01       	movw	r22, r4
     69e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	51 e4       	ldi	r21, 0x41	; 65
     6aa:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     6ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fixsfsi>
     6b2:	7b 01       	movw	r14, r22
     6b4:	c5 01       	movw	r24, r10
     6b6:	b4 01       	movw	r22, r8
     6b8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fixsfsi>
     6bc:	ab 01       	movw	r20, r22
     6be:	bc 01       	movw	r22, r24
     6c0:	c7 01       	movw	r24, r14
     6c2:	ba 01       	movw	r22, r20
     6c4:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     6c8:	16 2f       	mov	r17, r22
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6cc:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6ce:	cd 3b       	cpi	r28, 0xBD	; 189
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	d8 07       	cpc	r29, r24
     6d4:	0c f4       	brge	.+2      	; 0x6d8 <estimate_distance+0x130>
     6d6:	ca c0       	rjmp	.+404    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     6da:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     6dc:	f1 01       	movw	r30, r2
     6de:	c0 80       	ld	r12, Z
     6e0:	d1 80       	ldd	r13, Z+1	; 0x01
     6e2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     6e6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     6ea:	8c 15       	cp	r24, r12
     6ec:	9d 05       	cpc	r25, r13
     6ee:	88 f0       	brcs	.+34     	; 0x712 <estimate_distance+0x16a>
     6f0:	ec e4       	ldi	r30, 0x4C	; 76
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     6fa:	e1 90       	ld	r14, Z+
     6fc:	f1 90       	ld	r15, Z+
     6fe:	ec 14       	cp	r14, r12
     700:	fd 04       	cpc	r15, r13
     702:	08 f4       	brcc	.+2      	; 0x706 <estimate_distance+0x15e>
     704:	58 c0       	rjmp	.+176    	; 0x7b6 <estimate_distance+0x20e>
     706:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     708:	8e 30       	cpi	r24, 0x0E	; 14
     70a:	91 05       	cpc	r25, r1
     70c:	a9 f7       	brne	.-22     	; 0x6f8 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     70e:	0a e5       	ldi	r16, 0x5A	; 90
     710:	01 c0       	rjmp	.+2      	; 0x714 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     712:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     714:	1f 3f       	cpi	r17, 0xFF	; 255
     716:	09 f4       	brne	.+2      	; 0x71a <estimate_distance+0x172>
     718:	4b c0       	rjmp	.+150    	; 0x7b0 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     71a:	be 01       	movw	r22, r28
     71c:	dd 0f       	add	r29, r29
     71e:	88 0b       	sbc	r24, r24
     720:	99 0b       	sbc	r25, r25
     722:	0e 94 0d 0a 	call	0x141a	; 0x141a <__floatsisf>
     726:	6b 01       	movw	r12, r22
     728:	7c 01       	movw	r14, r24
     72a:	61 2f       	mov	r22, r17
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     736:	4b 01       	movw	r8, r22
     738:	5c 01       	movw	r10, r24
     73a:	a7 01       	movw	r20, r14
     73c:	96 01       	movw	r18, r12
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	81 e6       	ldi	r24, 0x61	; 97
     744:	94 e4       	ldi	r25, 0x44	; 68
     746:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	c5 01       	movw	r24, r10
     750:	b4 01       	movw	r22, r8
     752:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	60 2f       	mov	r22, r16
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     766:	2b 01       	movw	r4, r22
     768:	3c 01       	movw	r6, r24
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	4f e2       	ldi	r20, 0x2F	; 47
     770:	54 e4       	ldi	r21, 0x44	; 68
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	c3 01       	movw	r24, r6
     780:	b2 01       	movw	r22, r4
     782:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	48 e4       	ldi	r20, 0x48	; 72
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divsf3>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	44 e0       	ldi	r20, 0x04	; 4
     7a4:	52 e4       	ldi	r21, 0x42	; 66
     7a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     7aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixunssfsi>
     7ae:	60 c0       	rjmp	.+192    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
        } else {
            return 33 + dist_low;
     7b0:	61 e2       	ldi	r22, 0x21	; 33
     7b2:	60 0f       	add	r22, r16
     7b4:	5d c0       	rjmp	.+186    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	fc 01       	movw	r30, r24
     7bc:	e8 5b       	subi	r30, 0xB8	; 184
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	b7 01       	movw	r22, r14
     7c6:	68 1b       	sub	r22, r24
     7c8:	79 0b       	sbc	r23, r25
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     7da:	4b 01       	movw	r8, r22
     7dc:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     7de:	b6 01       	movw	r22, r12
     7e0:	dd 0c       	add	r13, r13
     7e2:	88 0b       	sbc	r24, r24
     7e4:	99 0b       	sbc	r25, r25
     7e6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__floatsisf>
     7ea:	2b 01       	movw	r4, r22
     7ec:	3c 01       	movw	r6, r24
     7ee:	b7 01       	movw	r22, r14
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     7f8:	6b 01       	movw	r12, r22
     7fa:	7c 01       	movw	r14, r24
     7fc:	63 2d       	mov	r22, r3
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__floatunsisf>
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	a9 01       	movw	r20, r18
     81a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__addsf3>
     81e:	a5 01       	movw	r20, r10
     820:	94 01       	movw	r18, r8
     822:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c7 01       	movw	r24, r14
     82c:	b6 01       	movw	r22, r12
     82e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
     832:	9b 01       	movw	r18, r22
     834:	ac 01       	movw	r20, r24
     836:	c3 01       	movw	r24, r6
     838:	b2 01       	movw	r22, r4
     83a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e2       	ldi	r20, 0x20	; 32
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	0e 94 99 0a 	call	0x1532	; 0x1532 <__mulsf3>
     84a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fixsfsi>
     84e:	7b 01       	movw	r14, r22
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fixsfsi>
     858:	ab 01       	movw	r20, r22
     85a:	bc 01       	movw	r22, r24
     85c:	c7 01       	movw	r24, r14
     85e:	ba 01       	movw	r22, r20
     860:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodhi4>
     864:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     866:	6f 3f       	cpi	r22, 0xFF	; 255
     868:	09 f0       	breq	.+2      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     86a:	54 cf       	rjmp	.-344    	; 0x714 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     86c:	61 e2       	ldi	r22, 0x21	; 33
     86e:	61 0f       	add	r22, r17
    }
}
     870:	86 2f       	mov	r24, r22
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	7f 90       	pop	r7
     88c:	6f 90       	pop	r6
     88e:	5f 90       	pop	r5
     890:	4f 90       	pop	r4
     892:	3f 90       	pop	r3
     894:	2f 90       	pop	r2
     896:	08 95       	ret

00000898 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
    tx_clock += tx_increment;
     8ba:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     8be:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     8c2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     8c6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     8ca:	82 0f       	add	r24, r18
     8cc:	93 1f       	adc	r25, r19
     8ce:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     8d2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     8de:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8e6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     8ea:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     8ee:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     8f2:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	a1 1d       	adc	r26, r1
     8fa:	b1 1d       	adc	r27, r1
     8fc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     900:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     904:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     908:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     90c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     910:	81 11       	cpse	r24, r1
     912:	2d c0       	rjmp	.+90     	; 0x96e <__stack+0x6f>
     914:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     918:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     91c:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     920:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     924:	82 17       	cp	r24, r18
     926:	93 07       	cpc	r25, r19
     928:	10 f5       	brcc	.+68     	; 0x96e <__stack+0x6f>
     92a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     92e:	84 30       	cpi	r24, 0x04	; 4
     930:	f1 f4       	brne	.+60     	; 0x96e <__stack+0x6f>
        message_t *msg = kilo_message_tx();
     932:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     936:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     93a:	09 95       	icall
        if (msg) {
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	b9 f0       	breq	.+46     	; 0x96e <__stack+0x6f>
            if (message_send(msg)) {
     940:	0e 94 1f 08 	call	0x103e	; 0x103e <message_send>
     944:	88 23       	and	r24, r24
     946:	51 f0       	breq	.+20     	; 0x95c <__stack+0x5d>
                kilo_message_tx_success();
     948:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     94c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     950:	09 95       	icall
                tx_clock = 0;
     952:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     956:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
            } else {
                tx_increment = rand()&0xFF;
     95c:	0e 94 84 00 	call	0x108	; 0x108 <setup+0x12>
     960:	9c 01       	movw	r18, r24
     962:	33 27       	eor	r19, r19
     964:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     968:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     96c:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     990:	80 ff       	sbrs	r24, 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <set_color+0x8>
        DDRD |= (1<<5);
     994:	55 9a       	sbi	0x0a, 5	; 10
     996:	01 c0       	rjmp	.+2      	; 0x99a <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     998:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     99a:	81 ff       	sbrs	r24, 1
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <set_color+0x12>
        DDRD |= (1<<4);
     99e:	54 9a       	sbi	0x0a, 4	; 10
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9a4:	82 ff       	sbrs	r24, 2
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <set_color+0x1c>
        DDRC |= (1<<3);
     9a8:	3b 9a       	sbi	0x07, 3	; 7
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9ac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9ae:	83 ff       	sbrs	r24, 3
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <set_color+0x26>
        DDRC |= (1<<2);
     9b2:	3a 9a       	sbi	0x07, 2	; 7
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9b8:	84 ff       	sbrs	r24, 4
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <set_color+0x30>
        DDRC |= (1<<5);
     9bc:	3d 9a       	sbi	0x07, 5	; 7
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <set_color+0x3a>
        DDRC |= (1<<4);
     9c6:	3c 9a       	sbi	0x07, 4	; 7
     9c8:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9ca:	3c 98       	cbi	0x07, 4	; 7
     9cc:	08 95       	ret

000009ce <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9ce:	8c 01       	movw	r16, r24
     9d0:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9d4:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9da:	98 e1       	ldi	r25, 0x18	; 24
     9dc:	c9 2e       	mov	r12, r25
     9de:	29 e2       	ldi	r18, 0x29	; 41
     9e0:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9e2:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e7 30       	cpi	r30, 0x07	; 7
     9ea:	f1 05       	cpc	r31, r1
     9ec:	d0 f7       	brcc	.-12     	; 0x9e2 <kilo_start+0x14>
     9ee:	ec 5c       	subi	r30, 0xCC	; 204
     9f0:	ff 4f       	sbci	r31, 0xFF	; 255
     9f2:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__tablejump2__>
            case SLEEPING:
                cli();
     9f6:	f8 94       	cli
                acomp_off();
     9f8:	80 b7       	in	r24, 0x30	; 48
     9fa:	87 7f       	andi	r24, 0xF7	; 247
     9fc:	80 bf       	out	0x30, r24	; 48
                adc_off();
     9fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a02:	8f 77       	andi	r24, 0x7F	; 127
     a04:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a08:	14 b8       	out	0x04, r1	; 4
     a0a:	17 b8       	out	0x07, r1	; 7
     a0c:	1a b8       	out	0x0a, r1	; 10
     a0e:	15 b8       	out	0x05, r1	; 5
     a10:	18 b8       	out	0x08, r1	; 8
     a12:	1b b8       	out	0x0b, r1	; 11
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	a8 95       	wdr
     a1a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a24:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a28:	80 64       	ori	r24, 0x40	; 64
     a2a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a2e:	83 b7       	in	r24, 0x33	; 51
     a30:	81 7f       	andi	r24, 0xF1	; 241
     a32:	84 60       	ori	r24, 0x04	; 4
     a34:	83 bf       	out	0x33, r24	; 51
                cli();
     a36:	f8 94       	cli
                sleep_enable();
     a38:	83 b7       	in	r24, 0x33	; 51
     a3a:	81 60       	ori	r24, 0x01	; 1
     a3c:	83 bf       	out	0x33, r24	; 51
                sei();
     a3e:	78 94       	sei
                sleep_cpu();
     a40:	88 95       	sleep
                sleep_disable();
     a42:	83 b7       	in	r24, 0x33	; 51
     a44:	8e 7f       	andi	r24, 0xFE	; 254
     a46:	83 bf       	out	0x33, r24	; 51
                sei();
     a48:	78 94       	sei
                rx_busy = 0;
     a4a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     a4e:	52 9a       	sbi	0x0a, 2	; 10
     a50:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a52:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a56:	80 68       	ori	r24, 0x80	; 128
     a58:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5c:	87 e5       	ldi	r24, 0x57	; 87
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <kilo_start+0x92>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <kilo_start+0x98>
     a66:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a68:	80 b7       	in	r24, 0x30	; 48
     a6a:	88 61       	ori	r24, 0x18	; 24
     a6c:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a6e:	8f e3       	ldi	r24, 0x3F	; 63
     a70:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a74:	ef e1       	ldi	r30, 0x1F	; 31
     a76:	fe e4       	ldi	r31, 0x4E	; 78
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <kilo_start+0xaa>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <kilo_start+0xb0>
     a7e:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a80:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     a84:	88 23       	and	r24, r24
     a86:	09 f4       	brne	.+2      	; 0xa8a <kilo_start+0xbc>
     a88:	50 c0       	rjmp	.+160    	; 0xb2a <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     a90:	ff ef       	ldi	r31, 0xFF	; 255
     a92:	20 e7       	ldi	r18, 0x70	; 112
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	f1 50       	subi	r31, 0x01	; 1
     a98:	20 40       	sbci	r18, 0x00	; 0
     a9a:	80 40       	sbci	r24, 0x00	; 0
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <kilo_start+0xc8>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <kilo_start+0xd2>
     aa0:	00 00       	nop
     aa2:	43 c0       	rjmp	.+134    	; 0xb2a <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     aa4:	8c e0       	ldi	r24, 0x0C	; 12
     aa6:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     aaa:	ef ec       	ldi	r30, 0xCF	; 207
     aac:	f7 e0       	ldi	r31, 0x07	; 7
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <kilo_start+0xe0>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <kilo_start+0xe6>
     ab4:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     abc:	ff ef       	ldi	r31, 0xFF	; 255
     abe:	21 ee       	ldi	r18, 0xE1	; 225
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	f1 50       	subi	r31, 0x01	; 1
     ac4:	20 40       	sbci	r18, 0x00	; 0
     ac6:	80 40       	sbci	r24, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <kilo_start+0xf4>
     aca:	2c c0       	rjmp	.+88     	; 0xb24 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     acc:	0e 94 b7 02 	call	0x56e	; 0x56e <get_voltage>
                if(voltage > 682)
     ad0:	8b 3a       	cpi	r24, 0xAB	; 171
     ad2:	e2 e0       	ldi	r30, 0x02	; 2
     ad4:	9e 07       	cpc	r25, r30
     ad6:	24 f0       	brlt	.+8      	; 0xae0 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     ade:	81 cf       	rjmp	.-254    	; 0x9e2 <kilo_start+0x14>
                else if(voltage > 648)
     ae0:	89 38       	cpi	r24, 0x89	; 137
     ae2:	f2 e0       	ldi	r31, 0x02	; 2
     ae4:	9f 07       	cpc	r25, r31
     ae6:	14 f0       	brlt	.+4      	; 0xaec <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     ae8:	80 e3       	ldi	r24, 0x30	; 48
     aea:	f7 cf       	rjmp	.-18     	; 0xada <kilo_start+0x10c>
                else if(voltage > 614)
     aec:	87 36       	cpi	r24, 0x67	; 103
     aee:	92 40       	sbci	r25, 0x02	; 2
     af0:	14 f0       	brlt	.+4      	; 0xaf6 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     af2:	8f e0       	ldi	r24, 0x0F	; 15
     af4:	f2 cf       	rjmp	.-28     	; 0xada <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	f0 cf       	rjmp	.-32     	; 0xada <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     afa:	48 99       	sbic	0x09, 0	; 9
     afc:	16 c0       	rjmp	.+44     	; 0xb2a <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     b04:	8f ec       	ldi	r24, 0xCF	; 207
     b06:	97 e0       	ldi	r25, 0x07	; 7
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <kilo_start+0x13a>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <kilo_start+0x140>
     b0e:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	e1 ee       	ldi	r30, 0xE1	; 225
     b1a:	f4 e0       	ldi	r31, 0x04	; 4
     b1c:	91 50       	subi	r25, 0x01	; 1
     b1e:	e0 40       	sbci	r30, 0x00	; 0
     b20:	f0 40       	sbci	r31, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <kilo_start+0x14e>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <kilo_start+0x158>
     b26:	00 00       	nop
     b28:	5c cf       	rjmp	.-328    	; 0x9e2 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	d6 cf       	rjmp	.-84     	; 0xada <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b2e:	d1 11       	cpse	r29, r1
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <kilo_start+0x168>
                    setup();
     b32:	f8 01       	movw	r30, r16
     b34:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b36:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b3a:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b3c:	f7 01       	movw	r30, r14
     b3e:	09 95       	icall
                break;
     b40:	50 cf       	rjmp	.-352    	; 0x9e2 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b42:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b46:	81 11       	cpse	r24, r1
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b4a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b4e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b52:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b56:	45 cf       	rjmp	.-374    	; 0x9e2 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b58:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b5c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b60:	98 17       	cp	r25, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <kilo_start+0x198>
     b64:	3e cf       	rjmp	.-388    	; 0x9e2 <kilo_start+0x14>
                        prev_motion = cur_motion;
     b66:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b6a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b6e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	89 f4       	brne	.+34     	; 0xb98 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b76:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b7e:	8f e2       	ldi	r24, 0x2F	; 47
     b80:	95 e7       	ldi	r25, 0x75	; 117
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <kilo_start+0x1b4>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <kilo_start+0x1ba>
     b88:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b8a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b8e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b92:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b96:	25 cf       	rjmp	.-438    	; 0x9e2 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b98:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b9c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ba0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	59 f4       	brne	.+22     	; 0xbbe <kilo_start+0x1f0>
     ba8:	ef e2       	ldi	r30, 0x2F	; 47
     baa:	f5 e7       	ldi	r31, 0x75	; 117
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <kilo_start+0x1de>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <kilo_start+0x1e4>
     bb2:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bb4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <kilo_start+0x210>
     bbe:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bc2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bc6:	8f e2       	ldi	r24, 0x2F	; 47
     bc8:	95 e7       	ldi	r25, 0x75	; 117
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <kilo_start+0x1fc>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <kilo_start+0x202>
     bd0:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bd2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     bd6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bda:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bde:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     be2:	ff ce       	rjmp	.-514    	; 0x9e2 <kilo_start+0x14>

00000be4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
    rx_timer_off();
     bf2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bf6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bfa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     c04:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     c08:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     c0c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c10:	93 ea       	ldi	r25, 0xA3	; 163
     c12:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c16:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c4e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c52:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c5c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     c60:	88 23       	and	r24, r24
     c62:	21 f1       	breq	.+72     	; 0xcac <__vector_23+0x84>
        rx_timer_on();
     c64:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c68:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c6c:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c70:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     c74:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     c78:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_23+0x5a>
     c80:	af c1       	rjmp	.+862    	; 0xfe0 <__vector_23+0x3b8>
            adc_finish_conversion();
     c82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c86:	86 fd       	sbrc	r24, 6
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c92:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     c96:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ca0:	93 ea       	ldi	r25, 0xA3	; 163
     ca2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ca6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     caa:	9a c1       	rjmp	.+820    	; 0xfe0 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cac:	c9 01       	movw	r24, r18
     cae:	87 58       	subi	r24, 0x87	; 135
     cb0:	91 09       	sbc	r25, r1
     cb2:	84 37       	cpi	r24, 0x74	; 116
     cb4:	99 40       	sbci	r25, 0x09	; 9
     cb6:	a0 f0       	brcs	.+40     	; 0xce0 <__vector_23+0xb8>
            rx_timer_off();
     cb8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cbc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cc0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cc4:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     cc8:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     ccc:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     cd0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cd4:	83 ea       	ldi	r24, 0xA3	; 163
     cd6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cda:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cde:	80 c1       	rjmp	.+768    	; 0xfe0 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     ce0:	26 58       	subi	r18, 0x86	; 134
     ce2:	31 09       	sbc	r19, r1
     ce4:	a4 ef       	ldi	r26, 0xF4	; 244
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__umulhisi3>
     cec:	8c 01       	movw	r16, r24
     cee:	22 27       	eor	r18, r18
     cf0:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     cf2:	08 30       	cpi	r16, 0x08	; 8
     cf4:	60 f4       	brcc	.+24     	; 0xd0e <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <__vector_23+0xd6>
     cfc:	88 0f       	add	r24, r24
     cfe:	0a 95       	dec	r16
     d00:	ea f7       	brpl	.-6      	; 0xcfc <__vector_23+0xd4>
     d02:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d06:	89 2b       	or	r24, r25
     d08:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     d0c:	69 c1       	rjmp	.+722    	; 0xfe0 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d0e:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     d12:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     d16:	88 23       	and	r24, r24
     d18:	41 f1       	breq	.+80     	; 0xd6a <__vector_23+0x142>
                    adc_finish_conversion();
     d1a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d1e:	86 fd       	sbrc	r24, 6
     d20:	fc cf       	rjmp	.-8      	; 0xd1a <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d22:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d26:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d2a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     d2e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     d32:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d36:	83 ea       	ldi	r24, 0xA3	; 163
     d38:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d42:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d46:	99 23       	and	r25, r25
     d48:	59 f0       	breq	.+22     	; 0xd60 <__vector_23+0x138>
                        rx_timer_off();
     d4a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d4e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d52:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d56:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     d5a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     d5e:	40 c1       	rjmp	.+640    	; 0xfe0 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d60:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     d64:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     d68:	3b c1       	rjmp	.+630    	; 0xfe0 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d6a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     d6e:	e8 2f       	mov	r30, r24
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	e4 59       	subi	r30, 0x94	; 148
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d7a:	90 83       	st	Z, r25
                    rx_byteindex++;
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d82:	8c 30       	cpi	r24, 0x0C	; 12
     d84:	09 f0       	breq	.+2      	; 0xd88 <__vector_23+0x160>
     d86:	2c c1       	rjmp	.+600    	; 0xfe0 <__vector_23+0x3b8>
                        rx_timer_off();
     d88:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d8c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d90:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d94:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     d98:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d9c:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     da0:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     da4:	8c e6       	ldi	r24, 0x6C	; 108
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	0e 94 03 08 	call	0x1006	; 0x1006 <message_crc>
     dac:	08 17       	cp	r16, r24
     dae:	19 07       	cpc	r17, r25
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__vector_23+0x18c>
     db2:	16 c1       	rjmp	.+556    	; 0xfe0 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     db4:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     db8:	e7 fd       	sbrc	r30, 7
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     dbc:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     dc0:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     dc4:	61 e4       	ldi	r22, 0x41	; 65
     dc6:	71 e0       	ldi	r23, 0x01	; 1
     dc8:	8c e6       	ldi	r24, 0x6C	; 108
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	09 95       	icall
     dce:	08 c1       	rjmp	.+528    	; 0xfe0 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     dd0:	88 e7       	ldi	r24, 0x78	; 120
     dd2:	8e 0f       	add	r24, r30
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	30 f0       	brcs	.+12     	; 0xde4 <__vector_23+0x1bc>
        motors_off();
     dd8:	53 98       	cbi	0x0a, 3	; 10
     dda:	23 98       	cbi	0x04, 3	; 4
     ddc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     de0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     de4:	8e 2f       	mov	r24, r30
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	fc 01       	movw	r30, r24
     dea:	e0 58       	subi	r30, 0x80	; 128
     dec:	f1 09       	sbc	r31, r1
     dee:	eb 30       	cpi	r30, 0x0B	; 11
     df0:	f1 05       	cpc	r31, r1
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <__vector_23+0x1ce>
     df4:	f5 c0       	rjmp	.+490    	; 0xfe0 <__vector_23+0x3b8>
     df6:	e5 5c       	subi	r30, 0xC5	; 197
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__tablejump2__>
        case BOOT:
            tx_timer_off();
     dfe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e02:	8d 7f       	andi	r24, 0xFD	; 253
     e04:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e08:	16 bc       	out	0x26, r1	; 38
            bootload();
     e0a:	e0 e0       	ldi	r30, 0x00	; 0
     e0c:	f0 e7       	ldi	r31, 0x70	; 112
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e10:	e0 e0       	ldi	r30, 0x00	; 0
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e16:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e1a:	e2 c0       	rjmp	.+452    	; 0xfe0 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	b2 c0       	rjmp	.+356    	; 0xf84 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e20:	85 e0       	ldi	r24, 0x05	; 5
     e22:	b0 c0       	rjmp	.+352    	; 0xf84 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	ae c0       	rjmp	.+348    	; 0xf84 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e28:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	09 f4       	brne	.+2      	; 0xe32 <__vector_23+0x20a>
     e30:	d7 c0       	rjmp	.+430    	; 0xfe0 <__vector_23+0x3b8>
     e32:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	09 f4       	brne	.+2      	; 0xe3c <__vector_23+0x214>
     e3a:	d2 c0       	rjmp	.+420    	; 0xfe0 <__vector_23+0x3b8>
                motors_on();
     e3c:	53 9a       	sbi	0x0a, 3	; 10
     e3e:	23 9a       	sbi	0x04, 3	; 4
     e40:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e44:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	9c c0       	rjmp	.+312    	; 0xf84 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e4c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	09 f4       	brne	.+2      	; 0xe56 <__vector_23+0x22e>
     e54:	4b c0       	rjmp	.+150    	; 0xeec <__vector_23+0x2c4>
     e56:	80 f4       	brcc	.+32     	; 0xe78 <__vector_23+0x250>
     e58:	88 23       	and	r24, r24
     e5a:	a9 f0       	breq	.+42     	; 0xe86 <__vector_23+0x25e>
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	09 f0       	breq	.+2      	; 0xe62 <__vector_23+0x23a>
     e60:	82 c0       	rjmp	.+260    	; 0xf66 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e62:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     e66:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     e6a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     e6e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     e72:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     e76:	77 c0       	rjmp	.+238    	; 0xf66 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_23+0x256>
     e7c:	49 c0       	rjmp	.+146    	; 0xf10 <__vector_23+0x2e8>
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	09 f4       	brne	.+2      	; 0xe84 <__vector_23+0x25c>
     e82:	58 c0       	rjmp	.+176    	; 0xf34 <__vector_23+0x30c>
     e84:	70 c0       	rjmp	.+224    	; 0xf66 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e86:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e8a:	86 30       	cpi	r24, 0x06	; 6
     e8c:	09 f0       	breq	.+2      	; 0xe90 <__vector_23+0x268>
     e8e:	6b c0       	rjmp	.+214    	; 0xf66 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e90:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     e94:	80 eb       	ldi	r24, 0xB0	; 176
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e9c:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     ea0:	81 eb       	ldi	r24, 0xB1	; 177
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ea8:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     eb4:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     eb8:	89 e0       	ldi	r24, 0x09	; 9
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ec0:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     ec4:	8c e0       	ldi	r24, 0x0C	; 12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ecc:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     ed0:	84 e1       	ldi	r24, 0x14	; 20
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 0e 0b 	call	0x161c	; 0x161c <eeprom_write_byte>
                        motors_off();
     ed8:	53 98       	cbi	0x0a, 3	; 10
     eda:	23 98       	cbi	0x04, 3	; 4
     edc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ee0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     eea:	3d c0       	rjmp	.+122    	; 0xf66 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     eec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     ef0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
     ef4:	91 30       	cpi	r25, 0x01	; 1
     ef6:	21 f4       	brne	.+8      	; 0xf00 <__vector_23+0x2d8>
     ef8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
     efc:	89 17       	cp	r24, r25
     efe:	99 f1       	breq	.+102    	; 0xf66 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f00:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f0a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
     f0e:	2b c0       	rjmp	.+86     	; 0xf66 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f10:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f14:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
     f18:	92 30       	cpi	r25, 0x02	; 2
     f1a:	21 f4       	brne	.+8      	; 0xf24 <__vector_23+0x2fc>
     f1c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
     f20:	89 17       	cp	r24, r25
     f22:	09 f1       	breq	.+66     	; 0xf66 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f24:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f2e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
     f32:	19 c0       	rjmp	.+50     	; 0xf66 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f34:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f38:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
     f3c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
     f40:	23 30       	cpi	r18, 0x03	; 3
     f42:	41 f4       	brne	.+16     	; 0xf54 <__vector_23+0x32c>
     f44:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
     f48:	82 13       	cpse	r24, r18
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <__vector_23+0x32c>
     f4c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
     f50:	92 17       	cp	r25, r18
     f52:	49 f0       	breq	.+18     	; 0xf66 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f54:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f58:	23 e0       	ldi	r18, 0x03	; 3
     f5a:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f5e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f62:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f66:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f6a:	88 23       	and	r24, r24
     f6c:	c9 f1       	breq	.+114    	; 0xfe0 <__vector_23+0x3b8>
     f6e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f72:	86 30       	cpi	r24, 0x06	; 6
     f74:	a9 f1       	breq	.+106    	; 0xfe0 <__vector_23+0x3b8>
                motors_on();
     f76:	53 9a       	sbi	0x0a, 3	; 10
     f78:	23 9a       	sbi	0x04, 3	; 4
     f7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f7e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f88:	2b c0       	rjmp	.+86     	; 0xfe0 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f8a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f8e:	86 30       	cpi	r24, 0x06	; 6
     f90:	81 f0       	breq	.+32     	; 0xfb2 <__vector_23+0x38a>
                motors_on();
     f92:	53 9a       	sbi	0x0a, 3	; 10
     f94:	23 9a       	sbi	0x04, 3	; 4
     f96:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f9a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	0e 94 c8 04 	call	0x990	; 0x990 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fa4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     fa8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <__vector_23+0x398>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <__vector_23+0x394>
     fc4:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
     fc8:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
     fcc:	82 23       	and	r24, r18
     fce:	93 23       	and	r25, r19
     fd0:	89 2b       	or	r24, r25
     fd2:	21 f0       	breq	.+8      	; 0xfdc <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     fdc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1006:	fc 01       	movw	r30, r24
    1008:	9c 01       	movw	r18, r24
    100a:	26 5f       	subi	r18, 0xF6	; 246
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1012:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1014:	84 27       	eor	r24, r20
    1016:	08 2e       	mov	r0, r24
    1018:	82 95       	swap	r24
    101a:	80 7f       	andi	r24, 0xF0	; 240
    101c:	80 25       	eor	r24, r0
    101e:	09 2e       	mov	r0, r25
    1020:	98 2f       	mov	r25, r24
    1022:	82 95       	swap	r24
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	08 26       	eor	r0, r24
    1028:	86 95       	lsr	r24
    102a:	98 27       	eor	r25, r24
    102c:	89 27       	eor	r24, r25
    102e:	88 0f       	add	r24, r24
    1030:	88 0f       	add	r24, r24
    1032:	88 0f       	add	r24, r24
    1034:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1036:	e2 17       	cp	r30, r18
    1038:	f3 07       	cpc	r31, r19
    103a:	59 f7       	brne	.-42     	; 0x1012 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    103c:	08 95       	ret

0000103e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    103e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1040:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1042:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1044:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    1048:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    104a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    104c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    104e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1052:	20 30       	cpi	r18, 0x00	; 0
    1054:	29 f0       	breq	.+10     	; 0x1060 <message_send+0x22>
    1056:	00 00       	nop
    1058:	25 b1       	in	r18, 0x05	; 5
    105a:	23 2b       	or	r18, r19
    105c:	25 b9       	out	0x05, r18	; 5
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <message_send+0x2a>
    1060:	00 00       	nop
    1062:	00 00       	nop
    1064:	00 00       	nop
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <message_send+0x2a>
    1068:	00 00       	nop
    106a:	00 00       	nop
    106c:	00 00       	nop
    106e:	30 95       	com	r19
    1070:	25 b1       	in	r18, 0x05	; 5
    1072:	23 23       	and	r18, r19
    1074:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1076:	2e ea       	ldi	r18, 0xAE	; 174
    1078:	2a 95       	dec	r18
    107a:	f1 f7       	brne	.-4      	; 0x1078 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    107c:	2b ee       	ldi	r18, 0xEB	; 235

0000107e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    107e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1080:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1084:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1086:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    108a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    108c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    108e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1090:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1092:	0f be       	out	0x3f, r0	; 63
    return 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	08 95       	ret

00001098 <nocollision>:
nocollision:
    nop
    1098:	00 00       	nop
    dec tmpreg1
    109a:	2a 95       	dec	r18
    brne checkcollision
    109c:	81 f7       	brne	.-32     	; 0x107e <checkcollision>

    ldi tmpreg1, 0x01
    109e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10a0:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    10a4:	20 30       	cpi	r18, 0x00	; 0
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <nocollision+0x1a>
    10a8:	00 00       	nop
    10aa:	25 b1       	in	r18, 0x05	; 5
    10ac:	23 2b       	or	r18, r19
    10ae:	25 b9       	out	0x05, r18	; 5
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <nocollision+0x22>
    10b2:	00 00       	nop
    10b4:	00 00       	nop
    10b6:	00 00       	nop
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <nocollision+0x22>
    10ba:	00 00       	nop
    10bc:	00 00       	nop
    10be:	00 00       	nop
    10c0:	30 95       	com	r19
    10c2:	25 b1       	in	r18, 0x05	; 5
    10c4:	23 23       	and	r18, r19
    10c6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10c8:	00 00       	nop
    10ca:	24 e5       	ldi	r18, 0x54	; 84
    10cc:	2a 95       	dec	r18
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10d0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10d2:	8c e0       	ldi	r24, 0x0C	; 12

000010d4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10d4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    10d8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    10da:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    10dc:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    10de:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    10e0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    10e4:	50 e0       	ldi	r21, 0x00	; 0

000010e6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    10e6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    10e8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    10ea:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    10ec:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    10ee:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    10f2:	20 30       	cpi	r18, 0x00	; 0
    10f4:	29 f0       	breq	.+10     	; 0x1100 <sendbit+0x1a>
    10f6:	00 00       	nop
    10f8:	25 b1       	in	r18, 0x05	; 5
    10fa:	23 2b       	or	r18, r19
    10fc:	25 b9       	out	0x05, r18	; 5
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <sendbit+0x22>
    1100:	00 00       	nop
    1102:	00 00       	nop
    1104:	00 00       	nop
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <sendbit+0x22>
    1108:	00 00       	nop
    110a:	00 00       	nop
    110c:	00 00       	nop
    110e:	30 95       	com	r19
    1110:	25 b1       	in	r18, 0x05	; 5
    1112:	23 23       	and	r18, r19
    1114:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1116:	00 00       	nop
    1118:	21 e5       	ldi	r18, 0x51	; 81
    111a:	2a 95       	dec	r18
    111c:	f1 f7       	brne	.-4      	; 0x111a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    111e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1120:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1122:	9a 95       	dec	r25
    brne sendbit
    1124:	01 f7       	brne	.-64     	; 0x10e6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1126:	8a 95       	dec	r24
    brne sendbyte
    1128:	a9 f6       	brne	.-86     	; 0x10d4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    112a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    112c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    112e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1130:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1132:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    1136:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1138:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    113a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    113c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    113e:	0f be       	out	0x3f, r0	; 63
    return 1
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	08 95       	ret

00001144 <main>:
}

int main() {
  kilo_init();
    1144:	0e 94 ef 00 	call	0x1de	; 0x1de <kilo_init>
  kilo_message_tx = message_tx;
    1148:	81 e7       	ldi	r24, 0x71	; 113
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1150:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    1154:	84 e7       	ldi	r24, 0x74	; 116
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    115c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
  kilo_start(setup, loop);
    1160:	62 eb       	ldi	r22, 0xB2	; 178
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	8b e7       	ldi	r24, 0x7B	; 123
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 e7 04 	call	0x9ce	; 0x9ce <kilo_start>

  return 0;
}
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	08 95       	ret

00001172 <__divmodhi4>:
    1172:	97 fb       	bst	r25, 7
    1174:	07 2e       	mov	r0, r23
    1176:	16 f4       	brtc	.+4      	; 0x117c <__divmodhi4+0xa>
    1178:	00 94       	com	r0
    117a:	07 d0       	rcall	.+14     	; 0x118a <__divmodhi4_neg1>
    117c:	77 fd       	sbrc	r23, 7
    117e:	09 d0       	rcall	.+18     	; 0x1192 <__divmodhi4_neg2>
    1180:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__udivmodhi4>
    1184:	07 fc       	sbrc	r0, 7
    1186:	05 d0       	rcall	.+10     	; 0x1192 <__divmodhi4_neg2>
    1188:	3e f4       	brtc	.+14     	; 0x1198 <__divmodhi4_exit>

0000118a <__divmodhi4_neg1>:
    118a:	90 95       	com	r25
    118c:	81 95       	neg	r24
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	08 95       	ret

00001192 <__divmodhi4_neg2>:
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255

00001198 <__divmodhi4_exit>:
    1198:	08 95       	ret

0000119a <__tablejump2__>:
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	05 90       	lpm	r0, Z+
    11a0:	f4 91       	lpm	r31, Z
    11a2:	e0 2d       	mov	r30, r0
    11a4:	09 94       	ijmp

000011a6 <__umulhisi3>:
    11a6:	a2 9f       	mul	r26, r18
    11a8:	b0 01       	movw	r22, r0
    11aa:	b3 9f       	mul	r27, r19
    11ac:	c0 01       	movw	r24, r0
    11ae:	a3 9f       	mul	r26, r19
    11b0:	70 0d       	add	r23, r0
    11b2:	81 1d       	adc	r24, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	91 1d       	adc	r25, r1
    11b8:	b2 9f       	mul	r27, r18
    11ba:	70 0d       	add	r23, r0
    11bc:	81 1d       	adc	r24, r1
    11be:	11 24       	eor	r1, r1
    11c0:	91 1d       	adc	r25, r1
    11c2:	08 95       	ret

000011c4 <__udivmodhi4>:
    11c4:	aa 1b       	sub	r26, r26
    11c6:	bb 1b       	sub	r27, r27
    11c8:	51 e1       	ldi	r21, 0x11	; 17
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <__udivmodhi4_ep>

000011cc <__udivmodhi4_loop>:
    11cc:	aa 1f       	adc	r26, r26
    11ce:	bb 1f       	adc	r27, r27
    11d0:	a6 17       	cp	r26, r22
    11d2:	b7 07       	cpc	r27, r23
    11d4:	10 f0       	brcs	.+4      	; 0x11da <__udivmodhi4_ep>
    11d6:	a6 1b       	sub	r26, r22
    11d8:	b7 0b       	sbc	r27, r23

000011da <__udivmodhi4_ep>:
    11da:	88 1f       	adc	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	5a 95       	dec	r21
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__udivmodhi4_loop>
    11e2:	80 95       	com	r24
    11e4:	90 95       	com	r25
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	08 95       	ret

000011ec <__subsf3>:
    11ec:	50 58       	subi	r21, 0x80	; 128

000011ee <__addsf3>:
    11ee:	bb 27       	eor	r27, r27
    11f0:	aa 27       	eor	r26, r26
    11f2:	0e 94 0e 09 	call	0x121c	; 0x121c <__addsf3x>
    11f6:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_round>
    11fa:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_pscA>
    11fe:	38 f0       	brcs	.+14     	; 0x120e <__addsf3+0x20>
    1200:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__fp_pscB>
    1204:	20 f0       	brcs	.+8      	; 0x120e <__addsf3+0x20>
    1206:	39 f4       	brne	.+14     	; 0x1216 <__addsf3+0x28>
    1208:	9f 3f       	cpi	r25, 0xFF	; 255
    120a:	19 f4       	brne	.+6      	; 0x1212 <__addsf3+0x24>
    120c:	26 f4       	brtc	.+8      	; 0x1216 <__addsf3+0x28>
    120e:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_nan>
    1212:	0e f4       	brtc	.+2      	; 0x1216 <__addsf3+0x28>
    1214:	e0 95       	com	r30
    1216:	e7 fb       	bst	r30, 7
    1218:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_inf>

0000121c <__addsf3x>:
    121c:	e9 2f       	mov	r30, r25
    121e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_split3>
    1222:	58 f3       	brcs	.-42     	; 0x11fa <__addsf3+0xc>
    1224:	ba 17       	cp	r27, r26
    1226:	62 07       	cpc	r22, r18
    1228:	73 07       	cpc	r23, r19
    122a:	84 07       	cpc	r24, r20
    122c:	95 07       	cpc	r25, r21
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__addsf3x+0x1c>
    1230:	79 f4       	brne	.+30     	; 0x1250 <__addsf3x+0x34>
    1232:	a6 f5       	brtc	.+104    	; 0x129c <__addsf3x+0x80>
    1234:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_zero>
    1238:	0e f4       	brtc	.+2      	; 0x123c <__addsf3x+0x20>
    123a:	e0 95       	com	r30
    123c:	0b 2e       	mov	r0, r27
    123e:	ba 2f       	mov	r27, r26
    1240:	a0 2d       	mov	r26, r0
    1242:	0b 01       	movw	r0, r22
    1244:	b9 01       	movw	r22, r18
    1246:	90 01       	movw	r18, r0
    1248:	0c 01       	movw	r0, r24
    124a:	ca 01       	movw	r24, r20
    124c:	a0 01       	movw	r20, r0
    124e:	11 24       	eor	r1, r1
    1250:	ff 27       	eor	r31, r31
    1252:	59 1b       	sub	r21, r25
    1254:	99 f0       	breq	.+38     	; 0x127c <__addsf3x+0x60>
    1256:	59 3f       	cpi	r21, 0xF9	; 249
    1258:	50 f4       	brcc	.+20     	; 0x126e <__addsf3x+0x52>
    125a:	50 3e       	cpi	r21, 0xE0	; 224
    125c:	68 f1       	brcs	.+90     	; 0x12b8 <__addsf3x+0x9c>
    125e:	1a 16       	cp	r1, r26
    1260:	f0 40       	sbci	r31, 0x00	; 0
    1262:	a2 2f       	mov	r26, r18
    1264:	23 2f       	mov	r18, r19
    1266:	34 2f       	mov	r19, r20
    1268:	44 27       	eor	r20, r20
    126a:	58 5f       	subi	r21, 0xF8	; 248
    126c:	f3 cf       	rjmp	.-26     	; 0x1254 <__addsf3x+0x38>
    126e:	46 95       	lsr	r20
    1270:	37 95       	ror	r19
    1272:	27 95       	ror	r18
    1274:	a7 95       	ror	r26
    1276:	f0 40       	sbci	r31, 0x00	; 0
    1278:	53 95       	inc	r21
    127a:	c9 f7       	brne	.-14     	; 0x126e <__addsf3x+0x52>
    127c:	7e f4       	brtc	.+30     	; 0x129c <__addsf3x+0x80>
    127e:	1f 16       	cp	r1, r31
    1280:	ba 0b       	sbc	r27, r26
    1282:	62 0b       	sbc	r22, r18
    1284:	73 0b       	sbc	r23, r19
    1286:	84 0b       	sbc	r24, r20
    1288:	ba f0       	brmi	.+46     	; 0x12b8 <__addsf3x+0x9c>
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <__addsf3x+0x9a>
    128e:	ff 0f       	add	r31, r31
    1290:	bb 1f       	adc	r27, r27
    1292:	66 1f       	adc	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	c2 f7       	brpl	.-16     	; 0x128a <__addsf3x+0x6e>
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <__addsf3x+0x9c>
    129c:	ba 0f       	add	r27, r26
    129e:	62 1f       	adc	r22, r18
    12a0:	73 1f       	adc	r23, r19
    12a2:	84 1f       	adc	r24, r20
    12a4:	48 f4       	brcc	.+18     	; 0x12b8 <__addsf3x+0x9c>
    12a6:	87 95       	ror	r24
    12a8:	77 95       	ror	r23
    12aa:	67 95       	ror	r22
    12ac:	b7 95       	ror	r27
    12ae:	f7 95       	ror	r31
    12b0:	9e 3f       	cpi	r25, 0xFE	; 254
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__addsf3x+0x9a>
    12b4:	b0 cf       	rjmp	.-160    	; 0x1216 <__addsf3+0x28>
    12b6:	93 95       	inc	r25
    12b8:	88 0f       	add	r24, r24
    12ba:	08 f0       	brcs	.+2      	; 0x12be <__addsf3x+0xa2>
    12bc:	99 27       	eor	r25, r25
    12be:	ee 0f       	add	r30, r30
    12c0:	97 95       	ror	r25
    12c2:	87 95       	ror	r24
    12c4:	08 95       	ret

000012c6 <__divsf3>:
    12c6:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divsf3x>
    12ca:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_round>
    12ce:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__fp_pscB>
    12d2:	58 f0       	brcs	.+22     	; 0x12ea <__divsf3+0x24>
    12d4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_pscA>
    12d8:	40 f0       	brcs	.+16     	; 0x12ea <__divsf3+0x24>
    12da:	29 f4       	brne	.+10     	; 0x12e6 <__divsf3+0x20>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	29 f0       	breq	.+10     	; 0x12ea <__divsf3+0x24>
    12e0:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_inf>
    12e4:	51 11       	cpse	r21, r1
    12e6:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_szero>
    12ea:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_nan>

000012ee <__divsf3x>:
    12ee:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_split3>
    12f2:	68 f3       	brcs	.-38     	; 0x12ce <__divsf3+0x8>

000012f4 <__divsf3_pse>:
    12f4:	99 23       	and	r25, r25
    12f6:	b1 f3       	breq	.-20     	; 0x12e4 <__divsf3+0x1e>
    12f8:	55 23       	and	r21, r21
    12fa:	91 f3       	breq	.-28     	; 0x12e0 <__divsf3+0x1a>
    12fc:	95 1b       	sub	r25, r21
    12fe:	55 0b       	sbc	r21, r21
    1300:	bb 27       	eor	r27, r27
    1302:	aa 27       	eor	r26, r26
    1304:	62 17       	cp	r22, r18
    1306:	73 07       	cpc	r23, r19
    1308:	84 07       	cpc	r24, r20
    130a:	38 f0       	brcs	.+14     	; 0x131a <__divsf3_pse+0x26>
    130c:	9f 5f       	subi	r25, 0xFF	; 255
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	44 1f       	adc	r20, r20
    1316:	aa 1f       	adc	r26, r26
    1318:	a9 f3       	breq	.-22     	; 0x1304 <__divsf3_pse+0x10>
    131a:	35 d0       	rcall	.+106    	; 0x1386 <__divsf3_pse+0x92>
    131c:	0e 2e       	mov	r0, r30
    131e:	3a f0       	brmi	.+14     	; 0x132e <__divsf3_pse+0x3a>
    1320:	e0 e8       	ldi	r30, 0x80	; 128
    1322:	32 d0       	rcall	.+100    	; 0x1388 <__divsf3_pse+0x94>
    1324:	91 50       	subi	r25, 0x01	; 1
    1326:	50 40       	sbci	r21, 0x00	; 0
    1328:	e6 95       	lsr	r30
    132a:	00 1c       	adc	r0, r0
    132c:	ca f7       	brpl	.-14     	; 0x1320 <__divsf3_pse+0x2c>
    132e:	2b d0       	rcall	.+86     	; 0x1386 <__divsf3_pse+0x92>
    1330:	fe 2f       	mov	r31, r30
    1332:	29 d0       	rcall	.+82     	; 0x1386 <__divsf3_pse+0x92>
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	bb 1f       	adc	r27, r27
    133c:	26 17       	cp	r18, r22
    133e:	37 07       	cpc	r19, r23
    1340:	48 07       	cpc	r20, r24
    1342:	ab 07       	cpc	r26, r27
    1344:	b0 e8       	ldi	r27, 0x80	; 128
    1346:	09 f0       	breq	.+2      	; 0x134a <__divsf3_pse+0x56>
    1348:	bb 0b       	sbc	r27, r27
    134a:	80 2d       	mov	r24, r0
    134c:	bf 01       	movw	r22, r30
    134e:	ff 27       	eor	r31, r31
    1350:	93 58       	subi	r25, 0x83	; 131
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	3a f0       	brmi	.+14     	; 0x1364 <__divsf3_pse+0x70>
    1356:	9e 3f       	cpi	r25, 0xFE	; 254
    1358:	51 05       	cpc	r21, r1
    135a:	78 f0       	brcs	.+30     	; 0x137a <__divsf3_pse+0x86>
    135c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_inf>
    1360:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_szero>
    1364:	5f 3f       	cpi	r21, 0xFF	; 255
    1366:	e4 f3       	brlt	.-8      	; 0x1360 <__divsf3_pse+0x6c>
    1368:	98 3e       	cpi	r25, 0xE8	; 232
    136a:	d4 f3       	brlt	.-12     	; 0x1360 <__divsf3_pse+0x6c>
    136c:	86 95       	lsr	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b7 95       	ror	r27
    1374:	f7 95       	ror	r31
    1376:	9f 5f       	subi	r25, 0xFF	; 255
    1378:	c9 f7       	brne	.-14     	; 0x136c <__divsf3_pse+0x78>
    137a:	88 0f       	add	r24, r24
    137c:	91 1d       	adc	r25, r1
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	97 f9       	bld	r25, 7
    1384:	08 95       	ret
    1386:	e1 e0       	ldi	r30, 0x01	; 1
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	88 1f       	adc	r24, r24
    138e:	bb 1f       	adc	r27, r27
    1390:	62 17       	cp	r22, r18
    1392:	73 07       	cpc	r23, r19
    1394:	84 07       	cpc	r24, r20
    1396:	ba 07       	cpc	r27, r26
    1398:	20 f0       	brcs	.+8      	; 0x13a2 <__divsf3_pse+0xae>
    139a:	62 1b       	sub	r22, r18
    139c:	73 0b       	sbc	r23, r19
    139e:	84 0b       	sbc	r24, r20
    13a0:	ba 0b       	sbc	r27, r26
    13a2:	ee 1f       	adc	r30, r30
    13a4:	88 f7       	brcc	.-30     	; 0x1388 <__divsf3_pse+0x94>
    13a6:	e0 95       	com	r30
    13a8:	08 95       	ret

000013aa <__fixsfsi>:
    13aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fixunssfsi>
    13ae:	68 94       	set
    13b0:	b1 11       	cpse	r27, r1
    13b2:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_szero>
    13b6:	08 95       	ret

000013b8 <__fixunssfsi>:
    13b8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_splitA>
    13bc:	88 f0       	brcs	.+34     	; 0x13e0 <__fixunssfsi+0x28>
    13be:	9f 57       	subi	r25, 0x7F	; 127
    13c0:	98 f0       	brcs	.+38     	; 0x13e8 <__fixunssfsi+0x30>
    13c2:	b9 2f       	mov	r27, r25
    13c4:	99 27       	eor	r25, r25
    13c6:	b7 51       	subi	r27, 0x17	; 23
    13c8:	b0 f0       	brcs	.+44     	; 0x13f6 <__fixunssfsi+0x3e>
    13ca:	e1 f0       	breq	.+56     	; 0x1404 <__fixunssfsi+0x4c>
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	1a f0       	brmi	.+6      	; 0x13dc <__fixunssfsi+0x24>
    13d6:	ba 95       	dec	r27
    13d8:	c9 f7       	brne	.-14     	; 0x13cc <__fixunssfsi+0x14>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <__fixunssfsi+0x4c>
    13dc:	b1 30       	cpi	r27, 0x01	; 1
    13de:	91 f0       	breq	.+36     	; 0x1404 <__fixunssfsi+0x4c>
    13e0:	0e 94 92 0a 	call	0x1524	; 0x1524 <__fp_zero>
    13e4:	b1 e0       	ldi	r27, 0x01	; 1
    13e6:	08 95       	ret
    13e8:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_zero>
    13ec:	67 2f       	mov	r22, r23
    13ee:	78 2f       	mov	r23, r24
    13f0:	88 27       	eor	r24, r24
    13f2:	b8 5f       	subi	r27, 0xF8	; 248
    13f4:	39 f0       	breq	.+14     	; 0x1404 <__fixunssfsi+0x4c>
    13f6:	b9 3f       	cpi	r27, 0xF9	; 249
    13f8:	cc f3       	brlt	.-14     	; 0x13ec <__fixunssfsi+0x34>
    13fa:	86 95       	lsr	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b3 95       	inc	r27
    1402:	d9 f7       	brne	.-10     	; 0x13fa <__fixunssfsi+0x42>
    1404:	3e f4       	brtc	.+14     	; 0x1414 <__fixunssfsi+0x5c>
    1406:	90 95       	com	r25
    1408:	80 95       	com	r24
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	08 95       	ret

00001416 <__floatunsisf>:
    1416:	e8 94       	clt
    1418:	09 c0       	rjmp	.+18     	; 0x142c <__floatsisf+0x12>

0000141a <__floatsisf>:
    141a:	97 fb       	bst	r25, 7
    141c:	3e f4       	brtc	.+14     	; 0x142c <__floatsisf+0x12>
    141e:	90 95       	com	r25
    1420:	80 95       	com	r24
    1422:	70 95       	com	r23
    1424:	61 95       	neg	r22
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	99 23       	and	r25, r25
    142e:	a9 f0       	breq	.+42     	; 0x145a <__floatsisf+0x40>
    1430:	f9 2f       	mov	r31, r25
    1432:	96 e9       	ldi	r25, 0x96	; 150
    1434:	bb 27       	eor	r27, r27
    1436:	93 95       	inc	r25
    1438:	f6 95       	lsr	r31
    143a:	87 95       	ror	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f1 11       	cpse	r31, r1
    1444:	f8 cf       	rjmp	.-16     	; 0x1436 <__floatsisf+0x1c>
    1446:	fa f4       	brpl	.+62     	; 0x1486 <__floatsisf+0x6c>
    1448:	bb 0f       	add	r27, r27
    144a:	11 f4       	brne	.+4      	; 0x1450 <__floatsisf+0x36>
    144c:	60 ff       	sbrs	r22, 0
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <__floatsisf+0x6c>
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <__floatsisf+0x6c>
    145a:	88 23       	and	r24, r24
    145c:	11 f0       	breq	.+4      	; 0x1462 <__floatsisf+0x48>
    145e:	96 e9       	ldi	r25, 0x96	; 150
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <__floatsisf+0x6a>
    1462:	77 23       	and	r23, r23
    1464:	21 f0       	breq	.+8      	; 0x146e <__floatsisf+0x54>
    1466:	9e e8       	ldi	r25, 0x8E	; 142
    1468:	87 2f       	mov	r24, r23
    146a:	76 2f       	mov	r23, r22
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <__floatsisf+0x5e>
    146e:	66 23       	and	r22, r22
    1470:	71 f0       	breq	.+28     	; 0x148e <__floatsisf+0x74>
    1472:	96 e8       	ldi	r25, 0x86	; 134
    1474:	86 2f       	mov	r24, r22
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	2a f0       	brmi	.+10     	; 0x1486 <__floatsisf+0x6c>
    147c:	9a 95       	dec	r25
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	da f7       	brpl	.-10     	; 0x147c <__floatsisf+0x62>
    1486:	88 0f       	add	r24, r24
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret

00001490 <__fp_inf>:
    1490:	97 f9       	bld	r25, 7
    1492:	9f 67       	ori	r25, 0x7F	; 127
    1494:	80 e8       	ldi	r24, 0x80	; 128
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	08 95       	ret

0000149c <__fp_nan>:
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	80 ec       	ldi	r24, 0xC0	; 192
    14a0:	08 95       	ret

000014a2 <__fp_pscA>:
    14a2:	00 24       	eor	r0, r0
    14a4:	0a 94       	dec	r0
    14a6:	16 16       	cp	r1, r22
    14a8:	17 06       	cpc	r1, r23
    14aa:	18 06       	cpc	r1, r24
    14ac:	09 06       	cpc	r0, r25
    14ae:	08 95       	ret

000014b0 <__fp_pscB>:
    14b0:	00 24       	eor	r0, r0
    14b2:	0a 94       	dec	r0
    14b4:	12 16       	cp	r1, r18
    14b6:	13 06       	cpc	r1, r19
    14b8:	14 06       	cpc	r1, r20
    14ba:	05 06       	cpc	r0, r21
    14bc:	08 95       	ret

000014be <__fp_round>:
    14be:	09 2e       	mov	r0, r25
    14c0:	03 94       	inc	r0
    14c2:	00 0c       	add	r0, r0
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__fp_round+0xc>
    14c6:	88 23       	and	r24, r24
    14c8:	52 f0       	brmi	.+20     	; 0x14de <__fp_round+0x20>
    14ca:	bb 0f       	add	r27, r27
    14cc:	40 f4       	brcc	.+16     	; 0x14de <__fp_round+0x20>
    14ce:	bf 2b       	or	r27, r31
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__fp_round+0x18>
    14d2:	60 ff       	sbrs	r22, 0
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <__fp_round+0x20>
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	08 95       	ret

000014e0 <__fp_split3>:
    14e0:	57 fd       	sbrc	r21, 7
    14e2:	90 58       	subi	r25, 0x80	; 128
    14e4:	44 0f       	add	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	59 f0       	breq	.+22     	; 0x1500 <__fp_splitA+0x10>
    14ea:	5f 3f       	cpi	r21, 0xFF	; 255
    14ec:	71 f0       	breq	.+28     	; 0x150a <__fp_splitA+0x1a>
    14ee:	47 95       	ror	r20

000014f0 <__fp_splitA>:
    14f0:	88 0f       	add	r24, r24
    14f2:	97 fb       	bst	r25, 7
    14f4:	99 1f       	adc	r25, r25
    14f6:	61 f0       	breq	.+24     	; 0x1510 <__fp_splitA+0x20>
    14f8:	9f 3f       	cpi	r25, 0xFF	; 255
    14fa:	79 f0       	breq	.+30     	; 0x151a <__fp_splitA+0x2a>
    14fc:	87 95       	ror	r24
    14fe:	08 95       	ret
    1500:	12 16       	cp	r1, r18
    1502:	13 06       	cpc	r1, r19
    1504:	14 06       	cpc	r1, r20
    1506:	55 1f       	adc	r21, r21
    1508:	f2 cf       	rjmp	.-28     	; 0x14ee <__fp_split3+0xe>
    150a:	46 95       	lsr	r20
    150c:	f1 df       	rcall	.-30     	; 0x14f0 <__fp_splitA>
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <__fp_splitA+0x30>
    1510:	16 16       	cp	r1, r22
    1512:	17 06       	cpc	r1, r23
    1514:	18 06       	cpc	r1, r24
    1516:	99 1f       	adc	r25, r25
    1518:	f1 cf       	rjmp	.-30     	; 0x14fc <__fp_splitA+0xc>
    151a:	86 95       	lsr	r24
    151c:	71 05       	cpc	r23, r1
    151e:	61 05       	cpc	r22, r1
    1520:	08 94       	sec
    1522:	08 95       	ret

00001524 <__fp_zero>:
    1524:	e8 94       	clt

00001526 <__fp_szero>:
    1526:	bb 27       	eor	r27, r27
    1528:	66 27       	eor	r22, r22
    152a:	77 27       	eor	r23, r23
    152c:	cb 01       	movw	r24, r22
    152e:	97 f9       	bld	r25, 7
    1530:	08 95       	ret

00001532 <__mulsf3>:
    1532:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3x>
    1536:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_round>
    153a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fp_pscA>
    153e:	38 f0       	brcs	.+14     	; 0x154e <__mulsf3+0x1c>
    1540:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__fp_pscB>
    1544:	20 f0       	brcs	.+8      	; 0x154e <__mulsf3+0x1c>
    1546:	95 23       	and	r25, r21
    1548:	11 f0       	breq	.+4      	; 0x154e <__mulsf3+0x1c>
    154a:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_inf>
    154e:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_nan>
    1552:	11 24       	eor	r1, r1
    1554:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_szero>

00001558 <__mulsf3x>:
    1558:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__fp_split3>
    155c:	70 f3       	brcs	.-36     	; 0x153a <__mulsf3+0x8>

0000155e <__mulsf3_pse>:
    155e:	95 9f       	mul	r25, r21
    1560:	c1 f3       	breq	.-16     	; 0x1552 <__mulsf3+0x20>
    1562:	95 0f       	add	r25, r21
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	55 1f       	adc	r21, r21
    1568:	62 9f       	mul	r22, r18
    156a:	f0 01       	movw	r30, r0
    156c:	72 9f       	mul	r23, r18
    156e:	bb 27       	eor	r27, r27
    1570:	f0 0d       	add	r31, r0
    1572:	b1 1d       	adc	r27, r1
    1574:	63 9f       	mul	r22, r19
    1576:	aa 27       	eor	r26, r26
    1578:	f0 0d       	add	r31, r0
    157a:	b1 1d       	adc	r27, r1
    157c:	aa 1f       	adc	r26, r26
    157e:	64 9f       	mul	r22, r20
    1580:	66 27       	eor	r22, r22
    1582:	b0 0d       	add	r27, r0
    1584:	a1 1d       	adc	r26, r1
    1586:	66 1f       	adc	r22, r22
    1588:	82 9f       	mul	r24, r18
    158a:	22 27       	eor	r18, r18
    158c:	b0 0d       	add	r27, r0
    158e:	a1 1d       	adc	r26, r1
    1590:	62 1f       	adc	r22, r18
    1592:	73 9f       	mul	r23, r19
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	62 1f       	adc	r22, r18
    159a:	83 9f       	mul	r24, r19
    159c:	a0 0d       	add	r26, r0
    159e:	61 1d       	adc	r22, r1
    15a0:	22 1f       	adc	r18, r18
    15a2:	74 9f       	mul	r23, r20
    15a4:	33 27       	eor	r19, r19
    15a6:	a0 0d       	add	r26, r0
    15a8:	61 1d       	adc	r22, r1
    15aa:	23 1f       	adc	r18, r19
    15ac:	84 9f       	mul	r24, r20
    15ae:	60 0d       	add	r22, r0
    15b0:	21 1d       	adc	r18, r1
    15b2:	82 2f       	mov	r24, r18
    15b4:	76 2f       	mov	r23, r22
    15b6:	6a 2f       	mov	r22, r26
    15b8:	11 24       	eor	r1, r1
    15ba:	9f 57       	subi	r25, 0x7F	; 127
    15bc:	50 40       	sbci	r21, 0x00	; 0
    15be:	9a f0       	brmi	.+38     	; 0x15e6 <__mulsf3_pse+0x88>
    15c0:	f1 f0       	breq	.+60     	; 0x15fe <__mulsf3_pse+0xa0>
    15c2:	88 23       	and	r24, r24
    15c4:	4a f0       	brmi	.+18     	; 0x15d8 <__mulsf3_pse+0x7a>
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	bb 1f       	adc	r27, r27
    15cc:	66 1f       	adc	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	a9 f7       	brne	.-22     	; 0x15c2 <__mulsf3_pse+0x64>
    15d8:	9e 3f       	cpi	r25, 0xFE	; 254
    15da:	51 05       	cpc	r21, r1
    15dc:	80 f0       	brcs	.+32     	; 0x15fe <__mulsf3_pse+0xa0>
    15de:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__fp_inf>
    15e2:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_szero>
    15e6:	5f 3f       	cpi	r21, 0xFF	; 255
    15e8:	e4 f3       	brlt	.-8      	; 0x15e2 <__mulsf3_pse+0x84>
    15ea:	98 3e       	cpi	r25, 0xE8	; 232
    15ec:	d4 f3       	brlt	.-12     	; 0x15e2 <__mulsf3_pse+0x84>
    15ee:	86 95       	lsr	r24
    15f0:	77 95       	ror	r23
    15f2:	67 95       	ror	r22
    15f4:	b7 95       	ror	r27
    15f6:	f7 95       	ror	r31
    15f8:	e7 95       	ror	r30
    15fa:	9f 5f       	subi	r25, 0xFF	; 255
    15fc:	c1 f7       	brne	.-16     	; 0x15ee <__mulsf3_pse+0x90>
    15fe:	fe 2b       	or	r31, r30
    1600:	88 0f       	add	r24, r24
    1602:	91 1d       	adc	r25, r1
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	97 f9       	bld	r25, 7
    160a:	08 95       	ret

0000160c <eeprom_read_byte>:
    160c:	f9 99       	sbic	0x1f, 1	; 31
    160e:	fe cf       	rjmp	.-4      	; 0x160c <eeprom_read_byte>
    1610:	92 bd       	out	0x22, r25	; 34
    1612:	81 bd       	out	0x21, r24	; 33
    1614:	f8 9a       	sbi	0x1f, 0	; 31
    1616:	99 27       	eor	r25, r25
    1618:	80 b5       	in	r24, 0x20	; 32
    161a:	08 95       	ret

0000161c <eeprom_write_byte>:
    161c:	26 2f       	mov	r18, r22

0000161e <eeprom_write_r18>:
    161e:	f9 99       	sbic	0x1f, 1	; 31
    1620:	fe cf       	rjmp	.-4      	; 0x161e <eeprom_write_r18>
    1622:	1f ba       	out	0x1f, r1	; 31
    1624:	92 bd       	out	0x22, r25	; 34
    1626:	81 bd       	out	0x21, r24	; 33
    1628:	20 bd       	out	0x20, r18	; 32
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	fa 9a       	sbi	0x1f, 2	; 31
    1630:	f9 9a       	sbi	0x1f, 1	; 31
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	08 95       	ret

00001638 <_exit>:
    1638:	f8 94       	cli

0000163a <__stop_program>:
    163a:	ff cf       	rjmp	.-2      	; 0x163a <__stop_program>
