
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	11 05       	cpc	r17, r1
      6a:	68 05       	cpc	r22, r8
      6c:	7c 05       	cpc	r23, r12
      6e:	ad 05       	cpc	r26, r13
      70:	b4 05       	cpc	r27, r4
      72:	93 05       	cpc	r25, r3
      74:	b7 05       	cpc	r27, r7
      76:	15 07       	cpc	r17, r21
      78:	06 08       	sbc	r0, r6
      7a:	06 08       	sbc	r0, r6
      7c:	1e 07       	cpc	r17, r30
      7e:	21 07       	cpc	r18, r17
      80:	24 07       	cpc	r18, r20
      82:	26 07       	cpc	r18, r22
      84:	28 07       	cpc	r18, r24
      86:	2a 07       	cpc	r18, r26
      88:	db 07       	cpc	r29, r27
      8a:	3c 07       	cpc	r19, r28

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e6       	ldi	r30, 0x68	; 104
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 b8 08 	call	0x1170	; 0x1170 <main>
      da:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

int message_sent = 0, new_message = 0, die = 4, rand = 0, curr;
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <message_sent+0x1>
      f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <message_sent>
      f4:	08 95       	ret

000000f6 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  transmit_msg.type = NORMAL;
      fa:	c6 e1       	ldi	r28, 0x16	; 22
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 0;
     100:	18 82       	st	Y, r1
  transmit_msg.crc = message_crc(&transmit_msg);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 19 08 	call	0x1032	; 0x1032 <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <set_motion>:
void message_tx_success() {
  message_sent = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     112:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <curr>
     116:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <curr+0x1>
     11a:	28 17       	cp	r18, r24
     11c:	39 07       	cpc	r19, r25
     11e:	09 f1       	breq	.+66     	; 0x162 <set_motion+0x50>
        curr = new_motion;
     120:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <curr+0x1>
     124:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <curr>
        if (curr == STOP) {
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	11 f4       	brne	.+4      	; 0x130 <set_motion+0x1e>
          set_motors(0,0);
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	16 c0       	rjmp	.+44     	; 0x15c <set_motion+0x4a>
        } else if (curr == FORWARD) {
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	39 f4       	brne	.+14     	; 0x144 <set_motion+0x32>
          spinup_motors();
     136:	0e 94 11 02 	call	0x422	; 0x422 <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     13a:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     13e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     142:	0d c0       	rjmp	.+26     	; 0x15e <set_motion+0x4c>
        } else if (curr == LEFT) {
     144:	02 97       	sbiw	r24, 0x02	; 2
     146:	31 f4       	brne	.+12     	; 0x154 <set_motion+0x42>
          spinup_motors();
     148:	0e 94 11 02 	call	0x422	; 0x422 <spinup_motors>
          set_motors(kilo_turn_left, 0);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     152:	05 c0       	rjmp	.+10     	; 0x15e <set_motion+0x4c>
        } else {
          spinup_motors();
     154:	0e 94 11 02 	call	0x422	; 0x422 <spinup_motors>
          set_motors(0, kilo_turn_right);
     158:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0c 94 0c 02 	jmp	0x418	; 0x418 <set_motors>
     162:	08 95       	ret

00000164 <loop>:
  transmit_msg.data[0] = 0;
  transmit_msg.crc = message_crc(&transmit_msg);
}

void loop() {
  if (message_sent == 1) {
     164:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <message_sent>
     168:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <message_sent+0x1>
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	09 f0       	breq	.+2      	; 0x172 <loop+0xe>
     170:	43 c0       	rjmp	.+134    	; 0x1f8 <loop+0x94>
      message_sent = 0;
     172:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <message_sent+0x1>
     176:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent>
      set_color(RED);
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
      delay(100);
     180:	84 e6       	ldi	r24, 0x64	; 100
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 01 02 	call	0x402	; 0x402 <delay>
      set_color(OFF);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
      rand = rand_soft();
     18e:	0e 94 b1 02 	call	0x562	; 0x562 <rand_soft>
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     198:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
      if (die == 0) {
     19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	19 f4       	brne	.+6      	; 0x1ae <loop+0x4a>
          set_motion(FORWARD);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <loop+0x54>
      } else if (die == 1) {
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	91 05       	cpc	r25, r1
     1b2:	29 f4       	brne	.+10     	; 0x1be <loop+0x5a>
          set_motion(LEFT);
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 89 00 	call	0x112	; 0x112 <set_motion>
     1bc:	10 c0       	rjmp	.+32     	; 0x1de <loop+0x7a>
      } else if (die == 2) {
     1be:	02 97       	sbiw	r24, 0x02	; 2
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <loop+0x64>
          set_motion(RIGHT);
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	f8 cf       	rjmp	.-16     	; 0x1b8 <loop+0x54>
      } else {
	  set_color(WHITE);
     1c8:	85 e1       	ldi	r24, 0x15	; 21
     1ca:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	  set_motion(STOP);
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 89 00 	call	0x112	; 0x112 <set_motion>
	  delay(5000);
     1d6:	88 e8       	ldi	r24, 0x88	; 136
     1d8:	93 e1       	ldi	r25, 0x13	; 19
     1da:	0e 94 01 02 	call	0x402	; 0x402 <delay>
      }
      die = (rand % 3);
     1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     1e2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     1e6:	63 e0       	ldi	r22, 0x03	; 3
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
     1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1f6:	08 95       	ret
  } else {
      delay(200);
     1f8:	88 ec       	ldi	r24, 0xC8	; 200
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0c 94 01 02 	jmp	0x402	; 0x402 <delay>

00000200 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     200:	08 95       	ret

00000202 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     208:	08 95       	ret

0000020a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
    cli();
     218:	f8 94       	cli

    ports_off();
     21a:	14 b8       	out	0x04, r1	; 4
     21c:	17 b8       	out	0x07, r1	; 7
     21e:	1a b8       	out	0x0a, r1	; 10
     220:	15 b8       	out	0x05, r1	; 5
     222:	18 b8       	out	0x08, r1	; 8
     224:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     226:	52 9a       	sbi	0x0a, 2	; 10
     228:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     22a:	14 bc       	out	0x24, r1	; 36
     22c:	85 e0       	ldi	r24, 0x05	; 5
     22e:	85 bd       	out	0x25, r24	; 37
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	87 bd       	out	0x27, r24	; 39
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     23a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     23e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     242:	2f e8       	ldi	r18, 0x8F	; 143
     244:	3b e0       	ldi	r19, 0x0B	; 11
     246:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     24a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     24e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     252:	53 98       	cbi	0x0a, 3	; 10
     254:	23 98       	cbi	0x04, 3	; 4
     256:	91 ea       	ldi	r25, 0xA1	; 161
     258:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     25c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     260:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     264:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     268:	8b e0       	ldi	r24, 0x0B	; 11
     26a:	80 bf       	out	0x30, r24	; 48
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     278:	83 e8       	ldi	r24, 0x83	; 131
     27a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     27e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     282:	80 64       	ori	r24, 0x40	; 64
     284:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     288:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     28c:	86 fd       	sbrc	r24, 6
     28e:	fc cf       	rjmp	.-8      	; 0x288 <kilo_init+0x7e>
    adc_trigger_high_gain();
     290:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     294:	83 ea       	ldi	r24, 0xA3	; 163
     296:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
    if (osccal != 0xFF)
     2a8:	8f 3f       	cpi	r24, 0xFF	; 255
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <kilo_init+0xa6>
        OSCCAL = osccal;
     2ac:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     2b0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     2b4:	c1 e0       	ldi	r28, 0x01	; 1
     2b6:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     2ba:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     2be:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     2c2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2c6:	80 e9       	ldi	r24, 0x90	; 144
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     2ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2d2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     2d6:	88 73       	andi	r24, 0x38	; 56
     2d8:	11 f0       	breq	.+4      	; 0x2de <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2da:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     2de:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     2e2:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     2ee:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     2f2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     2f6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     2fa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     2fe:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	9f e0       	ldi	r25, 0x0F	; 15
     30c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     310:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     314:	80 eb       	ldi	r24, 0xB0	; 176
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     31c:	c8 2f       	mov	r28, r24
     31e:	81 eb       	ldi	r24, 0xB1	; 177
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     326:	2c 2f       	mov	r18, r28
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	38 2b       	or	r19, r24
     32c:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     330:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     334:	85 e0       	ldi	r24, 0x05	; 5
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     33c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     340:	89 e0       	ldi	r24, 0x09	; 9
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     348:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     34c:	8c e0       	ldi	r24, 0x0C	; 12
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     354:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     360:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     364:	0a e4       	ldi	r16, 0x4A	; 74
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	53 e2       	ldi	r21, 0x23	; 35
     36a:	e5 2e       	mov	r14, r21
     36c:	51 e0       	ldi	r21, 0x01	; 1
     36e:	f5 2e       	mov	r15, r21
     370:	c0 e2       	ldi	r28, 0x20	; 32
     372:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     374:	ce 01       	movw	r24, r28
     376:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     37a:	d8 2e       	mov	r13, r24
     37c:	ce 01       	movw	r24, r28
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     384:	2d 2d       	mov	r18, r13
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	32 2f       	mov	r19, r18
     38a:	22 27       	eor	r18, r18
     38c:	28 2b       	or	r18, r24
     38e:	f8 01       	movw	r30, r16
     390:	21 93       	st	Z+, r18
     392:	31 93       	st	Z+, r19
     394:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     396:	ce 01       	movw	r24, r28
     398:	c0 96       	adiw	r24, 0x30	; 48
     39a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     39e:	d8 2e       	mov	r13, r24
     3a0:	ce 01       	movw	r24, r28
     3a2:	c1 96       	adiw	r24, 0x31	; 49
     3a4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_read_byte>
     3a8:	2d 2d       	mov	r18, r13
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	32 2f       	mov	r19, r18
     3ae:	22 27       	eor	r18, r18
     3b0:	28 2b       	or	r18, r24
     3b2:	f7 01       	movw	r30, r14
     3b4:	21 93       	st	Z+, r18
     3b6:	31 93       	st	Z+, r19
     3b8:	7f 01       	movw	r14, r30
     3ba:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3bc:	cc 33       	cpi	r28, 0x3C	; 60
     3be:	d1 05       	cpc	r29, r1
     3c0:	c9 f6       	brne	.-78     	; 0x374 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3c2:	78 94       	sei
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	08 95       	ret

000003d4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	a8 95       	wdr
     3e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3ea:	88 61       	ori	r24, 0x18	; 24
     3ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3f4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	41 f0       	breq	.+16     	; 0x416 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     406:	ef ec       	ldi	r30, 0xCF	; 207
     408:	f7 e0       	ldi	r31, 0x07	; 7
     40a:	31 97       	sbiw	r30, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <delay+0x8>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <delay+0xe>
     410:	00 00       	nop
        _delay_ms(1);
        ms--;
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f6 cf       	rjmp	.-20     	; 0x402 <delay>
    }
}
     416:	08 95       	ret

00000418 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     418:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     41c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     420:	08 95       	ret

00000422 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     428:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     42c:	8f e0       	ldi	r24, 0x0F	; 15
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0c 94 01 02 	jmp	0x402	; 0x402 <delay>

00000434 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     434:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     438:	81 11       	cpse	r24, r1
     43a:	1e c0       	rjmp	.+60     	; 0x478 <get_ambientlight+0x44>
        cli();
     43c:	f8 94       	cli
        adc_setup_conversion(7);
     43e:	87 e0       	ldi	r24, 0x07	; 7
     440:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     444:	83 e8       	ldi	r24, 0x83	; 131
     446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     44a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44e:	80 64       	ori	r24, 0x40	; 64
     450:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     454:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     458:	86 fd       	sbrc	r24, 6
     45a:	fc cf       	rjmp	.-8      	; 0x454 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     45c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     460:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     464:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     468:	23 ea       	ldi	r18, 0xA3	; 163
     46a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     474:	78 94       	sei
     476:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     47c:	08 95       	ret

0000047e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     47e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     482:	81 11       	cpse	r24, r1
     484:	1e c0       	rjmp	.+60     	; 0x4c2 <get_temperature+0x44>
        cli();
     486:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     488:	88 ec       	ldi	r24, 0xC8	; 200
     48a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     48e:	87 e8       	ldi	r24, 0x87	; 135
     490:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     494:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     498:	80 64       	ori	r24, 0x40	; 64
     49a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     49e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4a2:	86 fd       	sbrc	r24, 6
     4a4:	fc cf       	rjmp	.-8      	; 0x49e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     4a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4b2:	23 ea       	ldi	r18, 0xA3	; 163
     4b4:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4be:	78 94       	sei
     4c0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     4c6:	08 95       	ret

000004c8 <rand_hard>:

uint8_t rand_hard() {
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4d2:	e3 ea       	ldi	r30, 0xA3	; 163
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4d6:	c6 e0       	ldi	r28, 0x06	; 6
     4d8:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4da:	a1 e0       	ldi	r26, 0x01	; 1
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4de:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4e0:	f8 94       	cli
            adc_setup_conversion(6);
     4e2:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4e6:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4ea:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ee:	40 64       	ori	r20, 0x40	; 64
     4f0:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4f4:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f8:	46 fd       	sbrc	r20, 6
     4fa:	fc cf       	rjmp	.-8      	; 0x4f4 <rand_hard+0x2c>
            a = ADCW&0x1;
     4fc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     500:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     504:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     506:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     50a:	50 64       	ori	r21, 0x40	; 64
     50c:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     510:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     514:	56 fd       	sbrc	r21, 6
     516:	fc cf       	rjmp	.-8      	; 0x510 <rand_hard+0x48>
            b = ADCW&0x1;
     518:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     51c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     520:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     524:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     528:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     52c:	78 94       	sei
            tries++;
     52e:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     530:	61 70       	andi	r22, 0x01	; 1
     532:	46 17       	cp	r20, r22
     534:	51 f0       	breq	.+20     	; 0x54a <rand_hard+0x82>
        if (a)
     536:	44 23       	and	r20, r20
     538:	59 f0       	breq	.+22     	; 0x550 <rand_hard+0x88>
            num |= (1<<i);
     53a:	ad 01       	movw	r20, r26
     53c:	02 2e       	mov	r0, r18
     53e:	01 c0       	rjmp	.+2      	; 0x542 <rand_hard+0x7a>
     540:	44 0f       	add	r20, r20
     542:	0a 94       	dec	r0
     544:	ea f7       	brpl	.-6      	; 0x540 <rand_hard+0x78>
     546:	84 2b       	or	r24, r20
     548:	03 c0       	rjmp	.+6      	; 0x550 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     54a:	90 38       	cpi	r25, 0x80	; 128
     54c:	49 f6       	brne	.-110    	; 0x4e0 <rand_hard+0x18>
     54e:	f3 cf       	rjmp	.-26     	; 0x536 <rand_hard+0x6e>
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     554:	28 30       	cpi	r18, 0x08	; 8
     556:	31 05       	cpc	r19, r1
     558:	09 f0       	breq	.+2      	; 0x55c <rand_hard+0x94>
     55a:	c1 cf       	rjmp	.-126    	; 0x4de <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     562:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     566:	98 e0       	ldi	r25, 0x08	; 8
     568:	89 9f       	mul	r24, r25
     56a:	90 01       	movw	r18, r0
     56c:	11 24       	eor	r1, r1
     56e:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     570:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	89 0f       	add	r24, r25
     578:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     57c:	82 2f       	mov	r24, r18
     57e:	82 95       	swap	r24
     580:	86 95       	lsr	r24
     582:	87 70       	andi	r24, 0x07	; 7
     584:	28 27       	eor	r18, r24
     586:	96 95       	lsr	r25
     588:	96 95       	lsr	r25
     58a:	82 2f       	mov	r24, r18
     58c:	89 27       	eor	r24, r25
     58e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     592:	08 95       	ret

00000594 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     594:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     598:	08 95       	ret

0000059a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     59a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     59e:	81 11       	cpse	r24, r1
     5a0:	16 c0       	rjmp	.+44     	; 0x5ce <get_voltage+0x34>
        cli();                                    // disable interrupts
     5a2:	f8 94       	cli
        adc_setup_conversion(6);
     5a4:	86 e0       	ldi	r24, 0x06	; 6
     5a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5aa:	83 e8       	ldi	r24, 0x83	; 131
     5ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b4:	80 64       	ori	r24, 0x40	; 64
     5b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5be:	86 fd       	sbrc	r24, 6
     5c0:	fc cf       	rjmp	.-8      	; 0x5ba <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5ca:	78 94       	sei
     5cc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5d2:	08 95       	ret

000005d4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5d4:	2f 92       	push	r2
     5d6:	3f 92       	push	r3
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5fa:	fc 01       	movw	r30, r24
     5fc:	c2 81       	ldd	r28, Z+2	; 0x02
     5fe:	d3 81       	ldd	r29, Z+3	; 0x03
     600:	c4 38       	cpi	r28, 0x84	; 132
     602:	f3 e0       	ldi	r31, 0x03	; 3
     604:	df 07       	cpc	r29, r31
     606:	0c f0       	brlt	.+2      	; 0x60a <estimate_distance+0x36>
     608:	7e c0       	rjmp	.+252    	; 0x706 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     60a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     60e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     612:	8c 17       	cp	r24, r28
     614:	9d 07       	cpc	r25, r29
     616:	08 f4       	brcc	.+2      	; 0x61a <estimate_distance+0x46>
     618:	6f c0       	rjmp	.+222    	; 0x6f8 <estimate_distance+0x124>
     61a:	e5 e2       	ldi	r30, 0x25	; 37
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     620:	81 91       	ld	r24, Z+
     622:	91 91       	ld	r25, Z+
     624:	8c 17       	cp	r24, r28
     626:	9d 07       	cpc	r25, r29
     628:	20 f0       	brcs	.+8      	; 0x632 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     62a:	1f 5f       	subi	r17, 0xFF	; 255
     62c:	1e 30       	cpi	r17, 0x0E	; 14
     62e:	c1 f7       	brne	.-16     	; 0x620 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     630:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     632:	81 2f       	mov	r24, r17
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ed 5d       	subi	r30, 0xDD	; 221
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	e0 80       	ld	r14, Z
     642:	f1 80       	ldd	r15, Z+1	; 0x01
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	fc 01       	movw	r30, r24
     64a:	ef 5d       	subi	r30, 0xDF	; 223
     64c:	fe 4f       	sbci	r31, 0xFE	; 254
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	b7 01       	movw	r22, r14
     654:	68 1b       	sub	r22, r24
     656:	79 0b       	sbc	r23, r25
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     668:	4b 01       	movw	r8, r22
     66a:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     66c:	be 01       	movw	r22, r28
     66e:	0d 2e       	mov	r0, r29
     670:	00 0c       	add	r0, r0
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     67a:	2b 01       	movw	r4, r22
     67c:	3c 01       	movw	r6, r24
     67e:	b7 01       	movw	r22, r14
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
     68c:	61 2f       	mov	r22, r17
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	a9 01       	movw	r20, r18
     6aa:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     6ae:	a5 01       	movw	r20, r10
     6b0:	94 01       	movw	r18, r8
     6b2:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c3 01       	movw	r24, r6
     6c8:	b2 01       	movw	r22, r4
     6ca:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e2       	ldi	r20, 0x20	; 32
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     6da:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     6de:	7b 01       	movw	r14, r22
     6e0:	c5 01       	movw	r24, r10
     6e2:	b4 01       	movw	r22, r8
     6e4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     6e8:	ab 01       	movw	r20, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	c7 01       	movw	r24, r14
     6ee:	ba 01       	movw	r22, r20
     6f0:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
     6f4:	16 2f       	mov	r17, r22
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6f8:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6fa:	cd 3b       	cpi	r28, 0xBD	; 189
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	d8 07       	cpc	r29, r24
     700:	0c f4       	brge	.+2      	; 0x704 <estimate_distance+0x130>
     702:	ca c0       	rjmp	.+404    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     704:	01 c0       	rjmp	.+2      	; 0x708 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     706:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     708:	f1 01       	movw	r30, r2
     70a:	c0 80       	ld	r12, Z
     70c:	d1 80       	ldd	r13, Z+1	; 0x01
     70e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     712:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     716:	8c 15       	cp	r24, r12
     718:	9d 05       	cpc	r25, r13
     71a:	88 f0       	brcs	.+34     	; 0x73e <estimate_distance+0x16a>
     71c:	ec e4       	ldi	r30, 0x4C	; 76
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     726:	e1 90       	ld	r14, Z+
     728:	f1 90       	ld	r15, Z+
     72a:	ec 14       	cp	r14, r12
     72c:	fd 04       	cpc	r15, r13
     72e:	08 f4       	brcc	.+2      	; 0x732 <estimate_distance+0x15e>
     730:	58 c0       	rjmp	.+176    	; 0x7e2 <estimate_distance+0x20e>
     732:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     734:	8e 30       	cpi	r24, 0x0E	; 14
     736:	91 05       	cpc	r25, r1
     738:	a9 f7       	brne	.-22     	; 0x724 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     73a:	0a e5       	ldi	r16, 0x5A	; 90
     73c:	01 c0       	rjmp	.+2      	; 0x740 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     73e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     740:	1f 3f       	cpi	r17, 0xFF	; 255
     742:	09 f4       	brne	.+2      	; 0x746 <estimate_distance+0x172>
     744:	4b c0       	rjmp	.+150    	; 0x7dc <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     746:	be 01       	movw	r22, r28
     748:	dd 0f       	add	r29, r29
     74a:	88 0b       	sbc	r24, r24
     74c:	99 0b       	sbc	r25, r25
     74e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
     756:	61 2f       	mov	r22, r17
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     762:	4b 01       	movw	r8, r22
     764:	5c 01       	movw	r10, r24
     766:	a7 01       	movw	r20, r14
     768:	96 01       	movw	r18, r12
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	81 e6       	ldi	r24, 0x61	; 97
     770:	94 e4       	ldi	r25, 0x44	; 68
     772:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c5 01       	movw	r24, r10
     77c:	b4 01       	movw	r22, r8
     77e:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24
     786:	60 2f       	mov	r22, r16
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     792:	2b 01       	movw	r4, r22
     794:	3c 01       	movw	r6, r24
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	4f e2       	ldi	r20, 0x2F	; 47
     79c:	54 e4       	ldi	r21, 0x44	; 68
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	c3 01       	movw	r24, r6
     7ac:	b2 01       	movw	r22, r4
     7ae:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	48 e4       	ldi	r20, 0x48	; 72
     7c4:	53 e4       	ldi	r21, 0x43	; 67
     7c6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__divsf3>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	44 e0       	ldi	r20, 0x04	; 4
     7d0:	52 e4       	ldi	r21, 0x42	; 66
     7d2:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     7d6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
     7da:	60 c0       	rjmp	.+192    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
        } else {
            return 33 + dist_low;
     7dc:	61 e2       	ldi	r22, 0x21	; 33
     7de:	60 0f       	add	r22, r16
     7e0:	5d c0       	rjmp	.+186    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	fc 01       	movw	r30, r24
     7e8:	e8 5b       	subi	r30, 0xB8	; 184
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	b7 01       	movw	r22, r14
     7f2:	68 1b       	sub	r22, r24
     7f4:	79 0b       	sbc	r23, r25
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     7fe:	9b 01       	movw	r18, r22
     800:	ac 01       	movw	r20, r24
     802:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     806:	4b 01       	movw	r8, r22
     808:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     80a:	b6 01       	movw	r22, r12
     80c:	dd 0c       	add	r13, r13
     80e:	88 0b       	sbc	r24, r24
     810:	99 0b       	sbc	r25, r25
     812:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     816:	2b 01       	movw	r4, r22
     818:	3c 01       	movw	r6, r24
     81a:	b7 01       	movw	r22, r14
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     824:	6b 01       	movw	r12, r22
     826:	7c 01       	movw	r14, r24
     828:	63 2d       	mov	r22, r3
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatunsisf>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     84a:	a5 01       	movw	r20, r10
     84c:	94 01       	movw	r18, r8
     84e:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c3 01       	movw	r24, r6
     864:	b2 01       	movw	r22, r4
     866:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     876:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     87a:	7b 01       	movw	r14, r22
     87c:	c5 01       	movw	r24, r10
     87e:	b4 01       	movw	r22, r8
     880:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixsfsi>
     884:	ab 01       	movw	r20, r22
     886:	bc 01       	movw	r22, r24
     888:	c7 01       	movw	r24, r14
     88a:	ba 01       	movw	r22, r20
     88c:	0e 94 cf 08 	call	0x119e	; 0x119e <__divmodhi4>
     890:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     892:	6f 3f       	cpi	r22, 0xFF	; 255
     894:	09 f0       	breq	.+2      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     896:	54 cf       	rjmp	.-344    	; 0x740 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     898:	61 e2       	ldi	r22, 0x21	; 33
     89a:	61 0f       	add	r22, r17
    }
}
     89c:	86 2f       	mov	r24, r22
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	3f 90       	pop	r3
     8c0:	2f 90       	pop	r2
     8c2:	08 95       	ret

000008c4 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
    tx_clock += tx_increment;
     8e6:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     8ea:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     8ee:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     8f2:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     8fe:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     90a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     912:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     916:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     91a:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     91e:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	a1 1d       	adc	r26, r1
     926:	b1 1d       	adc	r27, r1
     928:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     92c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     930:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     934:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     938:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     93c:	81 11       	cpse	r24, r1
     93e:	2d c0       	rjmp	.+90     	; 0x99a <__stack+0x9b>
     940:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     944:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     948:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     94c:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	10 f5       	brcc	.+68     	; 0x99a <__stack+0x9b>
     956:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     95a:	84 30       	cpi	r24, 0x04	; 4
     95c:	f1 f4       	brne	.+60     	; 0x99a <__stack+0x9b>
        message_t *msg = kilo_message_tx();
     95e:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     962:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     966:	09 95       	icall
        if (msg) {
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	b9 f0       	breq	.+46     	; 0x99a <__stack+0x9b>
            if (message_send(msg)) {
     96c:	0e 94 35 08 	call	0x106a	; 0x106a <message_send>
     970:	88 23       	and	r24, r24
     972:	51 f0       	breq	.+20     	; 0x988 <__stack+0x89>
                kilo_message_tx_success();
     974:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     978:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     97c:	09 95       	icall
                tx_clock = 0;
     97e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     982:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
            } else {
                tx_increment = rand()&0xFF;
     988:	0e 94 85 00 	call	0x10a	; 0x10a <setup+0x14>
     98c:	9c 01       	movw	r18, r24
     98e:	33 27       	eor	r19, r19
     990:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     994:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     998:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9bc:	80 ff       	sbrs	r24, 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <set_color+0x8>
        DDRD |= (1<<5);
     9c0:	55 9a       	sbi	0x0a, 5	; 10
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     9c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     9c6:	81 ff       	sbrs	r24, 1
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <set_color+0x12>
        DDRD |= (1<<4);
     9ca:	54 9a       	sbi	0x0a, 4	; 10
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9ce:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9d0:	82 ff       	sbrs	r24, 2
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <set_color+0x1c>
        DDRC |= (1<<3);
     9d4:	3b 9a       	sbi	0x07, 3	; 7
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9da:	83 ff       	sbrs	r24, 3
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <set_color+0x26>
        DDRC |= (1<<2);
     9de:	3a 9a       	sbi	0x07, 2	; 7
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9e4:	84 ff       	sbrs	r24, 4
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <set_color+0x30>
        DDRC |= (1<<5);
     9e8:	3d 9a       	sbi	0x07, 5	; 7
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9ec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9ee:	85 ff       	sbrs	r24, 5
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <set_color+0x3a>
        DDRC |= (1<<4);
     9f2:	3c 9a       	sbi	0x07, 4	; 7
     9f4:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9f6:	3c 98       	cbi	0x07, 4	; 7
     9f8:	08 95       	ret

000009fa <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9fa:	8c 01       	movw	r16, r24
     9fc:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9fe:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a00:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a06:	98 e1       	ldi	r25, 0x18	; 24
     a08:	c9 2e       	mov	r12, r25
     a0a:	29 e2       	ldi	r18, 0x29	; 41
     a0c:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a0e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e7 30       	cpi	r30, 0x07	; 7
     a16:	f1 05       	cpc	r31, r1
     a18:	d0 f7       	brcc	.-12     	; 0xa0e <kilo_start+0x14>
     a1a:	ec 5c       	subi	r30, 0xCC	; 204
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__tablejump2__>
            case SLEEPING:
                cli();
     a22:	f8 94       	cli
                acomp_off();
     a24:	80 b7       	in	r24, 0x30	; 48
     a26:	87 7f       	andi	r24, 0xF7	; 247
     a28:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a2e:	8f 77       	andi	r24, 0x7F	; 127
     a30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a34:	14 b8       	out	0x04, r1	; 4
     a36:	17 b8       	out	0x07, r1	; 7
     a38:	1a b8       	out	0x0a, r1	; 10
     a3a:	15 b8       	out	0x05, r1	; 5
     a3c:	18 b8       	out	0x08, r1	; 8
     a3e:	1b b8       	out	0x0b, r1	; 11
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	a8 95       	wdr
     a46:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a54:	80 64       	ori	r24, 0x40	; 64
     a56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a5a:	83 b7       	in	r24, 0x33	; 51
     a5c:	81 7f       	andi	r24, 0xF1	; 241
     a5e:	84 60       	ori	r24, 0x04	; 4
     a60:	83 bf       	out	0x33, r24	; 51
                cli();
     a62:	f8 94       	cli
                sleep_enable();
     a64:	83 b7       	in	r24, 0x33	; 51
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	83 bf       	out	0x33, r24	; 51
                sei();
     a6a:	78 94       	sei
                sleep_cpu();
     a6c:	88 95       	sleep
                sleep_disable();
     a6e:	83 b7       	in	r24, 0x33	; 51
     a70:	8e 7f       	andi	r24, 0xFE	; 254
     a72:	83 bf       	out	0x33, r24	; 51
                sei();
     a74:	78 94       	sei
                rx_busy = 0;
     a76:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     a7a:	52 9a       	sbi	0x0a, 2	; 10
     a7c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a82:	80 68       	ori	r24, 0x80	; 128
     a84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a88:	87 e5       	ldi	r24, 0x57	; 87
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <kilo_start+0x92>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <kilo_start+0x98>
     a92:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a94:	80 b7       	in	r24, 0x30	; 48
     a96:	88 61       	ori	r24, 0x18	; 24
     a98:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a9a:	8f e3       	ldi	r24, 0x3F	; 63
     a9c:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa0:	ef e1       	ldi	r30, 0x1F	; 31
     aa2:	fe e4       	ldi	r31, 0x4E	; 78
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <kilo_start+0xaa>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <kilo_start+0xb0>
     aaa:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     aac:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     ab0:	88 23       	and	r24, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <kilo_start+0xbc>
     ab4:	50 c0       	rjmp	.+160    	; 0xb56 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     abc:	ff ef       	ldi	r31, 0xFF	; 255
     abe:	20 e7       	ldi	r18, 0x70	; 112
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	f1 50       	subi	r31, 0x01	; 1
     ac4:	20 40       	sbci	r18, 0x00	; 0
     ac6:	80 40       	sbci	r24, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <kilo_start+0xc8>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <kilo_start+0xd2>
     acc:	00 00       	nop
     ace:	43 c0       	rjmp	.+134    	; 0xb56 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     ad0:	8c e0       	ldi	r24, 0x0C	; 12
     ad2:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     ad6:	ef ec       	ldi	r30, 0xCF	; 207
     ad8:	f7 e0       	ldi	r31, 0x07	; 7
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <kilo_start+0xe0>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <kilo_start+0xe6>
     ae0:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     ae8:	ff ef       	ldi	r31, 0xFF	; 255
     aea:	21 ee       	ldi	r18, 0xE1	; 225
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	f1 50       	subi	r31, 0x01	; 1
     af0:	20 40       	sbci	r18, 0x00	; 0
     af2:	80 40       	sbci	r24, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <kilo_start+0xf4>
     af6:	2c c0       	rjmp	.+88     	; 0xb50 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     af8:	0e 94 cd 02 	call	0x59a	; 0x59a <get_voltage>
                if(voltage > 682)
     afc:	8b 3a       	cpi	r24, 0xAB	; 171
     afe:	e2 e0       	ldi	r30, 0x02	; 2
     b00:	9e 07       	cpc	r25, r30
     b02:	24 f0       	brlt	.+8      	; 0xb0c <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b04:	8c e0       	ldi	r24, 0x0C	; 12
     b06:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     b0a:	81 cf       	rjmp	.-254    	; 0xa0e <kilo_start+0x14>
                else if(voltage > 648)
     b0c:	89 38       	cpi	r24, 0x89	; 137
     b0e:	f2 e0       	ldi	r31, 0x02	; 2
     b10:	9f 07       	cpc	r25, r31
     b12:	14 f0       	brlt	.+4      	; 0xb18 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	f7 cf       	rjmp	.-18     	; 0xb06 <kilo_start+0x10c>
                else if(voltage > 614)
     b18:	87 36       	cpi	r24, 0x67	; 103
     b1a:	92 40       	sbci	r25, 0x02	; 2
     b1c:	14 f0       	brlt	.+4      	; 0xb22 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b1e:	8f e0       	ldi	r24, 0x0F	; 15
     b20:	f2 cf       	rjmp	.-28     	; 0xb06 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	f0 cf       	rjmp	.-32     	; 0xb06 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b26:	48 99       	sbic	0x09, 0	; 9
     b28:	16 c0       	rjmp	.+44     	; 0xb56 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     b30:	8f ec       	ldi	r24, 0xCF	; 207
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <kilo_start+0x13a>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <kilo_start+0x140>
     b3a:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	e1 ee       	ldi	r30, 0xE1	; 225
     b46:	f4 e0       	ldi	r31, 0x04	; 4
     b48:	91 50       	subi	r25, 0x01	; 1
     b4a:	e0 40       	sbci	r30, 0x00	; 0
     b4c:	f0 40       	sbci	r31, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <kilo_start+0x14e>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <kilo_start+0x158>
     b52:	00 00       	nop
     b54:	5c cf       	rjmp	.-328    	; 0xa0e <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	d6 cf       	rjmp	.-84     	; 0xb06 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b5a:	d1 11       	cpse	r29, r1
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <kilo_start+0x168>
                    setup();
     b5e:	f8 01       	movw	r30, r16
     b60:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b62:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b66:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b68:	f7 01       	movw	r30, r14
     b6a:	09 95       	icall
                break;
     b6c:	50 cf       	rjmp	.-352    	; 0xa0e <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b6e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b72:	81 11       	cpse	r24, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b76:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b7e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b82:	45 cf       	rjmp	.-374    	; 0xa0e <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b84:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b88:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b8c:	98 17       	cp	r25, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <kilo_start+0x198>
     b90:	3e cf       	rjmp	.-388    	; 0xa0e <kilo_start+0x14>
                        prev_motion = cur_motion;
     b92:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b96:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b9a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	89 f4       	brne	.+34     	; 0xbc4 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ba6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     baa:	8f e2       	ldi	r24, 0x2F	; 47
     bac:	95 e7       	ldi	r25, 0x75	; 117
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <kilo_start+0x1b4>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <kilo_start+0x1ba>
     bb4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     bb6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bbe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bc2:	25 cf       	rjmp	.-438    	; 0xa0e <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bc4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bc8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bcc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	59 f4       	brne	.+22     	; 0xbea <kilo_start+0x1f0>
     bd4:	ef e2       	ldi	r30, 0x2F	; 47
     bd6:	f5 e7       	ldi	r31, 0x75	; 117
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <kilo_start+0x1de>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <kilo_start+0x1e4>
     bde:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     be0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     be4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <kilo_start+0x210>
     bea:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bee:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bf2:	8f e2       	ldi	r24, 0x2F	; 47
     bf4:	95 e7       	ldi	r25, 0x75	; 117
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <kilo_start+0x1fc>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <kilo_start+0x202>
     bfc:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bfe:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     c02:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c06:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c0a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c0e:	ff ce       	rjmp	.-514    	; 0xa0e <kilo_start+0x14>

00000c10 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
    rx_timer_off();
     c1e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     c30:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     c34:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     c38:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c3c:	93 ea       	ldi	r25, 0xA3	; 163
     c3e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c42:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c7a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c7e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c88:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     c8c:	88 23       	and	r24, r24
     c8e:	21 f1       	breq	.+72     	; 0xcd8 <__vector_23+0x84>
        rx_timer_on();
     c90:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c94:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c98:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c9c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     ca0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     ca4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     ca8:	88 23       	and	r24, r24
     caa:	09 f4       	brne	.+2      	; 0xcae <__vector_23+0x5a>
     cac:	af c1       	rjmp	.+862    	; 0x100c <__vector_23+0x3b8>
            adc_finish_conversion();
     cae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cb2:	86 fd       	sbrc	r24, 6
     cb4:	fc cf       	rjmp	.-8      	; 0xcae <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     cb6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cbe:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     cc2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ccc:	93 ea       	ldi	r25, 0xA3	; 163
     cce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cd2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cd6:	9a c1       	rjmp	.+820    	; 0x100c <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cd8:	c9 01       	movw	r24, r18
     cda:	87 58       	subi	r24, 0x87	; 135
     cdc:	91 09       	sbc	r25, r1
     cde:	84 37       	cpi	r24, 0x74	; 116
     ce0:	99 40       	sbci	r25, 0x09	; 9
     ce2:	a0 f0       	brcs	.+40     	; 0xd0c <__vector_23+0xb8>
            rx_timer_off();
     ce4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ce8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cf0:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     cf4:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     cf8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     cfc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d00:	83 ea       	ldi	r24, 0xA3	; 163
     d02:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d06:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d0a:	80 c1       	rjmp	.+768    	; 0x100c <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d0c:	26 58       	subi	r18, 0x86	; 134
     d0e:	31 09       	sbc	r19, r1
     d10:	a4 ef       	ldi	r26, 0xF4	; 244
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__umulhisi3>
     d18:	8c 01       	movw	r16, r24
     d1a:	22 27       	eor	r18, r18
     d1c:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d1e:	08 30       	cpi	r16, 0x08	; 8
     d20:	60 f4       	brcc	.+24     	; 0xd3a <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <__vector_23+0xd6>
     d28:	88 0f       	add	r24, r24
     d2a:	0a 95       	dec	r16
     d2c:	ea f7       	brpl	.-6      	; 0xd28 <__vector_23+0xd4>
     d2e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d32:	89 2b       	or	r24, r25
     d34:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     d38:	69 c1       	rjmp	.+722    	; 0x100c <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d3a:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     d3e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     d42:	88 23       	and	r24, r24
     d44:	41 f1       	breq	.+80     	; 0xd96 <__vector_23+0x142>
                    adc_finish_conversion();
     d46:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d4a:	86 fd       	sbrc	r24, 6
     d4c:	fc cf       	rjmp	.-8      	; 0xd46 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d4e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d52:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d56:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     d5a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     d5e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d62:	83 ea       	ldi	r24, 0xA3	; 163
     d64:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d6e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d72:	99 23       	and	r25, r25
     d74:	59 f0       	breq	.+22     	; 0xd8c <__vector_23+0x138>
                        rx_timer_off();
     d76:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d82:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     d86:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     d8a:	40 c1       	rjmp	.+640    	; 0x100c <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d8c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     d90:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     d94:	3b c1       	rjmp	.+630    	; 0x100c <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d96:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     d9a:	e8 2f       	mov	r30, r24
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e4 59       	subi	r30, 0x94	; 148
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     da6:	90 83       	st	Z, r25
                    rx_byteindex++;
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     dae:	8c 30       	cpi	r24, 0x0C	; 12
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__vector_23+0x160>
     db2:	2c c1       	rjmp	.+600    	; 0x100c <__vector_23+0x3b8>
                        rx_timer_off();
     db4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     db8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dbc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dc0:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     dc4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     dc8:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     dcc:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     dd0:	8c e6       	ldi	r24, 0x6C	; 108
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 19 08 	call	0x1032	; 0x1032 <message_crc>
     dd8:	08 17       	cp	r16, r24
     dda:	19 07       	cpc	r17, r25
     ddc:	09 f0       	breq	.+2      	; 0xde0 <__vector_23+0x18c>
     dde:	16 c1       	rjmp	.+556    	; 0x100c <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     de0:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     de4:	e7 fd       	sbrc	r30, 7
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     de8:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     dec:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     df0:	61 e4       	ldi	r22, 0x41	; 65
     df2:	71 e0       	ldi	r23, 0x01	; 1
     df4:	8c e6       	ldi	r24, 0x6C	; 108
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	09 95       	icall
     dfa:	08 c1       	rjmp	.+528    	; 0x100c <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     dfc:	88 e7       	ldi	r24, 0x78	; 120
     dfe:	8e 0f       	add	r24, r30
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	30 f0       	brcs	.+12     	; 0xe10 <__vector_23+0x1bc>
        motors_off();
     e04:	53 98       	cbi	0x0a, 3	; 10
     e06:	23 98       	cbi	0x04, 3	; 4
     e08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e10:	8e 2f       	mov	r24, r30
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	e0 58       	subi	r30, 0x80	; 128
     e18:	f1 09       	sbc	r31, r1
     e1a:	eb 30       	cpi	r30, 0x0B	; 11
     e1c:	f1 05       	cpc	r31, r1
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <__vector_23+0x1ce>
     e20:	f5 c0       	rjmp	.+490    	; 0x100c <__vector_23+0x3b8>
     e22:	e5 5c       	subi	r30, 0xC5	; 197
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e2a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e2e:	8d 7f       	andi	r24, 0xFD	; 253
     e30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e34:	16 bc       	out	0x26, r1	; 38
            bootload();
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f0 e7       	ldi	r31, 0x70	; 112
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e3c:	e0 e0       	ldi	r30, 0x00	; 0
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e42:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e46:	e2 c0       	rjmp	.+452    	; 0x100c <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	b2 c0       	rjmp	.+356    	; 0xfb0 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	b0 c0       	rjmp	.+352    	; 0xfb0 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	ae c0       	rjmp	.+348    	; 0xfb0 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e54:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	09 f4       	brne	.+2      	; 0xe5e <__vector_23+0x20a>
     e5c:	d7 c0       	rjmp	.+430    	; 0x100c <__vector_23+0x3b8>
     e5e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	09 f4       	brne	.+2      	; 0xe68 <__vector_23+0x214>
     e66:	d2 c0       	rjmp	.+420    	; 0x100c <__vector_23+0x3b8>
                motors_on();
     e68:	53 9a       	sbi	0x0a, 3	; 10
     e6a:	23 9a       	sbi	0x04, 3	; 4
     e6c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e70:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	9c c0       	rjmp	.+312    	; 0xfb0 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e78:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_23+0x22e>
     e80:	4b c0       	rjmp	.+150    	; 0xf18 <__vector_23+0x2c4>
     e82:	80 f4       	brcc	.+32     	; 0xea4 <__vector_23+0x250>
     e84:	88 23       	and	r24, r24
     e86:	a9 f0       	breq	.+42     	; 0xeb2 <__vector_23+0x25e>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <__vector_23+0x23a>
     e8c:	82 c0       	rjmp	.+260    	; 0xf92 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e8e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     e92:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     e96:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     e9a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     e9e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     ea2:	77 c0       	rjmp	.+238    	; 0xf92 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__vector_23+0x256>
     ea8:	49 c0       	rjmp	.+146    	; 0xf3c <__vector_23+0x2e8>
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	09 f4       	brne	.+2      	; 0xeb0 <__vector_23+0x25c>
     eae:	58 c0       	rjmp	.+176    	; 0xf60 <__vector_23+0x30c>
     eb0:	70 c0       	rjmp	.+224    	; 0xf92 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     eb2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     eb6:	86 30       	cpi	r24, 0x06	; 6
     eb8:	09 f0       	breq	.+2      	; 0xebc <__vector_23+0x268>
     eba:	6b c0       	rjmp	.+214    	; 0xf92 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     ebc:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     ec0:	80 eb       	ldi	r24, 0xB0	; 176
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     ec8:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     ecc:	81 eb       	ldi	r24, 0xB1	; 177
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ed4:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ee0:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     ee4:	89 e0       	ldi	r24, 0x09	; 9
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     eec:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     ef0:	8c e0       	ldi	r24, 0x0C	; 12
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ef8:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     efc:	84 e1       	ldi	r24, 0x14	; 20
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 24 0b 	call	0x1648	; 0x1648 <eeprom_write_byte>
                        motors_off();
     f04:	53 98       	cbi	0x0a, 3	; 10
     f06:	23 98       	cbi	0x04, 3	; 4
     f08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f16:	3d c0       	rjmp	.+122    	; 0xf92 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f18:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f1c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
     f20:	91 30       	cpi	r25, 0x01	; 1
     f22:	21 f4       	brne	.+8      	; 0xf2c <__vector_23+0x2d8>
     f24:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
     f28:	89 17       	cp	r24, r25
     f2a:	99 f1       	breq	.+102    	; 0xf92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f2c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f36:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
     f3a:	2b c0       	rjmp	.+86     	; 0xf92 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f3c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f40:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
     f44:	92 30       	cpi	r25, 0x02	; 2
     f46:	21 f4       	brne	.+8      	; 0xf50 <__vector_23+0x2fc>
     f48:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
     f4c:	89 17       	cp	r24, r25
     f4e:	09 f1       	breq	.+66     	; 0xf92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f50:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f5a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
     f5e:	19 c0       	rjmp	.+50     	; 0xf92 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f60:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f64:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
     f68:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
     f6c:	23 30       	cpi	r18, 0x03	; 3
     f6e:	41 f4       	brne	.+16     	; 0xf80 <__vector_23+0x32c>
     f70:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
     f74:	82 13       	cpse	r24, r18
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <__vector_23+0x32c>
     f78:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
     f7c:	92 17       	cp	r25, r18
     f7e:	49 f0       	breq	.+18     	; 0xf92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f80:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f84:	23 e0       	ldi	r18, 0x03	; 3
     f86:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f8a:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f8e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f92:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f96:	88 23       	and	r24, r24
     f98:	c9 f1       	breq	.+114    	; 0x100c <__vector_23+0x3b8>
     f9a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f9e:	86 30       	cpi	r24, 0x06	; 6
     fa0:	a9 f1       	breq	.+106    	; 0x100c <__vector_23+0x3b8>
                motors_on();
     fa2:	53 9a       	sbi	0x0a, 3	; 10
     fa4:	23 9a       	sbi	0x04, 3	; 4
     fa6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     faa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     fb4:	2b c0       	rjmp	.+86     	; 0x100c <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     fb6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     fba:	86 30       	cpi	r24, 0x06	; 6
     fbc:	81 f0       	breq	.+32     	; 0xfde <__vector_23+0x38a>
                motors_on();
     fbe:	53 9a       	sbi	0x0a, 3	; 10
     fc0:	23 9a       	sbi	0x04, 3	; 4
     fc2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fc6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0e 94 de 04 	call	0x9bc	; 0x9bc <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fd0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     fd4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <__vector_23+0x398>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <__vector_23+0x394>
     ff0:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
     ff4:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
     ff8:	82 23       	and	r24, r18
     ffa:	93 23       	and	r25, r19
     ffc:	89 2b       	or	r24, r25
     ffe:	21 f0       	breq	.+8      	; 0x1008 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1008:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1032:	fc 01       	movw	r30, r24
    1034:	9c 01       	movw	r18, r24
    1036:	26 5f       	subi	r18, 0xF6	; 246
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    103e:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1040:	84 27       	eor	r24, r20
    1042:	08 2e       	mov	r0, r24
    1044:	82 95       	swap	r24
    1046:	80 7f       	andi	r24, 0xF0	; 240
    1048:	80 25       	eor	r24, r0
    104a:	09 2e       	mov	r0, r25
    104c:	98 2f       	mov	r25, r24
    104e:	82 95       	swap	r24
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	08 26       	eor	r0, r24
    1054:	86 95       	lsr	r24
    1056:	98 27       	eor	r25, r24
    1058:	89 27       	eor	r24, r25
    105a:	88 0f       	add	r24, r24
    105c:	88 0f       	add	r24, r24
    105e:	88 0f       	add	r24, r24
    1060:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1062:	e2 17       	cp	r30, r18
    1064:	f3 07       	cpc	r31, r19
    1066:	59 f7       	brne	.-42     	; 0x103e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1068:	08 95       	ret

0000106a <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    106a:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    106c:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    106e:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1070:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    1074:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1076:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1078:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    107a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    107e:	20 30       	cpi	r18, 0x00	; 0
    1080:	29 f0       	breq	.+10     	; 0x108c <message_send+0x22>
    1082:	00 00       	nop
    1084:	25 b1       	in	r18, 0x05	; 5
    1086:	23 2b       	or	r18, r19
    1088:	25 b9       	out	0x05, r18	; 5
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <message_send+0x2a>
    108c:	00 00       	nop
    108e:	00 00       	nop
    1090:	00 00       	nop
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <message_send+0x2a>
    1094:	00 00       	nop
    1096:	00 00       	nop
    1098:	00 00       	nop
    109a:	30 95       	com	r19
    109c:	25 b1       	in	r18, 0x05	; 5
    109e:	23 23       	and	r18, r19
    10a0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    10a2:	2e ea       	ldi	r18, 0xAE	; 174
    10a4:	2a 95       	dec	r18
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    10a8:	2b ee       	ldi	r18, 0xEB	; 235

000010aa <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    10aa:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    10ac:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10b0:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10b2:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    10b6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10b8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10ba:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10bc:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10be:	0f be       	out	0x3f, r0	; 63
    return 0
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <nocollision>:
nocollision:
    nop
    10c4:	00 00       	nop
    dec tmpreg1
    10c6:	2a 95       	dec	r18
    brne checkcollision
    10c8:	81 f7       	brne	.-32     	; 0x10aa <checkcollision>

    ldi tmpreg1, 0x01
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10cc:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    10d0:	20 30       	cpi	r18, 0x00	; 0
    10d2:	29 f0       	breq	.+10     	; 0x10de <nocollision+0x1a>
    10d4:	00 00       	nop
    10d6:	25 b1       	in	r18, 0x05	; 5
    10d8:	23 2b       	or	r18, r19
    10da:	25 b9       	out	0x05, r18	; 5
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <nocollision+0x22>
    10de:	00 00       	nop
    10e0:	00 00       	nop
    10e2:	00 00       	nop
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <nocollision+0x22>
    10e6:	00 00       	nop
    10e8:	00 00       	nop
    10ea:	00 00       	nop
    10ec:	30 95       	com	r19
    10ee:	25 b1       	in	r18, 0x05	; 5
    10f0:	23 23       	and	r18, r19
    10f2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10f4:	00 00       	nop
    10f6:	24 e5       	ldi	r18, 0x54	; 84
    10f8:	2a 95       	dec	r18
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10fc:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10fe:	8c e0       	ldi	r24, 0x0C	; 12

00001100 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1100:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1102:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1104:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1106:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1108:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    110a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    110c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    110e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1110:	50 e0       	ldi	r21, 0x00	; 0

00001112 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1112:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1114:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1116:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1118:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    111a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    111e:	20 30       	cpi	r18, 0x00	; 0
    1120:	29 f0       	breq	.+10     	; 0x112c <sendbit+0x1a>
    1122:	00 00       	nop
    1124:	25 b1       	in	r18, 0x05	; 5
    1126:	23 2b       	or	r18, r19
    1128:	25 b9       	out	0x05, r18	; 5
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <sendbit+0x22>
    112c:	00 00       	nop
    112e:	00 00       	nop
    1130:	00 00       	nop
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <sendbit+0x22>
    1134:	00 00       	nop
    1136:	00 00       	nop
    1138:	00 00       	nop
    113a:	30 95       	com	r19
    113c:	25 b1       	in	r18, 0x05	; 5
    113e:	23 23       	and	r18, r19
    1140:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1142:	00 00       	nop
    1144:	21 e5       	ldi	r18, 0x51	; 81
    1146:	2a 95       	dec	r18
    1148:	f1 f7       	brne	.-4      	; 0x1146 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    114a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    114c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    114e:	9a 95       	dec	r25
    brne sendbit
    1150:	01 f7       	brne	.-64     	; 0x1112 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1152:	8a 95       	dec	r24
    brne sendbyte
    1154:	a9 f6       	brne	.-86     	; 0x1100 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1156:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1158:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    115a:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    115c:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    115e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    1162:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1164:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1166:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1168:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    116a:	0f be       	out	0x3f, r0	; 63
    return 1
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	08 95       	ret

00001170 <main>:
  }
}

int main() {
  kilo_init();
    1170:	0e 94 05 01 	call	0x20a	; 0x20a <kilo_init>
  kilo_message_tx = message_tx;
    1174:	81 e7       	ldi	r24, 0x71	; 113
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    117c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    1180:	84 e7       	ldi	r24, 0x74	; 116
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    1188:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);
    118c:	62 eb       	ldi	r22, 0xB2	; 178
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	8b e7       	ldi	r24, 0x7B	; 123
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 fd 04 	call	0x9fa	; 0x9fa <kilo_start>

  return 0;
}
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	08 95       	ret

0000119e <__divmodhi4>:
    119e:	97 fb       	bst	r25, 7
    11a0:	07 2e       	mov	r0, r23
    11a2:	16 f4       	brtc	.+4      	; 0x11a8 <__divmodhi4+0xa>
    11a4:	00 94       	com	r0
    11a6:	07 d0       	rcall	.+14     	; 0x11b6 <__divmodhi4_neg1>
    11a8:	77 fd       	sbrc	r23, 7
    11aa:	09 d0       	rcall	.+18     	; 0x11be <__divmodhi4_neg2>
    11ac:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__udivmodhi4>
    11b0:	07 fc       	sbrc	r0, 7
    11b2:	05 d0       	rcall	.+10     	; 0x11be <__divmodhi4_neg2>
    11b4:	3e f4       	brtc	.+14     	; 0x11c4 <__divmodhi4_exit>

000011b6 <__divmodhi4_neg1>:
    11b6:	90 95       	com	r25
    11b8:	81 95       	neg	r24
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <__divmodhi4_neg2>:
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255

000011c4 <__divmodhi4_exit>:
    11c4:	08 95       	ret

000011c6 <__tablejump2__>:
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	05 90       	lpm	r0, Z+
    11cc:	f4 91       	lpm	r31, Z
    11ce:	e0 2d       	mov	r30, r0
    11d0:	09 94       	ijmp

000011d2 <__umulhisi3>:
    11d2:	a2 9f       	mul	r26, r18
    11d4:	b0 01       	movw	r22, r0
    11d6:	b3 9f       	mul	r27, r19
    11d8:	c0 01       	movw	r24, r0
    11da:	a3 9f       	mul	r26, r19
    11dc:	70 0d       	add	r23, r0
    11de:	81 1d       	adc	r24, r1
    11e0:	11 24       	eor	r1, r1
    11e2:	91 1d       	adc	r25, r1
    11e4:	b2 9f       	mul	r27, r18
    11e6:	70 0d       	add	r23, r0
    11e8:	81 1d       	adc	r24, r1
    11ea:	11 24       	eor	r1, r1
    11ec:	91 1d       	adc	r25, r1
    11ee:	08 95       	ret

000011f0 <__udivmodhi4>:
    11f0:	aa 1b       	sub	r26, r26
    11f2:	bb 1b       	sub	r27, r27
    11f4:	51 e1       	ldi	r21, 0x11	; 17
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <__udivmodhi4_ep>

000011f8 <__udivmodhi4_loop>:
    11f8:	aa 1f       	adc	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	a6 17       	cp	r26, r22
    11fe:	b7 07       	cpc	r27, r23
    1200:	10 f0       	brcs	.+4      	; 0x1206 <__udivmodhi4_ep>
    1202:	a6 1b       	sub	r26, r22
    1204:	b7 0b       	sbc	r27, r23

00001206 <__udivmodhi4_ep>:
    1206:	88 1f       	adc	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	5a 95       	dec	r21
    120c:	a9 f7       	brne	.-22     	; 0x11f8 <__udivmodhi4_loop>
    120e:	80 95       	com	r24
    1210:	90 95       	com	r25
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	08 95       	ret

00001218 <__subsf3>:
    1218:	50 58       	subi	r21, 0x80	; 128

0000121a <__addsf3>:
    121a:	bb 27       	eor	r27, r27
    121c:	aa 27       	eor	r26, r26
    121e:	0e 94 24 09 	call	0x1248	; 0x1248 <__addsf3x>
    1222:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_round>
    1226:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fp_pscA>
    122a:	38 f0       	brcs	.+14     	; 0x123a <__addsf3+0x20>
    122c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fp_pscB>
    1230:	20 f0       	brcs	.+8      	; 0x123a <__addsf3+0x20>
    1232:	39 f4       	brne	.+14     	; 0x1242 <__addsf3+0x28>
    1234:	9f 3f       	cpi	r25, 0xFF	; 255
    1236:	19 f4       	brne	.+6      	; 0x123e <__addsf3+0x24>
    1238:	26 f4       	brtc	.+8      	; 0x1242 <__addsf3+0x28>
    123a:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_nan>
    123e:	0e f4       	brtc	.+2      	; 0x1242 <__addsf3+0x28>
    1240:	e0 95       	com	r30
    1242:	e7 fb       	bst	r30, 7
    1244:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>

00001248 <__addsf3x>:
    1248:	e9 2f       	mov	r30, r25
    124a:	0e 94 86 0a 	call	0x150c	; 0x150c <__fp_split3>
    124e:	58 f3       	brcs	.-42     	; 0x1226 <__addsf3+0xc>
    1250:	ba 17       	cp	r27, r26
    1252:	62 07       	cpc	r22, r18
    1254:	73 07       	cpc	r23, r19
    1256:	84 07       	cpc	r24, r20
    1258:	95 07       	cpc	r25, r21
    125a:	20 f0       	brcs	.+8      	; 0x1264 <__addsf3x+0x1c>
    125c:	79 f4       	brne	.+30     	; 0x127c <__addsf3x+0x34>
    125e:	a6 f5       	brtc	.+104    	; 0x12c8 <__addsf3x+0x80>
    1260:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_zero>
    1264:	0e f4       	brtc	.+2      	; 0x1268 <__addsf3x+0x20>
    1266:	e0 95       	com	r30
    1268:	0b 2e       	mov	r0, r27
    126a:	ba 2f       	mov	r27, r26
    126c:	a0 2d       	mov	r26, r0
    126e:	0b 01       	movw	r0, r22
    1270:	b9 01       	movw	r22, r18
    1272:	90 01       	movw	r18, r0
    1274:	0c 01       	movw	r0, r24
    1276:	ca 01       	movw	r24, r20
    1278:	a0 01       	movw	r20, r0
    127a:	11 24       	eor	r1, r1
    127c:	ff 27       	eor	r31, r31
    127e:	59 1b       	sub	r21, r25
    1280:	99 f0       	breq	.+38     	; 0x12a8 <__addsf3x+0x60>
    1282:	59 3f       	cpi	r21, 0xF9	; 249
    1284:	50 f4       	brcc	.+20     	; 0x129a <__addsf3x+0x52>
    1286:	50 3e       	cpi	r21, 0xE0	; 224
    1288:	68 f1       	brcs	.+90     	; 0x12e4 <__addsf3x+0x9c>
    128a:	1a 16       	cp	r1, r26
    128c:	f0 40       	sbci	r31, 0x00	; 0
    128e:	a2 2f       	mov	r26, r18
    1290:	23 2f       	mov	r18, r19
    1292:	34 2f       	mov	r19, r20
    1294:	44 27       	eor	r20, r20
    1296:	58 5f       	subi	r21, 0xF8	; 248
    1298:	f3 cf       	rjmp	.-26     	; 0x1280 <__addsf3x+0x38>
    129a:	46 95       	lsr	r20
    129c:	37 95       	ror	r19
    129e:	27 95       	ror	r18
    12a0:	a7 95       	ror	r26
    12a2:	f0 40       	sbci	r31, 0x00	; 0
    12a4:	53 95       	inc	r21
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__addsf3x+0x52>
    12a8:	7e f4       	brtc	.+30     	; 0x12c8 <__addsf3x+0x80>
    12aa:	1f 16       	cp	r1, r31
    12ac:	ba 0b       	sbc	r27, r26
    12ae:	62 0b       	sbc	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	ba f0       	brmi	.+46     	; 0x12e4 <__addsf3x+0x9c>
    12b6:	91 50       	subi	r25, 0x01	; 1
    12b8:	a1 f0       	breq	.+40     	; 0x12e2 <__addsf3x+0x9a>
    12ba:	ff 0f       	add	r31, r31
    12bc:	bb 1f       	adc	r27, r27
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	c2 f7       	brpl	.-16     	; 0x12b6 <__addsf3x+0x6e>
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <__addsf3x+0x9c>
    12c8:	ba 0f       	add	r27, r26
    12ca:	62 1f       	adc	r22, r18
    12cc:	73 1f       	adc	r23, r19
    12ce:	84 1f       	adc	r24, r20
    12d0:	48 f4       	brcc	.+18     	; 0x12e4 <__addsf3x+0x9c>
    12d2:	87 95       	ror	r24
    12d4:	77 95       	ror	r23
    12d6:	67 95       	ror	r22
    12d8:	b7 95       	ror	r27
    12da:	f7 95       	ror	r31
    12dc:	9e 3f       	cpi	r25, 0xFE	; 254
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <__addsf3x+0x9a>
    12e0:	b0 cf       	rjmp	.-160    	; 0x1242 <__addsf3+0x28>
    12e2:	93 95       	inc	r25
    12e4:	88 0f       	add	r24, r24
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__addsf3x+0xa2>
    12e8:	99 27       	eor	r25, r25
    12ea:	ee 0f       	add	r30, r30
    12ec:	97 95       	ror	r25
    12ee:	87 95       	ror	r24
    12f0:	08 95       	ret

000012f2 <__divsf3>:
    12f2:	0e 94 8d 09 	call	0x131a	; 0x131a <__divsf3x>
    12f6:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_round>
    12fa:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fp_pscB>
    12fe:	58 f0       	brcs	.+22     	; 0x1316 <__divsf3+0x24>
    1300:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fp_pscA>
    1304:	40 f0       	brcs	.+16     	; 0x1316 <__divsf3+0x24>
    1306:	29 f4       	brne	.+10     	; 0x1312 <__divsf3+0x20>
    1308:	5f 3f       	cpi	r21, 0xFF	; 255
    130a:	29 f0       	breq	.+10     	; 0x1316 <__divsf3+0x24>
    130c:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    1310:	51 11       	cpse	r21, r1
    1312:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_szero>
    1316:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_nan>

0000131a <__divsf3x>:
    131a:	0e 94 86 0a 	call	0x150c	; 0x150c <__fp_split3>
    131e:	68 f3       	brcs	.-38     	; 0x12fa <__divsf3+0x8>

00001320 <__divsf3_pse>:
    1320:	99 23       	and	r25, r25
    1322:	b1 f3       	breq	.-20     	; 0x1310 <__divsf3+0x1e>
    1324:	55 23       	and	r21, r21
    1326:	91 f3       	breq	.-28     	; 0x130c <__divsf3+0x1a>
    1328:	95 1b       	sub	r25, r21
    132a:	55 0b       	sbc	r21, r21
    132c:	bb 27       	eor	r27, r27
    132e:	aa 27       	eor	r26, r26
    1330:	62 17       	cp	r22, r18
    1332:	73 07       	cpc	r23, r19
    1334:	84 07       	cpc	r24, r20
    1336:	38 f0       	brcs	.+14     	; 0x1346 <__divsf3_pse+0x26>
    1338:	9f 5f       	subi	r25, 0xFF	; 255
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	44 1f       	adc	r20, r20
    1342:	aa 1f       	adc	r26, r26
    1344:	a9 f3       	breq	.-22     	; 0x1330 <__divsf3_pse+0x10>
    1346:	35 d0       	rcall	.+106    	; 0x13b2 <__divsf3_pse+0x92>
    1348:	0e 2e       	mov	r0, r30
    134a:	3a f0       	brmi	.+14     	; 0x135a <__divsf3_pse+0x3a>
    134c:	e0 e8       	ldi	r30, 0x80	; 128
    134e:	32 d0       	rcall	.+100    	; 0x13b4 <__divsf3_pse+0x94>
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	e6 95       	lsr	r30
    1356:	00 1c       	adc	r0, r0
    1358:	ca f7       	brpl	.-14     	; 0x134c <__divsf3_pse+0x2c>
    135a:	2b d0       	rcall	.+86     	; 0x13b2 <__divsf3_pse+0x92>
    135c:	fe 2f       	mov	r31, r30
    135e:	29 d0       	rcall	.+82     	; 0x13b2 <__divsf3_pse+0x92>
    1360:	66 0f       	add	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	bb 1f       	adc	r27, r27
    1368:	26 17       	cp	r18, r22
    136a:	37 07       	cpc	r19, r23
    136c:	48 07       	cpc	r20, r24
    136e:	ab 07       	cpc	r26, r27
    1370:	b0 e8       	ldi	r27, 0x80	; 128
    1372:	09 f0       	breq	.+2      	; 0x1376 <__divsf3_pse+0x56>
    1374:	bb 0b       	sbc	r27, r27
    1376:	80 2d       	mov	r24, r0
    1378:	bf 01       	movw	r22, r30
    137a:	ff 27       	eor	r31, r31
    137c:	93 58       	subi	r25, 0x83	; 131
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	3a f0       	brmi	.+14     	; 0x1390 <__divsf3_pse+0x70>
    1382:	9e 3f       	cpi	r25, 0xFE	; 254
    1384:	51 05       	cpc	r21, r1
    1386:	78 f0       	brcs	.+30     	; 0x13a6 <__divsf3_pse+0x86>
    1388:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    138c:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_szero>
    1390:	5f 3f       	cpi	r21, 0xFF	; 255
    1392:	e4 f3       	brlt	.-8      	; 0x138c <__divsf3_pse+0x6c>
    1394:	98 3e       	cpi	r25, 0xE8	; 232
    1396:	d4 f3       	brlt	.-12     	; 0x138c <__divsf3_pse+0x6c>
    1398:	86 95       	lsr	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	b7 95       	ror	r27
    13a0:	f7 95       	ror	r31
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__divsf3_pse+0x78>
    13a6:	88 0f       	add	r24, r24
    13a8:	91 1d       	adc	r25, r1
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret
    13b2:	e1 e0       	ldi	r30, 0x01	; 1
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	bb 1f       	adc	r27, r27
    13bc:	62 17       	cp	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	84 07       	cpc	r24, r20
    13c2:	ba 07       	cpc	r27, r26
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__divsf3_pse+0xae>
    13c6:	62 1b       	sub	r22, r18
    13c8:	73 0b       	sbc	r23, r19
    13ca:	84 0b       	sbc	r24, r20
    13cc:	ba 0b       	sbc	r27, r26
    13ce:	ee 1f       	adc	r30, r30
    13d0:	88 f7       	brcc	.-30     	; 0x13b4 <__divsf3_pse+0x94>
    13d2:	e0 95       	com	r30
    13d4:	08 95       	ret

000013d6 <__fixsfsi>:
    13d6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fixunssfsi>
    13da:	68 94       	set
    13dc:	b1 11       	cpse	r27, r1
    13de:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_szero>
    13e2:	08 95       	ret

000013e4 <__fixunssfsi>:
    13e4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_splitA>
    13e8:	88 f0       	brcs	.+34     	; 0x140c <__fixunssfsi+0x28>
    13ea:	9f 57       	subi	r25, 0x7F	; 127
    13ec:	98 f0       	brcs	.+38     	; 0x1414 <__fixunssfsi+0x30>
    13ee:	b9 2f       	mov	r27, r25
    13f0:	99 27       	eor	r25, r25
    13f2:	b7 51       	subi	r27, 0x17	; 23
    13f4:	b0 f0       	brcs	.+44     	; 0x1422 <__fixunssfsi+0x3e>
    13f6:	e1 f0       	breq	.+56     	; 0x1430 <__fixunssfsi+0x4c>
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	1a f0       	brmi	.+6      	; 0x1408 <__fixunssfsi+0x24>
    1402:	ba 95       	dec	r27
    1404:	c9 f7       	brne	.-14     	; 0x13f8 <__fixunssfsi+0x14>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <__fixunssfsi+0x4c>
    1408:	b1 30       	cpi	r27, 0x01	; 1
    140a:	91 f0       	breq	.+36     	; 0x1430 <__fixunssfsi+0x4c>
    140c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_zero>
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	08 95       	ret
    1414:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_zero>
    1418:	67 2f       	mov	r22, r23
    141a:	78 2f       	mov	r23, r24
    141c:	88 27       	eor	r24, r24
    141e:	b8 5f       	subi	r27, 0xF8	; 248
    1420:	39 f0       	breq	.+14     	; 0x1430 <__fixunssfsi+0x4c>
    1422:	b9 3f       	cpi	r27, 0xF9	; 249
    1424:	cc f3       	brlt	.-14     	; 0x1418 <__fixunssfsi+0x34>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b3 95       	inc	r27
    142e:	d9 f7       	brne	.-10     	; 0x1426 <__fixunssfsi+0x42>
    1430:	3e f4       	brtc	.+14     	; 0x1440 <__fixunssfsi+0x5c>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	08 95       	ret

00001442 <__floatunsisf>:
    1442:	e8 94       	clt
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <__floatsisf+0x12>

00001446 <__floatsisf>:
    1446:	97 fb       	bst	r25, 7
    1448:	3e f4       	brtc	.+14     	; 0x1458 <__floatsisf+0x12>
    144a:	90 95       	com	r25
    144c:	80 95       	com	r24
    144e:	70 95       	com	r23
    1450:	61 95       	neg	r22
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	99 23       	and	r25, r25
    145a:	a9 f0       	breq	.+42     	; 0x1486 <__floatsisf+0x40>
    145c:	f9 2f       	mov	r31, r25
    145e:	96 e9       	ldi	r25, 0x96	; 150
    1460:	bb 27       	eor	r27, r27
    1462:	93 95       	inc	r25
    1464:	f6 95       	lsr	r31
    1466:	87 95       	ror	r24
    1468:	77 95       	ror	r23
    146a:	67 95       	ror	r22
    146c:	b7 95       	ror	r27
    146e:	f1 11       	cpse	r31, r1
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <__floatsisf+0x1c>
    1472:	fa f4       	brpl	.+62     	; 0x14b2 <__floatsisf+0x6c>
    1474:	bb 0f       	add	r27, r27
    1476:	11 f4       	brne	.+4      	; 0x147c <__floatsisf+0x36>
    1478:	60 ff       	sbrs	r22, 0
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <__floatsisf+0x6c>
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <__floatsisf+0x6c>
    1486:	88 23       	and	r24, r24
    1488:	11 f0       	breq	.+4      	; 0x148e <__floatsisf+0x48>
    148a:	96 e9       	ldi	r25, 0x96	; 150
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <__floatsisf+0x6a>
    148e:	77 23       	and	r23, r23
    1490:	21 f0       	breq	.+8      	; 0x149a <__floatsisf+0x54>
    1492:	9e e8       	ldi	r25, 0x8E	; 142
    1494:	87 2f       	mov	r24, r23
    1496:	76 2f       	mov	r23, r22
    1498:	05 c0       	rjmp	.+10     	; 0x14a4 <__floatsisf+0x5e>
    149a:	66 23       	and	r22, r22
    149c:	71 f0       	breq	.+28     	; 0x14ba <__floatsisf+0x74>
    149e:	96 e8       	ldi	r25, 0x86	; 134
    14a0:	86 2f       	mov	r24, r22
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	2a f0       	brmi	.+10     	; 0x14b2 <__floatsisf+0x6c>
    14a8:	9a 95       	dec	r25
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	da f7       	brpl	.-10     	; 0x14a8 <__floatsisf+0x62>
    14b2:	88 0f       	add	r24, r24
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_inf>:
    14bc:	97 f9       	bld	r25, 7
    14be:	9f 67       	ori	r25, 0x7F	; 127
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <__fp_nan>:
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	80 ec       	ldi	r24, 0xC0	; 192
    14cc:	08 95       	ret

000014ce <__fp_pscA>:
    14ce:	00 24       	eor	r0, r0
    14d0:	0a 94       	dec	r0
    14d2:	16 16       	cp	r1, r22
    14d4:	17 06       	cpc	r1, r23
    14d6:	18 06       	cpc	r1, r24
    14d8:	09 06       	cpc	r0, r25
    14da:	08 95       	ret

000014dc <__fp_pscB>:
    14dc:	00 24       	eor	r0, r0
    14de:	0a 94       	dec	r0
    14e0:	12 16       	cp	r1, r18
    14e2:	13 06       	cpc	r1, r19
    14e4:	14 06       	cpc	r1, r20
    14e6:	05 06       	cpc	r0, r21
    14e8:	08 95       	ret

000014ea <__fp_round>:
    14ea:	09 2e       	mov	r0, r25
    14ec:	03 94       	inc	r0
    14ee:	00 0c       	add	r0, r0
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__fp_round+0xc>
    14f2:	88 23       	and	r24, r24
    14f4:	52 f0       	brmi	.+20     	; 0x150a <__fp_round+0x20>
    14f6:	bb 0f       	add	r27, r27
    14f8:	40 f4       	brcc	.+16     	; 0x150a <__fp_round+0x20>
    14fa:	bf 2b       	or	r27, r31
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__fp_round+0x18>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	04 c0       	rjmp	.+8      	; 0x150a <__fp_round+0x20>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	08 95       	ret

0000150c <__fp_split3>:
    150c:	57 fd       	sbrc	r21, 7
    150e:	90 58       	subi	r25, 0x80	; 128
    1510:	44 0f       	add	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	59 f0       	breq	.+22     	; 0x152c <__fp_splitA+0x10>
    1516:	5f 3f       	cpi	r21, 0xFF	; 255
    1518:	71 f0       	breq	.+28     	; 0x1536 <__fp_splitA+0x1a>
    151a:	47 95       	ror	r20

0000151c <__fp_splitA>:
    151c:	88 0f       	add	r24, r24
    151e:	97 fb       	bst	r25, 7
    1520:	99 1f       	adc	r25, r25
    1522:	61 f0       	breq	.+24     	; 0x153c <__fp_splitA+0x20>
    1524:	9f 3f       	cpi	r25, 0xFF	; 255
    1526:	79 f0       	breq	.+30     	; 0x1546 <__fp_splitA+0x2a>
    1528:	87 95       	ror	r24
    152a:	08 95       	ret
    152c:	12 16       	cp	r1, r18
    152e:	13 06       	cpc	r1, r19
    1530:	14 06       	cpc	r1, r20
    1532:	55 1f       	adc	r21, r21
    1534:	f2 cf       	rjmp	.-28     	; 0x151a <__fp_split3+0xe>
    1536:	46 95       	lsr	r20
    1538:	f1 df       	rcall	.-30     	; 0x151c <__fp_splitA>
    153a:	08 c0       	rjmp	.+16     	; 0x154c <__fp_splitA+0x30>
    153c:	16 16       	cp	r1, r22
    153e:	17 06       	cpc	r1, r23
    1540:	18 06       	cpc	r1, r24
    1542:	99 1f       	adc	r25, r25
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <__fp_splitA+0xc>
    1546:	86 95       	lsr	r24
    1548:	71 05       	cpc	r23, r1
    154a:	61 05       	cpc	r22, r1
    154c:	08 94       	sec
    154e:	08 95       	ret

00001550 <__fp_zero>:
    1550:	e8 94       	clt

00001552 <__fp_szero>:
    1552:	bb 27       	eor	r27, r27
    1554:	66 27       	eor	r22, r22
    1556:	77 27       	eor	r23, r23
    1558:	cb 01       	movw	r24, r22
    155a:	97 f9       	bld	r25, 7
    155c:	08 95       	ret

0000155e <__mulsf3>:
    155e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__mulsf3x>
    1562:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_round>
    1566:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fp_pscA>
    156a:	38 f0       	brcs	.+14     	; 0x157a <__mulsf3+0x1c>
    156c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fp_pscB>
    1570:	20 f0       	brcs	.+8      	; 0x157a <__mulsf3+0x1c>
    1572:	95 23       	and	r25, r21
    1574:	11 f0       	breq	.+4      	; 0x157a <__mulsf3+0x1c>
    1576:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    157a:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_nan>
    157e:	11 24       	eor	r1, r1
    1580:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_szero>

00001584 <__mulsf3x>:
    1584:	0e 94 86 0a 	call	0x150c	; 0x150c <__fp_split3>
    1588:	70 f3       	brcs	.-36     	; 0x1566 <__mulsf3+0x8>

0000158a <__mulsf3_pse>:
    158a:	95 9f       	mul	r25, r21
    158c:	c1 f3       	breq	.-16     	; 0x157e <__mulsf3+0x20>
    158e:	95 0f       	add	r25, r21
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	55 1f       	adc	r21, r21
    1594:	62 9f       	mul	r22, r18
    1596:	f0 01       	movw	r30, r0
    1598:	72 9f       	mul	r23, r18
    159a:	bb 27       	eor	r27, r27
    159c:	f0 0d       	add	r31, r0
    159e:	b1 1d       	adc	r27, r1
    15a0:	63 9f       	mul	r22, r19
    15a2:	aa 27       	eor	r26, r26
    15a4:	f0 0d       	add	r31, r0
    15a6:	b1 1d       	adc	r27, r1
    15a8:	aa 1f       	adc	r26, r26
    15aa:	64 9f       	mul	r22, r20
    15ac:	66 27       	eor	r22, r22
    15ae:	b0 0d       	add	r27, r0
    15b0:	a1 1d       	adc	r26, r1
    15b2:	66 1f       	adc	r22, r22
    15b4:	82 9f       	mul	r24, r18
    15b6:	22 27       	eor	r18, r18
    15b8:	b0 0d       	add	r27, r0
    15ba:	a1 1d       	adc	r26, r1
    15bc:	62 1f       	adc	r22, r18
    15be:	73 9f       	mul	r23, r19
    15c0:	b0 0d       	add	r27, r0
    15c2:	a1 1d       	adc	r26, r1
    15c4:	62 1f       	adc	r22, r18
    15c6:	83 9f       	mul	r24, r19
    15c8:	a0 0d       	add	r26, r0
    15ca:	61 1d       	adc	r22, r1
    15cc:	22 1f       	adc	r18, r18
    15ce:	74 9f       	mul	r23, r20
    15d0:	33 27       	eor	r19, r19
    15d2:	a0 0d       	add	r26, r0
    15d4:	61 1d       	adc	r22, r1
    15d6:	23 1f       	adc	r18, r19
    15d8:	84 9f       	mul	r24, r20
    15da:	60 0d       	add	r22, r0
    15dc:	21 1d       	adc	r18, r1
    15de:	82 2f       	mov	r24, r18
    15e0:	76 2f       	mov	r23, r22
    15e2:	6a 2f       	mov	r22, r26
    15e4:	11 24       	eor	r1, r1
    15e6:	9f 57       	subi	r25, 0x7F	; 127
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	9a f0       	brmi	.+38     	; 0x1612 <__mulsf3_pse+0x88>
    15ec:	f1 f0       	breq	.+60     	; 0x162a <__mulsf3_pse+0xa0>
    15ee:	88 23       	and	r24, r24
    15f0:	4a f0       	brmi	.+18     	; 0x1604 <__mulsf3_pse+0x7a>
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	bb 1f       	adc	r27, r27
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	a9 f7       	brne	.-22     	; 0x15ee <__mulsf3_pse+0x64>
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	51 05       	cpc	r21, r1
    1608:	80 f0       	brcs	.+32     	; 0x162a <__mulsf3_pse+0xa0>
    160a:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    160e:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__fp_szero>
    1612:	5f 3f       	cpi	r21, 0xFF	; 255
    1614:	e4 f3       	brlt	.-8      	; 0x160e <__mulsf3_pse+0x84>
    1616:	98 3e       	cpi	r25, 0xE8	; 232
    1618:	d4 f3       	brlt	.-12     	; 0x160e <__mulsf3_pse+0x84>
    161a:	86 95       	lsr	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b7 95       	ror	r27
    1622:	f7 95       	ror	r31
    1624:	e7 95       	ror	r30
    1626:	9f 5f       	subi	r25, 0xFF	; 255
    1628:	c1 f7       	brne	.-16     	; 0x161a <__mulsf3_pse+0x90>
    162a:	fe 2b       	or	r31, r30
    162c:	88 0f       	add	r24, r24
    162e:	91 1d       	adc	r25, r1
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	97 f9       	bld	r25, 7
    1636:	08 95       	ret

00001638 <eeprom_read_byte>:
    1638:	f9 99       	sbic	0x1f, 1	; 31
    163a:	fe cf       	rjmp	.-4      	; 0x1638 <eeprom_read_byte>
    163c:	92 bd       	out	0x22, r25	; 34
    163e:	81 bd       	out	0x21, r24	; 33
    1640:	f8 9a       	sbi	0x1f, 0	; 31
    1642:	99 27       	eor	r25, r25
    1644:	80 b5       	in	r24, 0x20	; 32
    1646:	08 95       	ret

00001648 <eeprom_write_byte>:
    1648:	26 2f       	mov	r18, r22

0000164a <eeprom_write_r18>:
    164a:	f9 99       	sbic	0x1f, 1	; 31
    164c:	fe cf       	rjmp	.-4      	; 0x164a <eeprom_write_r18>
    164e:	1f ba       	out	0x1f, r1	; 31
    1650:	92 bd       	out	0x22, r25	; 34
    1652:	81 bd       	out	0x21, r24	; 33
    1654:	20 bd       	out	0x20, r18	; 32
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	fa 9a       	sbi	0x1f, 2	; 31
    165c:	f9 9a       	sbi	0x1f, 1	; 31
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	08 95       	ret

00001664 <_exit>:
    1664:	f8 94       	cli

00001666 <__stop_program>:
    1666:	ff cf       	rjmp	.-2      	; 0x1666 <__stop_program>
