
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	54 05       	cpc	r21, r4
      6a:	ab 05       	cpc	r26, r11
      6c:	bf 05       	cpc	r27, r15
      6e:	f0 05       	cpc	r31, r0
      70:	f7 05       	cpc	r31, r7
      72:	d6 05       	cpc	r29, r6
      74:	fa 05       	cpc	r31, r10
      76:	58 07       	cpc	r21, r24
      78:	49 08       	sbc	r4, r9
      7a:	49 08       	sbc	r4, r9
      7c:	61 07       	cpc	r22, r17
      7e:	64 07       	cpc	r22, r20
      80:	67 07       	cpc	r22, r23
      82:	69 07       	cpc	r22, r25
      84:	6b 07       	cpc	r22, r27
      86:	6d 07       	cpc	r22, r29
      88:	1e 08       	sbc	r1, r14
      8a:	7f 07       	cpc	r23, r31

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e7       	ldi	r30, 0x70	; 112
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 37       	cpi	r26, 0x7E	; 126
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <main>
      da:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

// Functions continuously called to emit a message, like a beacon
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	84 e1       	ldi	r24, 0x14	; 20
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <message_sent+0x1>
      f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <message_sent>
      f4:	08 95       	ret

000000f6 <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
      f6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
      fa:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_straight_right>
      fe:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_straight_left>
     102:	0c 94 4f 02 	jmp	0x49e	; 0x49e <set_motors>

00000106 <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     112:	c1 2c       	mov	r12, r1
     114:	d1 2c       	mov	r13, r1
     116:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     11c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     120:	8f 3f       	cpi	r24, 0xFF	; 255
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	92 07       	cpc	r25, r18
     126:	49 f0       	breq	.+18     	; 0x13a <sample_light+0x34>
            sum = sum + sample;
     128:	09 2e       	mov	r0, r25
     12a:	00 0c       	add	r0, r0
     12c:	aa 0b       	sbc	r26, r26
     12e:	bb 0b       	sbc	r27, r27
     130:	c8 0e       	add	r12, r24
     132:	d9 1e       	adc	r13, r25
     134:	ea 1e       	adc	r14, r26
     136:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     138:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     13a:	cc 32       	cpi	r28, 0x2C	; 44
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	d8 07       	cpc	r29, r24
     140:	6c f3       	brlt	.-38     	; 0x11c <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     142:	9e 01       	movw	r18, r28
     144:	dd 0f       	add	r29, r29
     146:	44 0b       	sbc	r20, r20
     148:	55 0b       	sbc	r21, r21
     14a:	c7 01       	movw	r24, r14
     14c:	b6 01       	movw	r22, r12
     14e:	0e 94 26 09 	call	0x124c	; 0x124c <__divmodsi4>
}
     152:	c9 01       	movw	r24, r18
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <setup>:
}

/* Function runs once upon program initialization
   * takes measurement of light and sets message parameters
   * at beginning of program execution */
void setup() {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
  transmit_msg.type = NORMAL;
     166:	c4 e1       	ldi	r28, 0x14	; 20
     168:	d1 e0       	ldi	r29, 0x01	; 1
     16a:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	88 83       	st	Y, r24
  transmit_msg.crc = message_crc(&transmit_msg);
     170:	ce 01       	movw	r24, r28
     172:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <message_crc>
     176:	9b 87       	std	Y+11, r25	; 0x0b
     178:	8a 87       	std	Y+10, r24	; 0x0a
  current_light = sample_light();
     17a:	0e 94 83 00 	call	0x106	; 0x106 <sample_light>
     17e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	11 f4       	brne	.+4      	; 0x194 <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	91 05       	cpc	r25, r1
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x12>
     19a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     19e:	02 97       	sbiw	r24, 0x02	; 2
     1a0:	31 f4       	brne	.+12     	; 0x1ae <set_motion+0x22>
    spinup_motors();
     1a2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_turn_left>
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <set_motion+0x2c>
  } else {
    spinup_motors();
     1ae:	0e 94 54 02 	call	0x4a8	; 0x4a8 <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1b2:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_turn_right>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0c 94 4f 02 	jmp	0x49e	; 0x49e <set_motors>

000001bc <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	19 f4       	brne	.+6      	; 0x1c6 <random_walk+0xa>
     1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <set_motion.part.0>
     1c4:	18 c0       	rjmp	.+48     	; 0x1f6 <random_walk+0x3a>
          set_motion(FORWARD);
      } else if (die == 1) {
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	91 05       	cpc	r25, r1
     1ca:	19 f4       	brne	.+6      	; 0x1d2 <random_walk+0x16>
          set_motion(LEFT);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <random_walk+0x1e>
      } else if (die == 2) {
     1d2:	02 97       	sbiw	r24, 0x02	; 2
     1d4:	29 f4       	brne	.+10     	; 0x1e0 <random_walk+0x24>
          set_motion(RIGHT);
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
     1de:	0b c0       	rjmp	.+22     	; 0x1f6 <random_walk+0x3a>
      } else {                                  // Error handling, shouldn't reach unless for shark init
          set_color(YELLOW);
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
          set_motion(STOP);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
	  delay(1500);
     1ee:	8c ed       	ldi	r24, 0xDC	; 220
     1f0:	95 e0       	ldi	r25, 0x05	; 5
     1f2:	0e 94 44 02 	call	0x488	; 0x488 <delay>
      }
      delay(100);
     1f6:	84 e6       	ldi	r24, 0x64	; 100
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0c 94 44 02 	jmp	0x488	; 0x488 <delay>

000001fe <shark>:

// Function dictating behavior of shark
int16_t shark() {
  if (message_sent == 1) {
     1fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <message_sent>
     202:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <message_sent+0x1>
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	01 f5       	brne	.+64     	; 0x24a <shark+0x4c>
      message_sent = 0;
     20a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <message_sent+0x1>
     20e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent>
      set_color(RED);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
      rand = rand_soft();
     218:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <rand_soft>
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rand+0x1>
     222:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rand>
      random_walk(die);
     226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     22a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     22e:	0e 94 de 00 	call	0x1bc	; 0x1bc <random_walk>
      die = (rand % 3);
     232:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rand>
     236:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rand+0x1>
     23a:	63 e0       	ldi	r22, 0x03	; 3
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     242:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();
     24a:	0c 94 83 00 	jmp	0x106	; 0x106 <sample_light>

0000024e <loop>:
}

void loop() {
  if (current_light < 1020 && current_light > 1000) {	// Continuously check if light level above threshold
     24e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     252:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     256:	89 5e       	subi	r24, 0xE9	; 233
     258:	93 40       	sbci	r25, 0x03	; 3
     25a:	43 97       	sbiw	r24, 0x13	; 19
     25c:	68 f4       	brcc	.+26     	; 0x278 <loop+0x2a>
    set_motion(STOP);
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
    set_color(WHITE);
     266:	85 e1       	ldi	r24, 0x15	; 21
     268:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
    delay(250);			// If below, block for 1/4 second
     26c:	8a ef       	ldi	r24, 0xFA	; 250
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 44 02 	call	0x488	; 0x488 <delay>
    shark();
     274:	0e 94 ff 00 	call	0x1fe	; 0x1fe <shark>
  }
  current_light = shark();	// Take new light level reading
     278:	0e 94 ff 00 	call	0x1fe	; 0x1fe <shark>
     27c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     280:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     284:	08 95       	ret

00000286 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     286:	08 95       	ret

00000288 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	08 95       	ret

0000028e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     28e:	08 95       	ret

00000290 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
    cli();
     29e:	f8 94       	cli

    ports_off();
     2a0:	14 b8       	out	0x04, r1	; 4
     2a2:	17 b8       	out	0x07, r1	; 7
     2a4:	1a b8       	out	0x0a, r1	; 10
     2a6:	15 b8       	out	0x05, r1	; 5
     2a8:	18 b8       	out	0x08, r1	; 8
     2aa:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2ac:	52 9a       	sbi	0x0a, 2	; 10
     2ae:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2b0:	14 bc       	out	0x24, r1	; 36
     2b2:	85 e0       	ldi	r24, 0x05	; 5
     2b4:	85 bd       	out	0x25, r24	; 37
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	87 bd       	out	0x27, r24	; 39
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     2c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     2c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2c8:	2f e8       	ldi	r18, 0x8F	; 143
     2ca:	3b e0       	ldi	r19, 0x0B	; 11
     2cc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2d0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     2d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     2d8:	53 98       	cbi	0x0a, 3	; 10
     2da:	23 98       	cbi	0x04, 3	; 4
     2dc:	91 ea       	ldi	r25, 0xA1	; 161
     2de:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     2e6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     2ea:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     2ee:	8b e0       	ldi	r24, 0x0B	; 11
     2f0:	80 bf       	out	0x30, r24	; 48
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     2f8:	86 e0       	ldi	r24, 0x06	; 6
     2fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2fe:	83 e8       	ldi	r24, 0x83	; 131
     300:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     304:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     308:	80 64       	ori	r24, 0x40	; 64
     30a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     30e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     312:	86 fd       	sbrc	r24, 6
     314:	fc cf       	rjmp	.-8      	; 0x30e <kilo_init+0x7e>
    adc_trigger_high_gain();
     316:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     31a:	83 ea       	ldi	r24, 0xA3	; 163
     31c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
    if (osccal != 0xFF)
     32e:	8f 3f       	cpi	r24, 0xFF	; 255
     330:	11 f0       	breq	.+4      	; 0x336 <kilo_init+0xa6>
        OSCCAL = osccal;
     332:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     336:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
    rx_leadingbit = 1;
     33a:	c1 e0       	ldi	r28, 0x01	; 1
     33c:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <rx_leadingbit>
    rx_leadingbyte = 1;
     340:	c0 93 64 01 	sts	0x0164, r28	; 0x800164 <rx_leadingbyte>
    rx_byteindex = 0;
     344:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rx_byteindex>
    rx_bytevalue = 0;
     348:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     34c:	80 e9       	ldi	r24, 0x90	; 144
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     354:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     358:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tx_mask>
     35c:	88 73       	andi	r24, 0x38	; 56
     35e:	11 f0       	breq	.+4      	; 0x364 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     360:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <tx_mask>
    tx_clock = 0;
     364:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock+0x1>
     368:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <tx_clock>
    tx_increment = 255;
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_increment+0x1>
     374:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_increment>
    kilo_ticks = 0;
     378:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks>
     37c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x1>
     380:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks+0x2>
     384:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x3>
    kilo_state = IDLE;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     38e:	82 e4       	ldi	r24, 0x42	; 66
     390:	9f e0       	ldi	r25, 0x0F	; 15
     392:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <kilo_tx_period+0x1>
     396:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     39a:	80 eb       	ldi	r24, 0xB0	; 176
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3a2:	c8 2f       	mov	r28, r24
     3a4:	81 eb       	ldi	r24, 0xB1	; 177
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3ac:	2c 2f       	mov	r18, r28
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	38 2b       	or	r19, r24
     3b2:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <kilo_uid+0x1>
     3b6:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3ba:	85 e0       	ldi	r24, 0x05	; 5
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3c2:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3c6:	89 e0       	ldi	r24, 0x09	; 9
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3ce:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3d2:	8c e0       	ldi	r24, 0x0C	; 12
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3da:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3de:	84 e1       	ldi	r24, 0x14	; 20
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     3e6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <kilo_straight_right>
     3ea:	08 e4       	ldi	r16, 0x48	; 72
     3ec:	11 e0       	ldi	r17, 0x01	; 1
     3ee:	51 e2       	ldi	r21, 0x21	; 33
     3f0:	e5 2e       	mov	r14, r21
     3f2:	51 e0       	ldi	r21, 0x01	; 1
     3f4:	f5 2e       	mov	r15, r21
     3f6:	c0 e2       	ldi	r28, 0x20	; 32
     3f8:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     3fa:	ce 01       	movw	r24, r28
     3fc:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     400:	d8 2e       	mov	r13, r24
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     40a:	2d 2d       	mov	r18, r13
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	32 2f       	mov	r19, r18
     410:	22 27       	eor	r18, r18
     412:	28 2b       	or	r18, r24
     414:	f8 01       	movw	r30, r16
     416:	21 93       	st	Z+, r18
     418:	31 93       	st	Z+, r19
     41a:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     41c:	ce 01       	movw	r24, r28
     41e:	c0 96       	adiw	r24, 0x30	; 48
     420:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     424:	d8 2e       	mov	r13, r24
     426:	ce 01       	movw	r24, r28
     428:	c1 96       	adiw	r24, 0x31	; 49
     42a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_read_byte>
     42e:	2d 2d       	mov	r18, r13
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	32 2f       	mov	r19, r18
     434:	22 27       	eor	r18, r18
     436:	28 2b       	or	r18, r24
     438:	f7 01       	movw	r30, r14
     43a:	21 93       	st	Z+, r18
     43c:	31 93       	st	Z+, r19
     43e:	7f 01       	movw	r14, r30
     440:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     442:	cc 33       	cpi	r28, 0x3C	; 60
     444:	d1 05       	cpc	r29, r1
     446:	c9 f6       	brne	.-78     	; 0x3fa <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     448:	78 94       	sei
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	08 95       	ret

0000045a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	8f 93       	push	r24
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	a8 95       	wdr
     46c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     470:	88 61       	ori	r24, 0x18	; 24
     472:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     476:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     47a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     47c:	8f 91       	pop	r24
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	41 f0       	breq	.+16     	; 0x49c <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	ef ec       	ldi	r30, 0xCF	; 207
     48e:	f7 e0       	ldi	r31, 0x07	; 7
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <delay+0x8>
     494:	00 c0       	rjmp	.+0      	; 0x496 <delay+0xe>
     496:	00 00       	nop
        _delay_ms(1);
        ms--;
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f6 cf       	rjmp	.-20     	; 0x488 <delay>
    }
}
     49c:	08 95       	ret

0000049e <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     49e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4a2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     4a6:	08 95       	ret

000004a8 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4ae:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     4b2:	8f e0       	ldi	r24, 0x0F	; 15
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0c 94 44 02 	jmp	0x488	; 0x488 <delay>

000004ba <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     4ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     4be:	81 11       	cpse	r24, r1
     4c0:	1e c0       	rjmp	.+60     	; 0x4fe <get_ambientlight+0x44>
        cli();
     4c2:	f8 94       	cli
        adc_setup_conversion(7);
     4c4:	87 e0       	ldi	r24, 0x07	; 7
     4c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ca:	83 e8       	ldi	r24, 0x83	; 131
     4cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d4:	80 64       	ori	r24, 0x40	; 64
     4d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4de:	86 fd       	sbrc	r24, 6
     4e0:	fc cf       	rjmp	.-8      	; 0x4da <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     4e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4ea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ee:	23 ea       	ldi	r18, 0xA3	; 163
     4f0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4fa:	78 94       	sei
     4fc:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     502:	08 95       	ret

00000504 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     504:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     508:	81 11       	cpse	r24, r1
     50a:	1e c0       	rjmp	.+60     	; 0x548 <get_temperature+0x44>
        cli();
     50c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     50e:	88 ec       	ldi	r24, 0xC8	; 200
     510:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     514:	87 e8       	ldi	r24, 0x87	; 135
     516:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     51a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     524:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     528:	86 fd       	sbrc	r24, 6
     52a:	fc cf       	rjmp	.-8      	; 0x524 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     52c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     530:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     534:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     538:	23 ea       	ldi	r18, 0xA3	; 163
     53a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     544:	78 94       	sei
     546:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     54c:	08 95       	ret

0000054e <rand_hard>:

uint8_t rand_hard() {
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     556:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     558:	e3 ea       	ldi	r30, 0xA3	; 163
     55a:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     55c:	c6 e0       	ldi	r28, 0x06	; 6
     55e:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     560:	a1 e0       	ldi	r26, 0x01	; 1
     562:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     564:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     566:	f8 94       	cli
            adc_setup_conversion(6);
     568:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     56c:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     570:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     574:	40 64       	ori	r20, 0x40	; 64
     576:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     57a:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     57e:	46 fd       	sbrc	r20, 6
     580:	fc cf       	rjmp	.-8      	; 0x57a <rand_hard+0x2c>
            a = ADCW&0x1;
     582:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     586:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     58a:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     58c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     590:	50 64       	ori	r21, 0x40	; 64
     592:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     596:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59a:	56 fd       	sbrc	r21, 6
     59c:	fc cf       	rjmp	.-8      	; 0x596 <rand_hard+0x48>
            b = ADCW&0x1;
     59e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5a2:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     5a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5aa:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5ae:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     5b2:	78 94       	sei
            tries++;
     5b4:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     5b6:	61 70       	andi	r22, 0x01	; 1
     5b8:	46 17       	cp	r20, r22
     5ba:	51 f0       	breq	.+20     	; 0x5d0 <rand_hard+0x82>
        if (a)
     5bc:	44 23       	and	r20, r20
     5be:	59 f0       	breq	.+22     	; 0x5d6 <rand_hard+0x88>
            num |= (1<<i);
     5c0:	ad 01       	movw	r20, r26
     5c2:	02 2e       	mov	r0, r18
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <rand_hard+0x7a>
     5c6:	44 0f       	add	r20, r20
     5c8:	0a 94       	dec	r0
     5ca:	ea f7       	brpl	.-6      	; 0x5c6 <rand_hard+0x78>
     5cc:	84 2b       	or	r24, r20
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     5d0:	90 38       	cpi	r25, 0x80	; 128
     5d2:	49 f6       	brne	.-110    	; 0x566 <rand_hard+0x18>
     5d4:	f3 cf       	rjmp	.-26     	; 0x5bc <rand_hard+0x6e>
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     5da:	28 30       	cpi	r18, 0x08	; 8
     5dc:	31 05       	cpc	r19, r1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <rand_hard+0x94>
     5e0:	c1 cf       	rjmp	.-126    	; 0x564 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     5e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     5ec:	98 e0       	ldi	r25, 0x08	; 8
     5ee:	89 9f       	mul	r24, r25
     5f0:	90 01       	movw	r18, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     5f6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	89 0f       	add	r24, r25
     5fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     602:	82 2f       	mov	r24, r18
     604:	82 95       	swap	r24
     606:	86 95       	lsr	r24
     608:	87 70       	andi	r24, 0x07	; 7
     60a:	28 27       	eor	r18, r24
     60c:	96 95       	lsr	r25
     60e:	96 95       	lsr	r25
     610:	82 2f       	mov	r24, r18
     612:	89 27       	eor	r24, r25
     614:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     618:	08 95       	ret

0000061a <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     61a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     61e:	08 95       	ret

00000620 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     620:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     624:	81 11       	cpse	r24, r1
     626:	16 c0       	rjmp	.+44     	; 0x654 <get_voltage+0x34>
        cli();                                    // disable interrupts
     628:	f8 94       	cli
        adc_setup_conversion(6);
     62a:	86 e0       	ldi	r24, 0x06	; 6
     62c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     630:	83 e8       	ldi	r24, 0x83	; 131
     632:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     636:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     63a:	80 64       	ori	r24, 0x40	; 64
     63c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     644:	86 fd       	sbrc	r24, 6
     646:	fc cf       	rjmp	.-8      	; 0x640 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     648:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     64c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     650:	78 94       	sei
     652:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     658:	08 95       	ret

0000065a <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     65a:	2f 92       	push	r2
     65c:	3f 92       	push	r3
     65e:	4f 92       	push	r4
     660:	5f 92       	push	r5
     662:	6f 92       	push	r6
     664:	7f 92       	push	r7
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     680:	fc 01       	movw	r30, r24
     682:	c2 81       	ldd	r28, Z+2	; 0x02
     684:	d3 81       	ldd	r29, Z+3	; 0x03
     686:	c4 38       	cpi	r28, 0x84	; 132
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	df 07       	cpc	r29, r31
     68c:	0c f0       	brlt	.+2      	; 0x690 <estimate_distance+0x36>
     68e:	7e c0       	rjmp	.+252    	; 0x78c <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     690:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <kilo_irhigh>
     694:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <kilo_irhigh+0x1>
     698:	8c 17       	cp	r24, r28
     69a:	9d 07       	cpc	r25, r29
     69c:	08 f4       	brcc	.+2      	; 0x6a0 <estimate_distance+0x46>
     69e:	6f c0       	rjmp	.+222    	; 0x77e <estimate_distance+0x124>
     6a0:	e3 e2       	ldi	r30, 0x23	; 35
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     6a6:	81 91       	ld	r24, Z+
     6a8:	91 91       	ld	r25, Z+
     6aa:	8c 17       	cp	r24, r28
     6ac:	9d 07       	cpc	r25, r29
     6ae:	20 f0       	brcs	.+8      	; 0x6b8 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     6b0:	1f 5f       	subi	r17, 0xFF	; 255
     6b2:	1e 30       	cpi	r17, 0x0E	; 14
     6b4:	c1 f7       	brne	.-16     	; 0x6a6 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     6b6:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     6b8:	81 2f       	mov	r24, r17
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ef 5d       	subi	r30, 0xDF	; 223
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	e0 80       	ld	r14, Z
     6c8:	f1 80       	ldd	r15, Z+1	; 0x01
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	fc 01       	movw	r30, r24
     6d0:	e1 5e       	subi	r30, 0xE1	; 225
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	b7 01       	movw	r22, r14
     6da:	68 1b       	sub	r22, r24
     6dc:	79 0b       	sbc	r23, r25
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     6ee:	4b 01       	movw	r8, r22
     6f0:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6f2:	be 01       	movw	r22, r28
     6f4:	0d 2e       	mov	r0, r29
     6f6:	00 0c       	add	r0, r0
     6f8:	88 0b       	sbc	r24, r24
     6fa:	99 0b       	sbc	r25, r25
     6fc:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     700:	2b 01       	movw	r4, r22
     702:	3c 01       	movw	r6, r24
     704:	b7 01       	movw	r22, r14
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     70e:	6b 01       	movw	r12, r22
     710:	7c 01       	movw	r14, r24
     712:	61 2f       	mov	r22, r17
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	a9 01       	movw	r20, r18
     730:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     734:	a5 01       	movw	r20, r10
     736:	94 01       	movw	r18, r8
     738:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	c3 01       	movw	r24, r6
     74e:	b2 01       	movw	r22, r4
     750:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e2       	ldi	r20, 0x20	; 32
     75a:	51 e4       	ldi	r21, 0x41	; 65
     75c:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     760:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     764:	7b 01       	movw	r14, r22
     766:	c5 01       	movw	r24, r10
     768:	b4 01       	movw	r22, r8
     76a:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     76e:	ab 01       	movw	r20, r22
     770:	bc 01       	movw	r22, r24
     772:	c7 01       	movw	r24, r14
     774:	ba 01       	movw	r22, r20
     776:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     77a:	16 2f       	mov	r17, r22
     77c:	01 c0       	rjmp	.+2      	; 0x780 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     77e:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     780:	cd 3b       	cpi	r28, 0xBD	; 189
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	d8 07       	cpc	r29, r24
     786:	0c f4       	brge	.+2      	; 0x78a <estimate_distance+0x130>
     788:	ca c0       	rjmp	.+404    	; 0x91e <__stack+0x1f>
     78a:	01 c0       	rjmp	.+2      	; 0x78e <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     78c:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     78e:	f1 01       	movw	r30, r2
     790:	c0 80       	ld	r12, Z
     792:	d1 80       	ldd	r13, Z+1	; 0x01
     794:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <kilo_irlow>
     798:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <kilo_irlow+0x1>
     79c:	8c 15       	cp	r24, r12
     79e:	9d 05       	cpc	r25, r13
     7a0:	88 f0       	brcs	.+34     	; 0x7c4 <estimate_distance+0x16a>
     7a2:	ea e4       	ldi	r30, 0x4A	; 74
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     7ac:	e1 90       	ld	r14, Z+
     7ae:	f1 90       	ld	r15, Z+
     7b0:	ec 14       	cp	r14, r12
     7b2:	fd 04       	cpc	r15, r13
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <estimate_distance+0x15e>
     7b6:	58 c0       	rjmp	.+176    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     7b8:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     7ba:	8e 30       	cpi	r24, 0x0E	; 14
     7bc:	91 05       	cpc	r25, r1
     7be:	a9 f7       	brne	.-22     	; 0x7aa <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     7c0:	0a e5       	ldi	r16, 0x5A	; 90
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     7c4:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     7c6:	1f 3f       	cpi	r17, 0xFF	; 255
     7c8:	09 f4       	brne	.+2      	; 0x7cc <estimate_distance+0x172>
     7ca:	4b c0       	rjmp	.+150    	; 0x862 <__DATA_REGION_LENGTH__+0x62>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     7cc:	be 01       	movw	r22, r28
     7ce:	dd 0f       	add	r29, r29
     7d0:	88 0b       	sbc	r24, r24
     7d2:	99 0b       	sbc	r25, r25
     7d4:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
     7dc:	61 2f       	mov	r22, r17
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     7e8:	4b 01       	movw	r8, r22
     7ea:	5c 01       	movw	r10, r24
     7ec:	a7 01       	movw	r20, r14
     7ee:	96 01       	movw	r18, r12
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	81 e6       	ldi	r24, 0x61	; 97
     7f6:	94 e4       	ldi	r25, 0x44	; 68
     7f8:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     808:	4b 01       	movw	r8, r22
     80a:	5c 01       	movw	r10, r24
     80c:	60 2f       	mov	r22, r16
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     818:	2b 01       	movw	r4, r22
     81a:	3c 01       	movw	r6, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	4f e2       	ldi	r20, 0x2F	; 47
     822:	54 e4       	ldi	r21, 0x44	; 68
     824:	c7 01       	movw	r24, r14
     826:	b6 01       	movw	r22, r12
     828:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c3 01       	movw	r24, r6
     832:	b2 01       	movw	r22, r4
     834:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     838:	9b 01       	movw	r18, r22
     83a:	ac 01       	movw	r20, r24
     83c:	c5 01       	movw	r24, r10
     83e:	b4 01       	movw	r22, r8
     840:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 e4       	ldi	r20, 0x48	; 72
     84a:	53 e4       	ldi	r21, 0x43	; 67
     84c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__divsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	44 e0       	ldi	r20, 0x04	; 4
     856:	52 e4       	ldi	r21, 0x42	; 66
     858:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     85c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fixunssfsi>
     860:	60 c0       	rjmp	.+192    	; 0x922 <__stack+0x23>
        } else {
            return 33 + dist_low;
     862:	61 e2       	ldi	r22, 0x21	; 33
     864:	60 0f       	add	r22, r16
     866:	5d c0       	rjmp	.+186    	; 0x922 <__stack+0x23>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	fc 01       	movw	r30, r24
     86e:	ea 5b       	subi	r30, 0xBA	; 186
     870:	fe 4f       	sbci	r31, 0xFE	; 254
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	b7 01       	movw	r22, r14
     878:	68 1b       	sub	r22, r24
     87a:	79 0b       	sbc	r23, r25
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     890:	b6 01       	movw	r22, r12
     892:	dd 0c       	add	r13, r13
     894:	88 0b       	sbc	r24, r24
     896:	99 0b       	sbc	r25, r25
     898:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     89c:	2b 01       	movw	r4, r22
     89e:	3c 01       	movw	r6, r24
     8a0:	b7 01       	movw	r22, r14
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     8aa:	6b 01       	movw	r12, r22
     8ac:	7c 01       	movw	r14, r24
     8ae:	63 2d       	mov	r22, r3
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatunsisf>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	a9 01       	movw	r20, r18
     8cc:	0e 94 91 09 	call	0x1322	; 0x1322 <__addsf3>
     8d0:	a5 01       	movw	r20, r10
     8d2:	94 01       	movw	r18, r8
     8d4:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c3 01       	movw	r24, r6
     8ea:	b2 01       	movw	r22, r4
     8ec:	0e 94 90 09 	call	0x1320	; 0x1320 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
     8fc:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     900:	7b 01       	movw	r14, r22
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     90a:	ab 01       	movw	r20, r22
     90c:	bc 01       	movw	r22, r24
     90e:	c7 01       	movw	r24, r14
     910:	ba 01       	movw	r22, r20
     912:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     916:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     918:	6f 3f       	cpi	r22, 0xFF	; 255
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0x1f>
     91c:	54 cf       	rjmp	.-344    	; 0x7c6 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     91e:	61 e2       	ldi	r22, 0x21	; 33
     920:	61 0f       	add	r22, r17
    }
}
     922:	86 2f       	mov	r24, r22
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	bf 90       	pop	r11
     936:	af 90       	pop	r10
     938:	9f 90       	pop	r9
     93a:	8f 90       	pop	r8
     93c:	7f 90       	pop	r7
     93e:	6f 90       	pop	r6
     940:	5f 90       	pop	r5
     942:	4f 90       	pop	r4
     944:	3f 90       	pop	r3
     946:	2f 90       	pop	r2
     948:	08 95       	ret

0000094a <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
    tx_clock += tx_increment;
     96c:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <tx_clock>
     970:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <tx_clock+0x1>
     974:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tx_increment>
     978:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tx_increment+0x1>
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_clock+0x1>
     984:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_clock>
    tx_increment = 0xFF;
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_increment+0x1>
     990:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_increment>
    OCR0A = tx_increment;
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     998:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <kilo_ticks>
     99c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <kilo_ticks+0x1>
     9a0:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <kilo_ticks+0x2>
     9a4:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <kilo_ticks+0x3>
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	a1 1d       	adc	r26, r1
     9ac:	b1 1d       	adc	r27, r1
     9ae:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <kilo_ticks>
     9b2:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <kilo_ticks+0x1>
     9b6:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <kilo_ticks+0x2>
     9ba:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     9be:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     9c2:	81 11       	cpse	r24, r1
     9c4:	2d c0       	rjmp	.+90     	; 0xa20 <__vector_14+0xd6>
     9c6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <kilo_tx_period>
     9ca:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_tx_period+0x1>
     9ce:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <tx_clock>
     9d2:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <tx_clock+0x1>
     9d6:	82 17       	cp	r24, r18
     9d8:	93 07       	cpc	r25, r19
     9da:	10 f5       	brcc	.+68     	; 0xa20 <__vector_14+0xd6>
     9dc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	f1 f4       	brne	.+60     	; 0xa20 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     9e4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     9e8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     9ec:	09 95       	icall
        if (msg) {
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	b9 f0       	breq	.+46     	; 0xa20 <__vector_14+0xd6>
            if (message_send(msg)) {
     9f2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <message_send>
     9f6:	88 23       	and	r24, r24
     9f8:	51 f0       	breq	.+20     	; 0xa0e <__vector_14+0xc4>
                kilo_message_tx_success();
     9fa:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     9fe:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     a02:	09 95       	icall
                tx_clock = 0;
     a04:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock+0x1>
     a08:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <tx_clock>
     a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a0e:	0e 94 86 00 	call	0x10c	; 0x10c <sample_light+0x6>
     a12:	9c 01       	movw	r18, r24
     a14:	33 27       	eor	r19, r19
     a16:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <tx_increment+0x1>
     a1a:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <tx_increment>
                OCR0A = tx_increment;
     a1e:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     a42:	80 ff       	sbrs	r24, 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <set_color+0x8>
        DDRD |= (1<<5);
     a46:	55 9a       	sbi	0x0a, 5	; 10
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a4a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a4c:	81 ff       	sbrs	r24, 1
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <set_color+0x12>
        DDRD |= (1<<4);
     a50:	54 9a       	sbi	0x0a, 4	; 10
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a54:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a56:	82 ff       	sbrs	r24, 2
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <set_color+0x1c>
        DDRC |= (1<<3);
     a5a:	3b 9a       	sbi	0x07, 3	; 7
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     a5e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     a60:	83 ff       	sbrs	r24, 3
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <set_color+0x26>
        DDRC |= (1<<2);
     a64:	3a 9a       	sbi	0x07, 2	; 7
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     a68:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     a6a:	84 ff       	sbrs	r24, 4
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <set_color+0x30>
        DDRC |= (1<<5);
     a6e:	3d 9a       	sbi	0x07, 5	; 7
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     a72:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     a74:	85 ff       	sbrs	r24, 5
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <set_color+0x3a>
        DDRC |= (1<<4);
     a78:	3c 9a       	sbi	0x07, 4	; 7
     a7a:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     a7c:	3c 98       	cbi	0x07, 4	; 7
     a7e:	08 95       	ret

00000a80 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a80:	8c 01       	movw	r16, r24
     a82:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a84:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a86:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a8c:	98 e1       	ldi	r25, 0x18	; 24
     a8e:	c9 2e       	mov	r12, r25
     a90:	29 e2       	ldi	r18, 0x29	; 41
     a92:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a94:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	e7 30       	cpi	r30, 0x07	; 7
     a9c:	f1 05       	cpc	r31, r1
     a9e:	d0 f7       	brcc	.-12     	; 0xa94 <kilo_start+0x14>
     aa0:	ec 5c       	subi	r30, 0xCC	; 204
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	0c 94 45 09 	jmp	0x128a	; 0x128a <__tablejump2__>
            case SLEEPING:
                cli();
     aa8:	f8 94       	cli
                acomp_off();
     aaa:	80 b7       	in	r24, 0x30	; 48
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	80 bf       	out	0x30, r24	; 48
                adc_off();
     ab0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ab4:	8f 77       	andi	r24, 0x7F	; 127
     ab6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     aba:	14 b8       	out	0x04, r1	; 4
     abc:	17 b8       	out	0x07, r1	; 7
     abe:	1a b8       	out	0x0a, r1	; 10
     ac0:	15 b8       	out	0x05, r1	; 5
     ac2:	18 b8       	out	0x08, r1	; 8
     ac4:	1b b8       	out	0x0b, r1	; 11
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	a8 95       	wdr
     acc:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     ad6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ada:	80 64       	ori	r24, 0x40	; 64
     adc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ae0:	83 b7       	in	r24, 0x33	; 51
     ae2:	81 7f       	andi	r24, 0xF1	; 241
     ae4:	84 60       	ori	r24, 0x04	; 4
     ae6:	83 bf       	out	0x33, r24	; 51
                cli();
     ae8:	f8 94       	cli
                sleep_enable();
     aea:	83 b7       	in	r24, 0x33	; 51
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	83 bf       	out	0x33, r24	; 51
                sei();
     af0:	78 94       	sei
                sleep_cpu();
     af2:	88 95       	sleep
                sleep_disable();
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	83 bf       	out	0x33, r24	; 51
                sei();
     afa:	78 94       	sei
                rx_busy = 0;
     afc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
                ports_on();
     b00:	52 9a       	sbi	0x0a, 2	; 10
     b02:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b04:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0e:	87 e5       	ldi	r24, 0x57	; 87
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <kilo_start+0x92>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <kilo_start+0x98>
     b18:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b1a:	80 b7       	in	r24, 0x30	; 48
     b1c:	88 61       	ori	r24, 0x18	; 24
     b1e:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     b20:	8f e3       	ldi	r24, 0x3F	; 63
     b22:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b26:	ef e1       	ldi	r30, 0x1F	; 31
     b28:	fe e4       	ldi	r31, 0x4E	; 78
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <kilo_start+0xaa>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <kilo_start+0xb0>
     b30:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     b32:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <kilo_start+0xbc>
     b3a:	50 c0       	rjmp	.+160    	; 0xbdc <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     b42:	ff ef       	ldi	r31, 0xFF	; 255
     b44:	20 e7       	ldi	r18, 0x70	; 112
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	f1 50       	subi	r31, 0x01	; 1
     b4a:	20 40       	sbci	r18, 0x00	; 0
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <kilo_start+0xc8>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <kilo_start+0xd2>
     b52:	00 00       	nop
     b54:	43 c0       	rjmp	.+134    	; 0xbdc <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b56:	8c e0       	ldi	r24, 0x0C	; 12
     b58:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     b5c:	ef ec       	ldi	r30, 0xCF	; 207
     b5e:	f7 e0       	ldi	r31, 0x07	; 7
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <kilo_start+0xe0>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <kilo_start+0xe6>
     b66:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     b6e:	ff ef       	ldi	r31, 0xFF	; 255
     b70:	21 ee       	ldi	r18, 0xE1	; 225
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	f1 50       	subi	r31, 0x01	; 1
     b76:	20 40       	sbci	r18, 0x00	; 0
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <kilo_start+0xf4>
     b7c:	2c c0       	rjmp	.+88     	; 0xbd6 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     b7e:	0e 94 10 03 	call	0x620	; 0x620 <get_voltage>
                if(voltage > 682)
     b82:	8b 3a       	cpi	r24, 0xAB	; 171
     b84:	e2 e0       	ldi	r30, 0x02	; 2
     b86:	9e 07       	cpc	r25, r30
     b88:	24 f0       	brlt	.+8      	; 0xb92 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b8a:	8c e0       	ldi	r24, 0x0C	; 12
     b8c:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     b90:	81 cf       	rjmp	.-254    	; 0xa94 <kilo_start+0x14>
                else if(voltage > 648)
     b92:	89 38       	cpi	r24, 0x89	; 137
     b94:	f2 e0       	ldi	r31, 0x02	; 2
     b96:	9f 07       	cpc	r25, r31
     b98:	14 f0       	brlt	.+4      	; 0xb9e <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b9a:	80 e3       	ldi	r24, 0x30	; 48
     b9c:	f7 cf       	rjmp	.-18     	; 0xb8c <kilo_start+0x10c>
                else if(voltage > 614)
     b9e:	87 36       	cpi	r24, 0x67	; 103
     ba0:	92 40       	sbci	r25, 0x02	; 2
     ba2:	14 f0       	brlt	.+4      	; 0xba8 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     ba4:	8f e0       	ldi	r24, 0x0F	; 15
     ba6:	f2 cf       	rjmp	.-28     	; 0xb8c <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	f0 cf       	rjmp	.-32     	; 0xb8c <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     bac:	48 99       	sbic	0x09, 0	; 9
     bae:	16 c0       	rjmp	.+44     	; 0xbdc <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     bb6:	8f ec       	ldi	r24, 0xCF	; 207
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <kilo_start+0x13a>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <kilo_start+0x140>
     bc0:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	e1 ee       	ldi	r30, 0xE1	; 225
     bcc:	f4 e0       	ldi	r31, 0x04	; 4
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	e0 40       	sbci	r30, 0x00	; 0
     bd2:	f0 40       	sbci	r31, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <kilo_start+0x14e>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <kilo_start+0x158>
     bd8:	00 00       	nop
     bda:	5c cf       	rjmp	.-328    	; 0xa94 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	d6 cf       	rjmp	.-84     	; 0xb8c <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     be0:	d1 11       	cpse	r29, r1
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <kilo_start+0x168>
                    setup();
     be4:	f8 01       	movw	r30, r16
     be6:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     be8:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     bec:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     bee:	f7 01       	movw	r30, r14
     bf0:	09 95       	icall
                break;
     bf2:	50 cf       	rjmp	.-352    	; 0xa94 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     bf4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     bf8:	81 11       	cpse	r24, r1
     bfa:	07 c0       	rjmp	.+14     	; 0xc0a <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bfc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c00:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c04:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     c08:	45 cf       	rjmp	.-374    	; 0xa94 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c0a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     c0e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     c12:	98 17       	cp	r25, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <kilo_start+0x198>
     c16:	3e cf       	rjmp	.-388    	; 0xa94 <kilo_start+0x14>
                        prev_motion = cur_motion;
     c18:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     c1c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     c20:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	89 f4       	brne	.+34     	; 0xc4a <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c28:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c2c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c30:	8f e2       	ldi	r24, 0x2F	; 47
     c32:	95 e7       	ldi	r25, 0x75	; 117
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <kilo_start+0x1b4>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <kilo_start+0x1ba>
     c3a:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     c3c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c40:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c48:	25 cf       	rjmp	.-438    	; 0xa94 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c4a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c4e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c52:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	59 f4       	brne	.+22     	; 0xc70 <kilo_start+0x1f0>
     c5a:	ef e2       	ldi	r30, 0x2F	; 47
     c5c:	f5 e7       	ldi	r31, 0x75	; 117
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <kilo_start+0x1de>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <kilo_start+0x1e4>
     c64:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c66:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c6a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c6e:	10 c0       	rjmp	.+32     	; 0xc90 <kilo_start+0x210>
     c70:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c74:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c78:	8f e2       	ldi	r24, 0x2F	; 47
     c7a:	95 e7       	ldi	r25, 0x75	; 117
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <kilo_start+0x1fc>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <kilo_start+0x202>
     c82:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c84:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <kilo_straight_right>
     c88:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c8c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c90:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c94:	ff ce       	rjmp	.-514    	; 0xa94 <kilo_start+0x14>

00000c96 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
    rx_timer_off();
     ca4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ca8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <rx_leadingbit>
    rx_leadingbyte = 1;
     cb6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rx_leadingbyte>
    rx_busy = 0;
     cba:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
    adc_trigger_high_gain();
     cbe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cc2:	93 ea       	ldi	r25, 0xA3	; 163
     cc4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cc8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d00:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d04:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d0e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rx_leadingbit>
     d12:	88 23       	and	r24, r24
     d14:	21 f1       	breq	.+72     	; 0xd5e <__vector_23+0x84>
        rx_timer_on();
     d16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d1e:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     d22:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_bytevalue>
        rx_leadingbit = 0;
     d26:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <rx_leadingbit>
        if (rx_leadingbyte) {
     d2a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_leadingbyte>
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <__vector_23+0x5a>
     d32:	af c1       	rjmp	.+862    	; 0x1092 <__vector_23+0x3b8>
            adc_finish_conversion();
     d34:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d38:	86 fd       	sbrc	r24, 6
     d3a:	fc cf       	rjmp	.-8      	; 0xd34 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     d3c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d40:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d44:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x3>
     d48:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist+0x2>
            adc_trigger_low_gain();
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d52:	93 ea       	ldi	r25, 0xA3	; 163
     d54:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d58:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d5c:	9a c1       	rjmp	.+820    	; 0x1092 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     d5e:	c9 01       	movw	r24, r18
     d60:	87 58       	subi	r24, 0x87	; 135
     d62:	91 09       	sbc	r25, r1
     d64:	84 37       	cpi	r24, 0x74	; 116
     d66:	99 40       	sbci	r25, 0x09	; 9
     d68:	a0 f0       	brcs	.+40     	; 0xd92 <__vector_23+0xb8>
            rx_timer_off();
     d6a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d6e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d72:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     d76:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <rx_leadingbit>
            rx_leadingbyte = 1;
     d7a:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <rx_leadingbyte>
            rx_busy = 0;
     d7e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
            adc_trigger_high_gain();
     d82:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d86:	83 ea       	ldi	r24, 0xA3	; 163
     d88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d8c:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d90:	80 c1       	rjmp	.+768    	; 0x1092 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d92:	26 58       	subi	r18, 0x86	; 134
     d94:	31 09       	sbc	r19, r1
     d96:	a4 ef       	ldi	r26, 0xF4	; 244
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	0e 94 4b 09 	call	0x1296	; 0x1296 <__umulhisi3>
     d9e:	8c 01       	movw	r16, r24
     da0:	22 27       	eor	r18, r18
     da2:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     da4:	08 30       	cpi	r16, 0x08	; 8
     da6:	60 f4       	brcc	.+24     	; 0xdc0 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <__vector_23+0xd6>
     dae:	88 0f       	add	r24, r24
     db0:	0a 95       	dec	r16
     db2:	ea f7       	brpl	.-6      	; 0xdae <__vector_23+0xd4>
     db4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     db8:	89 2b       	or	r24, r25
     dba:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_bytevalue>
     dbe:	69 c1       	rjmp	.+722    	; 0x1092 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     dc0:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <rx_leadingbit>
                if (rx_leadingbyte) {
     dc4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_leadingbyte>
     dc8:	88 23       	and	r24, r24
     dca:	41 f1       	breq	.+80     	; 0xe1c <__vector_23+0x142>
                    adc_finish_conversion();
     dcc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dd0:	86 fd       	sbrc	r24, 6
     dd2:	fc cf       	rjmp	.-8      	; 0xdcc <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     dd4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dd8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ddc:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x1>
     de0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist>
                    adc_trigger_high_gain();
     de4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     de8:	83 ea       	ldi	r24, 0xA3	; 163
     dea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     df4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     df8:	99 23       	and	r25, r25
     dfa:	59 f0       	breq	.+22     	; 0xe12 <__vector_23+0x138>
                        rx_timer_off();
     dfc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e00:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e04:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e08:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rx_leadingbyte>
                        rx_busy = 0;
     e0c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
     e10:	40 c1       	rjmp	.+640    	; 0x1092 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e12:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <rx_leadingbyte>
                        rx_byteindex = 0;
     e16:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rx_byteindex>
     e1a:	3b c1       	rjmp	.+630    	; 0x1092 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     e1c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <rx_byteindex>
     e20:	e8 2f       	mov	r30, r24
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	e6 59       	subi	r30, 0x96	; 150
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     e2c:	90 83       	st	Z, r25
                    rx_byteindex++;
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     e34:	8c 30       	cpi	r24, 0x0C	; 12
     e36:	09 f0       	breq	.+2      	; 0xe3a <__vector_23+0x160>
     e38:	2c c1       	rjmp	.+600    	; 0x1092 <__vector_23+0x3b8>
                        rx_timer_off();
     e3a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e3e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e42:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e46:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <rx_leadingbyte>
                        rx_busy = 0;
     e4a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e4e:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <rx_msg+0xa>
     e52:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <rx_msg+0xb>
     e56:	8a e6       	ldi	r24, 0x6A	; 106
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <message_crc>
     e5e:	08 17       	cp	r16, r24
     e60:	19 07       	cpc	r17, r25
     e62:	09 f0       	breq	.+2      	; 0xe66 <__vector_23+0x18c>
     e64:	16 c1       	rjmp	.+556    	; 0x1092 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     e66:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <rx_msg+0x9>
     e6a:	e7 fd       	sbrc	r30, 7
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     e6e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     e72:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     e76:	6f e3       	ldi	r22, 0x3F	; 63
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	8a e6       	ldi	r24, 0x6A	; 106
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	09 95       	icall
     e80:	08 c1       	rjmp	.+528    	; 0x1092 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e82:	88 e7       	ldi	r24, 0x78	; 120
     e84:	8e 0f       	add	r24, r30
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	30 f0       	brcs	.+12     	; 0xe96 <__vector_23+0x1bc>
        motors_off();
     e8a:	53 98       	cbi	0x0a, 3	; 10
     e8c:	23 98       	cbi	0x04, 3	; 4
     e8e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e92:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e96:	8e 2f       	mov	r24, r30
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	e0 58       	subi	r30, 0x80	; 128
     e9e:	f1 09       	sbc	r31, r1
     ea0:	eb 30       	cpi	r30, 0x0B	; 11
     ea2:	f1 05       	cpc	r31, r1
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__vector_23+0x1ce>
     ea6:	f5 c0       	rjmp	.+490    	; 0x1092 <__vector_23+0x3b8>
     ea8:	e5 5c       	subi	r30, 0xC5	; 197
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	0c 94 45 09 	jmp	0x128a	; 0x128a <__tablejump2__>
        case BOOT:
            tx_timer_off();
     eb0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     eba:	16 bc       	out	0x26, r1	; 38
            bootload();
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f0 e7       	ldi	r31, 0x70	; 112
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     ec2:	e0 e0       	ldi	r30, 0x00	; 0
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     ec8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     ecc:	e2 c0       	rjmp	.+452    	; 0x1092 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	b2 c0       	rjmp	.+356    	; 0x1036 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     ed2:	85 e0       	ldi	r24, 0x05	; 5
     ed4:	b0 c0       	rjmp	.+352    	; 0x1036 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	ae c0       	rjmp	.+348    	; 0x1036 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     eda:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	09 f4       	brne	.+2      	; 0xee4 <__vector_23+0x20a>
     ee2:	d7 c0       	rjmp	.+430    	; 0x1092 <__vector_23+0x3b8>
     ee4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     ee8:	84 30       	cpi	r24, 0x04	; 4
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_23+0x214>
     eec:	d2 c0       	rjmp	.+420    	; 0x1092 <__vector_23+0x3b8>
                motors_on();
     eee:	53 9a       	sbi	0x0a, 3	; 10
     ef0:	23 9a       	sbi	0x04, 3	; 4
     ef2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ef6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	9c c0       	rjmp	.+312    	; 0x1036 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     efe:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_msg>
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <__vector_23+0x22e>
     f06:	4b c0       	rjmp	.+150    	; 0xf9e <__vector_23+0x2c4>
     f08:	80 f4       	brcc	.+32     	; 0xf2a <__vector_23+0x250>
     f0a:	88 23       	and	r24, r24
     f0c:	a9 f0       	breq	.+42     	; 0xf38 <__vector_23+0x25e>
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	09 f0       	breq	.+2      	; 0xf14 <__vector_23+0x23a>
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f14:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x1>
     f18:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_msg+0x2>
     f1c:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <kilo_uid+0x1>
     f20:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_uid>
                    cur_motion = MOVE_STOP;
     f24:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     f28:	77 c0       	rjmp	.+238    	; 0x1018 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__vector_23+0x256>
     f2e:	49 c0       	rjmp	.+146    	; 0xfc2 <__vector_23+0x2e8>
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	09 f4       	brne	.+2      	; 0xf36 <__vector_23+0x25c>
     f34:	58 c0       	rjmp	.+176    	; 0xfe6 <__vector_23+0x30c>
     f36:	70 c0       	rjmp	.+224    	; 0x1018 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     f38:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f3c:	86 30       	cpi	r24, 0x06	; 6
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__vector_23+0x268>
     f40:	6b c0       	rjmp	.+214    	; 0x1018 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     f42:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_uid>
     f46:	80 eb       	ldi	r24, 0xB0	; 176
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f4e:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_uid+0x1>
     f52:	81 eb       	ldi	r24, 0xB1	; 177
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f5a:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_turn_left>
     f5e:	85 e0       	ldi	r24, 0x05	; 5
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     f66:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_turn_right>
     f6a:	89 e0       	ldi	r24, 0x09	; 9
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     f72:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_straight_left>
     f76:	8c e0       	ldi	r24, 0x0C	; 12
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f7e:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_straight_right>
     f82:	84 e1       	ldi	r24, 0x14	; 20
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 a8 0b 	call	0x1750	; 0x1750 <eeprom_write_byte>
                        motors_off();
     f8a:	53 98       	cbi	0x0a, 3	; 10
     f8c:	23 98       	cbi	0x04, 3	; 4
     f8e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f92:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f9c:	3d c0       	rjmp	.+122    	; 0x1018 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f9e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     fa2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x3>
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <__vector_23+0x2d8>
     faa:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_turn_left>
     fae:	89 17       	cp	r24, r25
     fb0:	99 f1       	breq	.+102    	; 0x1018 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fb2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     fbc:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_left>
     fc0:	2b c0       	rjmp	.+86     	; 0x1018 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     fc2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     fc6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg+0x4>
     fca:	92 30       	cpi	r25, 0x02	; 2
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <__vector_23+0x2fc>
     fce:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_turn_right>
     fd2:	89 17       	cp	r24, r25
     fd4:	09 f1       	breq	.+66     	; 0x1018 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fd6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     fe0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_turn_right>
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     fe6:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     fea:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x6>
     fee:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <rx_msg+0x5>
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	41 f4       	brne	.+16     	; 0x1006 <__vector_23+0x32c>
     ff6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <kilo_straight_right>
     ffa:	82 13       	cpse	r24, r18
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__vector_23+0x32c>
     ffe:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_straight_left>
    1002:	92 17       	cp	r25, r18
    1004:	49 f0       	breq	.+18     	; 0x1018 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1006:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    100a:	23 e0       	ldi	r18, 0x03	; 3
    100c:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1010:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1014:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1018:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_msg>
    101c:	88 23       	and	r24, r24
    101e:	c9 f1       	breq	.+114    	; 0x1092 <__vector_23+0x3b8>
    1020:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
    1024:	86 30       	cpi	r24, 0x06	; 6
    1026:	a9 f1       	breq	.+106    	; 0x1092 <__vector_23+0x3b8>
                motors_on();
    1028:	53 9a       	sbi	0x0a, 3	; 10
    102a:	23 9a       	sbi	0x04, 3	; 4
    102c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1030:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    103a:	2b c0       	rjmp	.+86     	; 0x1092 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    103c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
    1040:	86 30       	cpi	r24, 0x06	; 6
    1042:	81 f0       	breq	.+32     	; 0x1064 <__vector_23+0x38a>
                motors_on();
    1044:	53 9a       	sbi	0x0a, 3	; 10
    1046:	23 9a       	sbi	0x04, 3	; 4
    1048:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    104c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 21 05 	call	0xa42	; 0xa42 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1056:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
    105a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	00 90 6a 01 	lds	r0, 0x016A	; 0x80016a <rx_msg>
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <__vector_23+0x398>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <__vector_23+0x394>
    1076:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <kilo_uid>
    107a:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <kilo_uid+0x1>
    107e:	82 23       	and	r24, r18
    1080:	93 23       	and	r25, r19
    1082:	89 2b       	or	r24, r25
    1084:	21 f0       	breq	.+8      	; 0x108e <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    108e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    10b8:	fc 01       	movw	r30, r24
    10ba:	9c 01       	movw	r18, r24
    10bc:	26 5f       	subi	r18, 0xF6	; 246
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    10c4:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    10c6:	84 27       	eor	r24, r20
    10c8:	08 2e       	mov	r0, r24
    10ca:	82 95       	swap	r24
    10cc:	80 7f       	andi	r24, 0xF0	; 240
    10ce:	80 25       	eor	r24, r0
    10d0:	09 2e       	mov	r0, r25
    10d2:	98 2f       	mov	r25, r24
    10d4:	82 95       	swap	r24
    10d6:	8f 70       	andi	r24, 0x0F	; 15
    10d8:	08 26       	eor	r0, r24
    10da:	86 95       	lsr	r24
    10dc:	98 27       	eor	r25, r24
    10de:	89 27       	eor	r24, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	88 0f       	add	r24, r24
    10e4:	88 0f       	add	r24, r24
    10e6:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    10e8:	e2 17       	cp	r30, r18
    10ea:	f3 07       	cpc	r31, r19
    10ec:	59 f7       	brne	.-42     	; 0x10c4 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    10ee:	08 95       	ret

000010f0 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    10f0:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    10f2:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    10f4:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    10f6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <tx_mask>
    or tmpreg1, ddrreg
    10fa:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    10fc:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1100:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    1104:	20 30       	cpi	r18, 0x00	; 0
    1106:	29 f0       	breq	.+10     	; 0x1112 <message_send+0x22>
    1108:	00 00       	nop
    110a:	25 b1       	in	r18, 0x05	; 5
    110c:	23 2b       	or	r18, r19
    110e:	25 b9       	out	0x05, r18	; 5
    1110:	04 c0       	rjmp	.+8      	; 0x111a <message_send+0x2a>
    1112:	00 00       	nop
    1114:	00 00       	nop
    1116:	00 00       	nop
    1118:	00 c0       	rjmp	.+0      	; 0x111a <message_send+0x2a>
    111a:	00 00       	nop
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	30 95       	com	r19
    1122:	25 b1       	in	r18, 0x05	; 5
    1124:	23 23       	and	r18, r19
    1126:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1128:	2e ea       	ldi	r18, 0xAE	; 174
    112a:	2a 95       	dec	r18
    112c:	f1 f7       	brne	.-4      	; 0x112a <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    112e:	2b ee       	ldi	r18, 0xEB	; 235

00001130 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1130:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1132:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1134:	0a c0       	rjmp	.+20     	; 0x114a <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1136:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1138:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    com tmpreg2
    113c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    113e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1140:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1142:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1144:	0f be       	out	0x3f, r0	; 63
    return 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	08 95       	ret

0000114a <nocollision>:
nocollision:
    nop
    114a:	00 00       	nop
    dec tmpreg1
    114c:	2a 95       	dec	r18
    brne checkcollision
    114e:	81 f7       	brne	.-32     	; 0x1130 <checkcollision>

    ldi tmpreg1, 0x01
    1150:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1152:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    1156:	20 30       	cpi	r18, 0x00	; 0
    1158:	29 f0       	breq	.+10     	; 0x1164 <nocollision+0x1a>
    115a:	00 00       	nop
    115c:	25 b1       	in	r18, 0x05	; 5
    115e:	23 2b       	or	r18, r19
    1160:	25 b9       	out	0x05, r18	; 5
    1162:	04 c0       	rjmp	.+8      	; 0x116c <nocollision+0x22>
    1164:	00 00       	nop
    1166:	00 00       	nop
    1168:	00 00       	nop
    116a:	00 c0       	rjmp	.+0      	; 0x116c <nocollision+0x22>
    116c:	00 00       	nop
    116e:	00 00       	nop
    1170:	00 00       	nop
    1172:	30 95       	com	r19
    1174:	25 b1       	in	r18, 0x05	; 5
    1176:	23 23       	and	r18, r19
    1178:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    117a:	00 00       	nop
    117c:	24 e5       	ldi	r18, 0x54	; 84
    117e:	2a 95       	dec	r18
    1180:	f1 f7       	brne	.-4      	; 0x117e <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1182:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1184:	8c e0       	ldi	r24, 0x0C	; 12

00001186 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1186:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1188:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    118a:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    118c:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    118e:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1190:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1192:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1194:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1196:	50 e0       	ldi	r21, 0x00	; 0

00001198 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1198:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    119a:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    119c:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    119e:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    11a0:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    11a4:	20 30       	cpi	r18, 0x00	; 0
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <sendbit+0x1a>
    11a8:	00 00       	nop
    11aa:	25 b1       	in	r18, 0x05	; 5
    11ac:	23 2b       	or	r18, r19
    11ae:	25 b9       	out	0x05, r18	; 5
    11b0:	04 c0       	rjmp	.+8      	; 0x11ba <sendbit+0x22>
    11b2:	00 00       	nop
    11b4:	00 00       	nop
    11b6:	00 00       	nop
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <sendbit+0x22>
    11ba:	00 00       	nop
    11bc:	00 00       	nop
    11be:	00 00       	nop
    11c0:	30 95       	com	r19
    11c2:	25 b1       	in	r18, 0x05	; 5
    11c4:	23 23       	and	r18, r19
    11c6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    11c8:	00 00       	nop
    11ca:	21 e5       	ldi	r18, 0x51	; 81
    11cc:	2a 95       	dec	r18
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    11d0:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    11d2:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    11d4:	9a 95       	dec	r25
    brne sendbit
    11d6:	01 f7       	brne	.-64     	; 0x1198 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    11d8:	8a 95       	dec	r24
    brne sendbyte
    11da:	a9 f6       	brne	.-86     	; 0x1186 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    11dc:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    11de:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    11e0:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11e2:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11e4:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    com tmpreg2
    11e8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11ea:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11ec:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11ee:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11f0:	0f be       	out	0x3f, r0	; 63
    return 1
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret

000011f6 <main>:
}

int main() {
  kilo_init();                          // Begin program execution
    11f6:	0e 94 48 01 	call	0x290	; 0x290 <kilo_init>
  kilo_message_tx = message_tx;         // Begin speaker loop
    11fa:	81 e7       	ldi	r24, 0x71	; 113
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    1202:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success; // Begin speaker validation loop
    1206:	84 e7       	ldi	r24, 0x74	; 116
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    120e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);              // Begin motion
    1212:	67 e2       	ldi	r22, 0x27	; 39
    1214:	71 e0       	ldi	r23, 0x01	; 1
    1216:	81 eb       	ldi	r24, 0xB1	; 177
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 40 05 	call	0xa80	; 0xa80 <kilo_start>
  return 0;
}
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	08 95       	ret

00001224 <__divmodhi4>:
    1224:	97 fb       	bst	r25, 7
    1226:	07 2e       	mov	r0, r23
    1228:	16 f4       	brtc	.+4      	; 0x122e <__divmodhi4+0xa>
    122a:	00 94       	com	r0
    122c:	07 d0       	rcall	.+14     	; 0x123c <__divmodhi4_neg1>
    122e:	77 fd       	sbrc	r23, 7
    1230:	09 d0       	rcall	.+18     	; 0x1244 <__divmodhi4_neg2>
    1232:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    1236:	07 fc       	sbrc	r0, 7
    1238:	05 d0       	rcall	.+10     	; 0x1244 <__divmodhi4_neg2>
    123a:	3e f4       	brtc	.+14     	; 0x124a <__divmodhi4_exit>

0000123c <__divmodhi4_neg1>:
    123c:	90 95       	com	r25
    123e:	81 95       	neg	r24
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__divmodhi4_neg2>:
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255

0000124a <__divmodhi4_exit>:
    124a:	08 95       	ret

0000124c <__divmodsi4>:
    124c:	05 2e       	mov	r0, r21
    124e:	97 fb       	bst	r25, 7
    1250:	1e f4       	brtc	.+6      	; 0x1258 <__divmodsi4+0xc>
    1252:	00 94       	com	r0
    1254:	0e 94 3d 09 	call	0x127a	; 0x127a <__negsi2>
    1258:	57 fd       	sbrc	r21, 7
    125a:	07 d0       	rcall	.+14     	; 0x126a <__divmodsi4_neg2>
    125c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodsi4>
    1260:	07 fc       	sbrc	r0, 7
    1262:	03 d0       	rcall	.+6      	; 0x126a <__divmodsi4_neg2>
    1264:	4e f4       	brtc	.+18     	; 0x1278 <__divmodsi4_exit>
    1266:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__negsi2>

0000126a <__divmodsi4_neg2>:
    126a:	50 95       	com	r21
    126c:	40 95       	com	r20
    126e:	30 95       	com	r19
    1270:	21 95       	neg	r18
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	4f 4f       	sbci	r20, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255

00001278 <__divmodsi4_exit>:
    1278:	08 95       	ret

0000127a <__negsi2>:
    127a:	90 95       	com	r25
    127c:	80 95       	com	r24
    127e:	70 95       	com	r23
    1280:	61 95       	neg	r22
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	08 95       	ret

0000128a <__tablejump2__>:
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	05 90       	lpm	r0, Z+
    1290:	f4 91       	lpm	r31, Z
    1292:	e0 2d       	mov	r30, r0
    1294:	09 94       	ijmp

00001296 <__umulhisi3>:
    1296:	a2 9f       	mul	r26, r18
    1298:	b0 01       	movw	r22, r0
    129a:	b3 9f       	mul	r27, r19
    129c:	c0 01       	movw	r24, r0
    129e:	a3 9f       	mul	r26, r19
    12a0:	70 0d       	add	r23, r0
    12a2:	81 1d       	adc	r24, r1
    12a4:	11 24       	eor	r1, r1
    12a6:	91 1d       	adc	r25, r1
    12a8:	b2 9f       	mul	r27, r18
    12aa:	70 0d       	add	r23, r0
    12ac:	81 1d       	adc	r24, r1
    12ae:	11 24       	eor	r1, r1
    12b0:	91 1d       	adc	r25, r1
    12b2:	08 95       	ret

000012b4 <__udivmodhi4>:
    12b4:	aa 1b       	sub	r26, r26
    12b6:	bb 1b       	sub	r27, r27
    12b8:	51 e1       	ldi	r21, 0x11	; 17
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <__udivmodhi4_ep>

000012bc <__udivmodhi4_loop>:
    12bc:	aa 1f       	adc	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	a6 17       	cp	r26, r22
    12c2:	b7 07       	cpc	r27, r23
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <__udivmodhi4_ep>
    12c6:	a6 1b       	sub	r26, r22
    12c8:	b7 0b       	sbc	r27, r23

000012ca <__udivmodhi4_ep>:
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	5a 95       	dec	r21
    12d0:	a9 f7       	brne	.-22     	; 0x12bc <__udivmodhi4_loop>
    12d2:	80 95       	com	r24
    12d4:	90 95       	com	r25
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	08 95       	ret

000012dc <__udivmodsi4>:
    12dc:	a1 e2       	ldi	r26, 0x21	; 33
    12de:	1a 2e       	mov	r1, r26
    12e0:	aa 1b       	sub	r26, r26
    12e2:	bb 1b       	sub	r27, r27
    12e4:	fd 01       	movw	r30, r26
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <__udivmodsi4_ep>

000012e8 <__udivmodsi4_loop>:
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	ee 1f       	adc	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	a2 17       	cp	r26, r18
    12f2:	b3 07       	cpc	r27, r19
    12f4:	e4 07       	cpc	r30, r20
    12f6:	f5 07       	cpc	r31, r21
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__udivmodsi4_ep>
    12fa:	a2 1b       	sub	r26, r18
    12fc:	b3 0b       	sbc	r27, r19
    12fe:	e4 0b       	sbc	r30, r20
    1300:	f5 0b       	sbc	r31, r21

00001302 <__udivmodsi4_ep>:
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	1a 94       	dec	r1
    130c:	69 f7       	brne	.-38     	; 0x12e8 <__udivmodsi4_loop>
    130e:	60 95       	com	r22
    1310:	70 95       	com	r23
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	bd 01       	movw	r22, r26
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret

00001320 <__subsf3>:
    1320:	50 58       	subi	r21, 0x80	; 128

00001322 <__addsf3>:
    1322:	bb 27       	eor	r27, r27
    1324:	aa 27       	eor	r26, r26
    1326:	0e 94 a8 09 	call	0x1350	; 0x1350 <__addsf3x>
    132a:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_round>
    132e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_pscA>
    1332:	38 f0       	brcs	.+14     	; 0x1342 <__addsf3+0x20>
    1334:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscB>
    1338:	20 f0       	brcs	.+8      	; 0x1342 <__addsf3+0x20>
    133a:	39 f4       	brne	.+14     	; 0x134a <__addsf3+0x28>
    133c:	9f 3f       	cpi	r25, 0xFF	; 255
    133e:	19 f4       	brne	.+6      	; 0x1346 <__addsf3+0x24>
    1340:	26 f4       	brtc	.+8      	; 0x134a <__addsf3+0x28>
    1342:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_nan>
    1346:	0e f4       	brtc	.+2      	; 0x134a <__addsf3+0x28>
    1348:	e0 95       	com	r30
    134a:	e7 fb       	bst	r30, 7
    134c:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__fp_inf>

00001350 <__addsf3x>:
    1350:	e9 2f       	mov	r30, r25
    1352:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_split3>
    1356:	58 f3       	brcs	.-42     	; 0x132e <__addsf3+0xc>
    1358:	ba 17       	cp	r27, r26
    135a:	62 07       	cpc	r22, r18
    135c:	73 07       	cpc	r23, r19
    135e:	84 07       	cpc	r24, r20
    1360:	95 07       	cpc	r25, r21
    1362:	20 f0       	brcs	.+8      	; 0x136c <__addsf3x+0x1c>
    1364:	79 f4       	brne	.+30     	; 0x1384 <__addsf3x+0x34>
    1366:	a6 f5       	brtc	.+104    	; 0x13d0 <__addsf3x+0x80>
    1368:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_zero>
    136c:	0e f4       	brtc	.+2      	; 0x1370 <__addsf3x+0x20>
    136e:	e0 95       	com	r30
    1370:	0b 2e       	mov	r0, r27
    1372:	ba 2f       	mov	r27, r26
    1374:	a0 2d       	mov	r26, r0
    1376:	0b 01       	movw	r0, r22
    1378:	b9 01       	movw	r22, r18
    137a:	90 01       	movw	r18, r0
    137c:	0c 01       	movw	r0, r24
    137e:	ca 01       	movw	r24, r20
    1380:	a0 01       	movw	r20, r0
    1382:	11 24       	eor	r1, r1
    1384:	ff 27       	eor	r31, r31
    1386:	59 1b       	sub	r21, r25
    1388:	99 f0       	breq	.+38     	; 0x13b0 <__addsf3x+0x60>
    138a:	59 3f       	cpi	r21, 0xF9	; 249
    138c:	50 f4       	brcc	.+20     	; 0x13a2 <__addsf3x+0x52>
    138e:	50 3e       	cpi	r21, 0xE0	; 224
    1390:	68 f1       	brcs	.+90     	; 0x13ec <__addsf3x+0x9c>
    1392:	1a 16       	cp	r1, r26
    1394:	f0 40       	sbci	r31, 0x00	; 0
    1396:	a2 2f       	mov	r26, r18
    1398:	23 2f       	mov	r18, r19
    139a:	34 2f       	mov	r19, r20
    139c:	44 27       	eor	r20, r20
    139e:	58 5f       	subi	r21, 0xF8	; 248
    13a0:	f3 cf       	rjmp	.-26     	; 0x1388 <__addsf3x+0x38>
    13a2:	46 95       	lsr	r20
    13a4:	37 95       	ror	r19
    13a6:	27 95       	ror	r18
    13a8:	a7 95       	ror	r26
    13aa:	f0 40       	sbci	r31, 0x00	; 0
    13ac:	53 95       	inc	r21
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <__addsf3x+0x52>
    13b0:	7e f4       	brtc	.+30     	; 0x13d0 <__addsf3x+0x80>
    13b2:	1f 16       	cp	r1, r31
    13b4:	ba 0b       	sbc	r27, r26
    13b6:	62 0b       	sbc	r22, r18
    13b8:	73 0b       	sbc	r23, r19
    13ba:	84 0b       	sbc	r24, r20
    13bc:	ba f0       	brmi	.+46     	; 0x13ec <__addsf3x+0x9c>
    13be:	91 50       	subi	r25, 0x01	; 1
    13c0:	a1 f0       	breq	.+40     	; 0x13ea <__addsf3x+0x9a>
    13c2:	ff 0f       	add	r31, r31
    13c4:	bb 1f       	adc	r27, r27
    13c6:	66 1f       	adc	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	c2 f7       	brpl	.-16     	; 0x13be <__addsf3x+0x6e>
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <__addsf3x+0x9c>
    13d0:	ba 0f       	add	r27, r26
    13d2:	62 1f       	adc	r22, r18
    13d4:	73 1f       	adc	r23, r19
    13d6:	84 1f       	adc	r24, r20
    13d8:	48 f4       	brcc	.+18     	; 0x13ec <__addsf3x+0x9c>
    13da:	87 95       	ror	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b7 95       	ror	r27
    13e2:	f7 95       	ror	r31
    13e4:	9e 3f       	cpi	r25, 0xFE	; 254
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <__addsf3x+0x9a>
    13e8:	b0 cf       	rjmp	.-160    	; 0x134a <__addsf3+0x28>
    13ea:	93 95       	inc	r25
    13ec:	88 0f       	add	r24, r24
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <__addsf3x+0xa2>
    13f0:	99 27       	eor	r25, r25
    13f2:	ee 0f       	add	r30, r30
    13f4:	97 95       	ror	r25
    13f6:	87 95       	ror	r24
    13f8:	08 95       	ret

000013fa <__divsf3>:
    13fa:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divsf3x>
    13fe:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_round>
    1402:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscB>
    1406:	58 f0       	brcs	.+22     	; 0x141e <__divsf3+0x24>
    1408:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_pscA>
    140c:	40 f0       	brcs	.+16     	; 0x141e <__divsf3+0x24>
    140e:	29 f4       	brne	.+10     	; 0x141a <__divsf3+0x20>
    1410:	5f 3f       	cpi	r21, 0xFF	; 255
    1412:	29 f0       	breq	.+10     	; 0x141e <__divsf3+0x24>
    1414:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__fp_inf>
    1418:	51 11       	cpse	r21, r1
    141a:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_szero>
    141e:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_nan>

00001422 <__divsf3x>:
    1422:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_split3>
    1426:	68 f3       	brcs	.-38     	; 0x1402 <__divsf3+0x8>

00001428 <__divsf3_pse>:
    1428:	99 23       	and	r25, r25
    142a:	b1 f3       	breq	.-20     	; 0x1418 <__divsf3+0x1e>
    142c:	55 23       	and	r21, r21
    142e:	91 f3       	breq	.-28     	; 0x1414 <__divsf3+0x1a>
    1430:	95 1b       	sub	r25, r21
    1432:	55 0b       	sbc	r21, r21
    1434:	bb 27       	eor	r27, r27
    1436:	aa 27       	eor	r26, r26
    1438:	62 17       	cp	r22, r18
    143a:	73 07       	cpc	r23, r19
    143c:	84 07       	cpc	r24, r20
    143e:	38 f0       	brcs	.+14     	; 0x144e <__divsf3_pse+0x26>
    1440:	9f 5f       	subi	r25, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	aa 1f       	adc	r26, r26
    144c:	a9 f3       	breq	.-22     	; 0x1438 <__divsf3_pse+0x10>
    144e:	35 d0       	rcall	.+106    	; 0x14ba <__divsf3_pse+0x92>
    1450:	0e 2e       	mov	r0, r30
    1452:	3a f0       	brmi	.+14     	; 0x1462 <__divsf3_pse+0x3a>
    1454:	e0 e8       	ldi	r30, 0x80	; 128
    1456:	32 d0       	rcall	.+100    	; 0x14bc <__divsf3_pse+0x94>
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	50 40       	sbci	r21, 0x00	; 0
    145c:	e6 95       	lsr	r30
    145e:	00 1c       	adc	r0, r0
    1460:	ca f7       	brpl	.-14     	; 0x1454 <__divsf3_pse+0x2c>
    1462:	2b d0       	rcall	.+86     	; 0x14ba <__divsf3_pse+0x92>
    1464:	fe 2f       	mov	r31, r30
    1466:	29 d0       	rcall	.+82     	; 0x14ba <__divsf3_pse+0x92>
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	bb 1f       	adc	r27, r27
    1470:	26 17       	cp	r18, r22
    1472:	37 07       	cpc	r19, r23
    1474:	48 07       	cpc	r20, r24
    1476:	ab 07       	cpc	r26, r27
    1478:	b0 e8       	ldi	r27, 0x80	; 128
    147a:	09 f0       	breq	.+2      	; 0x147e <__divsf3_pse+0x56>
    147c:	bb 0b       	sbc	r27, r27
    147e:	80 2d       	mov	r24, r0
    1480:	bf 01       	movw	r22, r30
    1482:	ff 27       	eor	r31, r31
    1484:	93 58       	subi	r25, 0x83	; 131
    1486:	5f 4f       	sbci	r21, 0xFF	; 255
    1488:	3a f0       	brmi	.+14     	; 0x1498 <__divsf3_pse+0x70>
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	51 05       	cpc	r21, r1
    148e:	78 f0       	brcs	.+30     	; 0x14ae <__divsf3_pse+0x86>
    1490:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__fp_inf>
    1494:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_szero>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	e4 f3       	brlt	.-8      	; 0x1494 <__divsf3_pse+0x6c>
    149c:	98 3e       	cpi	r25, 0xE8	; 232
    149e:	d4 f3       	brlt	.-12     	; 0x1494 <__divsf3_pse+0x6c>
    14a0:	86 95       	lsr	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <__divsf3_pse+0x78>
    14ae:	88 0f       	add	r24, r24
    14b0:	91 1d       	adc	r25, r1
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret
    14ba:	e1 e0       	ldi	r30, 0x01	; 1
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	bb 1f       	adc	r27, r27
    14c4:	62 17       	cp	r22, r18
    14c6:	73 07       	cpc	r23, r19
    14c8:	84 07       	cpc	r24, r20
    14ca:	ba 07       	cpc	r27, r26
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__divsf3_pse+0xae>
    14ce:	62 1b       	sub	r22, r18
    14d0:	73 0b       	sbc	r23, r19
    14d2:	84 0b       	sbc	r24, r20
    14d4:	ba 0b       	sbc	r27, r26
    14d6:	ee 1f       	adc	r30, r30
    14d8:	88 f7       	brcc	.-30     	; 0x14bc <__divsf3_pse+0x94>
    14da:	e0 95       	com	r30
    14dc:	08 95       	ret

000014de <__fixsfsi>:
    14de:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fixunssfsi>
    14e2:	68 94       	set
    14e4:	b1 11       	cpse	r27, r1
    14e6:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_szero>
    14ea:	08 95       	ret

000014ec <__fixunssfsi>:
    14ec:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_splitA>
    14f0:	88 f0       	brcs	.+34     	; 0x1514 <__fixunssfsi+0x28>
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	98 f0       	brcs	.+38     	; 0x151c <__fixunssfsi+0x30>
    14f6:	b9 2f       	mov	r27, r25
    14f8:	99 27       	eor	r25, r25
    14fa:	b7 51       	subi	r27, 0x17	; 23
    14fc:	b0 f0       	brcs	.+44     	; 0x152a <__fixunssfsi+0x3e>
    14fe:	e1 f0       	breq	.+56     	; 0x1538 <__fixunssfsi+0x4c>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	1a f0       	brmi	.+6      	; 0x1510 <__fixunssfsi+0x24>
    150a:	ba 95       	dec	r27
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__fixunssfsi+0x14>
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <__fixunssfsi+0x4c>
    1510:	b1 30       	cpi	r27, 0x01	; 1
    1512:	91 f0       	breq	.+36     	; 0x1538 <__fixunssfsi+0x4c>
    1514:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fp_zero>
    1518:	b1 e0       	ldi	r27, 0x01	; 1
    151a:	08 95       	ret
    151c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_zero>
    1520:	67 2f       	mov	r22, r23
    1522:	78 2f       	mov	r23, r24
    1524:	88 27       	eor	r24, r24
    1526:	b8 5f       	subi	r27, 0xF8	; 248
    1528:	39 f0       	breq	.+14     	; 0x1538 <__fixunssfsi+0x4c>
    152a:	b9 3f       	cpi	r27, 0xF9	; 249
    152c:	cc f3       	brlt	.-14     	; 0x1520 <__fixunssfsi+0x34>
    152e:	86 95       	lsr	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b3 95       	inc	r27
    1536:	d9 f7       	brne	.-10     	; 0x152e <__fixunssfsi+0x42>
    1538:	3e f4       	brtc	.+14     	; 0x1548 <__fixunssfsi+0x5c>
    153a:	90 95       	com	r25
    153c:	80 95       	com	r24
    153e:	70 95       	com	r23
    1540:	61 95       	neg	r22
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	08 95       	ret

0000154a <__floatunsisf>:
    154a:	e8 94       	clt
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <__floatsisf+0x12>

0000154e <__floatsisf>:
    154e:	97 fb       	bst	r25, 7
    1550:	3e f4       	brtc	.+14     	; 0x1560 <__floatsisf+0x12>
    1552:	90 95       	com	r25
    1554:	80 95       	com	r24
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	99 23       	and	r25, r25
    1562:	a9 f0       	breq	.+42     	; 0x158e <__floatsisf+0x40>
    1564:	f9 2f       	mov	r31, r25
    1566:	96 e9       	ldi	r25, 0x96	; 150
    1568:	bb 27       	eor	r27, r27
    156a:	93 95       	inc	r25
    156c:	f6 95       	lsr	r31
    156e:	87 95       	ror	r24
    1570:	77 95       	ror	r23
    1572:	67 95       	ror	r22
    1574:	b7 95       	ror	r27
    1576:	f1 11       	cpse	r31, r1
    1578:	f8 cf       	rjmp	.-16     	; 0x156a <__floatsisf+0x1c>
    157a:	fa f4       	brpl	.+62     	; 0x15ba <__floatsisf+0x6c>
    157c:	bb 0f       	add	r27, r27
    157e:	11 f4       	brne	.+4      	; 0x1584 <__floatsisf+0x36>
    1580:	60 ff       	sbrs	r22, 0
    1582:	1b c0       	rjmp	.+54     	; 0x15ba <__floatsisf+0x6c>
    1584:	6f 5f       	subi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	16 c0       	rjmp	.+44     	; 0x15ba <__floatsisf+0x6c>
    158e:	88 23       	and	r24, r24
    1590:	11 f0       	breq	.+4      	; 0x1596 <__floatsisf+0x48>
    1592:	96 e9       	ldi	r25, 0x96	; 150
    1594:	11 c0       	rjmp	.+34     	; 0x15b8 <__floatsisf+0x6a>
    1596:	77 23       	and	r23, r23
    1598:	21 f0       	breq	.+8      	; 0x15a2 <__floatsisf+0x54>
    159a:	9e e8       	ldi	r25, 0x8E	; 142
    159c:	87 2f       	mov	r24, r23
    159e:	76 2f       	mov	r23, r22
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <__floatsisf+0x5e>
    15a2:	66 23       	and	r22, r22
    15a4:	71 f0       	breq	.+28     	; 0x15c2 <__floatsisf+0x74>
    15a6:	96 e8       	ldi	r25, 0x86	; 134
    15a8:	86 2f       	mov	r24, r22
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	2a f0       	brmi	.+10     	; 0x15ba <__floatsisf+0x6c>
    15b0:	9a 95       	dec	r25
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	da f7       	brpl	.-10     	; 0x15b0 <__floatsisf+0x62>
    15ba:	88 0f       	add	r24, r24
    15bc:	96 95       	lsr	r25
    15be:	87 95       	ror	r24
    15c0:	97 f9       	bld	r25, 7
    15c2:	08 95       	ret

000015c4 <__fp_inf>:
    15c4:	97 f9       	bld	r25, 7
    15c6:	9f 67       	ori	r25, 0x7F	; 127
    15c8:	80 e8       	ldi	r24, 0x80	; 128
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	08 95       	ret

000015d0 <__fp_nan>:
    15d0:	9f ef       	ldi	r25, 0xFF	; 255
    15d2:	80 ec       	ldi	r24, 0xC0	; 192
    15d4:	08 95       	ret

000015d6 <__fp_pscA>:
    15d6:	00 24       	eor	r0, r0
    15d8:	0a 94       	dec	r0
    15da:	16 16       	cp	r1, r22
    15dc:	17 06       	cpc	r1, r23
    15de:	18 06       	cpc	r1, r24
    15e0:	09 06       	cpc	r0, r25
    15e2:	08 95       	ret

000015e4 <__fp_pscB>:
    15e4:	00 24       	eor	r0, r0
    15e6:	0a 94       	dec	r0
    15e8:	12 16       	cp	r1, r18
    15ea:	13 06       	cpc	r1, r19
    15ec:	14 06       	cpc	r1, r20
    15ee:	05 06       	cpc	r0, r21
    15f0:	08 95       	ret

000015f2 <__fp_round>:
    15f2:	09 2e       	mov	r0, r25
    15f4:	03 94       	inc	r0
    15f6:	00 0c       	add	r0, r0
    15f8:	11 f4       	brne	.+4      	; 0x15fe <__fp_round+0xc>
    15fa:	88 23       	and	r24, r24
    15fc:	52 f0       	brmi	.+20     	; 0x1612 <__fp_round+0x20>
    15fe:	bb 0f       	add	r27, r27
    1600:	40 f4       	brcc	.+16     	; 0x1612 <__fp_round+0x20>
    1602:	bf 2b       	or	r27, r31
    1604:	11 f4       	brne	.+4      	; 0x160a <__fp_round+0x18>
    1606:	60 ff       	sbrs	r22, 0
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <__fp_round+0x20>
    160a:	6f 5f       	subi	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	8f 4f       	sbci	r24, 0xFF	; 255
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	08 95       	ret

00001614 <__fp_split3>:
    1614:	57 fd       	sbrc	r21, 7
    1616:	90 58       	subi	r25, 0x80	; 128
    1618:	44 0f       	add	r20, r20
    161a:	55 1f       	adc	r21, r21
    161c:	59 f0       	breq	.+22     	; 0x1634 <__fp_splitA+0x10>
    161e:	5f 3f       	cpi	r21, 0xFF	; 255
    1620:	71 f0       	breq	.+28     	; 0x163e <__fp_splitA+0x1a>
    1622:	47 95       	ror	r20

00001624 <__fp_splitA>:
    1624:	88 0f       	add	r24, r24
    1626:	97 fb       	bst	r25, 7
    1628:	99 1f       	adc	r25, r25
    162a:	61 f0       	breq	.+24     	; 0x1644 <__fp_splitA+0x20>
    162c:	9f 3f       	cpi	r25, 0xFF	; 255
    162e:	79 f0       	breq	.+30     	; 0x164e <__fp_splitA+0x2a>
    1630:	87 95       	ror	r24
    1632:	08 95       	ret
    1634:	12 16       	cp	r1, r18
    1636:	13 06       	cpc	r1, r19
    1638:	14 06       	cpc	r1, r20
    163a:	55 1f       	adc	r21, r21
    163c:	f2 cf       	rjmp	.-28     	; 0x1622 <__fp_split3+0xe>
    163e:	46 95       	lsr	r20
    1640:	f1 df       	rcall	.-30     	; 0x1624 <__fp_splitA>
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <__fp_splitA+0x30>
    1644:	16 16       	cp	r1, r22
    1646:	17 06       	cpc	r1, r23
    1648:	18 06       	cpc	r1, r24
    164a:	99 1f       	adc	r25, r25
    164c:	f1 cf       	rjmp	.-30     	; 0x1630 <__fp_splitA+0xc>
    164e:	86 95       	lsr	r24
    1650:	71 05       	cpc	r23, r1
    1652:	61 05       	cpc	r22, r1
    1654:	08 94       	sec
    1656:	08 95       	ret

00001658 <__fp_zero>:
    1658:	e8 94       	clt

0000165a <__fp_szero>:
    165a:	bb 27       	eor	r27, r27
    165c:	66 27       	eor	r22, r22
    165e:	77 27       	eor	r23, r23
    1660:	cb 01       	movw	r24, r22
    1662:	97 f9       	bld	r25, 7
    1664:	08 95       	ret

00001666 <__mulsf3>:
    1666:	0e 94 46 0b 	call	0x168c	; 0x168c <__mulsf3x>
    166a:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__fp_round>
    166e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_pscA>
    1672:	38 f0       	brcs	.+14     	; 0x1682 <__mulsf3+0x1c>
    1674:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscB>
    1678:	20 f0       	brcs	.+8      	; 0x1682 <__mulsf3+0x1c>
    167a:	95 23       	and	r25, r21
    167c:	11 f0       	breq	.+4      	; 0x1682 <__mulsf3+0x1c>
    167e:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__fp_inf>
    1682:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__fp_nan>
    1686:	11 24       	eor	r1, r1
    1688:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_szero>

0000168c <__mulsf3x>:
    168c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fp_split3>
    1690:	70 f3       	brcs	.-36     	; 0x166e <__mulsf3+0x8>

00001692 <__mulsf3_pse>:
    1692:	95 9f       	mul	r25, r21
    1694:	c1 f3       	breq	.-16     	; 0x1686 <__mulsf3+0x20>
    1696:	95 0f       	add	r25, r21
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	55 1f       	adc	r21, r21
    169c:	62 9f       	mul	r22, r18
    169e:	f0 01       	movw	r30, r0
    16a0:	72 9f       	mul	r23, r18
    16a2:	bb 27       	eor	r27, r27
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	63 9f       	mul	r22, r19
    16aa:	aa 27       	eor	r26, r26
    16ac:	f0 0d       	add	r31, r0
    16ae:	b1 1d       	adc	r27, r1
    16b0:	aa 1f       	adc	r26, r26
    16b2:	64 9f       	mul	r22, r20
    16b4:	66 27       	eor	r22, r22
    16b6:	b0 0d       	add	r27, r0
    16b8:	a1 1d       	adc	r26, r1
    16ba:	66 1f       	adc	r22, r22
    16bc:	82 9f       	mul	r24, r18
    16be:	22 27       	eor	r18, r18
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	73 9f       	mul	r23, r19
    16c8:	b0 0d       	add	r27, r0
    16ca:	a1 1d       	adc	r26, r1
    16cc:	62 1f       	adc	r22, r18
    16ce:	83 9f       	mul	r24, r19
    16d0:	a0 0d       	add	r26, r0
    16d2:	61 1d       	adc	r22, r1
    16d4:	22 1f       	adc	r18, r18
    16d6:	74 9f       	mul	r23, r20
    16d8:	33 27       	eor	r19, r19
    16da:	a0 0d       	add	r26, r0
    16dc:	61 1d       	adc	r22, r1
    16de:	23 1f       	adc	r18, r19
    16e0:	84 9f       	mul	r24, r20
    16e2:	60 0d       	add	r22, r0
    16e4:	21 1d       	adc	r18, r1
    16e6:	82 2f       	mov	r24, r18
    16e8:	76 2f       	mov	r23, r22
    16ea:	6a 2f       	mov	r22, r26
    16ec:	11 24       	eor	r1, r1
    16ee:	9f 57       	subi	r25, 0x7F	; 127
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	9a f0       	brmi	.+38     	; 0x171a <__mulsf3_pse+0x88>
    16f4:	f1 f0       	breq	.+60     	; 0x1732 <__mulsf3_pse+0xa0>
    16f6:	88 23       	and	r24, r24
    16f8:	4a f0       	brmi	.+18     	; 0x170c <__mulsf3_pse+0x7a>
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	bb 1f       	adc	r27, r27
    1700:	66 1f       	adc	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	50 40       	sbci	r21, 0x00	; 0
    170a:	a9 f7       	brne	.-22     	; 0x16f6 <__mulsf3_pse+0x64>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	80 f0       	brcs	.+32     	; 0x1732 <__mulsf3_pse+0xa0>
    1712:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__fp_inf>
    1716:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_szero>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	e4 f3       	brlt	.-8      	; 0x1716 <__mulsf3_pse+0x84>
    171e:	98 3e       	cpi	r25, 0xE8	; 232
    1720:	d4 f3       	brlt	.-12     	; 0x1716 <__mulsf3_pse+0x84>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	e7 95       	ror	r30
    172e:	9f 5f       	subi	r25, 0xFF	; 255
    1730:	c1 f7       	brne	.-16     	; 0x1722 <__mulsf3_pse+0x90>
    1732:	fe 2b       	or	r31, r30
    1734:	88 0f       	add	r24, r24
    1736:	91 1d       	adc	r25, r1
    1738:	96 95       	lsr	r25
    173a:	87 95       	ror	r24
    173c:	97 f9       	bld	r25, 7
    173e:	08 95       	ret

00001740 <eeprom_read_byte>:
    1740:	f9 99       	sbic	0x1f, 1	; 31
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <eeprom_read_byte>
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
    1748:	f8 9a       	sbi	0x1f, 0	; 31
    174a:	99 27       	eor	r25, r25
    174c:	80 b5       	in	r24, 0x20	; 32
    174e:	08 95       	ret

00001750 <eeprom_write_byte>:
    1750:	26 2f       	mov	r18, r22

00001752 <eeprom_write_r18>:
    1752:	f9 99       	sbic	0x1f, 1	; 31
    1754:	fe cf       	rjmp	.-4      	; 0x1752 <eeprom_write_r18>
    1756:	1f ba       	out	0x1f, r1	; 31
    1758:	92 bd       	out	0x22, r25	; 34
    175a:	81 bd       	out	0x21, r24	; 33
    175c:	20 bd       	out	0x20, r18	; 32
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	fa 9a       	sbi	0x1f, 2	; 31
    1764:	f9 9a       	sbi	0x1f, 1	; 31
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	08 95       	ret

0000176c <_exit>:
    176c:	f8 94       	cli

0000176e <__stop_program>:
    176e:	ff cf       	rjmp	.-2      	; 0x176e <__stop_program>
