
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	05 05       	cpc	r16, r5
      6a:	5c 05       	cpc	r21, r12
      6c:	70 05       	cpc	r23, r0
      6e:	a1 05       	cpc	r26, r1
      70:	a8 05       	cpc	r26, r8
      72:	87 05       	cpc	r24, r7
      74:	ab 05       	cpc	r26, r11
      76:	09 07       	cpc	r16, r25
      78:	fa 07       	cpc	r31, r26
      7a:	fa 07       	cpc	r31, r26
      7c:	12 07       	cpc	r17, r18
      7e:	15 07       	cpc	r17, r21
      80:	18 07       	cpc	r17, r24
      82:	1a 07       	cpc	r17, r26
      84:	1c 07       	cpc	r17, r28
      86:	1e 07       	cpc	r17, r30
      88:	cf 07       	cpc	r28, r31
      8a:	30 07       	cpc	r19, r16

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e5       	ldi	r30, 0x50	; 80
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ac 08 	call	0x1158	; 0x1158 <main>
      da:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

int message_sent = 0, new_message = 0, die = 4, rand = 0, curr;
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <message_sent+0x1>
      f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <message_sent>
      f4:	08 95       	ret

000000f6 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  transmit_msg.type = NORMAL;
      fa:	c6 e1       	ldi	r28, 0x16	; 22
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 0;
     100:	18 82       	st	Y, r1
  transmit_msg.crc = message_crc(&transmit_msg);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 0d 08 	call	0x101a	; 0x101a <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <set_motion>:
void message_tx_success() {
  message_sent = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     112:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <curr>
     116:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <curr+0x1>
     11a:	28 17       	cp	r18, r24
     11c:	39 07       	cpc	r19, r25
     11e:	09 f1       	breq	.+66     	; 0x162 <set_motion+0x50>
        curr = new_motion;
     120:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <curr+0x1>
     124:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <curr>
        if (curr == STOP) {
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	11 f4       	brne	.+4      	; 0x130 <set_motion+0x1e>
          set_motors(0,0);
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	16 c0       	rjmp	.+44     	; 0x15c <set_motion+0x4a>
        } else if (curr == FORWARD) {
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	39 f4       	brne	.+14     	; 0x144 <set_motion+0x32>
          spinup_motors();
     136:	0e 94 05 02 	call	0x40a	; 0x40a <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     13a:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     13e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     142:	0d c0       	rjmp	.+26     	; 0x15e <set_motion+0x4c>
        } else if (curr == LEFT) {
     144:	02 97       	sbiw	r24, 0x02	; 2
     146:	31 f4       	brne	.+12     	; 0x154 <set_motion+0x42>
          spinup_motors();
     148:	0e 94 05 02 	call	0x40a	; 0x40a <spinup_motors>
          set_motors(kilo_turn_left, 0);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     152:	05 c0       	rjmp	.+10     	; 0x15e <set_motion+0x4c>
        } else {
          spinup_motors();
     154:	0e 94 05 02 	call	0x40a	; 0x40a <spinup_motors>
          set_motors(0, kilo_turn_right);
     158:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0c 94 00 02 	jmp	0x400	; 0x400 <set_motors>
     162:	08 95       	ret

00000164 <loop>:
  transmit_msg.data[0] = 0;
  transmit_msg.crc = message_crc(&transmit_msg);
}

void loop() {
  if (message_sent == 1) {
     164:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <message_sent>
     168:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <message_sent+0x1>
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	d9 f5       	brne	.+118    	; 0x1e6 <loop+0x82>
      message_sent = 0;
     170:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <message_sent+0x1>
     174:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent>
      set_color(RED);
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
      rand = rand_soft();
     17e:	0e 94 a5 02 	call	0x54a	; 0x54a <rand_soft>
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     188:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
      if (die == 0) {
     18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     190:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     194:	00 97       	sbiw	r24, 0x00	; 0
     196:	19 f4       	brne	.+6      	; 0x19e <loop+0x3a>
          set_motion(FORWARD);
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <loop+0x44>
      } else if (die == 1) {
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	91 05       	cpc	r25, r1
     1a2:	29 f4       	brne	.+10     	; 0x1ae <loop+0x4a>
          set_motion(LEFT);
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 89 00 	call	0x112	; 0x112 <set_motion>
     1ac:	10 c0       	rjmp	.+32     	; 0x1ce <loop+0x6a>
      } else if (die == 2) {
     1ae:	02 97       	sbiw	r24, 0x02	; 2
     1b0:	19 f4       	brne	.+6      	; 0x1b8 <loop+0x54>
          set_motion(RIGHT);
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	f8 cf       	rjmp	.-16     	; 0x1a8 <loop+0x44>
      } else {
	  set_color(WHITE);
     1b8:	85 e1       	ldi	r24, 0x15	; 21
     1ba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
	  set_motion(STOP);
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 89 00 	call	0x112	; 0x112 <set_motion>
	  delay(2500);
     1c6:	84 ec       	ldi	r24, 0xC4	; 196
     1c8:	99 e0       	ldi	r25, 0x09	; 9
     1ca:	0e 94 f5 01 	call	0x3ea	; 0x3ea <delay>
      }
      die = (rand % 3);
     1ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     1d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     1d6:	63 e0       	ldi	r22, 0x03	; 3
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodhi4>
     1de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1e6:	08 95       	ret

000001e8 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1e8:	08 95       	ret

000001ea <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1f0:	08 95       	ret

000001f2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
    cli();
     200:	f8 94       	cli

    ports_off();
     202:	14 b8       	out	0x04, r1	; 4
     204:	17 b8       	out	0x07, r1	; 7
     206:	1a b8       	out	0x0a, r1	; 10
     208:	15 b8       	out	0x05, r1	; 5
     20a:	18 b8       	out	0x08, r1	; 8
     20c:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     20e:	52 9a       	sbi	0x0a, 2	; 10
     210:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     212:	14 bc       	out	0x24, r1	; 36
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	85 bd       	out	0x25, r24	; 37
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	87 bd       	out	0x27, r24	; 39
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     222:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     226:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     22a:	2f e8       	ldi	r18, 0x8F	; 143
     22c:	3b e0       	ldi	r19, 0x0B	; 11
     22e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     232:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     23a:	53 98       	cbi	0x0a, 3	; 10
     23c:	23 98       	cbi	0x04, 3	; 4
     23e:	91 ea       	ldi	r25, 0xA1	; 161
     240:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     244:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     248:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     24c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     250:	8b e0       	ldi	r24, 0x0B	; 11
     252:	80 bf       	out	0x30, r24	; 48
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     260:	83 e8       	ldi	r24, 0x83	; 131
     262:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     266:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     270:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     274:	86 fd       	sbrc	r24, 6
     276:	fc cf       	rjmp	.-8      	; 0x270 <kilo_init+0x7e>
    adc_trigger_high_gain();
     278:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     27c:	83 ea       	ldi	r24, 0xA3	; 163
     27e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
    if (osccal != 0xFF)
     290:	8f 3f       	cpi	r24, 0xFF	; 255
     292:	11 f0       	breq	.+4      	; 0x298 <kilo_init+0xa6>
        OSCCAL = osccal;
     294:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     298:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     29c:	c1 e0       	ldi	r28, 0x01	; 1
     29e:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     2a2:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     2a6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     2aa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2ae:	80 e9       	ldi	r24, 0x90	; 144
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     2b6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2ba:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     2be:	88 73       	andi	r24, 0x38	; 56
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2c2:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     2c6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     2ca:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     2d6:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     2da:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     2de:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     2e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     2e6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     2f0:	82 e4       	ldi	r24, 0x42	; 66
     2f2:	9f e0       	ldi	r25, 0x0F	; 15
     2f4:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     2f8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2fc:	80 eb       	ldi	r24, 0xB0	; 176
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     304:	c8 2f       	mov	r28, r24
     306:	81 eb       	ldi	r24, 0xB1	; 177
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     30e:	2c 2f       	mov	r18, r28
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	38 2b       	or	r19, r24
     314:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     318:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     31c:	85 e0       	ldi	r24, 0x05	; 5
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     324:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     328:	89 e0       	ldi	r24, 0x09	; 9
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     330:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     334:	8c e0       	ldi	r24, 0x0C	; 12
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     33c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     340:	84 e1       	ldi	r24, 0x14	; 20
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     348:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     34c:	0a e4       	ldi	r16, 0x4A	; 74
     34e:	11 e0       	ldi	r17, 0x01	; 1
     350:	53 e2       	ldi	r21, 0x23	; 35
     352:	e5 2e       	mov	r14, r21
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	f5 2e       	mov	r15, r21
     358:	c0 e2       	ldi	r28, 0x20	; 32
     35a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     35c:	ce 01       	movw	r24, r28
     35e:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     362:	d8 2e       	mov	r13, r24
     364:	ce 01       	movw	r24, r28
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     36c:	2d 2d       	mov	r18, r13
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	32 2f       	mov	r19, r18
     372:	22 27       	eor	r18, r18
     374:	28 2b       	or	r18, r24
     376:	f8 01       	movw	r30, r16
     378:	21 93       	st	Z+, r18
     37a:	31 93       	st	Z+, r19
     37c:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     37e:	ce 01       	movw	r24, r28
     380:	c0 96       	adiw	r24, 0x30	; 48
     382:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     386:	d8 2e       	mov	r13, r24
     388:	ce 01       	movw	r24, r28
     38a:	c1 96       	adiw	r24, 0x31	; 49
     38c:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_read_byte>
     390:	2d 2d       	mov	r18, r13
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	32 2f       	mov	r19, r18
     396:	22 27       	eor	r18, r18
     398:	28 2b       	or	r18, r24
     39a:	f7 01       	movw	r30, r14
     39c:	21 93       	st	Z+, r18
     39e:	31 93       	st	Z+, r19
     3a0:	7f 01       	movw	r14, r30
     3a2:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3a4:	cc 33       	cpi	r28, 0x3C	; 60
     3a6:	d1 05       	cpc	r29, r1
     3a8:	c9 f6       	brne	.-78     	; 0x35c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3aa:	78 94       	sei
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	08 95       	ret

000003bc <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	8f 93       	push	r24
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	a8 95       	wdr
     3ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3d2:	88 61       	ori	r24, 0x18	; 24
     3d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3dc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3de:	8f 91       	pop	r24
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	41 f0       	breq	.+16     	; 0x3fe <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ee:	ef ec       	ldi	r30, 0xCF	; 207
     3f0:	f7 e0       	ldi	r31, 0x07	; 7
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <delay+0x8>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <delay+0xe>
     3f8:	00 00       	nop
        _delay_ms(1);
        ms--;
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <delay>
    }
}
     3fe:	08 95       	ret

00000400 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     400:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     404:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     408:	08 95       	ret

0000040a <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     410:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     414:	8f e0       	ldi	r24, 0x0F	; 15
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <delay>

0000041c <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     41c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     420:	81 11       	cpse	r24, r1
     422:	1e c0       	rjmp	.+60     	; 0x460 <get_ambientlight+0x44>
        cli();
     424:	f8 94       	cli
        adc_setup_conversion(7);
     426:	87 e0       	ldi	r24, 0x07	; 7
     428:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     42c:	83 e8       	ldi	r24, 0x83	; 131
     42e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     432:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     436:	80 64       	ori	r24, 0x40	; 64
     438:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     43c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     440:	86 fd       	sbrc	r24, 6
     442:	fc cf       	rjmp	.-8      	; 0x43c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     44c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     450:	23 ea       	ldi	r18, 0xA3	; 163
     452:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     45c:	78 94       	sei
     45e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     464:	08 95       	ret

00000466 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     466:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     46a:	81 11       	cpse	r24, r1
     46c:	1e c0       	rjmp	.+60     	; 0x4aa <get_temperature+0x44>
        cli();
     46e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     470:	88 ec       	ldi	r24, 0xC8	; 200
     472:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     476:	87 e8       	ldi	r24, 0x87	; 135
     478:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     47c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     480:	80 64       	ori	r24, 0x40	; 64
     482:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     486:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     48a:	86 fd       	sbrc	r24, 6
     48c:	fc cf       	rjmp	.-8      	; 0x486 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     48e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     492:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     496:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     49a:	23 ea       	ldi	r18, 0xA3	; 163
     49c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4a6:	78 94       	sei
     4a8:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     4ae:	08 95       	ret

000004b0 <rand_hard>:

uint8_t rand_hard() {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4ba:	e3 ea       	ldi	r30, 0xA3	; 163
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4be:	c6 e0       	ldi	r28, 0x06	; 6
     4c0:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4c2:	a1 e0       	ldi	r26, 0x01	; 1
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4c6:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4c8:	f8 94       	cli
            adc_setup_conversion(6);
     4ca:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ce:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4d2:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d6:	40 64       	ori	r20, 0x40	; 64
     4d8:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4dc:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e0:	46 fd       	sbrc	r20, 6
     4e2:	fc cf       	rjmp	.-8      	; 0x4dc <rand_hard+0x2c>
            a = ADCW&0x1;
     4e4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4e8:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4ec:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     4ee:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f2:	50 64       	ori	r21, 0x40	; 64
     4f4:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4f8:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fc:	56 fd       	sbrc	r21, 6
     4fe:	fc cf       	rjmp	.-8      	; 0x4f8 <rand_hard+0x48>
            b = ADCW&0x1;
     500:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     504:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     508:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     50c:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     510:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     514:	78 94       	sei
            tries++;
     516:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     518:	61 70       	andi	r22, 0x01	; 1
     51a:	46 17       	cp	r20, r22
     51c:	51 f0       	breq	.+20     	; 0x532 <rand_hard+0x82>
        if (a)
     51e:	44 23       	and	r20, r20
     520:	59 f0       	breq	.+22     	; 0x538 <rand_hard+0x88>
            num |= (1<<i);
     522:	ad 01       	movw	r20, r26
     524:	02 2e       	mov	r0, r18
     526:	01 c0       	rjmp	.+2      	; 0x52a <rand_hard+0x7a>
     528:	44 0f       	add	r20, r20
     52a:	0a 94       	dec	r0
     52c:	ea f7       	brpl	.-6      	; 0x528 <rand_hard+0x78>
     52e:	84 2b       	or	r24, r20
     530:	03 c0       	rjmp	.+6      	; 0x538 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     532:	90 38       	cpi	r25, 0x80	; 128
     534:	49 f6       	brne	.-110    	; 0x4c8 <rand_hard+0x18>
     536:	f3 cf       	rjmp	.-26     	; 0x51e <rand_hard+0x6e>
     538:	2f 5f       	subi	r18, 0xFF	; 255
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     53c:	28 30       	cpi	r18, 0x08	; 8
     53e:	31 05       	cpc	r19, r1
     540:	09 f0       	breq	.+2      	; 0x544 <rand_hard+0x94>
     542:	c1 cf       	rjmp	.-126    	; 0x4c6 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     54a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     54e:	98 e0       	ldi	r25, 0x08	; 8
     550:	89 9f       	mul	r24, r25
     552:	90 01       	movw	r18, r0
     554:	11 24       	eor	r1, r1
     556:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     558:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	89 0f       	add	r24, r25
     560:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     564:	82 2f       	mov	r24, r18
     566:	82 95       	swap	r24
     568:	86 95       	lsr	r24
     56a:	87 70       	andi	r24, 0x07	; 7
     56c:	28 27       	eor	r18, r24
     56e:	96 95       	lsr	r25
     570:	96 95       	lsr	r25
     572:	82 2f       	mov	r24, r18
     574:	89 27       	eor	r24, r25
     576:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     57a:	08 95       	ret

0000057c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     57c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     580:	08 95       	ret

00000582 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     582:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     586:	81 11       	cpse	r24, r1
     588:	16 c0       	rjmp	.+44     	; 0x5b6 <get_voltage+0x34>
        cli();                                    // disable interrupts
     58a:	f8 94       	cli
        adc_setup_conversion(6);
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     592:	83 e8       	ldi	r24, 0x83	; 131
     594:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     598:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59c:	80 64       	ori	r24, 0x40	; 64
     59e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a6:	86 fd       	sbrc	r24, 6
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5b2:	78 94       	sei
     5b4:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5ba:	08 95       	ret

000005bc <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5e2:	fc 01       	movw	r30, r24
     5e4:	c2 81       	ldd	r28, Z+2	; 0x02
     5e6:	d3 81       	ldd	r29, Z+3	; 0x03
     5e8:	c4 38       	cpi	r28, 0x84	; 132
     5ea:	f3 e0       	ldi	r31, 0x03	; 3
     5ec:	df 07       	cpc	r29, r31
     5ee:	0c f0       	brlt	.+2      	; 0x5f2 <estimate_distance+0x36>
     5f0:	7e c0       	rjmp	.+252    	; 0x6ee <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     5f2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     5f6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     5fa:	8c 17       	cp	r24, r28
     5fc:	9d 07       	cpc	r25, r29
     5fe:	08 f4       	brcc	.+2      	; 0x602 <estimate_distance+0x46>
     600:	6f c0       	rjmp	.+222    	; 0x6e0 <estimate_distance+0x124>
     602:	e5 e2       	ldi	r30, 0x25	; 37
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     608:	81 91       	ld	r24, Z+
     60a:	91 91       	ld	r25, Z+
     60c:	8c 17       	cp	r24, r28
     60e:	9d 07       	cpc	r25, r29
     610:	20 f0       	brcs	.+8      	; 0x61a <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     612:	1f 5f       	subi	r17, 0xFF	; 255
     614:	1e 30       	cpi	r17, 0x0E	; 14
     616:	c1 f7       	brne	.-16     	; 0x608 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     618:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     61a:	81 2f       	mov	r24, r17
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ed 5d       	subi	r30, 0xDD	; 221
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	e0 80       	ld	r14, Z
     62a:	f1 80       	ldd	r15, Z+1	; 0x01
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	fc 01       	movw	r30, r24
     632:	ef 5d       	subi	r30, 0xDF	; 223
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	80 81       	ld	r24, Z
     638:	91 81       	ldd	r25, Z+1	; 0x01
     63a:	b7 01       	movw	r22, r14
     63c:	68 1b       	sub	r22, r24
     63e:	79 0b       	sbc	r23, r25
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     648:	9b 01       	movw	r18, r22
     64a:	ac 01       	movw	r20, r24
     64c:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     650:	4b 01       	movw	r8, r22
     652:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     654:	be 01       	movw	r22, r28
     656:	0d 2e       	mov	r0, r29
     658:	00 0c       	add	r0, r0
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 17 0a 	call	0x142e	; 0x142e <__floatsisf>
     662:	2b 01       	movw	r4, r22
     664:	3c 01       	movw	r6, r24
     666:	b7 01       	movw	r22, r14
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     670:	6b 01       	movw	r12, r22
     672:	7c 01       	movw	r14, r24
     674:	61 2f       	mov	r22, r17
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	a9 01       	movw	r20, r18
     692:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     696:	a5 01       	movw	r20, r10
     698:	94 01       	movw	r18, r8
     69a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	51 e4       	ldi	r21, 0x41	; 65
     6be:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     6c2:	0e 94 df 09 	call	0x13be	; 0x13be <__fixsfsi>
     6c6:	7b 01       	movw	r14, r22
     6c8:	c5 01       	movw	r24, r10
     6ca:	b4 01       	movw	r22, r8
     6cc:	0e 94 df 09 	call	0x13be	; 0x13be <__fixsfsi>
     6d0:	ab 01       	movw	r20, r22
     6d2:	bc 01       	movw	r22, r24
     6d4:	c7 01       	movw	r24, r14
     6d6:	ba 01       	movw	r22, r20
     6d8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodhi4>
     6dc:	16 2f       	mov	r17, r22
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6e0:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6e2:	cd 3b       	cpi	r28, 0xBD	; 189
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	d8 07       	cpc	r29, r24
     6e8:	0c f4       	brge	.+2      	; 0x6ec <estimate_distance+0x130>
     6ea:	ca c0       	rjmp	.+404    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     6ee:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     6f0:	f1 01       	movw	r30, r2
     6f2:	c0 80       	ld	r12, Z
     6f4:	d1 80       	ldd	r13, Z+1	; 0x01
     6f6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     6fa:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     6fe:	8c 15       	cp	r24, r12
     700:	9d 05       	cpc	r25, r13
     702:	88 f0       	brcs	.+34     	; 0x726 <estimate_distance+0x16a>
     704:	ec e4       	ldi	r30, 0x4C	; 76
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     70e:	e1 90       	ld	r14, Z+
     710:	f1 90       	ld	r15, Z+
     712:	ec 14       	cp	r14, r12
     714:	fd 04       	cpc	r15, r13
     716:	08 f4       	brcc	.+2      	; 0x71a <estimate_distance+0x15e>
     718:	58 c0       	rjmp	.+176    	; 0x7ca <estimate_distance+0x20e>
     71a:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     71c:	8e 30       	cpi	r24, 0x0E	; 14
     71e:	91 05       	cpc	r25, r1
     720:	a9 f7       	brne	.-22     	; 0x70c <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     722:	0a e5       	ldi	r16, 0x5A	; 90
     724:	01 c0       	rjmp	.+2      	; 0x728 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     726:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     728:	1f 3f       	cpi	r17, 0xFF	; 255
     72a:	09 f4       	brne	.+2      	; 0x72e <estimate_distance+0x172>
     72c:	4b c0       	rjmp	.+150    	; 0x7c4 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     72e:	be 01       	movw	r22, r28
     730:	dd 0f       	add	r29, r29
     732:	88 0b       	sbc	r24, r24
     734:	99 0b       	sbc	r25, r25
     736:	0e 94 17 0a 	call	0x142e	; 0x142e <__floatsisf>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	61 2f       	mov	r22, r17
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     74a:	4b 01       	movw	r8, r22
     74c:	5c 01       	movw	r10, r24
     74e:	a7 01       	movw	r20, r14
     750:	96 01       	movw	r18, r12
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	81 e6       	ldi	r24, 0x61	; 97
     758:	94 e4       	ldi	r25, 0x44	; 68
     75a:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	c5 01       	movw	r24, r10
     764:	b4 01       	movw	r22, r8
     766:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     76a:	4b 01       	movw	r8, r22
     76c:	5c 01       	movw	r10, r24
     76e:	60 2f       	mov	r22, r16
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     77a:	2b 01       	movw	r4, r22
     77c:	3c 01       	movw	r6, r24
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	4f e2       	ldi	r20, 0x2F	; 47
     784:	54 e4       	ldi	r21, 0x44	; 68
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
     792:	c3 01       	movw	r24, r6
     794:	b2 01       	movw	r22, r4
     796:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     79a:	9b 01       	movw	r18, r22
     79c:	ac 01       	movw	r20, r24
     79e:	c5 01       	movw	r24, r10
     7a0:	b4 01       	movw	r22, r8
     7a2:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	48 e4       	ldi	r20, 0x48	; 72
     7ac:	53 e4       	ldi	r21, 0x43	; 67
     7ae:	0e 94 6d 09 	call	0x12da	; 0x12da <__divsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	44 e0       	ldi	r20, 0x04	; 4
     7b8:	52 e4       	ldi	r21, 0x42	; 66
     7ba:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     7be:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fixunssfsi>
     7c2:	60 c0       	rjmp	.+192    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
        } else {
            return 33 + dist_low;
     7c4:	61 e2       	ldi	r22, 0x21	; 33
     7c6:	60 0f       	add	r22, r16
     7c8:	5d c0       	rjmp	.+186    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	fc 01       	movw	r30, r24
     7d0:	e8 5b       	subi	r30, 0xB8	; 184
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	b7 01       	movw	r22, r14
     7da:	68 1b       	sub	r22, r24
     7dc:	79 0b       	sbc	r23, r25
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     7ee:	4b 01       	movw	r8, r22
     7f0:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     7f2:	b6 01       	movw	r22, r12
     7f4:	dd 0c       	add	r13, r13
     7f6:	88 0b       	sbc	r24, r24
     7f8:	99 0b       	sbc	r25, r25
     7fa:	0e 94 17 0a 	call	0x142e	; 0x142e <__floatsisf>
     7fe:	2b 01       	movw	r4, r22
     800:	3c 01       	movw	r6, r24
     802:	b7 01       	movw	r22, r14
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
     810:	63 2d       	mov	r22, r3
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatunsisf>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	0e 94 01 09 	call	0x1202	; 0x1202 <__addsf3>
     832:	a5 01       	movw	r20, r10
     834:	94 01       	movw	r18, r8
     836:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
     846:	9b 01       	movw	r18, r22
     848:	ac 01       	movw	r20, r24
     84a:	c3 01       	movw	r24, r6
     84c:	b2 01       	movw	r22, r4
     84e:	0e 94 00 09 	call	0x1200	; 0x1200 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e2       	ldi	r20, 0x20	; 32
     858:	51 e4       	ldi	r21, 0x41	; 65
     85a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__mulsf3>
     85e:	0e 94 df 09 	call	0x13be	; 0x13be <__fixsfsi>
     862:	7b 01       	movw	r14, r22
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 df 09 	call	0x13be	; 0x13be <__fixsfsi>
     86c:	ab 01       	movw	r20, r22
     86e:	bc 01       	movw	r22, r24
     870:	c7 01       	movw	r24, r14
     872:	ba 01       	movw	r22, r20
     874:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divmodhi4>
     878:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     87a:	6f 3f       	cpi	r22, 0xFF	; 255
     87c:	09 f0       	breq	.+2      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     87e:	54 cf       	rjmp	.-344    	; 0x728 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     880:	61 e2       	ldi	r22, 0x21	; 33
     882:	61 0f       	add	r22, r17
    }
}
     884:	86 2f       	mov	r24, r22
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	3f 90       	pop	r3
     8a8:	2f 90       	pop	r2
     8aa:	08 95       	ret

000008ac <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
    tx_clock += tx_increment;
     8ce:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     8d2:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     8d6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     8da:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     8e6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     8f2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8fa:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     8fe:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     902:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     906:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	a1 1d       	adc	r26, r1
     90e:	b1 1d       	adc	r27, r1
     910:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     914:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     918:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     91c:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     920:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     924:	81 11       	cpse	r24, r1
     926:	2d c0       	rjmp	.+90     	; 0x982 <__stack+0x83>
     928:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     92c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     930:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     934:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     938:	82 17       	cp	r24, r18
     93a:	93 07       	cpc	r25, r19
     93c:	10 f5       	brcc	.+68     	; 0x982 <__stack+0x83>
     93e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     942:	84 30       	cpi	r24, 0x04	; 4
     944:	f1 f4       	brne	.+60     	; 0x982 <__stack+0x83>
        message_t *msg = kilo_message_tx();
     946:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     94a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     94e:	09 95       	icall
        if (msg) {
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	b9 f0       	breq	.+46     	; 0x982 <__stack+0x83>
            if (message_send(msg)) {
     954:	0e 94 29 08 	call	0x1052	; 0x1052 <message_send>
     958:	88 23       	and	r24, r24
     95a:	51 f0       	breq	.+20     	; 0x970 <__stack+0x71>
                kilo_message_tx_success();
     95c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     960:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     964:	09 95       	icall
                tx_clock = 0;
     966:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     96a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     96e:	09 c0       	rjmp	.+18     	; 0x982 <__stack+0x83>
            } else {
                tx_increment = rand()&0xFF;
     970:	0e 94 85 00 	call	0x10a	; 0x10a <setup+0x14>
     974:	9c 01       	movw	r18, r24
     976:	33 27       	eor	r19, r19
     978:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     97c:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     980:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9a4:	80 ff       	sbrs	r24, 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <set_color+0x8>
        DDRD |= (1<<5);
     9a8:	55 9a       	sbi	0x0a, 5	; 10
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     9ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     9ae:	81 ff       	sbrs	r24, 1
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <set_color+0x12>
        DDRD |= (1<<4);
     9b2:	54 9a       	sbi	0x0a, 4	; 10
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9b8:	82 ff       	sbrs	r24, 2
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <set_color+0x1c>
        DDRC |= (1<<3);
     9bc:	3b 9a       	sbi	0x07, 3	; 7
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9c0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9c2:	83 ff       	sbrs	r24, 3
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <set_color+0x26>
        DDRC |= (1<<2);
     9c6:	3a 9a       	sbi	0x07, 2	; 7
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9ca:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9cc:	84 ff       	sbrs	r24, 4
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <set_color+0x30>
        DDRC |= (1<<5);
     9d0:	3d 9a       	sbi	0x07, 5	; 7
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9d4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9d6:	85 ff       	sbrs	r24, 5
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <set_color+0x3a>
        DDRC |= (1<<4);
     9da:	3c 9a       	sbi	0x07, 4	; 7
     9dc:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9de:	3c 98       	cbi	0x07, 4	; 7
     9e0:	08 95       	ret

000009e2 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9e2:	8c 01       	movw	r16, r24
     9e4:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9e6:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9e8:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9ee:	98 e1       	ldi	r25, 0x18	; 24
     9f0:	c9 2e       	mov	r12, r25
     9f2:	29 e2       	ldi	r18, 0x29	; 41
     9f4:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9f6:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	e7 30       	cpi	r30, 0x07	; 7
     9fe:	f1 05       	cpc	r31, r1
     a00:	d0 f7       	brcc	.-12     	; 0x9f6 <kilo_start+0x14>
     a02:	ec 5c       	subi	r30, 0xCC	; 204
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__tablejump2__>
            case SLEEPING:
                cli();
     a0a:	f8 94       	cli
                acomp_off();
     a0c:	80 b7       	in	r24, 0x30	; 48
     a0e:	87 7f       	andi	r24, 0xF7	; 247
     a10:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a16:	8f 77       	andi	r24, 0x7F	; 127
     a18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a1c:	14 b8       	out	0x04, r1	; 4
     a1e:	17 b8       	out	0x07, r1	; 7
     a20:	1a b8       	out	0x0a, r1	; 10
     a22:	15 b8       	out	0x05, r1	; 5
     a24:	18 b8       	out	0x08, r1	; 8
     a26:	1b b8       	out	0x0b, r1	; 11
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	a8 95       	wdr
     a2e:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a38:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a3c:	80 64       	ori	r24, 0x40	; 64
     a3e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a42:	83 b7       	in	r24, 0x33	; 51
     a44:	81 7f       	andi	r24, 0xF1	; 241
     a46:	84 60       	ori	r24, 0x04	; 4
     a48:	83 bf       	out	0x33, r24	; 51
                cli();
     a4a:	f8 94       	cli
                sleep_enable();
     a4c:	83 b7       	in	r24, 0x33	; 51
     a4e:	81 60       	ori	r24, 0x01	; 1
     a50:	83 bf       	out	0x33, r24	; 51
                sei();
     a52:	78 94       	sei
                sleep_cpu();
     a54:	88 95       	sleep
                sleep_disable();
     a56:	83 b7       	in	r24, 0x33	; 51
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	83 bf       	out	0x33, r24	; 51
                sei();
     a5c:	78 94       	sei
                rx_busy = 0;
     a5e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     a62:	52 9a       	sbi	0x0a, 2	; 10
     a64:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a66:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a6a:	80 68       	ori	r24, 0x80	; 128
     a6c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a70:	87 e5       	ldi	r24, 0x57	; 87
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <kilo_start+0x92>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <kilo_start+0x98>
     a7a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a7c:	80 b7       	in	r24, 0x30	; 48
     a7e:	88 61       	ori	r24, 0x18	; 24
     a80:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a82:	8f e3       	ldi	r24, 0x3F	; 63
     a84:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a88:	ef e1       	ldi	r30, 0x1F	; 31
     a8a:	fe e4       	ldi	r31, 0x4E	; 78
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <kilo_start+0xaa>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <kilo_start+0xb0>
     a92:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a94:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     a98:	88 23       	and	r24, r24
     a9a:	09 f4       	brne	.+2      	; 0xa9e <kilo_start+0xbc>
     a9c:	50 c0       	rjmp	.+160    	; 0xb3e <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     aa4:	ff ef       	ldi	r31, 0xFF	; 255
     aa6:	20 e7       	ldi	r18, 0x70	; 112
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	f1 50       	subi	r31, 0x01	; 1
     aac:	20 40       	sbci	r18, 0x00	; 0
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <kilo_start+0xc8>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <kilo_start+0xd2>
     ab4:	00 00       	nop
     ab6:	43 c0       	rjmp	.+134    	; 0xb3e <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     ab8:	8c e0       	ldi	r24, 0x0C	; 12
     aba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     abe:	ef ec       	ldi	r30, 0xCF	; 207
     ac0:	f7 e0       	ldi	r31, 0x07	; 7
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <kilo_start+0xe0>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <kilo_start+0xe6>
     ac8:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     ad0:	ff ef       	ldi	r31, 0xFF	; 255
     ad2:	21 ee       	ldi	r18, 0xE1	; 225
     ad4:	84 e0       	ldi	r24, 0x04	; 4
     ad6:	f1 50       	subi	r31, 0x01	; 1
     ad8:	20 40       	sbci	r18, 0x00	; 0
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <kilo_start+0xf4>
     ade:	2c c0       	rjmp	.+88     	; 0xb38 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     ae0:	0e 94 c1 02 	call	0x582	; 0x582 <get_voltage>
                if(voltage > 682)
     ae4:	8b 3a       	cpi	r24, 0xAB	; 171
     ae6:	e2 e0       	ldi	r30, 0x02	; 2
     ae8:	9e 07       	cpc	r25, r30
     aea:	24 f0       	brlt	.+8      	; 0xaf4 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     aec:	8c e0       	ldi	r24, 0x0C	; 12
     aee:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     af2:	81 cf       	rjmp	.-254    	; 0x9f6 <kilo_start+0x14>
                else if(voltage > 648)
     af4:	89 38       	cpi	r24, 0x89	; 137
     af6:	f2 e0       	ldi	r31, 0x02	; 2
     af8:	9f 07       	cpc	r25, r31
     afa:	14 f0       	brlt	.+4      	; 0xb00 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     afc:	80 e3       	ldi	r24, 0x30	; 48
     afe:	f7 cf       	rjmp	.-18     	; 0xaee <kilo_start+0x10c>
                else if(voltage > 614)
     b00:	87 36       	cpi	r24, 0x67	; 103
     b02:	92 40       	sbci	r25, 0x02	; 2
     b04:	14 f0       	brlt	.+4      	; 0xb0a <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b06:	8f e0       	ldi	r24, 0x0F	; 15
     b08:	f2 cf       	rjmp	.-28     	; 0xaee <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	f0 cf       	rjmp	.-32     	; 0xaee <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b0e:	48 99       	sbic	0x09, 0	; 9
     b10:	16 c0       	rjmp	.+44     	; 0xb3e <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     b18:	8f ec       	ldi	r24, 0xCF	; 207
     b1a:	97 e0       	ldi	r25, 0x07	; 7
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <kilo_start+0x13a>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <kilo_start+0x140>
     b22:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	e1 ee       	ldi	r30, 0xE1	; 225
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	91 50       	subi	r25, 0x01	; 1
     b32:	e0 40       	sbci	r30, 0x00	; 0
     b34:	f0 40       	sbci	r31, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <kilo_start+0x14e>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <kilo_start+0x158>
     b3a:	00 00       	nop
     b3c:	5c cf       	rjmp	.-328    	; 0x9f6 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	d6 cf       	rjmp	.-84     	; 0xaee <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b42:	d1 11       	cpse	r29, r1
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <kilo_start+0x168>
                    setup();
     b46:	f8 01       	movw	r30, r16
     b48:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b4a:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b4e:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b50:	f7 01       	movw	r30, r14
     b52:	09 95       	icall
                break;
     b54:	50 cf       	rjmp	.-352    	; 0x9f6 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b56:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b5a:	81 11       	cpse	r24, r1
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b5e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b62:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b66:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b6a:	45 cf       	rjmp	.-374    	; 0x9f6 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b6c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b70:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b74:	98 17       	cp	r25, r24
     b76:	09 f4       	brne	.+2      	; 0xb7a <kilo_start+0x198>
     b78:	3e cf       	rjmp	.-388    	; 0x9f6 <kilo_start+0x14>
                        prev_motion = cur_motion;
     b7a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b7e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b82:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	89 f4       	brne	.+34     	; 0xbac <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b8a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b8e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b92:	8f e2       	ldi	r24, 0x2F	; 47
     b94:	95 e7       	ldi	r25, 0x75	; 117
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <kilo_start+0x1b4>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <kilo_start+0x1ba>
     b9c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b9e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ba6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     baa:	25 cf       	rjmp	.-438    	; 0x9f6 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bac:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bb4:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	59 f4       	brne	.+22     	; 0xbd2 <kilo_start+0x1f0>
     bbc:	ef e2       	ldi	r30, 0x2F	; 47
     bbe:	f5 e7       	ldi	r31, 0x75	; 117
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <kilo_start+0x1de>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <kilo_start+0x1e4>
     bc6:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bc8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bcc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <kilo_start+0x210>
     bd2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bd6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bda:	8f e2       	ldi	r24, 0x2F	; 47
     bdc:	95 e7       	ldi	r25, 0x75	; 117
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <kilo_start+0x1fc>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <kilo_start+0x202>
     be4:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     be6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     bea:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bee:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bf2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bf6:	ff ce       	rjmp	.-514    	; 0x9f6 <kilo_start+0x14>

00000bf8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
    rx_timer_off();
     c06:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     c18:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     c1c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     c20:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c24:	93 ea       	ldi	r25, 0xA3	; 163
     c26:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c2a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c62:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c66:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c70:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     c74:	88 23       	and	r24, r24
     c76:	21 f1       	breq	.+72     	; 0xcc0 <__vector_23+0x84>
        rx_timer_on();
     c78:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c7c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c80:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c84:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     c88:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     c8c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     c90:	88 23       	and	r24, r24
     c92:	09 f4       	brne	.+2      	; 0xc96 <__vector_23+0x5a>
     c94:	af c1       	rjmp	.+862    	; 0xff4 <__vector_23+0x3b8>
            adc_finish_conversion();
     c96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c9a:	86 fd       	sbrc	r24, 6
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ca2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ca6:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     caa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cb4:	93 ea       	ldi	r25, 0xA3	; 163
     cb6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cba:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cbe:	9a c1       	rjmp	.+820    	; 0xff4 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cc0:	c9 01       	movw	r24, r18
     cc2:	87 58       	subi	r24, 0x87	; 135
     cc4:	91 09       	sbc	r25, r1
     cc6:	84 37       	cpi	r24, 0x74	; 116
     cc8:	99 40       	sbci	r25, 0x09	; 9
     cca:	a0 f0       	brcs	.+40     	; 0xcf4 <__vector_23+0xb8>
            rx_timer_off();
     ccc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cd0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cd8:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     cdc:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     ce0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     ce4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ce8:	83 ea       	ldi	r24, 0xA3	; 163
     cea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cee:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cf2:	80 c1       	rjmp	.+768    	; 0xff4 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     cf4:	26 58       	subi	r18, 0x86	; 134
     cf6:	31 09       	sbc	r19, r1
     cf8:	a4 ef       	ldi	r26, 0xF4	; 244
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__umulhisi3>
     d00:	8c 01       	movw	r16, r24
     d02:	22 27       	eor	r18, r18
     d04:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d06:	08 30       	cpi	r16, 0x08	; 8
     d08:	60 f4       	brcc	.+24     	; 0xd22 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <__vector_23+0xd6>
     d10:	88 0f       	add	r24, r24
     d12:	0a 95       	dec	r16
     d14:	ea f7       	brpl	.-6      	; 0xd10 <__vector_23+0xd4>
     d16:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d1a:	89 2b       	or	r24, r25
     d1c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     d20:	69 c1       	rjmp	.+722    	; 0xff4 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d22:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     d26:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     d2a:	88 23       	and	r24, r24
     d2c:	41 f1       	breq	.+80     	; 0xd7e <__vector_23+0x142>
                    adc_finish_conversion();
     d2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d32:	86 fd       	sbrc	r24, 6
     d34:	fc cf       	rjmp	.-8      	; 0xd2e <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d36:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d3a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d3e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     d42:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     d46:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d4a:	83 ea       	ldi	r24, 0xA3	; 163
     d4c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d56:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d5a:	99 23       	and	r25, r25
     d5c:	59 f0       	breq	.+22     	; 0xd74 <__vector_23+0x138>
                        rx_timer_off();
     d5e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d62:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d66:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d6a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     d6e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     d72:	40 c1       	rjmp	.+640    	; 0xff4 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d74:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     d78:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     d7c:	3b c1       	rjmp	.+630    	; 0xff4 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d7e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     d82:	e8 2f       	mov	r30, r24
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	e4 59       	subi	r30, 0x94	; 148
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d8e:	90 83       	st	Z, r25
                    rx_byteindex++;
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d96:	8c 30       	cpi	r24, 0x0C	; 12
     d98:	09 f0       	breq	.+2      	; 0xd9c <__vector_23+0x160>
     d9a:	2c c1       	rjmp	.+600    	; 0xff4 <__vector_23+0x3b8>
                        rx_timer_off();
     d9c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     da0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     da4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     da8:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     dac:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     db0:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     db4:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     db8:	8c e6       	ldi	r24, 0x6C	; 108
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 0d 08 	call	0x101a	; 0x101a <message_crc>
     dc0:	08 17       	cp	r16, r24
     dc2:	19 07       	cpc	r17, r25
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <__vector_23+0x18c>
     dc6:	16 c1       	rjmp	.+556    	; 0xff4 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     dc8:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     dcc:	e7 fd       	sbrc	r30, 7
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     dd0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     dd4:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     dd8:	61 e4       	ldi	r22, 0x41	; 65
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	8c e6       	ldi	r24, 0x6C	; 108
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	09 95       	icall
     de2:	08 c1       	rjmp	.+528    	; 0xff4 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     de4:	88 e7       	ldi	r24, 0x78	; 120
     de6:	8e 0f       	add	r24, r30
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	30 f0       	brcs	.+12     	; 0xdf8 <__vector_23+0x1bc>
        motors_off();
     dec:	53 98       	cbi	0x0a, 3	; 10
     dee:	23 98       	cbi	0x04, 3	; 4
     df0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     df4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     df8:	8e 2f       	mov	r24, r30
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	fc 01       	movw	r30, r24
     dfe:	e0 58       	subi	r30, 0x80	; 128
     e00:	f1 09       	sbc	r31, r1
     e02:	eb 30       	cpi	r30, 0x0B	; 11
     e04:	f1 05       	cpc	r31, r1
     e06:	08 f0       	brcs	.+2      	; 0xe0a <__vector_23+0x1ce>
     e08:	f5 c0       	rjmp	.+490    	; 0xff4 <__vector_23+0x3b8>
     e0a:	e5 5c       	subi	r30, 0xC5	; 197
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e12:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e16:	8d 7f       	andi	r24, 0xFD	; 253
     e18:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e1c:	16 bc       	out	0x26, r1	; 38
            bootload();
     e1e:	e0 e0       	ldi	r30, 0x00	; 0
     e20:	f0 e7       	ldi	r31, 0x70	; 112
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e24:	e0 e0       	ldi	r30, 0x00	; 0
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e2a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e2e:	e2 c0       	rjmp	.+452    	; 0xff4 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	b2 c0       	rjmp	.+356    	; 0xf98 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e34:	85 e0       	ldi	r24, 0x05	; 5
     e36:	b0 c0       	rjmp	.+352    	; 0xf98 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	ae c0       	rjmp	.+348    	; 0xf98 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e3c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	09 f4       	brne	.+2      	; 0xe46 <__vector_23+0x20a>
     e44:	d7 c0       	rjmp	.+430    	; 0xff4 <__vector_23+0x3b8>
     e46:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__vector_23+0x214>
     e4e:	d2 c0       	rjmp	.+420    	; 0xff4 <__vector_23+0x3b8>
                motors_on();
     e50:	53 9a       	sbi	0x0a, 3	; 10
     e52:	23 9a       	sbi	0x04, 3	; 4
     e54:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e58:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	9c c0       	rjmp	.+312    	; 0xf98 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e60:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_23+0x22e>
     e68:	4b c0       	rjmp	.+150    	; 0xf00 <__vector_23+0x2c4>
     e6a:	80 f4       	brcc	.+32     	; 0xe8c <__vector_23+0x250>
     e6c:	88 23       	and	r24, r24
     e6e:	a9 f0       	breq	.+42     	; 0xe9a <__vector_23+0x25e>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	09 f0       	breq	.+2      	; 0xe76 <__vector_23+0x23a>
     e74:	82 c0       	rjmp	.+260    	; 0xf7a <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e76:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     e7a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     e7e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     e82:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     e86:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     e8a:	77 c0       	rjmp	.+238    	; 0xf7a <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	09 f4       	brne	.+2      	; 0xe92 <__vector_23+0x256>
     e90:	49 c0       	rjmp	.+146    	; 0xf24 <__vector_23+0x2e8>
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	09 f4       	brne	.+2      	; 0xe98 <__vector_23+0x25c>
     e96:	58 c0       	rjmp	.+176    	; 0xf48 <__vector_23+0x30c>
     e98:	70 c0       	rjmp	.+224    	; 0xf7a <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e9a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e9e:	86 30       	cpi	r24, 0x06	; 6
     ea0:	09 f0       	breq	.+2      	; 0xea4 <__vector_23+0x268>
     ea2:	6b c0       	rjmp	.+214    	; 0xf7a <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     ea4:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     ea8:	80 eb       	ldi	r24, 0xB0	; 176
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     eb0:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     eb4:	81 eb       	ldi	r24, 0xB1	; 177
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ebc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ec8:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     ecc:	89 e0       	ldi	r24, 0x09	; 9
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ed4:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     ed8:	8c e0       	ldi	r24, 0x0C	; 12
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ee0:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     ee4:	84 e1       	ldi	r24, 0x14	; 20
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 18 0b 	call	0x1630	; 0x1630 <eeprom_write_byte>
                        motors_off();
     eec:	53 98       	cbi	0x0a, 3	; 10
     eee:	23 98       	cbi	0x04, 3	; 4
     ef0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ef4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     efe:	3d c0       	rjmp	.+122    	; 0xf7a <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f00:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f04:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
     f08:	91 30       	cpi	r25, 0x01	; 1
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__vector_23+0x2d8>
     f0c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
     f10:	89 17       	cp	r24, r25
     f12:	99 f1       	breq	.+102    	; 0xf7a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f14:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f1e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
     f22:	2b c0       	rjmp	.+86     	; 0xf7a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f24:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f28:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
     f2c:	92 30       	cpi	r25, 0x02	; 2
     f2e:	21 f4       	brne	.+8      	; 0xf38 <__vector_23+0x2fc>
     f30:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
     f34:	89 17       	cp	r24, r25
     f36:	09 f1       	breq	.+66     	; 0xf7a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f38:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f42:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
     f46:	19 c0       	rjmp	.+50     	; 0xf7a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f48:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f4c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
     f50:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
     f54:	23 30       	cpi	r18, 0x03	; 3
     f56:	41 f4       	brne	.+16     	; 0xf68 <__vector_23+0x32c>
     f58:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
     f5c:	82 13       	cpse	r24, r18
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__vector_23+0x32c>
     f60:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
     f64:	92 17       	cp	r25, r18
     f66:	49 f0       	breq	.+18     	; 0xf7a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f68:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f6c:	23 e0       	ldi	r18, 0x03	; 3
     f6e:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f72:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f76:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f7a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f7e:	88 23       	and	r24, r24
     f80:	c9 f1       	breq	.+114    	; 0xff4 <__vector_23+0x3b8>
     f82:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f86:	86 30       	cpi	r24, 0x06	; 6
     f88:	a9 f1       	breq	.+106    	; 0xff4 <__vector_23+0x3b8>
                motors_on();
     f8a:	53 9a       	sbi	0x0a, 3	; 10
     f8c:	23 9a       	sbi	0x04, 3	; 4
     f8e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f92:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f96:	86 e0       	ldi	r24, 0x06	; 6
     f98:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f9c:	2b c0       	rjmp	.+86     	; 0xff4 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f9e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     fa2:	86 30       	cpi	r24, 0x06	; 6
     fa4:	81 f0       	breq	.+32     	; 0xfc6 <__vector_23+0x38a>
                motors_on();
     fa6:	53 9a       	sbi	0x0a, 3	; 10
     fa8:	23 9a       	sbi	0x04, 3	; 4
     faa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fb8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     fbc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <__vector_23+0x398>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <__vector_23+0x394>
     fd8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
     fdc:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
     fe0:	82 23       	and	r24, r18
     fe2:	93 23       	and	r25, r19
     fe4:	89 2b       	or	r24, r25
     fe6:	21 f0       	breq	.+8      	; 0xff0 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     ff0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    101a:	fc 01       	movw	r30, r24
    101c:	9c 01       	movw	r18, r24
    101e:	26 5f       	subi	r18, 0xF6	; 246
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1026:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1028:	84 27       	eor	r24, r20
    102a:	08 2e       	mov	r0, r24
    102c:	82 95       	swap	r24
    102e:	80 7f       	andi	r24, 0xF0	; 240
    1030:	80 25       	eor	r24, r0
    1032:	09 2e       	mov	r0, r25
    1034:	98 2f       	mov	r25, r24
    1036:	82 95       	swap	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	08 26       	eor	r0, r24
    103c:	86 95       	lsr	r24
    103e:	98 27       	eor	r25, r24
    1040:	89 27       	eor	r24, r25
    1042:	88 0f       	add	r24, r24
    1044:	88 0f       	add	r24, r24
    1046:	88 0f       	add	r24, r24
    1048:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    104a:	e2 17       	cp	r30, r18
    104c:	f3 07       	cpc	r31, r19
    104e:	59 f7       	brne	.-42     	; 0x1026 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1050:	08 95       	ret

00001052 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1052:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1054:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1056:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1058:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    105c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    105e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1060:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1062:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1066:	20 30       	cpi	r18, 0x00	; 0
    1068:	29 f0       	breq	.+10     	; 0x1074 <message_send+0x22>
    106a:	00 00       	nop
    106c:	25 b1       	in	r18, 0x05	; 5
    106e:	23 2b       	or	r18, r19
    1070:	25 b9       	out	0x05, r18	; 5
    1072:	04 c0       	rjmp	.+8      	; 0x107c <message_send+0x2a>
    1074:	00 00       	nop
    1076:	00 00       	nop
    1078:	00 00       	nop
    107a:	00 c0       	rjmp	.+0      	; 0x107c <message_send+0x2a>
    107c:	00 00       	nop
    107e:	00 00       	nop
    1080:	00 00       	nop
    1082:	30 95       	com	r19
    1084:	25 b1       	in	r18, 0x05	; 5
    1086:	23 23       	and	r18, r19
    1088:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    108a:	2e ea       	ldi	r18, 0xAE	; 174
    108c:	2a 95       	dec	r18
    108e:	f1 f7       	brne	.-4      	; 0x108c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1090:	2b ee       	ldi	r18, 0xEB	; 235

00001092 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1092:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1094:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1098:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    109a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    109e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10a0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10a2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10a4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10a6:	0f be       	out	0x3f, r0	; 63
    return 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	08 95       	ret

000010ac <nocollision>:
nocollision:
    nop
    10ac:	00 00       	nop
    dec tmpreg1
    10ae:	2a 95       	dec	r18
    brne checkcollision
    10b0:	81 f7       	brne	.-32     	; 0x1092 <checkcollision>

    ldi tmpreg1, 0x01
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10b4:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    10b8:	20 30       	cpi	r18, 0x00	; 0
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <nocollision+0x1a>
    10bc:	00 00       	nop
    10be:	25 b1       	in	r18, 0x05	; 5
    10c0:	23 2b       	or	r18, r19
    10c2:	25 b9       	out	0x05, r18	; 5
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <nocollision+0x22>
    10c6:	00 00       	nop
    10c8:	00 00       	nop
    10ca:	00 00       	nop
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <nocollision+0x22>
    10ce:	00 00       	nop
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	30 95       	com	r19
    10d6:	25 b1       	in	r18, 0x05	; 5
    10d8:	23 23       	and	r18, r19
    10da:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10dc:	00 00       	nop
    10de:	24 e5       	ldi	r18, 0x54	; 84
    10e0:	2a 95       	dec	r18
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10e4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10e6:	8c e0       	ldi	r24, 0x0C	; 12

000010e8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10e8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    10ec:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    10ee:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    10f0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    10f2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    10f4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    10f8:	50 e0       	ldi	r21, 0x00	; 0

000010fa <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    10fa:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    10fc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    10fe:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1100:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1102:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1106:	20 30       	cpi	r18, 0x00	; 0
    1108:	29 f0       	breq	.+10     	; 0x1114 <sendbit+0x1a>
    110a:	00 00       	nop
    110c:	25 b1       	in	r18, 0x05	; 5
    110e:	23 2b       	or	r18, r19
    1110:	25 b9       	out	0x05, r18	; 5
    1112:	04 c0       	rjmp	.+8      	; 0x111c <sendbit+0x22>
    1114:	00 00       	nop
    1116:	00 00       	nop
    1118:	00 00       	nop
    111a:	00 c0       	rjmp	.+0      	; 0x111c <sendbit+0x22>
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	00 00       	nop
    1122:	30 95       	com	r19
    1124:	25 b1       	in	r18, 0x05	; 5
    1126:	23 23       	and	r18, r19
    1128:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    112a:	00 00       	nop
    112c:	21 e5       	ldi	r18, 0x51	; 81
    112e:	2a 95       	dec	r18
    1130:	f1 f7       	brne	.-4      	; 0x112e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1132:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1134:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1136:	9a 95       	dec	r25
    brne sendbit
    1138:	01 f7       	brne	.-64     	; 0x10fa <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    113a:	8a 95       	dec	r24
    brne sendbyte
    113c:	a9 f6       	brne	.-86     	; 0x10e8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    113e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1140:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1142:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1144:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1146:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    114a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    114c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    114e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1150:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1152:	0f be       	out	0x3f, r0	; 63
    return 1
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	08 95       	ret

00001158 <main>:
  }
}

int main() {
  kilo_init();
    1158:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <kilo_init>
  kilo_message_tx = message_tx;
    115c:	81 e7       	ldi	r24, 0x71	; 113
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    1164:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    1168:	84 e7       	ldi	r24, 0x74	; 116
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    1170:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);
    1174:	62 eb       	ldi	r22, 0xB2	; 178
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	8b e7       	ldi	r24, 0x7B	; 123
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <kilo_start>

  return 0;
}
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	08 95       	ret

00001186 <__divmodhi4>:
    1186:	97 fb       	bst	r25, 7
    1188:	07 2e       	mov	r0, r23
    118a:	16 f4       	brtc	.+4      	; 0x1190 <__divmodhi4+0xa>
    118c:	00 94       	com	r0
    118e:	07 d0       	rcall	.+14     	; 0x119e <__divmodhi4_neg1>
    1190:	77 fd       	sbrc	r23, 7
    1192:	09 d0       	rcall	.+18     	; 0x11a6 <__divmodhi4_neg2>
    1194:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__udivmodhi4>
    1198:	07 fc       	sbrc	r0, 7
    119a:	05 d0       	rcall	.+10     	; 0x11a6 <__divmodhi4_neg2>
    119c:	3e f4       	brtc	.+14     	; 0x11ac <__divmodhi4_exit>

0000119e <__divmodhi4_neg1>:
    119e:	90 95       	com	r25
    11a0:	81 95       	neg	r24
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	08 95       	ret

000011a6 <__divmodhi4_neg2>:
    11a6:	70 95       	com	r23
    11a8:	61 95       	neg	r22
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255

000011ac <__divmodhi4_exit>:
    11ac:	08 95       	ret

000011ae <__tablejump2__>:
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	05 90       	lpm	r0, Z+
    11b4:	f4 91       	lpm	r31, Z
    11b6:	e0 2d       	mov	r30, r0
    11b8:	09 94       	ijmp

000011ba <__umulhisi3>:
    11ba:	a2 9f       	mul	r26, r18
    11bc:	b0 01       	movw	r22, r0
    11be:	b3 9f       	mul	r27, r19
    11c0:	c0 01       	movw	r24, r0
    11c2:	a3 9f       	mul	r26, r19
    11c4:	70 0d       	add	r23, r0
    11c6:	81 1d       	adc	r24, r1
    11c8:	11 24       	eor	r1, r1
    11ca:	91 1d       	adc	r25, r1
    11cc:	b2 9f       	mul	r27, r18
    11ce:	70 0d       	add	r23, r0
    11d0:	81 1d       	adc	r24, r1
    11d2:	11 24       	eor	r1, r1
    11d4:	91 1d       	adc	r25, r1
    11d6:	08 95       	ret

000011d8 <__udivmodhi4>:
    11d8:	aa 1b       	sub	r26, r26
    11da:	bb 1b       	sub	r27, r27
    11dc:	51 e1       	ldi	r21, 0x11	; 17
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <__udivmodhi4_ep>

000011e0 <__udivmodhi4_loop>:
    11e0:	aa 1f       	adc	r26, r26
    11e2:	bb 1f       	adc	r27, r27
    11e4:	a6 17       	cp	r26, r22
    11e6:	b7 07       	cpc	r27, r23
    11e8:	10 f0       	brcs	.+4      	; 0x11ee <__udivmodhi4_ep>
    11ea:	a6 1b       	sub	r26, r22
    11ec:	b7 0b       	sbc	r27, r23

000011ee <__udivmodhi4_ep>:
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	5a 95       	dec	r21
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__udivmodhi4_loop>
    11f6:	80 95       	com	r24
    11f8:	90 95       	com	r25
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	08 95       	ret

00001200 <__subsf3>:
    1200:	50 58       	subi	r21, 0x80	; 128

00001202 <__addsf3>:
    1202:	bb 27       	eor	r27, r27
    1204:	aa 27       	eor	r26, r26
    1206:	0e 94 18 09 	call	0x1230	; 0x1230 <__addsf3x>
    120a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_round>
    120e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_pscA>
    1212:	38 f0       	brcs	.+14     	; 0x1222 <__addsf3+0x20>
    1214:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscB>
    1218:	20 f0       	brcs	.+8      	; 0x1222 <__addsf3+0x20>
    121a:	39 f4       	brne	.+14     	; 0x122a <__addsf3+0x28>
    121c:	9f 3f       	cpi	r25, 0xFF	; 255
    121e:	19 f4       	brne	.+6      	; 0x1226 <__addsf3+0x24>
    1220:	26 f4       	brtc	.+8      	; 0x122a <__addsf3+0x28>
    1222:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__fp_nan>
    1226:	0e f4       	brtc	.+2      	; 0x122a <__addsf3+0x28>
    1228:	e0 95       	com	r30
    122a:	e7 fb       	bst	r30, 7
    122c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_inf>

00001230 <__addsf3x>:
    1230:	e9 2f       	mov	r30, r25
    1232:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_split3>
    1236:	58 f3       	brcs	.-42     	; 0x120e <__addsf3+0xc>
    1238:	ba 17       	cp	r27, r26
    123a:	62 07       	cpc	r22, r18
    123c:	73 07       	cpc	r23, r19
    123e:	84 07       	cpc	r24, r20
    1240:	95 07       	cpc	r25, r21
    1242:	20 f0       	brcs	.+8      	; 0x124c <__addsf3x+0x1c>
    1244:	79 f4       	brne	.+30     	; 0x1264 <__addsf3x+0x34>
    1246:	a6 f5       	brtc	.+104    	; 0x12b0 <__addsf3x+0x80>
    1248:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_zero>
    124c:	0e f4       	brtc	.+2      	; 0x1250 <__addsf3x+0x20>
    124e:	e0 95       	com	r30
    1250:	0b 2e       	mov	r0, r27
    1252:	ba 2f       	mov	r27, r26
    1254:	a0 2d       	mov	r26, r0
    1256:	0b 01       	movw	r0, r22
    1258:	b9 01       	movw	r22, r18
    125a:	90 01       	movw	r18, r0
    125c:	0c 01       	movw	r0, r24
    125e:	ca 01       	movw	r24, r20
    1260:	a0 01       	movw	r20, r0
    1262:	11 24       	eor	r1, r1
    1264:	ff 27       	eor	r31, r31
    1266:	59 1b       	sub	r21, r25
    1268:	99 f0       	breq	.+38     	; 0x1290 <__addsf3x+0x60>
    126a:	59 3f       	cpi	r21, 0xF9	; 249
    126c:	50 f4       	brcc	.+20     	; 0x1282 <__addsf3x+0x52>
    126e:	50 3e       	cpi	r21, 0xE0	; 224
    1270:	68 f1       	brcs	.+90     	; 0x12cc <__addsf3x+0x9c>
    1272:	1a 16       	cp	r1, r26
    1274:	f0 40       	sbci	r31, 0x00	; 0
    1276:	a2 2f       	mov	r26, r18
    1278:	23 2f       	mov	r18, r19
    127a:	34 2f       	mov	r19, r20
    127c:	44 27       	eor	r20, r20
    127e:	58 5f       	subi	r21, 0xF8	; 248
    1280:	f3 cf       	rjmp	.-26     	; 0x1268 <__addsf3x+0x38>
    1282:	46 95       	lsr	r20
    1284:	37 95       	ror	r19
    1286:	27 95       	ror	r18
    1288:	a7 95       	ror	r26
    128a:	f0 40       	sbci	r31, 0x00	; 0
    128c:	53 95       	inc	r21
    128e:	c9 f7       	brne	.-14     	; 0x1282 <__addsf3x+0x52>
    1290:	7e f4       	brtc	.+30     	; 0x12b0 <__addsf3x+0x80>
    1292:	1f 16       	cp	r1, r31
    1294:	ba 0b       	sbc	r27, r26
    1296:	62 0b       	sbc	r22, r18
    1298:	73 0b       	sbc	r23, r19
    129a:	84 0b       	sbc	r24, r20
    129c:	ba f0       	brmi	.+46     	; 0x12cc <__addsf3x+0x9c>
    129e:	91 50       	subi	r25, 0x01	; 1
    12a0:	a1 f0       	breq	.+40     	; 0x12ca <__addsf3x+0x9a>
    12a2:	ff 0f       	add	r31, r31
    12a4:	bb 1f       	adc	r27, r27
    12a6:	66 1f       	adc	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	c2 f7       	brpl	.-16     	; 0x129e <__addsf3x+0x6e>
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <__addsf3x+0x9c>
    12b0:	ba 0f       	add	r27, r26
    12b2:	62 1f       	adc	r22, r18
    12b4:	73 1f       	adc	r23, r19
    12b6:	84 1f       	adc	r24, r20
    12b8:	48 f4       	brcc	.+18     	; 0x12cc <__addsf3x+0x9c>
    12ba:	87 95       	ror	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b7 95       	ror	r27
    12c2:	f7 95       	ror	r31
    12c4:	9e 3f       	cpi	r25, 0xFE	; 254
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <__addsf3x+0x9a>
    12c8:	b0 cf       	rjmp	.-160    	; 0x122a <__addsf3+0x28>
    12ca:	93 95       	inc	r25
    12cc:	88 0f       	add	r24, r24
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__addsf3x+0xa2>
    12d0:	99 27       	eor	r25, r25
    12d2:	ee 0f       	add	r30, r30
    12d4:	97 95       	ror	r25
    12d6:	87 95       	ror	r24
    12d8:	08 95       	ret

000012da <__divsf3>:
    12da:	0e 94 81 09 	call	0x1302	; 0x1302 <__divsf3x>
    12de:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_round>
    12e2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscB>
    12e6:	58 f0       	brcs	.+22     	; 0x12fe <__divsf3+0x24>
    12e8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_pscA>
    12ec:	40 f0       	brcs	.+16     	; 0x12fe <__divsf3+0x24>
    12ee:	29 f4       	brne	.+10     	; 0x12fa <__divsf3+0x20>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	29 f0       	breq	.+10     	; 0x12fe <__divsf3+0x24>
    12f4:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_inf>
    12f8:	51 11       	cpse	r21, r1
    12fa:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_szero>
    12fe:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__fp_nan>

00001302 <__divsf3x>:
    1302:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_split3>
    1306:	68 f3       	brcs	.-38     	; 0x12e2 <__divsf3+0x8>

00001308 <__divsf3_pse>:
    1308:	99 23       	and	r25, r25
    130a:	b1 f3       	breq	.-20     	; 0x12f8 <__divsf3+0x1e>
    130c:	55 23       	and	r21, r21
    130e:	91 f3       	breq	.-28     	; 0x12f4 <__divsf3+0x1a>
    1310:	95 1b       	sub	r25, r21
    1312:	55 0b       	sbc	r21, r21
    1314:	bb 27       	eor	r27, r27
    1316:	aa 27       	eor	r26, r26
    1318:	62 17       	cp	r22, r18
    131a:	73 07       	cpc	r23, r19
    131c:	84 07       	cpc	r24, r20
    131e:	38 f0       	brcs	.+14     	; 0x132e <__divsf3_pse+0x26>
    1320:	9f 5f       	subi	r25, 0xFF	; 255
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	44 1f       	adc	r20, r20
    132a:	aa 1f       	adc	r26, r26
    132c:	a9 f3       	breq	.-22     	; 0x1318 <__divsf3_pse+0x10>
    132e:	35 d0       	rcall	.+106    	; 0x139a <__divsf3_pse+0x92>
    1330:	0e 2e       	mov	r0, r30
    1332:	3a f0       	brmi	.+14     	; 0x1342 <__divsf3_pse+0x3a>
    1334:	e0 e8       	ldi	r30, 0x80	; 128
    1336:	32 d0       	rcall	.+100    	; 0x139c <__divsf3_pse+0x94>
    1338:	91 50       	subi	r25, 0x01	; 1
    133a:	50 40       	sbci	r21, 0x00	; 0
    133c:	e6 95       	lsr	r30
    133e:	00 1c       	adc	r0, r0
    1340:	ca f7       	brpl	.-14     	; 0x1334 <__divsf3_pse+0x2c>
    1342:	2b d0       	rcall	.+86     	; 0x139a <__divsf3_pse+0x92>
    1344:	fe 2f       	mov	r31, r30
    1346:	29 d0       	rcall	.+82     	; 0x139a <__divsf3_pse+0x92>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	bb 1f       	adc	r27, r27
    1350:	26 17       	cp	r18, r22
    1352:	37 07       	cpc	r19, r23
    1354:	48 07       	cpc	r20, r24
    1356:	ab 07       	cpc	r26, r27
    1358:	b0 e8       	ldi	r27, 0x80	; 128
    135a:	09 f0       	breq	.+2      	; 0x135e <__divsf3_pse+0x56>
    135c:	bb 0b       	sbc	r27, r27
    135e:	80 2d       	mov	r24, r0
    1360:	bf 01       	movw	r22, r30
    1362:	ff 27       	eor	r31, r31
    1364:	93 58       	subi	r25, 0x83	; 131
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	3a f0       	brmi	.+14     	; 0x1378 <__divsf3_pse+0x70>
    136a:	9e 3f       	cpi	r25, 0xFE	; 254
    136c:	51 05       	cpc	r21, r1
    136e:	78 f0       	brcs	.+30     	; 0x138e <__divsf3_pse+0x86>
    1370:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_inf>
    1374:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	e4 f3       	brlt	.-8      	; 0x1374 <__divsf3_pse+0x6c>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	d4 f3       	brlt	.-12     	; 0x1374 <__divsf3_pse+0x6c>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__divsf3_pse+0x78>
    138e:	88 0f       	add	r24, r24
    1390:	91 1d       	adc	r25, r1
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	97 f9       	bld	r25, 7
    1398:	08 95       	ret
    139a:	e1 e0       	ldi	r30, 0x01	; 1
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	bb 1f       	adc	r27, r27
    13a4:	62 17       	cp	r22, r18
    13a6:	73 07       	cpc	r23, r19
    13a8:	84 07       	cpc	r24, r20
    13aa:	ba 07       	cpc	r27, r26
    13ac:	20 f0       	brcs	.+8      	; 0x13b6 <__divsf3_pse+0xae>
    13ae:	62 1b       	sub	r22, r18
    13b0:	73 0b       	sbc	r23, r19
    13b2:	84 0b       	sbc	r24, r20
    13b4:	ba 0b       	sbc	r27, r26
    13b6:	ee 1f       	adc	r30, r30
    13b8:	88 f7       	brcc	.-30     	; 0x139c <__divsf3_pse+0x94>
    13ba:	e0 95       	com	r30
    13bc:	08 95       	ret

000013be <__fixsfsi>:
    13be:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fixunssfsi>
    13c2:	68 94       	set
    13c4:	b1 11       	cpse	r27, r1
    13c6:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_szero>
    13ca:	08 95       	ret

000013cc <__fixunssfsi>:
    13cc:	0e 94 82 0a 	call	0x1504	; 0x1504 <__fp_splitA>
    13d0:	88 f0       	brcs	.+34     	; 0x13f4 <__fixunssfsi+0x28>
    13d2:	9f 57       	subi	r25, 0x7F	; 127
    13d4:	98 f0       	brcs	.+38     	; 0x13fc <__fixunssfsi+0x30>
    13d6:	b9 2f       	mov	r27, r25
    13d8:	99 27       	eor	r25, r25
    13da:	b7 51       	subi	r27, 0x17	; 23
    13dc:	b0 f0       	brcs	.+44     	; 0x140a <__fixunssfsi+0x3e>
    13de:	e1 f0       	breq	.+56     	; 0x1418 <__fixunssfsi+0x4c>
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	1a f0       	brmi	.+6      	; 0x13f0 <__fixunssfsi+0x24>
    13ea:	ba 95       	dec	r27
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <__fixunssfsi+0x14>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <__fixunssfsi+0x4c>
    13f0:	b1 30       	cpi	r27, 0x01	; 1
    13f2:	91 f0       	breq	.+36     	; 0x1418 <__fixunssfsi+0x4c>
    13f4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_zero>
    13f8:	b1 e0       	ldi	r27, 0x01	; 1
    13fa:	08 95       	ret
    13fc:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_zero>
    1400:	67 2f       	mov	r22, r23
    1402:	78 2f       	mov	r23, r24
    1404:	88 27       	eor	r24, r24
    1406:	b8 5f       	subi	r27, 0xF8	; 248
    1408:	39 f0       	breq	.+14     	; 0x1418 <__fixunssfsi+0x4c>
    140a:	b9 3f       	cpi	r27, 0xF9	; 249
    140c:	cc f3       	brlt	.-14     	; 0x1400 <__fixunssfsi+0x34>
    140e:	86 95       	lsr	r24
    1410:	77 95       	ror	r23
    1412:	67 95       	ror	r22
    1414:	b3 95       	inc	r27
    1416:	d9 f7       	brne	.-10     	; 0x140e <__fixunssfsi+0x42>
    1418:	3e f4       	brtc	.+14     	; 0x1428 <__fixunssfsi+0x5c>
    141a:	90 95       	com	r25
    141c:	80 95       	com	r24
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__floatunsisf>:
    142a:	e8 94       	clt
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <__floatsisf+0x12>

0000142e <__floatsisf>:
    142e:	97 fb       	bst	r25, 7
    1430:	3e f4       	brtc	.+14     	; 0x1440 <__floatsisf+0x12>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	99 23       	and	r25, r25
    1442:	a9 f0       	breq	.+42     	; 0x146e <__floatsisf+0x40>
    1444:	f9 2f       	mov	r31, r25
    1446:	96 e9       	ldi	r25, 0x96	; 150
    1448:	bb 27       	eor	r27, r27
    144a:	93 95       	inc	r25
    144c:	f6 95       	lsr	r31
    144e:	87 95       	ror	r24
    1450:	77 95       	ror	r23
    1452:	67 95       	ror	r22
    1454:	b7 95       	ror	r27
    1456:	f1 11       	cpse	r31, r1
    1458:	f8 cf       	rjmp	.-16     	; 0x144a <__floatsisf+0x1c>
    145a:	fa f4       	brpl	.+62     	; 0x149a <__floatsisf+0x6c>
    145c:	bb 0f       	add	r27, r27
    145e:	11 f4       	brne	.+4      	; 0x1464 <__floatsisf+0x36>
    1460:	60 ff       	sbrs	r22, 0
    1462:	1b c0       	rjmp	.+54     	; 0x149a <__floatsisf+0x6c>
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	16 c0       	rjmp	.+44     	; 0x149a <__floatsisf+0x6c>
    146e:	88 23       	and	r24, r24
    1470:	11 f0       	breq	.+4      	; 0x1476 <__floatsisf+0x48>
    1472:	96 e9       	ldi	r25, 0x96	; 150
    1474:	11 c0       	rjmp	.+34     	; 0x1498 <__floatsisf+0x6a>
    1476:	77 23       	and	r23, r23
    1478:	21 f0       	breq	.+8      	; 0x1482 <__floatsisf+0x54>
    147a:	9e e8       	ldi	r25, 0x8E	; 142
    147c:	87 2f       	mov	r24, r23
    147e:	76 2f       	mov	r23, r22
    1480:	05 c0       	rjmp	.+10     	; 0x148c <__floatsisf+0x5e>
    1482:	66 23       	and	r22, r22
    1484:	71 f0       	breq	.+28     	; 0x14a2 <__floatsisf+0x74>
    1486:	96 e8       	ldi	r25, 0x86	; 134
    1488:	86 2f       	mov	r24, r22
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	2a f0       	brmi	.+10     	; 0x149a <__floatsisf+0x6c>
    1490:	9a 95       	dec	r25
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	da f7       	brpl	.-10     	; 0x1490 <__floatsisf+0x62>
    149a:	88 0f       	add	r24, r24
    149c:	96 95       	lsr	r25
    149e:	87 95       	ror	r24
    14a0:	97 f9       	bld	r25, 7
    14a2:	08 95       	ret

000014a4 <__fp_inf>:
    14a4:	97 f9       	bld	r25, 7
    14a6:	9f 67       	ori	r25, 0x7F	; 127
    14a8:	80 e8       	ldi	r24, 0x80	; 128
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	08 95       	ret

000014b0 <__fp_nan>:
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	80 ec       	ldi	r24, 0xC0	; 192
    14b4:	08 95       	ret

000014b6 <__fp_pscA>:
    14b6:	00 24       	eor	r0, r0
    14b8:	0a 94       	dec	r0
    14ba:	16 16       	cp	r1, r22
    14bc:	17 06       	cpc	r1, r23
    14be:	18 06       	cpc	r1, r24
    14c0:	09 06       	cpc	r0, r25
    14c2:	08 95       	ret

000014c4 <__fp_pscB>:
    14c4:	00 24       	eor	r0, r0
    14c6:	0a 94       	dec	r0
    14c8:	12 16       	cp	r1, r18
    14ca:	13 06       	cpc	r1, r19
    14cc:	14 06       	cpc	r1, r20
    14ce:	05 06       	cpc	r0, r21
    14d0:	08 95       	ret

000014d2 <__fp_round>:
    14d2:	09 2e       	mov	r0, r25
    14d4:	03 94       	inc	r0
    14d6:	00 0c       	add	r0, r0
    14d8:	11 f4       	brne	.+4      	; 0x14de <__fp_round+0xc>
    14da:	88 23       	and	r24, r24
    14dc:	52 f0       	brmi	.+20     	; 0x14f2 <__fp_round+0x20>
    14de:	bb 0f       	add	r27, r27
    14e0:	40 f4       	brcc	.+16     	; 0x14f2 <__fp_round+0x20>
    14e2:	bf 2b       	or	r27, r31
    14e4:	11 f4       	brne	.+4      	; 0x14ea <__fp_round+0x18>
    14e6:	60 ff       	sbrs	r22, 0
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <__fp_round+0x20>
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	8f 4f       	sbci	r24, 0xFF	; 255
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	08 95       	ret

000014f4 <__fp_split3>:
    14f4:	57 fd       	sbrc	r21, 7
    14f6:	90 58       	subi	r25, 0x80	; 128
    14f8:	44 0f       	add	r20, r20
    14fa:	55 1f       	adc	r21, r21
    14fc:	59 f0       	breq	.+22     	; 0x1514 <__fp_splitA+0x10>
    14fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1500:	71 f0       	breq	.+28     	; 0x151e <__fp_splitA+0x1a>
    1502:	47 95       	ror	r20

00001504 <__fp_splitA>:
    1504:	88 0f       	add	r24, r24
    1506:	97 fb       	bst	r25, 7
    1508:	99 1f       	adc	r25, r25
    150a:	61 f0       	breq	.+24     	; 0x1524 <__fp_splitA+0x20>
    150c:	9f 3f       	cpi	r25, 0xFF	; 255
    150e:	79 f0       	breq	.+30     	; 0x152e <__fp_splitA+0x2a>
    1510:	87 95       	ror	r24
    1512:	08 95       	ret
    1514:	12 16       	cp	r1, r18
    1516:	13 06       	cpc	r1, r19
    1518:	14 06       	cpc	r1, r20
    151a:	55 1f       	adc	r21, r21
    151c:	f2 cf       	rjmp	.-28     	; 0x1502 <__fp_split3+0xe>
    151e:	46 95       	lsr	r20
    1520:	f1 df       	rcall	.-30     	; 0x1504 <__fp_splitA>
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <__fp_splitA+0x30>
    1524:	16 16       	cp	r1, r22
    1526:	17 06       	cpc	r1, r23
    1528:	18 06       	cpc	r1, r24
    152a:	99 1f       	adc	r25, r25
    152c:	f1 cf       	rjmp	.-30     	; 0x1510 <__fp_splitA+0xc>
    152e:	86 95       	lsr	r24
    1530:	71 05       	cpc	r23, r1
    1532:	61 05       	cpc	r22, r1
    1534:	08 94       	sec
    1536:	08 95       	ret

00001538 <__fp_zero>:
    1538:	e8 94       	clt

0000153a <__fp_szero>:
    153a:	bb 27       	eor	r27, r27
    153c:	66 27       	eor	r22, r22
    153e:	77 27       	eor	r23, r23
    1540:	cb 01       	movw	r24, r22
    1542:	97 f9       	bld	r25, 7
    1544:	08 95       	ret

00001546 <__mulsf3>:
    1546:	0e 94 b6 0a 	call	0x156c	; 0x156c <__mulsf3x>
    154a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_round>
    154e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_pscA>
    1552:	38 f0       	brcs	.+14     	; 0x1562 <__mulsf3+0x1c>
    1554:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscB>
    1558:	20 f0       	brcs	.+8      	; 0x1562 <__mulsf3+0x1c>
    155a:	95 23       	and	r25, r21
    155c:	11 f0       	breq	.+4      	; 0x1562 <__mulsf3+0x1c>
    155e:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_inf>
    1562:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__fp_nan>
    1566:	11 24       	eor	r1, r1
    1568:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_szero>

0000156c <__mulsf3x>:
    156c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_split3>
    1570:	70 f3       	brcs	.-36     	; 0x154e <__mulsf3+0x8>

00001572 <__mulsf3_pse>:
    1572:	95 9f       	mul	r25, r21
    1574:	c1 f3       	breq	.-16     	; 0x1566 <__mulsf3+0x20>
    1576:	95 0f       	add	r25, r21
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	55 1f       	adc	r21, r21
    157c:	62 9f       	mul	r22, r18
    157e:	f0 01       	movw	r30, r0
    1580:	72 9f       	mul	r23, r18
    1582:	bb 27       	eor	r27, r27
    1584:	f0 0d       	add	r31, r0
    1586:	b1 1d       	adc	r27, r1
    1588:	63 9f       	mul	r22, r19
    158a:	aa 27       	eor	r26, r26
    158c:	f0 0d       	add	r31, r0
    158e:	b1 1d       	adc	r27, r1
    1590:	aa 1f       	adc	r26, r26
    1592:	64 9f       	mul	r22, r20
    1594:	66 27       	eor	r22, r22
    1596:	b0 0d       	add	r27, r0
    1598:	a1 1d       	adc	r26, r1
    159a:	66 1f       	adc	r22, r22
    159c:	82 9f       	mul	r24, r18
    159e:	22 27       	eor	r18, r18
    15a0:	b0 0d       	add	r27, r0
    15a2:	a1 1d       	adc	r26, r1
    15a4:	62 1f       	adc	r22, r18
    15a6:	73 9f       	mul	r23, r19
    15a8:	b0 0d       	add	r27, r0
    15aa:	a1 1d       	adc	r26, r1
    15ac:	62 1f       	adc	r22, r18
    15ae:	83 9f       	mul	r24, r19
    15b0:	a0 0d       	add	r26, r0
    15b2:	61 1d       	adc	r22, r1
    15b4:	22 1f       	adc	r18, r18
    15b6:	74 9f       	mul	r23, r20
    15b8:	33 27       	eor	r19, r19
    15ba:	a0 0d       	add	r26, r0
    15bc:	61 1d       	adc	r22, r1
    15be:	23 1f       	adc	r18, r19
    15c0:	84 9f       	mul	r24, r20
    15c2:	60 0d       	add	r22, r0
    15c4:	21 1d       	adc	r18, r1
    15c6:	82 2f       	mov	r24, r18
    15c8:	76 2f       	mov	r23, r22
    15ca:	6a 2f       	mov	r22, r26
    15cc:	11 24       	eor	r1, r1
    15ce:	9f 57       	subi	r25, 0x7F	; 127
    15d0:	50 40       	sbci	r21, 0x00	; 0
    15d2:	9a f0       	brmi	.+38     	; 0x15fa <__mulsf3_pse+0x88>
    15d4:	f1 f0       	breq	.+60     	; 0x1612 <__mulsf3_pse+0xa0>
    15d6:	88 23       	and	r24, r24
    15d8:	4a f0       	brmi	.+18     	; 0x15ec <__mulsf3_pse+0x7a>
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	bb 1f       	adc	r27, r27
    15e0:	66 1f       	adc	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	a9 f7       	brne	.-22     	; 0x15d6 <__mulsf3_pse+0x64>
    15ec:	9e 3f       	cpi	r25, 0xFE	; 254
    15ee:	51 05       	cpc	r21, r1
    15f0:	80 f0       	brcs	.+32     	; 0x1612 <__mulsf3_pse+0xa0>
    15f2:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_inf>
    15f6:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_szero>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	e4 f3       	brlt	.-8      	; 0x15f6 <__mulsf3_pse+0x84>
    15fe:	98 3e       	cpi	r25, 0xE8	; 232
    1600:	d4 f3       	brlt	.-12     	; 0x15f6 <__mulsf3_pse+0x84>
    1602:	86 95       	lsr	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b7 95       	ror	r27
    160a:	f7 95       	ror	r31
    160c:	e7 95       	ror	r30
    160e:	9f 5f       	subi	r25, 0xFF	; 255
    1610:	c1 f7       	brne	.-16     	; 0x1602 <__mulsf3_pse+0x90>
    1612:	fe 2b       	or	r31, r30
    1614:	88 0f       	add	r24, r24
    1616:	91 1d       	adc	r25, r1
    1618:	96 95       	lsr	r25
    161a:	87 95       	ror	r24
    161c:	97 f9       	bld	r25, 7
    161e:	08 95       	ret

00001620 <eeprom_read_byte>:
    1620:	f9 99       	sbic	0x1f, 1	; 31
    1622:	fe cf       	rjmp	.-4      	; 0x1620 <eeprom_read_byte>
    1624:	92 bd       	out	0x22, r25	; 34
    1626:	81 bd       	out	0x21, r24	; 33
    1628:	f8 9a       	sbi	0x1f, 0	; 31
    162a:	99 27       	eor	r25, r25
    162c:	80 b5       	in	r24, 0x20	; 32
    162e:	08 95       	ret

00001630 <eeprom_write_byte>:
    1630:	26 2f       	mov	r18, r22

00001632 <eeprom_write_r18>:
    1632:	f9 99       	sbic	0x1f, 1	; 31
    1634:	fe cf       	rjmp	.-4      	; 0x1632 <eeprom_write_r18>
    1636:	1f ba       	out	0x1f, r1	; 31
    1638:	92 bd       	out	0x22, r25	; 34
    163a:	81 bd       	out	0x21, r24	; 33
    163c:	20 bd       	out	0x20, r18	; 32
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	fa 9a       	sbi	0x1f, 2	; 31
    1644:	f9 9a       	sbi	0x1f, 1	; 31
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	08 95       	ret

0000164c <_exit>:
    164c:	f8 94       	cli

0000164e <__stop_program>:
    164e:	ff cf       	rjmp	.-2      	; 0x164e <__stop_program>
