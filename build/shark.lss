
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	93 05       	cpc	r25, r3
      6a:	ea 05       	cpc	r30, r10
      6c:	fe 05       	cpc	r31, r14
      6e:	2f 06       	cpc	r2, r31
      70:	36 06       	cpc	r3, r22
      72:	15 06       	cpc	r1, r21
      74:	39 06       	cpc	r3, r25
      76:	97 07       	cpc	r25, r23
      78:	88 08       	sbc	r8, r8
      7a:	88 08       	sbc	r8, r8
      7c:	a0 07       	cpc	r26, r16
      7e:	a3 07       	cpc	r26, r19
      80:	a6 07       	cpc	r26, r22
      82:	a8 07       	cpc	r26, r24
      84:	aa 07       	cpc	r26, r26
      86:	ac 07       	cpc	r26, r28
      88:	5d 08       	sbc	r5, r13
      8a:	be 07       	cpc	r27, r30

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ee       	ldi	r30, 0xEE	; 238
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 3a 09 	call	0x1274	; 0x1274 <main>
      da:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

// Functions continuously called to emit a message, like a beacon
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <message_sent+0x1>
      f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <message_sent>
      f4:	08 95       	ret

000000f6 <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
      f6:	0e 94 93 02 	call	0x526	; 0x526 <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
      fa:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
      fe:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     102:	0c 94 8e 02 	jmp	0x51c	; 0x51c <set_motors>

00000106 <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     112:	c1 2c       	mov	r12, r1
     114:	d1 2c       	mov	r13, r1
     116:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     11c:	0e 94 9c 02 	call	0x538	; 0x538 <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     120:	8f 3f       	cpi	r24, 0xFF	; 255
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	92 07       	cpc	r25, r18
     126:	49 f0       	breq	.+18     	; 0x13a <sample_light+0x34>
            sum = sum + sample;
     128:	09 2e       	mov	r0, r25
     12a:	00 0c       	add	r0, r0
     12c:	aa 0b       	sbc	r26, r26
     12e:	bb 0b       	sbc	r27, r27
     130:	c8 0e       	add	r12, r24
     132:	d9 1e       	adc	r13, r25
     134:	ea 1e       	adc	r14, r26
     136:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     138:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     13a:	cc 32       	cpi	r28, 0x2C	; 44
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	d8 07       	cpc	r29, r24
     140:	6c f3       	brlt	.-38     	; 0x11c <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     142:	9e 01       	movw	r18, r28
     144:	dd 0f       	add	r29, r29
     146:	44 0b       	sbc	r20, r20
     148:	55 0b       	sbc	r21, r21
     14a:	c7 01       	movw	r24, r14
     14c:	b6 01       	movw	r22, r12
     14e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divmodsi4>
}
     152:	c9 01       	movw	r24, r18
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <setup>:
}

/* Function runs once upon program initialization
   * takes measurement of light and sets message parameters
   * at beginning of program execution */
void setup() {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
  transmit_msg.type = NORMAL;
     166:	c6 e1       	ldi	r28, 0x16	; 22
     168:	d1 e0       	ldi	r29, 0x01	; 1
     16a:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	88 83       	st	Y, r24
  transmit_msg.crc = message_crc(&transmit_msg);
     170:	ce 01       	movw	r24, r28
     172:	0e 94 9b 08 	call	0x1136	; 0x1136 <message_crc>
     176:	9b 87       	std	Y+11, r25	; 0x0b
     178:	8a 87       	std	Y+10, r24	; 0x0a
  current_light = sample_light();
     17a:	0e 94 83 00 	call	0x106	; 0x106 <sample_light>
     17e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	11 f4       	brne	.+4      	; 0x194 <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	91 05       	cpc	r25, r1
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x12>
     19a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     19e:	02 97       	sbiw	r24, 0x02	; 2
     1a0:	31 f4       	brne	.+12     	; 0x1ae <set_motion+0x22>
    spinup_motors();
     1a2:	0e 94 93 02 	call	0x526	; 0x526 <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <set_motion+0x2c>
  } else {
    spinup_motors();
     1ae:	0e 94 93 02 	call	0x526	; 0x526 <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1b2:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <set_motors>

000001bc <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	19 f4       	brne	.+6      	; 0x1c6 <random_walk+0xa>
     1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <set_motion.part.0>
     1c4:	2f c0       	rjmp	.+94     	; 0x224 <random_walk+0x68>
          set_motion(FORWARD);
      } else if (die == 1) {
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	91 05       	cpc	r25, r1
     1ca:	19 f4       	brne	.+6      	; 0x1d2 <random_walk+0x16>
          set_motion(LEFT);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	05 c0       	rjmp	.+10     	; 0x1dc <random_walk+0x20>
      } else if (die == 2) {
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	91 05       	cpc	r25, r1
     1d6:	29 f4       	brne	.+10     	; 0x1e2 <random_walk+0x26>
          set_motion(RIGHT);
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
     1e0:	21 c0       	rjmp	.+66     	; 0x224 <random_walk+0x68>
      } else if (die == 3) {                                  // Error handling, shouldn't reach unless for shark init
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	91 05       	cpc	r25, r1
     1e6:	51 f4       	brne	.+20     	; 0x1fc <random_walk+0x40>
          set_color(GREEN);
     1e8:	84 e0       	ldi	r24, 0x04	; 4
     1ea:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
          set_motion(STOP);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
	  delay(2000);
     1f6:	80 ed       	ldi	r24, 0xD0	; 208
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	12 c0       	rjmp	.+36     	; 0x220 <random_walk+0x64>
      } else if (die == 4) {
     1fc:	04 97       	sbiw	r24, 0x04	; 4
     1fe:	91 f4       	brne	.+36     	; 0x224 <random_walk+0x68>
          set_motion(STOP);
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
          set_color(WHITE);
     208:	85 e1       	ldi	r24, 0x15	; 21
     20a:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
	  delay(1000);
     20e:	88 ee       	ldi	r24, 0xE8	; 232
     210:	93 e0       	ldi	r25, 0x03	; 3
     212:	0e 94 83 02 	call	0x506	; 0x506 <delay>
          set_color(GREEN);
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
	  delay(1000);
     21c:	88 ee       	ldi	r24, 0xE8	; 232
     21e:	93 e0       	ldi	r25, 0x03	; 3
     220:	0e 94 83 02 	call	0x506	; 0x506 <delay>
      }
      delay(100);
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0c 94 83 02 	jmp	0x506	; 0x506 <delay>

0000022c <shark>:

// Function dictating behavior of shark
int16_t shark() {
  if (message_sent == 1) {
     22c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <message_sent>
     230:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <message_sent+0x1>
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	01 f5       	brne	.+64     	; 0x278 <shark+0x4c>
      message_sent = 0;
     238:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <message_sent+0x1>
     23c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <message_sent>
      set_color(RED);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
      rand = rand_soft();
     246:	0e 94 33 03 	call	0x666	; 0x666 <rand_soft>
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rand+0x1>
     250:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rand>
      random_walk(die);
     254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     258:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     25c:	0e 94 de 00 	call	0x1bc	; 0x1bc <random_walk>
      die = (rand % 3);
     260:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rand>
     264:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rand+0x1>
     268:	63 e0       	ldi	r22, 0x03	; 3
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divmodhi4>
     270:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();
     278:	0c 94 83 00 	jmp	0x106	; 0x106 <sample_light>

0000027c <random_delayed>:
}

int16_t random_delayed() {
  last_changed = kilo_ticks;
     27c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     280:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     284:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     288:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     28c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <last_changed+0x1>
     290:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_changed>
  while (kilo_ticks < last_changed + 16) {
     294:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <kilo_ticks>
     298:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <kilo_ticks+0x1>
     29c:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <kilo_ticks+0x2>
     2a0:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <kilo_ticks+0x3>
     2a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_changed>
     2a8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <last_changed+0x1>
     2ac:	40 96       	adiw	r24, 0x10	; 16
     2ae:	09 2e       	mov	r0, r25
     2b0:	00 0c       	add	r0, r0
     2b2:	aa 0b       	sbc	r26, r26
     2b4:	bb 0b       	sbc	r27, r27
     2b6:	48 17       	cp	r20, r24
     2b8:	59 07       	cpc	r21, r25
     2ba:	6a 07       	cpc	r22, r26
     2bc:	7b 07       	cpc	r23, r27
     2be:	18 f4       	brcc	.+6      	; 0x2c6 <random_delayed+0x4a>
    shark();
     2c0:	0e 94 16 01 	call	0x22c	; 0x22c <shark>
     2c4:	e7 cf       	rjmp	.-50     	; 0x294 <random_delayed+0x18>
  }
  return sample_light();
     2c6:	0c 94 83 00 	jmp	0x106	; 0x106 <sample_light>

000002ca <loop>:
}

void loop() {
  if (current_light < 1020 && current_light > 1000) {	// Continuously check if light level above threshold
     2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     2d2:	89 5e       	subi	r24, 0xE9	; 233
     2d4:	93 40       	sbci	r25, 0x03	; 3
     2d6:	43 97       	sbiw	r24, 0x13	; 19
     2d8:	70 f4       	brcc	.+28     	; 0x2f6 <loop+0x2c>
    set_motion(STOP);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
    set_color(GREEN);
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
    delay(500);			// If below, block for 1/4 second
     2e8:	84 ef       	ldi	r24, 0xF4	; 244
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 83 02 	call	0x506	; 0x506 <delay>
    current_light = random_delayed();
     2f0:	0e 94 3e 01 	call	0x27c	; 0x27c <random_delayed>
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <loop+0x30>
  } else {
    current_light = shark();	// Take new light level reading
     2f6:	0e 94 16 01 	call	0x22c	; 0x22c <shark>
     2fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     2fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     302:	08 95       	ret

00000304 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     304:	08 95       	ret

00000306 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	08 95       	ret

0000030c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     30c:	08 95       	ret

0000030e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
    cli();
     31c:	f8 94       	cli

    ports_off();
     31e:	14 b8       	out	0x04, r1	; 4
     320:	17 b8       	out	0x07, r1	; 7
     322:	1a b8       	out	0x0a, r1	; 10
     324:	15 b8       	out	0x05, r1	; 5
     326:	18 b8       	out	0x08, r1	; 8
     328:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     32a:	52 9a       	sbi	0x0a, 2	; 10
     32c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     32e:	14 bc       	out	0x24, r1	; 36
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	85 bd       	out	0x25, r24	; 37
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	87 bd       	out	0x27, r24	; 39
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     33e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     342:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     346:	2f e8       	ldi	r18, 0x8F	; 143
     348:	3b e0       	ldi	r19, 0x0B	; 11
     34a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     34e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     352:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     356:	53 98       	cbi	0x0a, 3	; 10
     358:	23 98       	cbi	0x04, 3	; 4
     35a:	91 ea       	ldi	r25, 0xA1	; 161
     35c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     360:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     364:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     368:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     36c:	8b e0       	ldi	r24, 0x0B	; 11
     36e:	80 bf       	out	0x30, r24	; 48
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     37c:	83 e8       	ldi	r24, 0x83	; 131
     37e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     382:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     386:	80 64       	ori	r24, 0x40	; 64
     388:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     38c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     390:	86 fd       	sbrc	r24, 6
     392:	fc cf       	rjmp	.-8      	; 0x38c <kilo_init+0x7e>
    adc_trigger_high_gain();
     394:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     398:	83 ea       	ldi	r24, 0xA3	; 163
     39a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
    if (osccal != 0xFF)
     3ac:	8f 3f       	cpi	r24, 0xFF	; 255
     3ae:	11 f0       	breq	.+4      	; 0x3b4 <kilo_init+0xa6>
        OSCCAL = osccal;
     3b0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     3b4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     3b8:	c1 e0       	ldi	r28, 0x01	; 1
     3ba:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     3be:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     3c2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     3c6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3ca:	80 e9       	ldi	r24, 0x90	; 144
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     3d2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     3d6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     3da:	88 73       	andi	r24, 0x38	; 56
     3dc:	11 f0       	breq	.+4      	; 0x3e2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3de:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     3e2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     3e6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     3f2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     3f6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     3fa:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     3fe:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     402:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    kilo_tx_period = 3906;
     40c:	82 e4       	ldi	r24, 0x42	; 66
     40e:	9f e0       	ldi	r25, 0x0F	; 15
     410:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     414:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     418:	80 eb       	ldi	r24, 0xB0	; 176
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     420:	c8 2f       	mov	r28, r24
     422:	81 eb       	ldi	r24, 0xB1	; 177
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     42a:	2c 2f       	mov	r18, r28
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	38 2b       	or	r19, r24
     430:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     434:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     440:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     444:	89 e0       	ldi	r24, 0x09	; 9
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     44c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     450:	8c e0       	ldi	r24, 0x0C	; 12
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     458:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     45c:	84 e1       	ldi	r24, 0x14	; 20
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     464:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     468:	0a e4       	ldi	r16, 0x4A	; 74
     46a:	11 e0       	ldi	r17, 0x01	; 1
     46c:	53 e2       	ldi	r21, 0x23	; 35
     46e:	e5 2e       	mov	r14, r21
     470:	51 e0       	ldi	r21, 0x01	; 1
     472:	f5 2e       	mov	r15, r21
     474:	c0 e2       	ldi	r28, 0x20	; 32
     476:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     478:	ce 01       	movw	r24, r28
     47a:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     47e:	d8 2e       	mov	r13, r24
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     488:	2d 2d       	mov	r18, r13
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	32 2f       	mov	r19, r18
     48e:	22 27       	eor	r18, r18
     490:	28 2b       	or	r18, r24
     492:	f8 01       	movw	r30, r16
     494:	21 93       	st	Z+, r18
     496:	31 93       	st	Z+, r19
     498:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     49a:	ce 01       	movw	r24, r28
     49c:	c0 96       	adiw	r24, 0x30	; 48
     49e:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     4a2:	d8 2e       	mov	r13, r24
     4a4:	ce 01       	movw	r24, r28
     4a6:	c1 96       	adiw	r24, 0x31	; 49
     4a8:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_read_byte>
     4ac:	2d 2d       	mov	r18, r13
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	32 2f       	mov	r19, r18
     4b2:	22 27       	eor	r18, r18
     4b4:	28 2b       	or	r18, r24
     4b6:	f7 01       	movw	r30, r14
     4b8:	21 93       	st	Z+, r18
     4ba:	31 93       	st	Z+, r19
     4bc:	7f 01       	movw	r14, r30
     4be:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4c0:	cc 33       	cpi	r28, 0x3C	; 60
     4c2:	d1 05       	cpc	r29, r1
     4c4:	c9 f6       	brne	.-78     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4c6:	78 94       	sei
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	08 95       	ret

000004d8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	8f 93       	push	r24
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	a8 95       	wdr
     4ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4ee:	88 61       	ori	r24, 0x18	; 24
     4f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4f8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4fa:	8f 91       	pop	r24
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	41 f0       	breq	.+16     	; 0x51a <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50a:	ef ec       	ldi	r30, 0xCF	; 207
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <delay+0x8>
     512:	00 c0       	rjmp	.+0      	; 0x514 <delay+0xe>
     514:	00 00       	nop
        _delay_ms(1);
        ms--;
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f6 cf       	rjmp	.-20     	; 0x506 <delay>
    }
}
     51a:	08 95       	ret

0000051c <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     51c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     520:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     524:	08 95       	ret

00000526 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     52c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     530:	8f e0       	ldi	r24, 0x0F	; 15
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0c 94 83 02 	jmp	0x506	; 0x506 <delay>

00000538 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     538:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     53c:	81 11       	cpse	r24, r1
     53e:	1e c0       	rjmp	.+60     	; 0x57c <get_ambientlight+0x44>
        cli();
     540:	f8 94       	cli
        adc_setup_conversion(7);
     542:	87 e0       	ldi	r24, 0x07	; 7
     544:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     548:	83 e8       	ldi	r24, 0x83	; 131
     54a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     54e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     552:	80 64       	ori	r24, 0x40	; 64
     554:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     558:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     55c:	86 fd       	sbrc	r24, 6
     55e:	fc cf       	rjmp	.-8      	; 0x558 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     560:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     564:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     568:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     56c:	23 ea       	ldi	r18, 0xA3	; 163
     56e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     572:	21 e0       	ldi	r18, 0x01	; 1
     574:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     578:	78 94       	sei
     57a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     580:	08 95       	ret

00000582 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     582:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     586:	81 11       	cpse	r24, r1
     588:	1e c0       	rjmp	.+60     	; 0x5c6 <get_temperature+0x44>
        cli();
     58a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     58c:	88 ec       	ldi	r24, 0xC8	; 200
     58e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     592:	87 e8       	ldi	r24, 0x87	; 135
     594:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     598:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59c:	80 64       	ori	r24, 0x40	; 64
     59e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a6:	86 fd       	sbrc	r24, 6
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     5aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5b2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5b6:	23 ea       	ldi	r18, 0xA3	; 163
     5b8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     5c2:	78 94       	sei
     5c4:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     5ca:	08 95       	ret

000005cc <rand_hard>:

uint8_t rand_hard() {
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     5d6:	e3 ea       	ldi	r30, 0xA3	; 163
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     5da:	c6 e0       	ldi	r28, 0x06	; 6
     5dc:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     5de:	a1 e0       	ldi	r26, 0x01	; 1
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     5e2:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     5e4:	f8 94       	cli
            adc_setup_conversion(6);
     5e6:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5ea:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     5ee:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5f2:	40 64       	ori	r20, 0x40	; 64
     5f4:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     5f8:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fc:	46 fd       	sbrc	r20, 6
     5fe:	fc cf       	rjmp	.-8      	; 0x5f8 <rand_hard+0x2c>
            a = ADCW&0x1;
     600:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     604:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     608:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     60a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     60e:	50 64       	ori	r21, 0x40	; 64
     610:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     614:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     618:	56 fd       	sbrc	r21, 6
     61a:	fc cf       	rjmp	.-8      	; 0x614 <rand_hard+0x48>
            b = ADCW&0x1;
     61c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     620:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     624:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     628:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     62c:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     630:	78 94       	sei
            tries++;
     632:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     634:	61 70       	andi	r22, 0x01	; 1
     636:	46 17       	cp	r20, r22
     638:	51 f0       	breq	.+20     	; 0x64e <rand_hard+0x82>
        if (a)
     63a:	44 23       	and	r20, r20
     63c:	59 f0       	breq	.+22     	; 0x654 <rand_hard+0x88>
            num |= (1<<i);
     63e:	ad 01       	movw	r20, r26
     640:	02 2e       	mov	r0, r18
     642:	01 c0       	rjmp	.+2      	; 0x646 <rand_hard+0x7a>
     644:	44 0f       	add	r20, r20
     646:	0a 94       	dec	r0
     648:	ea f7       	brpl	.-6      	; 0x644 <rand_hard+0x78>
     64a:	84 2b       	or	r24, r20
     64c:	03 c0       	rjmp	.+6      	; 0x654 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     64e:	90 38       	cpi	r25, 0x80	; 128
     650:	49 f6       	brne	.-110    	; 0x5e4 <rand_hard+0x18>
     652:	f3 cf       	rjmp	.-26     	; 0x63a <rand_hard+0x6e>
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     658:	28 30       	cpi	r18, 0x08	; 8
     65a:	31 05       	cpc	r19, r1
     65c:	09 f0       	breq	.+2      	; 0x660 <rand_hard+0x94>
     65e:	c1 cf       	rjmp	.-126    	; 0x5e2 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     666:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     66a:	98 e0       	ldi	r25, 0x08	; 8
     66c:	89 9f       	mul	r24, r25
     66e:	90 01       	movw	r18, r0
     670:	11 24       	eor	r1, r1
     672:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     674:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <accumulator>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	89 0f       	add	r24, r25
     67c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accumulator>
     680:	82 2f       	mov	r24, r18
     682:	82 95       	swap	r24
     684:	86 95       	lsr	r24
     686:	87 70       	andi	r24, 0x07	; 7
     688:	28 27       	eor	r18, r24
     68a:	96 95       	lsr	r25
     68c:	96 95       	lsr	r25
     68e:	82 2f       	mov	r24, r18
     690:	89 27       	eor	r24, r25
     692:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     696:	08 95       	ret

00000698 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     698:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     69c:	08 95       	ret

0000069e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     69e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     6a2:	81 11       	cpse	r24, r1
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <get_voltage+0x34>
        cli();                                    // disable interrupts
     6a6:	f8 94       	cli
        adc_setup_conversion(6);
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6ae:	83 e8       	ldi	r24, 0x83	; 131
     6b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     6be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6c2:	86 fd       	sbrc	r24, 6
     6c4:	fc cf       	rjmp	.-8      	; 0x6be <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     6c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     6ce:	78 94       	sei
     6d0:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     6d6:	08 95       	ret

000006d8 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     6d8:	2f 92       	push	r2
     6da:	3f 92       	push	r3
     6dc:	4f 92       	push	r4
     6de:	5f 92       	push	r5
     6e0:	6f 92       	push	r6
     6e2:	7f 92       	push	r7
     6e4:	8f 92       	push	r8
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     6fe:	fc 01       	movw	r30, r24
     700:	c2 81       	ldd	r28, Z+2	; 0x02
     702:	d3 81       	ldd	r29, Z+3	; 0x03
     704:	c4 38       	cpi	r28, 0x84	; 132
     706:	f3 e0       	ldi	r31, 0x03	; 3
     708:	df 07       	cpc	r29, r31
     70a:	0c f0       	brlt	.+2      	; 0x70e <estimate_distance+0x36>
     70c:	7e c0       	rjmp	.+252    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
        if (dist->high_gain > kilo_irhigh[0]) {
     70e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     712:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     716:	8c 17       	cp	r24, r28
     718:	9d 07       	cpc	r25, r29
     71a:	08 f4       	brcc	.+2      	; 0x71e <estimate_distance+0x46>
     71c:	6f c0       	rjmp	.+222    	; 0x7fc <estimate_distance+0x124>
     71e:	e5 e2       	ldi	r30, 0x25	; 37
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     724:	81 91       	ld	r24, Z+
     726:	91 91       	ld	r25, Z+
     728:	8c 17       	cp	r24, r28
     72a:	9d 07       	cpc	r25, r29
     72c:	20 f0       	brcs	.+8      	; 0x736 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     72e:	1f 5f       	subi	r17, 0xFF	; 255
     730:	1e 30       	cpi	r17, 0x0E	; 14
     732:	c1 f7       	brne	.-16     	; 0x724 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     734:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     736:	81 2f       	mov	r24, r17
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	ed 5d       	subi	r30, 0xDD	; 221
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	e0 80       	ld	r14, Z
     746:	f1 80       	ldd	r15, Z+1	; 0x01
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	fc 01       	movw	r30, r24
     74e:	ef 5d       	subi	r30, 0xDF	; 223
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	b7 01       	movw	r22, r14
     758:	68 1b       	sub	r22, r24
     75a:	79 0b       	sbc	r23, r25
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     76c:	4b 01       	movw	r8, r22
     76e:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     770:	be 01       	movw	r22, r28
     772:	0d 2e       	mov	r0, r29
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__floatsisf>
     77e:	2b 01       	movw	r4, r22
     780:	3c 01       	movw	r6, r24
     782:	b7 01       	movw	r22, r14
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	61 2f       	mov	r22, r17
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	a9 01       	movw	r20, r18
     7ae:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c3 01       	movw	r24, r6
     7cc:	b2 01       	movw	r22, r4
     7ce:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e2       	ldi	r20, 0x20	; 32
     7d8:	51 e4       	ldi	r21, 0x41	; 65
     7da:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     7de:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fixsfsi>
     7e2:	7b 01       	movw	r14, r22
     7e4:	c5 01       	movw	r24, r10
     7e6:	b4 01       	movw	r22, r8
     7e8:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fixsfsi>
     7ec:	ab 01       	movw	r20, r22
     7ee:	bc 01       	movw	r22, r24
     7f0:	c7 01       	movw	r24, r14
     7f2:	ba 01       	movw	r22, r20
     7f4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divmodhi4>
     7f8:	16 2f       	mov	r17, r22
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     7fc:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     7fe:	cd 3b       	cpi	r28, 0xBD	; 189
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	d8 07       	cpc	r29, r24
     804:	0c f4       	brge	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	ca c0       	rjmp	.+404    	; 0x99c <__stack+0x9d>
     808:	01 c0       	rjmp	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     80a:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     80c:	f1 01       	movw	r30, r2
     80e:	c0 80       	ld	r12, Z
     810:	d1 80       	ldd	r13, Z+1	; 0x01
     812:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     816:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     81a:	8c 15       	cp	r24, r12
     81c:	9d 05       	cpc	r25, r13
     81e:	88 f0       	brcs	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     820:	ec e4       	ldi	r30, 0x4C	; 76
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     82a:	e1 90       	ld	r14, Z+
     82c:	f1 90       	ld	r15, Z+
     82e:	ec 14       	cp	r14, r12
     830:	fd 04       	cpc	r15, r13
     832:	08 f4       	brcc	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	58 c0       	rjmp	.+176    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
     836:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     838:	8e 30       	cpi	r24, 0x0E	; 14
     83a:	91 05       	cpc	r25, r1
     83c:	a9 f7       	brne	.-22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     83e:	0a e5       	ldi	r16, 0x5A	; 90
     840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     842:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     844:	1f 3f       	cpi	r17, 0xFF	; 255
     846:	09 f4       	brne	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	4b c0       	rjmp	.+150    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     84a:	be 01       	movw	r22, r28
     84c:	dd 0f       	add	r29, r29
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__floatsisf>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
     85a:	61 2f       	mov	r22, r17
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     866:	4b 01       	movw	r8, r22
     868:	5c 01       	movw	r10, r24
     86a:	a7 01       	movw	r20, r14
     86c:	96 01       	movw	r18, r12
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	81 e6       	ldi	r24, 0x61	; 97
     874:	94 e4       	ldi	r25, 0x44	; 68
     876:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c5 01       	movw	r24, r10
     880:	b4 01       	movw	r22, r8
     882:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     886:	4b 01       	movw	r8, r22
     888:	5c 01       	movw	r10, r24
     88a:	60 2f       	mov	r22, r16
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     896:	2b 01       	movw	r4, r22
     898:	3c 01       	movw	r6, r24
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	4f e2       	ldi	r20, 0x2F	; 47
     8a0:	54 e4       	ldi	r21, 0x44	; 68
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
     8aa:	9b 01       	movw	r18, r22
     8ac:	ac 01       	movw	r20, r24
     8ae:	c3 01       	movw	r24, r6
     8b0:	b2 01       	movw	r22, r4
     8b2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	c5 01       	movw	r24, r10
     8bc:	b4 01       	movw	r22, r8
     8be:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	48 e4       	ldi	r20, 0x48	; 72
     8c8:	53 e4       	ldi	r21, 0x43	; 67
     8ca:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__divsf3>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	44 e0       	ldi	r20, 0x04	; 4
     8d4:	52 e4       	ldi	r21, 0x42	; 66
     8d6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     8da:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixunssfsi>
     8de:	60 c0       	rjmp	.+192    	; 0x9a0 <__stack+0xa1>
        } else {
            return 33 + dist_low;
     8e0:	61 e2       	ldi	r22, 0x21	; 33
     8e2:	60 0f       	add	r22, r16
     8e4:	5d c0       	rjmp	.+186    	; 0x9a0 <__stack+0xa1>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	fc 01       	movw	r30, r24
     8ec:	e8 5b       	subi	r30, 0xB8	; 184
     8ee:	fe 4f       	sbci	r31, 0xFE	; 254
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	b7 01       	movw	r22, r14
     8f6:	68 1b       	sub	r22, r24
     8f8:	79 0b       	sbc	r23, r25
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     90e:	b6 01       	movw	r22, r12
     910:	dd 0c       	add	r13, r13
     912:	88 0b       	sbc	r24, r24
     914:	99 0b       	sbc	r25, r25
     916:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__floatsisf>
     91a:	2b 01       	movw	r4, r22
     91c:	3c 01       	movw	r6, r24
     91e:	b7 01       	movw	r22, r14
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     928:	6b 01       	movw	r12, r22
     92a:	7c 01       	movw	r14, r24
     92c:	63 2d       	mov	r22, r3
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__floatunsisf>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__addsf3>
     94e:	a5 01       	movw	r20, r10
     950:	94 01       	movw	r18, r8
     952:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	c3 01       	movw	r24, r6
     968:	b2 01       	movw	r22, r4
     96a:	0e 94 cf 09 	call	0x139e	; 0x139e <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e2       	ldi	r20, 0x20	; 32
     974:	51 e4       	ldi	r21, 0x41	; 65
     976:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__mulsf3>
     97a:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fixsfsi>
     97e:	7b 01       	movw	r14, r22
     980:	c5 01       	movw	r24, r10
     982:	b4 01       	movw	r22, r8
     984:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fixsfsi>
     988:	ab 01       	movw	r20, r22
     98a:	bc 01       	movw	r22, r24
     98c:	c7 01       	movw	r24, r14
     98e:	ba 01       	movw	r22, r20
     990:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divmodhi4>
     994:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     996:	6f 3f       	cpi	r22, 0xFF	; 255
     998:	09 f0       	breq	.+2      	; 0x99c <__stack+0x9d>
     99a:	54 cf       	rjmp	.-344    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     99c:	61 e2       	ldi	r22, 0x21	; 33
     99e:	61 0f       	add	r22, r17
    }
}
     9a0:	86 2f       	mov	r24, r22
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	7f 90       	pop	r7
     9bc:	6f 90       	pop	r6
     9be:	5f 90       	pop	r5
     9c0:	4f 90       	pop	r4
     9c2:	3f 90       	pop	r3
     9c4:	2f 90       	pop	r2
     9c6:	08 95       	ret

000009c8 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
    tx_clock += tx_increment;
     9ea:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     9ee:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     9f2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     9f6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     a02:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     a0e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     a16:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     a1a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     a1e:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     a22:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	a1 1d       	adc	r26, r1
     a2a:	b1 1d       	adc	r27, r1
     a2c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     a30:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     a34:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     a38:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a3c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     a40:	81 11       	cpse	r24, r1
     a42:	2d c0       	rjmp	.+90     	; 0xa9e <__vector_14+0xd6>
     a44:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     a48:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     a4c:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     a50:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	10 f5       	brcc	.+68     	; 0xa9e <__vector_14+0xd6>
     a5a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	f1 f4       	brne	.+60     	; 0xa9e <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     a62:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     a66:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     a6a:	09 95       	icall
        if (msg) {
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	b9 f0       	breq	.+46     	; 0xa9e <__vector_14+0xd6>
            if (message_send(msg)) {
     a70:	0e 94 b7 08 	call	0x116e	; 0x116e <message_send>
     a74:	88 23       	and	r24, r24
     a76:	51 f0       	breq	.+20     	; 0xa8c <__vector_14+0xc4>
                kilo_message_tx_success();
     a78:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     a7c:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     a80:	09 95       	icall
                tx_clock = 0;
     a82:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     a86:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a8c:	0e 94 87 00 	call	0x10e	; 0x10e <sample_light+0x8>
     a90:	9c 01       	movw	r18, r24
     a92:	33 27       	eor	r19, r19
     a94:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     a98:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     a9c:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	bf 91       	pop	r27
     aa4:	af 91       	pop	r26
     aa6:	9f 91       	pop	r25
     aa8:	8f 91       	pop	r24
     aaa:	7f 91       	pop	r23
     aac:	6f 91       	pop	r22
     aae:	5f 91       	pop	r21
     ab0:	4f 91       	pop	r20
     ab2:	3f 91       	pop	r19
     ab4:	2f 91       	pop	r18
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     ac0:	80 ff       	sbrs	r24, 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <set_color+0x8>
        DDRD |= (1<<5);
     ac4:	55 9a       	sbi	0x0a, 5	; 10
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     ac8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     aca:	81 ff       	sbrs	r24, 1
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <set_color+0x12>
        DDRD |= (1<<4);
     ace:	54 9a       	sbi	0x0a, 4	; 10
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     ad2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     ad4:	82 ff       	sbrs	r24, 2
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <set_color+0x1c>
        DDRC |= (1<<3);
     ad8:	3b 9a       	sbi	0x07, 3	; 7
     ada:	01 c0       	rjmp	.+2      	; 0xade <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     adc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ade:	83 ff       	sbrs	r24, 3
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <set_color+0x26>
        DDRC |= (1<<2);
     ae2:	3a 9a       	sbi	0x07, 2	; 7
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     ae6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ae8:	84 ff       	sbrs	r24, 4
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <set_color+0x30>
        DDRC |= (1<<5);
     aec:	3d 9a       	sbi	0x07, 5	; 7
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     af0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     af2:	85 ff       	sbrs	r24, 5
     af4:	02 c0       	rjmp	.+4      	; 0xafa <set_color+0x3a>
        DDRC |= (1<<4);
     af6:	3c 9a       	sbi	0x07, 4	; 7
     af8:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     afa:	3c 98       	cbi	0x07, 4	; 7
     afc:	08 95       	ret

00000afe <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     afe:	8c 01       	movw	r16, r24
     b00:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b02:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b04:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b0a:	98 e1       	ldi	r25, 0x18	; 24
     b0c:	c9 2e       	mov	r12, r25
     b0e:	29 e2       	ldi	r18, 0x29	; 41
     b10:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b12:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <kilo_state>
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	e7 30       	cpi	r30, 0x07	; 7
     b1a:	f1 05       	cpc	r31, r1
     b1c:	d0 f7       	brcc	.-12     	; 0xb12 <kilo_start+0x14>
     b1e:	ec 5c       	subi	r30, 0xCC	; 204
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__tablejump2__>
            case SLEEPING:
                cli();
     b26:	f8 94       	cli
                acomp_off();
     b28:	80 b7       	in	r24, 0x30	; 48
     b2a:	87 7f       	andi	r24, 0xF7	; 247
     b2c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b32:	8f 77       	andi	r24, 0x7F	; 127
     b34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     b38:	14 b8       	out	0x04, r1	; 4
     b3a:	17 b8       	out	0x07, r1	; 7
     b3c:	1a b8       	out	0x0a, r1	; 10
     b3e:	15 b8       	out	0x05, r1	; 5
     b40:	18 b8       	out	0x08, r1	; 8
     b42:	1b b8       	out	0x0b, r1	; 11
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	a8 95       	wdr
     b4a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b5e:	83 b7       	in	r24, 0x33	; 51
     b60:	81 7f       	andi	r24, 0xF1	; 241
     b62:	84 60       	ori	r24, 0x04	; 4
     b64:	83 bf       	out	0x33, r24	; 51
                cli();
     b66:	f8 94       	cli
                sleep_enable();
     b68:	83 b7       	in	r24, 0x33	; 51
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	83 bf       	out	0x33, r24	; 51
                sei();
     b6e:	78 94       	sei
                sleep_cpu();
     b70:	88 95       	sleep
                sleep_disable();
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	83 bf       	out	0x33, r24	; 51
                sei();
     b78:	78 94       	sei
                rx_busy = 0;
     b7a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     b7e:	52 9a       	sbi	0x0a, 2	; 10
     b80:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b86:	80 68       	ori	r24, 0x80	; 128
     b88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8c:	87 e5       	ldi	r24, 0x57	; 87
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <kilo_start+0x92>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <kilo_start+0x98>
     b96:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b98:	80 b7       	in	r24, 0x30	; 48
     b9a:	88 61       	ori	r24, 0x18	; 24
     b9c:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     b9e:	8f e3       	ldi	r24, 0x3F	; 63
     ba0:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba4:	ef e1       	ldi	r30, 0x1F	; 31
     ba6:	fe e4       	ldi	r31, 0x4E	; 78
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <kilo_start+0xaa>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <kilo_start+0xb0>
     bae:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     bb0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <kilo_start+0xbc>
     bb8:	50 c0       	rjmp	.+160    	; 0xc5a <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     bc0:	ff ef       	ldi	r31, 0xFF	; 255
     bc2:	20 e7       	ldi	r18, 0x70	; 112
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	f1 50       	subi	r31, 0x01	; 1
     bc8:	20 40       	sbci	r18, 0x00	; 0
     bca:	80 40       	sbci	r24, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <kilo_start+0xc8>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <kilo_start+0xd2>
     bd0:	00 00       	nop
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     bd4:	8c e0       	ldi	r24, 0x0C	; 12
     bd6:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     bda:	ef ec       	ldi	r30, 0xCF	; 207
     bdc:	f7 e0       	ldi	r31, 0x07	; 7
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <kilo_start+0xe0>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <kilo_start+0xe6>
     be4:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     bec:	ff ef       	ldi	r31, 0xFF	; 255
     bee:	21 ee       	ldi	r18, 0xE1	; 225
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	f1 50       	subi	r31, 0x01	; 1
     bf4:	20 40       	sbci	r18, 0x00	; 0
     bf6:	80 40       	sbci	r24, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <kilo_start+0xf4>
     bfa:	2c c0       	rjmp	.+88     	; 0xc54 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     bfc:	0e 94 4f 03 	call	0x69e	; 0x69e <get_voltage>
                if(voltage > 682)
     c00:	8b 3a       	cpi	r24, 0xAB	; 171
     c02:	e2 e0       	ldi	r30, 0x02	; 2
     c04:	9e 07       	cpc	r25, r30
     c06:	24 f0       	brlt	.+8      	; 0xc10 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     c08:	8c e0       	ldi	r24, 0x0C	; 12
     c0a:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     c0e:	81 cf       	rjmp	.-254    	; 0xb12 <kilo_start+0x14>
                else if(voltage > 648)
     c10:	89 38       	cpi	r24, 0x89	; 137
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	9f 07       	cpc	r25, r31
     c16:	14 f0       	brlt	.+4      	; 0xc1c <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     c18:	80 e3       	ldi	r24, 0x30	; 48
     c1a:	f7 cf       	rjmp	.-18     	; 0xc0a <kilo_start+0x10c>
                else if(voltage > 614)
     c1c:	87 36       	cpi	r24, 0x67	; 103
     c1e:	92 40       	sbci	r25, 0x02	; 2
     c20:	14 f0       	brlt	.+4      	; 0xc26 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     c22:	8f e0       	ldi	r24, 0x0F	; 15
     c24:	f2 cf       	rjmp	.-28     	; 0xc0a <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	f0 cf       	rjmp	.-32     	; 0xc0a <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     c2a:	48 99       	sbic	0x09, 0	; 9
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     c34:	8f ec       	ldi	r24, 0xCF	; 207
     c36:	97 e0       	ldi	r25, 0x07	; 7
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <kilo_start+0x13a>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <kilo_start+0x140>
     c3e:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	e1 ee       	ldi	r30, 0xE1	; 225
     c4a:	f4 e0       	ldi	r31, 0x04	; 4
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	e0 40       	sbci	r30, 0x00	; 0
     c50:	f0 40       	sbci	r31, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <kilo_start+0x14e>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <kilo_start+0x158>
     c56:	00 00       	nop
     c58:	5c cf       	rjmp	.-328    	; 0xb12 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	d6 cf       	rjmp	.-84     	; 0xc0a <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     c5e:	d1 11       	cpse	r29, r1
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <kilo_start+0x168>
                    setup();
     c62:	f8 01       	movw	r30, r16
     c64:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     c66:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <kilo_state>
     c6a:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     c6c:	f7 01       	movw	r30, r14
     c6e:	09 95       	icall
                break;
     c70:	50 cf       	rjmp	.-352    	; 0xb12 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     c72:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     c76:	81 11       	cpse	r24, r1
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c7a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c7e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c82:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
     c86:	45 cf       	rjmp	.-374    	; 0xb12 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c88:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     c8c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prev_motion>
     c90:	98 17       	cp	r25, r24
     c92:	09 f4       	brne	.+2      	; 0xc96 <kilo_start+0x198>
     c94:	3e cf       	rjmp	.-388    	; 0xb12 <kilo_start+0x14>
                        prev_motion = cur_motion;
     c96:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     c9a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     c9e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	89 f4       	brne	.+34     	; 0xcc8 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ca6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     caa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cae:	8f e2       	ldi	r24, 0x2F	; 47
     cb0:	95 e7       	ldi	r25, 0x75	; 117
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <kilo_start+0x1b4>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <kilo_start+0x1ba>
     cb8:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cba:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cbe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cc2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cc6:	25 cf       	rjmp	.-438    	; 0xb12 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cc8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ccc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cd0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	59 f4       	brne	.+22     	; 0xcee <kilo_start+0x1f0>
     cd8:	ef e2       	ldi	r30, 0x2F	; 47
     cda:	f5 e7       	ldi	r31, 0x75	; 117
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <kilo_start+0x1de>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <kilo_start+0x1e4>
     ce2:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     ce4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ce8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <kilo_start+0x210>
     cee:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cf2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cf6:	8f e2       	ldi	r24, 0x2F	; 47
     cf8:	95 e7       	ldi	r25, 0x75	; 117
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <kilo_start+0x1fc>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <kilo_start+0x202>
     d00:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d02:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     d06:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d0a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d0e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d12:	ff ce       	rjmp	.-514    	; 0xb12 <kilo_start+0x14>

00000d14 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
    rx_timer_off();
     d22:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d26:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d2a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     d34:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     d38:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     d3c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d40:	93 ea       	ldi	r25, 0xA3	; 163
     d42:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d46:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d7e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d82:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d8c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     d90:	88 23       	and	r24, r24
     d92:	21 f1       	breq	.+72     	; 0xddc <__vector_23+0x84>
        rx_timer_on();
     d94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d98:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d9c:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     da0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     da4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     da8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     dac:	88 23       	and	r24, r24
     dae:	09 f4       	brne	.+2      	; 0xdb2 <__vector_23+0x5a>
     db0:	af c1       	rjmp	.+862    	; 0x1110 <__vector_23+0x3b8>
            adc_finish_conversion();
     db2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     db6:	86 fd       	sbrc	r24, 6
     db8:	fc cf       	rjmp	.-8      	; 0xdb2 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     dba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dbe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     dc2:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     dc6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     dd0:	93 ea       	ldi	r25, 0xA3	; 163
     dd2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dd6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     dda:	9a c1       	rjmp	.+820    	; 0x1110 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     ddc:	c9 01       	movw	r24, r18
     dde:	87 58       	subi	r24, 0x87	; 135
     de0:	91 09       	sbc	r25, r1
     de2:	84 37       	cpi	r24, 0x74	; 116
     de4:	99 40       	sbci	r25, 0x09	; 9
     de6:	a0 f0       	brcs	.+40     	; 0xe10 <__vector_23+0xb8>
            rx_timer_off();
     de8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     dec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     df0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     df4:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     df8:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     dfc:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     e00:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e04:	83 ea       	ldi	r24, 0xA3	; 163
     e06:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e0a:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e0e:	80 c1       	rjmp	.+768    	; 0x1110 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     e10:	26 58       	subi	r18, 0x86	; 134
     e12:	31 09       	sbc	r19, r1
     e14:	a4 ef       	ldi	r26, 0xF4	; 244
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	0e 94 8a 09 	call	0x1314	; 0x1314 <__umulhisi3>
     e1c:	8c 01       	movw	r16, r24
     e1e:	22 27       	eor	r18, r18
     e20:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     e22:	08 30       	cpi	r16, 0x08	; 8
     e24:	60 f4       	brcc	.+24     	; 0xe3e <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <__vector_23+0xd6>
     e2c:	88 0f       	add	r24, r24
     e2e:	0a 95       	dec	r16
     e30:	ea f7       	brpl	.-6      	; 0xe2c <__vector_23+0xd4>
     e32:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     e36:	89 2b       	or	r24, r25
     e38:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     e3c:	69 c1       	rjmp	.+722    	; 0x1110 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e3e:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     e42:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     e46:	88 23       	and	r24, r24
     e48:	41 f1       	breq	.+80     	; 0xe9a <__vector_23+0x142>
                    adc_finish_conversion();
     e4a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e4e:	86 fd       	sbrc	r24, 6
     e50:	fc cf       	rjmp	.-8      	; 0xe4a <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e52:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e56:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e5a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     e5e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     e62:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e66:	83 ea       	ldi	r24, 0xA3	; 163
     e68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     e72:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     e76:	99 23       	and	r25, r25
     e78:	59 f0       	breq	.+22     	; 0xe90 <__vector_23+0x138>
                        rx_timer_off();
     e7a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e86:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     e8a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     e8e:	40 c1       	rjmp	.+640    	; 0x1110 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e90:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     e94:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     e98:	3b c1       	rjmp	.+630    	; 0x1110 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     e9a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     e9e:	e8 2f       	mov	r30, r24
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	e4 59       	subi	r30, 0x94	; 148
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     eaa:	90 83       	st	Z, r25
                    rx_byteindex++;
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     eb2:	8c 30       	cpi	r24, 0x0C	; 12
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <__vector_23+0x160>
     eb6:	2c c1       	rjmp	.+600    	; 0x1110 <__vector_23+0x3b8>
                        rx_timer_off();
     eb8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ebc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ec0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ec4:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     ec8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     ecc:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     ed0:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     ed4:	8c e6       	ldi	r24, 0x6C	; 108
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 9b 08 	call	0x1136	; 0x1136 <message_crc>
     edc:	08 17       	cp	r16, r24
     ede:	19 07       	cpc	r17, r25
     ee0:	09 f0       	breq	.+2      	; 0xee4 <__vector_23+0x18c>
     ee2:	16 c1       	rjmp	.+556    	; 0x1110 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ee4:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     ee8:	e7 fd       	sbrc	r30, 7
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     eec:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     ef0:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     ef4:	61 e4       	ldi	r22, 0x41	; 65
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	8c e6       	ldi	r24, 0x6C	; 108
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	09 95       	icall
     efe:	08 c1       	rjmp	.+528    	; 0x1110 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f00:	88 e7       	ldi	r24, 0x78	; 120
     f02:	8e 0f       	add	r24, r30
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	30 f0       	brcs	.+12     	; 0xf14 <__vector_23+0x1bc>
        motors_off();
     f08:	53 98       	cbi	0x0a, 3	; 10
     f0a:	23 98       	cbi	0x04, 3	; 4
     f0c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f10:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     f14:	8e 2f       	mov	r24, r30
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	e0 58       	subi	r30, 0x80	; 128
     f1c:	f1 09       	sbc	r31, r1
     f1e:	eb 30       	cpi	r30, 0x0B	; 11
     f20:	f1 05       	cpc	r31, r1
     f22:	08 f0       	brcs	.+2      	; 0xf26 <__vector_23+0x1ce>
     f24:	f5 c0       	rjmp	.+490    	; 0x1110 <__vector_23+0x3b8>
     f26:	e5 5c       	subi	r30, 0xC5	; 197
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     f2e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f38:	16 bc       	out	0x26, r1	; 38
            bootload();
     f3a:	e0 e0       	ldi	r30, 0x00	; 0
     f3c:	f0 e7       	ldi	r31, 0x70	; 112
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f40:	e0 e0       	ldi	r30, 0x00	; 0
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f46:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <kilo_state>
     f4a:	e2 c0       	rjmp	.+452    	; 0x1110 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	b2 c0       	rjmp	.+356    	; 0x10b4 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	b0 c0       	rjmp	.+352    	; 0x10b4 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	ae c0       	rjmp	.+348    	; 0x10b4 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f58:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	09 f4       	brne	.+2      	; 0xf62 <__vector_23+0x20a>
     f60:	d7 c0       	rjmp	.+430    	; 0x1110 <__vector_23+0x3b8>
     f62:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     f66:	84 30       	cpi	r24, 0x04	; 4
     f68:	09 f4       	brne	.+2      	; 0xf6c <__vector_23+0x214>
     f6a:	d2 c0       	rjmp	.+420    	; 0x1110 <__vector_23+0x3b8>
                motors_on();
     f6c:	53 9a       	sbi	0x0a, 3	; 10
     f6e:	23 9a       	sbi	0x04, 3	; 4
     f70:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f74:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	9c c0       	rjmp	.+312    	; 0x10b4 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f7c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	09 f4       	brne	.+2      	; 0xf86 <__vector_23+0x22e>
     f84:	4b c0       	rjmp	.+150    	; 0x101c <__vector_23+0x2c4>
     f86:	80 f4       	brcc	.+32     	; 0xfa8 <__vector_23+0x250>
     f88:	88 23       	and	r24, r24
     f8a:	a9 f0       	breq	.+42     	; 0xfb6 <__vector_23+0x25e>
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__vector_23+0x23a>
     f90:	82 c0       	rjmp	.+260    	; 0x1096 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f92:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     f96:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     f9a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     f9e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     fa2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
     fa6:	77 c0       	rjmp	.+238    	; 0x1096 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_23+0x256>
     fac:	49 c0       	rjmp	.+146    	; 0x1040 <__vector_23+0x2e8>
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <__vector_23+0x25c>
     fb2:	58 c0       	rjmp	.+176    	; 0x1064 <__vector_23+0x30c>
     fb4:	70 c0       	rjmp	.+224    	; 0x1096 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     fb6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     fba:	86 30       	cpi	r24, 0x06	; 6
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__vector_23+0x268>
     fbe:	6b c0       	rjmp	.+214    	; 0x1096 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     fc0:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     fc4:	80 eb       	ldi	r24, 0xB0	; 176
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     fcc:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     fd0:	81 eb       	ldi	r24, 0xB1	; 177
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     fd8:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     fdc:	85 e0       	ldi	r24, 0x05	; 5
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     fe4:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     fe8:	89 e0       	ldi	r24, 0x09	; 9
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ff0:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     ff4:	8c e0       	ldi	r24, 0x0C	; 12
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ffc:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
    1000:	84 e1       	ldi	r24, 0x14	; 20
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <eeprom_write_byte>
                        motors_off();
    1008:	53 98       	cbi	0x0a, 3	; 10
    100a:	23 98       	cbi	0x04, 3	; 4
    100c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1010:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    101a:	3d c0       	rjmp	.+122    	; 0x1096 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    101c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
    1020:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
    1024:	91 30       	cpi	r25, 0x01	; 1
    1026:	21 f4       	brne	.+8      	; 0x1030 <__vector_23+0x2d8>
    1028:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
    102c:	89 17       	cp	r24, r25
    102e:	99 f1       	breq	.+102    	; 0x1096 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1030:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_LEFT;
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    103a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    103e:	2b c0       	rjmp	.+86     	; 0x1096 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1040:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
    1044:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
    1048:	92 30       	cpi	r25, 0x02	; 2
    104a:	21 f4       	brne	.+8      	; 0x1054 <__vector_23+0x2fc>
    104c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
    1050:	89 17       	cp	r24, r25
    1052:	09 f1       	breq	.+66     	; 0x1096 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1054:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    105e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    1062:	19 c0       	rjmp	.+50     	; 0x1096 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1064:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <cur_motion>
    1068:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
    106c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
    1070:	23 30       	cpi	r18, 0x03	; 3
    1072:	41 f4       	brne	.+16     	; 0x1084 <__vector_23+0x32c>
    1074:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
    1078:	82 13       	cpse	r24, r18
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__vector_23+0x32c>
    107c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
    1080:	92 17       	cp	r25, r18
    1082:	49 f0       	breq	.+18     	; 0x1096 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1084:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1088:	23 e0       	ldi	r18, 0x03	; 3
    108a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    108e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1092:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1096:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
    109a:	88 23       	and	r24, r24
    109c:	c9 f1       	breq	.+114    	; 0x1110 <__vector_23+0x3b8>
    109e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    10a2:	86 30       	cpi	r24, 0x06	; 6
    10a4:	a9 f1       	breq	.+106    	; 0x1110 <__vector_23+0x3b8>
                motors_on();
    10a6:	53 9a       	sbi	0x0a, 3	; 10
    10a8:	23 9a       	sbi	0x04, 3	; 4
    10aa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    10b2:	86 e0       	ldi	r24, 0x06	; 6
    10b4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    10b8:	2b c0       	rjmp	.+86     	; 0x1110 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    10be:	86 30       	cpi	r24, 0x06	; 6
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <__vector_23+0x38a>
                motors_on();
    10c2:	53 9a       	sbi	0x0a, 3	; 10
    10c4:	23 9a       	sbi	0x04, 3	; 4
    10c6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ca:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 60 05 	call	0xac0	; 0xac0 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    10d4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
    10d8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                kilo_state = MOVING;
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <__vector_23+0x398>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <__vector_23+0x394>
    10f4:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
    10f8:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
    10fc:	82 23       	and	r24, r18
    10fe:	93 23       	and	r25, r19
    1100:	89 2b       	or	r24, r25
    1102:	21 f0       	breq	.+8      	; 0x110c <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cur_motion>
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    110c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
                    }
                }
            }
        }
    }
}
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1136:	fc 01       	movw	r30, r24
    1138:	9c 01       	movw	r18, r24
    113a:	26 5f       	subi	r18, 0xF6	; 246
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1142:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1144:	84 27       	eor	r24, r20
    1146:	08 2e       	mov	r0, r24
    1148:	82 95       	swap	r24
    114a:	80 7f       	andi	r24, 0xF0	; 240
    114c:	80 25       	eor	r24, r0
    114e:	09 2e       	mov	r0, r25
    1150:	98 2f       	mov	r25, r24
    1152:	82 95       	swap	r24
    1154:	8f 70       	andi	r24, 0x0F	; 15
    1156:	08 26       	eor	r0, r24
    1158:	86 95       	lsr	r24
    115a:	98 27       	eor	r25, r24
    115c:	89 27       	eor	r24, r25
    115e:	88 0f       	add	r24, r24
    1160:	88 0f       	add	r24, r24
    1162:	88 0f       	add	r24, r24
    1164:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1166:	e2 17       	cp	r30, r18
    1168:	f3 07       	cpc	r31, r19
    116a:	59 f7       	brne	.-42     	; 0x1142 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    116c:	08 95       	ret

0000116e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    116e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1170:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1172:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1174:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    1178:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    117a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    117c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    117e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1182:	20 30       	cpi	r18, 0x00	; 0
    1184:	29 f0       	breq	.+10     	; 0x1190 <message_send+0x22>
    1186:	00 00       	nop
    1188:	25 b1       	in	r18, 0x05	; 5
    118a:	23 2b       	or	r18, r19
    118c:	25 b9       	out	0x05, r18	; 5
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <message_send+0x2a>
    1190:	00 00       	nop
    1192:	00 00       	nop
    1194:	00 00       	nop
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <message_send+0x2a>
    1198:	00 00       	nop
    119a:	00 00       	nop
    119c:	00 00       	nop
    119e:	30 95       	com	r19
    11a0:	25 b1       	in	r18, 0x05	; 5
    11a2:	23 23       	and	r18, r19
    11a4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    11a6:	2e ea       	ldi	r18, 0xAE	; 174
    11a8:	2a 95       	dec	r18
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    11ac:	2b ee       	ldi	r18, 0xEB	; 235

000011ae <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    11ae:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    11b0:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    11b2:	0a c0       	rjmp	.+20     	; 0x11c8 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11b4:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11b6:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    11ba:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11bc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11be:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11c0:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11c2:	0f be       	out	0x3f, r0	; 63
    return 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <nocollision>:
nocollision:
    nop
    11c8:	00 00       	nop
    dec tmpreg1
    11ca:	2a 95       	dec	r18
    brne checkcollision
    11cc:	81 f7       	brne	.-32     	; 0x11ae <checkcollision>

    ldi tmpreg1, 0x01
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    11d0:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    11d4:	20 30       	cpi	r18, 0x00	; 0
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <nocollision+0x1a>
    11d8:	00 00       	nop
    11da:	25 b1       	in	r18, 0x05	; 5
    11dc:	23 2b       	or	r18, r19
    11de:	25 b9       	out	0x05, r18	; 5
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <nocollision+0x22>
    11e2:	00 00       	nop
    11e4:	00 00       	nop
    11e6:	00 00       	nop
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <nocollision+0x22>
    11ea:	00 00       	nop
    11ec:	00 00       	nop
    11ee:	00 00       	nop
    11f0:	30 95       	com	r19
    11f2:	25 b1       	in	r18, 0x05	; 5
    11f4:	23 23       	and	r18, r19
    11f6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    11f8:	00 00       	nop
    11fa:	24 e5       	ldi	r18, 0x54	; 84
    11fc:	2a 95       	dec	r18
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1200:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1202:	8c e0       	ldi	r24, 0x0C	; 12

00001204 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1204:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1206:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1208:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    120a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    120c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    120e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1210:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1212:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1214:	50 e0       	ldi	r21, 0x00	; 0

00001216 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1216:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1218:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    121a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    121c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    121e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1222:	20 30       	cpi	r18, 0x00	; 0
    1224:	29 f0       	breq	.+10     	; 0x1230 <sendbit+0x1a>
    1226:	00 00       	nop
    1228:	25 b1       	in	r18, 0x05	; 5
    122a:	23 2b       	or	r18, r19
    122c:	25 b9       	out	0x05, r18	; 5
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <sendbit+0x22>
    1230:	00 00       	nop
    1232:	00 00       	nop
    1234:	00 00       	nop
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <sendbit+0x22>
    1238:	00 00       	nop
    123a:	00 00       	nop
    123c:	00 00       	nop
    123e:	30 95       	com	r19
    1240:	25 b1       	in	r18, 0x05	; 5
    1242:	23 23       	and	r18, r19
    1244:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1246:	00 00       	nop
    1248:	21 e5       	ldi	r18, 0x51	; 81
    124a:	2a 95       	dec	r18
    124c:	f1 f7       	brne	.-4      	; 0x124a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    124e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1250:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1252:	9a 95       	dec	r25
    brne sendbit
    1254:	01 f7       	brne	.-64     	; 0x1216 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1256:	8a 95       	dec	r24
    brne sendbyte
    1258:	a9 f6       	brne	.-86     	; 0x1204 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    125a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    125c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    125e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1260:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1262:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    1266:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1268:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    126a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    126c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    126e:	0f be       	out	0x3f, r0	; 63
    return 1
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	08 95       	ret

00001274 <main>:
  }
}

int main() {
  kilo_init();                          // Begin program execution
    1274:	0e 94 87 01 	call	0x30e	; 0x30e <kilo_init>
  kilo_message_tx = message_tx;         // Begin speaker loop
    1278:	81 e7       	ldi	r24, 0x71	; 113
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    1280:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success; // Begin speaker validation loop
    1284:	84 e7       	ldi	r24, 0x74	; 116
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    128c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);              // Begin motion
    1290:	65 e6       	ldi	r22, 0x65	; 101
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	81 eb       	ldi	r24, 0xB1	; 177
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 7f 05 	call	0xafe	; 0xafe <kilo_start>
  return 0;
}
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	08 95       	ret

000012a2 <__divmodhi4>:
    12a2:	97 fb       	bst	r25, 7
    12a4:	07 2e       	mov	r0, r23
    12a6:	16 f4       	brtc	.+4      	; 0x12ac <__divmodhi4+0xa>
    12a8:	00 94       	com	r0
    12aa:	07 d0       	rcall	.+14     	; 0x12ba <__divmodhi4_neg1>
    12ac:	77 fd       	sbrc	r23, 7
    12ae:	09 d0       	rcall	.+18     	; 0x12c2 <__divmodhi4_neg2>
    12b0:	0e 94 99 09 	call	0x1332	; 0x1332 <__udivmodhi4>
    12b4:	07 fc       	sbrc	r0, 7
    12b6:	05 d0       	rcall	.+10     	; 0x12c2 <__divmodhi4_neg2>
    12b8:	3e f4       	brtc	.+14     	; 0x12c8 <__divmodhi4_exit>

000012ba <__divmodhi4_neg1>:
    12ba:	90 95       	com	r25
    12bc:	81 95       	neg	r24
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <__divmodhi4_neg2>:
    12c2:	70 95       	com	r23
    12c4:	61 95       	neg	r22
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255

000012c8 <__divmodhi4_exit>:
    12c8:	08 95       	ret

000012ca <__divmodsi4>:
    12ca:	05 2e       	mov	r0, r21
    12cc:	97 fb       	bst	r25, 7
    12ce:	1e f4       	brtc	.+6      	; 0x12d6 <__divmodsi4+0xc>
    12d0:	00 94       	com	r0
    12d2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__negsi2>
    12d6:	57 fd       	sbrc	r21, 7
    12d8:	07 d0       	rcall	.+14     	; 0x12e8 <__divmodsi4_neg2>
    12da:	0e 94 ad 09 	call	0x135a	; 0x135a <__udivmodsi4>
    12de:	07 fc       	sbrc	r0, 7
    12e0:	03 d0       	rcall	.+6      	; 0x12e8 <__divmodsi4_neg2>
    12e2:	4e f4       	brtc	.+18     	; 0x12f6 <__divmodsi4_exit>
    12e4:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__negsi2>

000012e8 <__divmodsi4_neg2>:
    12e8:	50 95       	com	r21
    12ea:	40 95       	com	r20
    12ec:	30 95       	com	r19
    12ee:	21 95       	neg	r18
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	4f 4f       	sbci	r20, 0xFF	; 255
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255

000012f6 <__divmodsi4_exit>:
    12f6:	08 95       	ret

000012f8 <__negsi2>:
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__tablejump2__>:
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	05 90       	lpm	r0, Z+
    130e:	f4 91       	lpm	r31, Z
    1310:	e0 2d       	mov	r30, r0
    1312:	09 94       	ijmp

00001314 <__umulhisi3>:
    1314:	a2 9f       	mul	r26, r18
    1316:	b0 01       	movw	r22, r0
    1318:	b3 9f       	mul	r27, r19
    131a:	c0 01       	movw	r24, r0
    131c:	a3 9f       	mul	r26, r19
    131e:	70 0d       	add	r23, r0
    1320:	81 1d       	adc	r24, r1
    1322:	11 24       	eor	r1, r1
    1324:	91 1d       	adc	r25, r1
    1326:	b2 9f       	mul	r27, r18
    1328:	70 0d       	add	r23, r0
    132a:	81 1d       	adc	r24, r1
    132c:	11 24       	eor	r1, r1
    132e:	91 1d       	adc	r25, r1
    1330:	08 95       	ret

00001332 <__udivmodhi4>:
    1332:	aa 1b       	sub	r26, r26
    1334:	bb 1b       	sub	r27, r27
    1336:	51 e1       	ldi	r21, 0x11	; 17
    1338:	07 c0       	rjmp	.+14     	; 0x1348 <__udivmodhi4_ep>

0000133a <__udivmodhi4_loop>:
    133a:	aa 1f       	adc	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	a6 17       	cp	r26, r22
    1340:	b7 07       	cpc	r27, r23
    1342:	10 f0       	brcs	.+4      	; 0x1348 <__udivmodhi4_ep>
    1344:	a6 1b       	sub	r26, r22
    1346:	b7 0b       	sbc	r27, r23

00001348 <__udivmodhi4_ep>:
    1348:	88 1f       	adc	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	5a 95       	dec	r21
    134e:	a9 f7       	brne	.-22     	; 0x133a <__udivmodhi4_loop>
    1350:	80 95       	com	r24
    1352:	90 95       	com	r25
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	08 95       	ret

0000135a <__udivmodsi4>:
    135a:	a1 e2       	ldi	r26, 0x21	; 33
    135c:	1a 2e       	mov	r1, r26
    135e:	aa 1b       	sub	r26, r26
    1360:	bb 1b       	sub	r27, r27
    1362:	fd 01       	movw	r30, r26
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <__udivmodsi4_ep>

00001366 <__udivmodsi4_loop>:
    1366:	aa 1f       	adc	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	ee 1f       	adc	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	a2 17       	cp	r26, r18
    1370:	b3 07       	cpc	r27, r19
    1372:	e4 07       	cpc	r30, r20
    1374:	f5 07       	cpc	r31, r21
    1376:	20 f0       	brcs	.+8      	; 0x1380 <__udivmodsi4_ep>
    1378:	a2 1b       	sub	r26, r18
    137a:	b3 0b       	sbc	r27, r19
    137c:	e4 0b       	sbc	r30, r20
    137e:	f5 0b       	sbc	r31, r21

00001380 <__udivmodsi4_ep>:
    1380:	66 1f       	adc	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a 94       	dec	r1
    138a:	69 f7       	brne	.-38     	; 0x1366 <__udivmodsi4_loop>
    138c:	60 95       	com	r22
    138e:	70 95       	com	r23
    1390:	80 95       	com	r24
    1392:	90 95       	com	r25
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	bd 01       	movw	r22, r26
    139a:	cf 01       	movw	r24, r30
    139c:	08 95       	ret

0000139e <__subsf3>:
    139e:	50 58       	subi	r21, 0x80	; 128

000013a0 <__addsf3>:
    13a0:	bb 27       	eor	r27, r27
    13a2:	aa 27       	eor	r26, r26
    13a4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__addsf3x>
    13a8:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_round>
    13ac:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscA>
    13b0:	38 f0       	brcs	.+14     	; 0x13c0 <__addsf3+0x20>
    13b2:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_pscB>
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__addsf3+0x20>
    13b8:	39 f4       	brne	.+14     	; 0x13c8 <__addsf3+0x28>
    13ba:	9f 3f       	cpi	r25, 0xFF	; 255
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <__addsf3+0x24>
    13be:	26 f4       	brtc	.+8      	; 0x13c8 <__addsf3+0x28>
    13c0:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__fp_nan>
    13c4:	0e f4       	brtc	.+2      	; 0x13c8 <__addsf3+0x28>
    13c6:	e0 95       	com	r30
    13c8:	e7 fb       	bst	r30, 7
    13ca:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_inf>

000013ce <__addsf3x>:
    13ce:	e9 2f       	mov	r30, r25
    13d0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_split3>
    13d4:	58 f3       	brcs	.-42     	; 0x13ac <__addsf3+0xc>
    13d6:	ba 17       	cp	r27, r26
    13d8:	62 07       	cpc	r22, r18
    13da:	73 07       	cpc	r23, r19
    13dc:	84 07       	cpc	r24, r20
    13de:	95 07       	cpc	r25, r21
    13e0:	20 f0       	brcs	.+8      	; 0x13ea <__addsf3x+0x1c>
    13e2:	79 f4       	brne	.+30     	; 0x1402 <__addsf3x+0x34>
    13e4:	a6 f5       	brtc	.+104    	; 0x144e <__addsf3x+0x80>
    13e6:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__fp_zero>
    13ea:	0e f4       	brtc	.+2      	; 0x13ee <__addsf3x+0x20>
    13ec:	e0 95       	com	r30
    13ee:	0b 2e       	mov	r0, r27
    13f0:	ba 2f       	mov	r27, r26
    13f2:	a0 2d       	mov	r26, r0
    13f4:	0b 01       	movw	r0, r22
    13f6:	b9 01       	movw	r22, r18
    13f8:	90 01       	movw	r18, r0
    13fa:	0c 01       	movw	r0, r24
    13fc:	ca 01       	movw	r24, r20
    13fe:	a0 01       	movw	r20, r0
    1400:	11 24       	eor	r1, r1
    1402:	ff 27       	eor	r31, r31
    1404:	59 1b       	sub	r21, r25
    1406:	99 f0       	breq	.+38     	; 0x142e <__addsf3x+0x60>
    1408:	59 3f       	cpi	r21, 0xF9	; 249
    140a:	50 f4       	brcc	.+20     	; 0x1420 <__addsf3x+0x52>
    140c:	50 3e       	cpi	r21, 0xE0	; 224
    140e:	68 f1       	brcs	.+90     	; 0x146a <__addsf3x+0x9c>
    1410:	1a 16       	cp	r1, r26
    1412:	f0 40       	sbci	r31, 0x00	; 0
    1414:	a2 2f       	mov	r26, r18
    1416:	23 2f       	mov	r18, r19
    1418:	34 2f       	mov	r19, r20
    141a:	44 27       	eor	r20, r20
    141c:	58 5f       	subi	r21, 0xF8	; 248
    141e:	f3 cf       	rjmp	.-26     	; 0x1406 <__addsf3x+0x38>
    1420:	46 95       	lsr	r20
    1422:	37 95       	ror	r19
    1424:	27 95       	ror	r18
    1426:	a7 95       	ror	r26
    1428:	f0 40       	sbci	r31, 0x00	; 0
    142a:	53 95       	inc	r21
    142c:	c9 f7       	brne	.-14     	; 0x1420 <__addsf3x+0x52>
    142e:	7e f4       	brtc	.+30     	; 0x144e <__addsf3x+0x80>
    1430:	1f 16       	cp	r1, r31
    1432:	ba 0b       	sbc	r27, r26
    1434:	62 0b       	sbc	r22, r18
    1436:	73 0b       	sbc	r23, r19
    1438:	84 0b       	sbc	r24, r20
    143a:	ba f0       	brmi	.+46     	; 0x146a <__addsf3x+0x9c>
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	a1 f0       	breq	.+40     	; 0x1468 <__addsf3x+0x9a>
    1440:	ff 0f       	add	r31, r31
    1442:	bb 1f       	adc	r27, r27
    1444:	66 1f       	adc	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	88 1f       	adc	r24, r24
    144a:	c2 f7       	brpl	.-16     	; 0x143c <__addsf3x+0x6e>
    144c:	0e c0       	rjmp	.+28     	; 0x146a <__addsf3x+0x9c>
    144e:	ba 0f       	add	r27, r26
    1450:	62 1f       	adc	r22, r18
    1452:	73 1f       	adc	r23, r19
    1454:	84 1f       	adc	r24, r20
    1456:	48 f4       	brcc	.+18     	; 0x146a <__addsf3x+0x9c>
    1458:	87 95       	ror	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	b7 95       	ror	r27
    1460:	f7 95       	ror	r31
    1462:	9e 3f       	cpi	r25, 0xFE	; 254
    1464:	08 f0       	brcs	.+2      	; 0x1468 <__addsf3x+0x9a>
    1466:	b0 cf       	rjmp	.-160    	; 0x13c8 <__addsf3+0x28>
    1468:	93 95       	inc	r25
    146a:	88 0f       	add	r24, r24
    146c:	08 f0       	brcs	.+2      	; 0x1470 <__addsf3x+0xa2>
    146e:	99 27       	eor	r25, r25
    1470:	ee 0f       	add	r30, r30
    1472:	97 95       	ror	r25
    1474:	87 95       	ror	r24
    1476:	08 95       	ret

00001478 <__divsf3>:
    1478:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3x>
    147c:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_round>
    1480:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_pscB>
    1484:	58 f0       	brcs	.+22     	; 0x149c <__divsf3+0x24>
    1486:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscA>
    148a:	40 f0       	brcs	.+16     	; 0x149c <__divsf3+0x24>
    148c:	29 f4       	brne	.+10     	; 0x1498 <__divsf3+0x20>
    148e:	5f 3f       	cpi	r21, 0xFF	; 255
    1490:	29 f0       	breq	.+10     	; 0x149c <__divsf3+0x24>
    1492:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_inf>
    1496:	51 11       	cpse	r21, r1
    1498:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__fp_szero>
    149c:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__fp_nan>

000014a0 <__divsf3x>:
    14a0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_split3>
    14a4:	68 f3       	brcs	.-38     	; 0x1480 <__divsf3+0x8>

000014a6 <__divsf3_pse>:
    14a6:	99 23       	and	r25, r25
    14a8:	b1 f3       	breq	.-20     	; 0x1496 <__divsf3+0x1e>
    14aa:	55 23       	and	r21, r21
    14ac:	91 f3       	breq	.-28     	; 0x1492 <__divsf3+0x1a>
    14ae:	95 1b       	sub	r25, r21
    14b0:	55 0b       	sbc	r21, r21
    14b2:	bb 27       	eor	r27, r27
    14b4:	aa 27       	eor	r26, r26
    14b6:	62 17       	cp	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	38 f0       	brcs	.+14     	; 0x14cc <__divsf3_pse+0x26>
    14be:	9f 5f       	subi	r25, 0xFF	; 255
    14c0:	5f 4f       	sbci	r21, 0xFF	; 255
    14c2:	22 0f       	add	r18, r18
    14c4:	33 1f       	adc	r19, r19
    14c6:	44 1f       	adc	r20, r20
    14c8:	aa 1f       	adc	r26, r26
    14ca:	a9 f3       	breq	.-22     	; 0x14b6 <__divsf3_pse+0x10>
    14cc:	35 d0       	rcall	.+106    	; 0x1538 <__divsf3_pse+0x92>
    14ce:	0e 2e       	mov	r0, r30
    14d0:	3a f0       	brmi	.+14     	; 0x14e0 <__divsf3_pse+0x3a>
    14d2:	e0 e8       	ldi	r30, 0x80	; 128
    14d4:	32 d0       	rcall	.+100    	; 0x153a <__divsf3_pse+0x94>
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	50 40       	sbci	r21, 0x00	; 0
    14da:	e6 95       	lsr	r30
    14dc:	00 1c       	adc	r0, r0
    14de:	ca f7       	brpl	.-14     	; 0x14d2 <__divsf3_pse+0x2c>
    14e0:	2b d0       	rcall	.+86     	; 0x1538 <__divsf3_pse+0x92>
    14e2:	fe 2f       	mov	r31, r30
    14e4:	29 d0       	rcall	.+82     	; 0x1538 <__divsf3_pse+0x92>
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	bb 1f       	adc	r27, r27
    14ee:	26 17       	cp	r18, r22
    14f0:	37 07       	cpc	r19, r23
    14f2:	48 07       	cpc	r20, r24
    14f4:	ab 07       	cpc	r26, r27
    14f6:	b0 e8       	ldi	r27, 0x80	; 128
    14f8:	09 f0       	breq	.+2      	; 0x14fc <__divsf3_pse+0x56>
    14fa:	bb 0b       	sbc	r27, r27
    14fc:	80 2d       	mov	r24, r0
    14fe:	bf 01       	movw	r22, r30
    1500:	ff 27       	eor	r31, r31
    1502:	93 58       	subi	r25, 0x83	; 131
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	3a f0       	brmi	.+14     	; 0x1516 <__divsf3_pse+0x70>
    1508:	9e 3f       	cpi	r25, 0xFE	; 254
    150a:	51 05       	cpc	r21, r1
    150c:	78 f0       	brcs	.+30     	; 0x152c <__divsf3_pse+0x86>
    150e:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_inf>
    1512:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__fp_szero>
    1516:	5f 3f       	cpi	r21, 0xFF	; 255
    1518:	e4 f3       	brlt	.-8      	; 0x1512 <__divsf3_pse+0x6c>
    151a:	98 3e       	cpi	r25, 0xE8	; 232
    151c:	d4 f3       	brlt	.-12     	; 0x1512 <__divsf3_pse+0x6c>
    151e:	86 95       	lsr	r24
    1520:	77 95       	ror	r23
    1522:	67 95       	ror	r22
    1524:	b7 95       	ror	r27
    1526:	f7 95       	ror	r31
    1528:	9f 5f       	subi	r25, 0xFF	; 255
    152a:	c9 f7       	brne	.-14     	; 0x151e <__divsf3_pse+0x78>
    152c:	88 0f       	add	r24, r24
    152e:	91 1d       	adc	r25, r1
    1530:	96 95       	lsr	r25
    1532:	87 95       	ror	r24
    1534:	97 f9       	bld	r25, 7
    1536:	08 95       	ret
    1538:	e1 e0       	ldi	r30, 0x01	; 1
    153a:	66 0f       	add	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	88 1f       	adc	r24, r24
    1540:	bb 1f       	adc	r27, r27
    1542:	62 17       	cp	r22, r18
    1544:	73 07       	cpc	r23, r19
    1546:	84 07       	cpc	r24, r20
    1548:	ba 07       	cpc	r27, r26
    154a:	20 f0       	brcs	.+8      	; 0x1554 <__divsf3_pse+0xae>
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	ba 0b       	sbc	r27, r26
    1554:	ee 1f       	adc	r30, r30
    1556:	88 f7       	brcc	.-30     	; 0x153a <__divsf3_pse+0x94>
    1558:	e0 95       	com	r30
    155a:	08 95       	ret

0000155c <__fixsfsi>:
    155c:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixunssfsi>
    1560:	68 94       	set
    1562:	b1 11       	cpse	r27, r1
    1564:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__fp_szero>
    1568:	08 95       	ret

0000156a <__fixunssfsi>:
    156a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_splitA>
    156e:	88 f0       	brcs	.+34     	; 0x1592 <__fixunssfsi+0x28>
    1570:	9f 57       	subi	r25, 0x7F	; 127
    1572:	98 f0       	brcs	.+38     	; 0x159a <__fixunssfsi+0x30>
    1574:	b9 2f       	mov	r27, r25
    1576:	99 27       	eor	r25, r25
    1578:	b7 51       	subi	r27, 0x17	; 23
    157a:	b0 f0       	brcs	.+44     	; 0x15a8 <__fixunssfsi+0x3e>
    157c:	e1 f0       	breq	.+56     	; 0x15b6 <__fixunssfsi+0x4c>
    157e:	66 0f       	add	r22, r22
    1580:	77 1f       	adc	r23, r23
    1582:	88 1f       	adc	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	1a f0       	brmi	.+6      	; 0x158e <__fixunssfsi+0x24>
    1588:	ba 95       	dec	r27
    158a:	c9 f7       	brne	.-14     	; 0x157e <__fixunssfsi+0x14>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <__fixunssfsi+0x4c>
    158e:	b1 30       	cpi	r27, 0x01	; 1
    1590:	91 f0       	breq	.+36     	; 0x15b6 <__fixunssfsi+0x4c>
    1592:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_zero>
    1596:	b1 e0       	ldi	r27, 0x01	; 1
    1598:	08 95       	ret
    159a:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__fp_zero>
    159e:	67 2f       	mov	r22, r23
    15a0:	78 2f       	mov	r23, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	b8 5f       	subi	r27, 0xF8	; 248
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <__fixunssfsi+0x4c>
    15a8:	b9 3f       	cpi	r27, 0xF9	; 249
    15aa:	cc f3       	brlt	.-14     	; 0x159e <__fixunssfsi+0x34>
    15ac:	86 95       	lsr	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	b3 95       	inc	r27
    15b4:	d9 f7       	brne	.-10     	; 0x15ac <__fixunssfsi+0x42>
    15b6:	3e f4       	brtc	.+14     	; 0x15c6 <__fixunssfsi+0x5c>
    15b8:	90 95       	com	r25
    15ba:	80 95       	com	r24
    15bc:	70 95       	com	r23
    15be:	61 95       	neg	r22
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	08 95       	ret

000015c8 <__floatunsisf>:
    15c8:	e8 94       	clt
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <__floatsisf+0x12>

000015cc <__floatsisf>:
    15cc:	97 fb       	bst	r25, 7
    15ce:	3e f4       	brtc	.+14     	; 0x15de <__floatsisf+0x12>
    15d0:	90 95       	com	r25
    15d2:	80 95       	com	r24
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	99 23       	and	r25, r25
    15e0:	a9 f0       	breq	.+42     	; 0x160c <__floatsisf+0x40>
    15e2:	f9 2f       	mov	r31, r25
    15e4:	96 e9       	ldi	r25, 0x96	; 150
    15e6:	bb 27       	eor	r27, r27
    15e8:	93 95       	inc	r25
    15ea:	f6 95       	lsr	r31
    15ec:	87 95       	ror	r24
    15ee:	77 95       	ror	r23
    15f0:	67 95       	ror	r22
    15f2:	b7 95       	ror	r27
    15f4:	f1 11       	cpse	r31, r1
    15f6:	f8 cf       	rjmp	.-16     	; 0x15e8 <__floatsisf+0x1c>
    15f8:	fa f4       	brpl	.+62     	; 0x1638 <__floatsisf+0x6c>
    15fa:	bb 0f       	add	r27, r27
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__floatsisf+0x36>
    15fe:	60 ff       	sbrs	r22, 0
    1600:	1b c0       	rjmp	.+54     	; 0x1638 <__floatsisf+0x6c>
    1602:	6f 5f       	subi	r22, 0xFF	; 255
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	16 c0       	rjmp	.+44     	; 0x1638 <__floatsisf+0x6c>
    160c:	88 23       	and	r24, r24
    160e:	11 f0       	breq	.+4      	; 0x1614 <__floatsisf+0x48>
    1610:	96 e9       	ldi	r25, 0x96	; 150
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <__floatsisf+0x6a>
    1614:	77 23       	and	r23, r23
    1616:	21 f0       	breq	.+8      	; 0x1620 <__floatsisf+0x54>
    1618:	9e e8       	ldi	r25, 0x8E	; 142
    161a:	87 2f       	mov	r24, r23
    161c:	76 2f       	mov	r23, r22
    161e:	05 c0       	rjmp	.+10     	; 0x162a <__floatsisf+0x5e>
    1620:	66 23       	and	r22, r22
    1622:	71 f0       	breq	.+28     	; 0x1640 <__floatsisf+0x74>
    1624:	96 e8       	ldi	r25, 0x86	; 134
    1626:	86 2f       	mov	r24, r22
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	2a f0       	brmi	.+10     	; 0x1638 <__floatsisf+0x6c>
    162e:	9a 95       	dec	r25
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	da f7       	brpl	.-10     	; 0x162e <__floatsisf+0x62>
    1638:	88 0f       	add	r24, r24
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__fp_inf>:
    1642:	97 f9       	bld	r25, 7
    1644:	9f 67       	ori	r25, 0x7F	; 127
    1646:	80 e8       	ldi	r24, 0x80	; 128
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	08 95       	ret

0000164e <__fp_nan>:
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	80 ec       	ldi	r24, 0xC0	; 192
    1652:	08 95       	ret

00001654 <__fp_pscA>:
    1654:	00 24       	eor	r0, r0
    1656:	0a 94       	dec	r0
    1658:	16 16       	cp	r1, r22
    165a:	17 06       	cpc	r1, r23
    165c:	18 06       	cpc	r1, r24
    165e:	09 06       	cpc	r0, r25
    1660:	08 95       	ret

00001662 <__fp_pscB>:
    1662:	00 24       	eor	r0, r0
    1664:	0a 94       	dec	r0
    1666:	12 16       	cp	r1, r18
    1668:	13 06       	cpc	r1, r19
    166a:	14 06       	cpc	r1, r20
    166c:	05 06       	cpc	r0, r21
    166e:	08 95       	ret

00001670 <__fp_round>:
    1670:	09 2e       	mov	r0, r25
    1672:	03 94       	inc	r0
    1674:	00 0c       	add	r0, r0
    1676:	11 f4       	brne	.+4      	; 0x167c <__fp_round+0xc>
    1678:	88 23       	and	r24, r24
    167a:	52 f0       	brmi	.+20     	; 0x1690 <__fp_round+0x20>
    167c:	bb 0f       	add	r27, r27
    167e:	40 f4       	brcc	.+16     	; 0x1690 <__fp_round+0x20>
    1680:	bf 2b       	or	r27, r31
    1682:	11 f4       	brne	.+4      	; 0x1688 <__fp_round+0x18>
    1684:	60 ff       	sbrs	r22, 0
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <__fp_round+0x20>
    1688:	6f 5f       	subi	r22, 0xFF	; 255
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__fp_split3>:
    1692:	57 fd       	sbrc	r21, 7
    1694:	90 58       	subi	r25, 0x80	; 128
    1696:	44 0f       	add	r20, r20
    1698:	55 1f       	adc	r21, r21
    169a:	59 f0       	breq	.+22     	; 0x16b2 <__fp_splitA+0x10>
    169c:	5f 3f       	cpi	r21, 0xFF	; 255
    169e:	71 f0       	breq	.+28     	; 0x16bc <__fp_splitA+0x1a>
    16a0:	47 95       	ror	r20

000016a2 <__fp_splitA>:
    16a2:	88 0f       	add	r24, r24
    16a4:	97 fb       	bst	r25, 7
    16a6:	99 1f       	adc	r25, r25
    16a8:	61 f0       	breq	.+24     	; 0x16c2 <__fp_splitA+0x20>
    16aa:	9f 3f       	cpi	r25, 0xFF	; 255
    16ac:	79 f0       	breq	.+30     	; 0x16cc <__fp_splitA+0x2a>
    16ae:	87 95       	ror	r24
    16b0:	08 95       	ret
    16b2:	12 16       	cp	r1, r18
    16b4:	13 06       	cpc	r1, r19
    16b6:	14 06       	cpc	r1, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	f2 cf       	rjmp	.-28     	; 0x16a0 <__fp_split3+0xe>
    16bc:	46 95       	lsr	r20
    16be:	f1 df       	rcall	.-30     	; 0x16a2 <__fp_splitA>
    16c0:	08 c0       	rjmp	.+16     	; 0x16d2 <__fp_splitA+0x30>
    16c2:	16 16       	cp	r1, r22
    16c4:	17 06       	cpc	r1, r23
    16c6:	18 06       	cpc	r1, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	f1 cf       	rjmp	.-30     	; 0x16ae <__fp_splitA+0xc>
    16cc:	86 95       	lsr	r24
    16ce:	71 05       	cpc	r23, r1
    16d0:	61 05       	cpc	r22, r1
    16d2:	08 94       	sec
    16d4:	08 95       	ret

000016d6 <__fp_zero>:
    16d6:	e8 94       	clt

000016d8 <__fp_szero>:
    16d8:	bb 27       	eor	r27, r27
    16da:	66 27       	eor	r22, r22
    16dc:	77 27       	eor	r23, r23
    16de:	cb 01       	movw	r24, r22
    16e0:	97 f9       	bld	r25, 7
    16e2:	08 95       	ret

000016e4 <__mulsf3>:
    16e4:	0e 94 85 0b 	call	0x170a	; 0x170a <__mulsf3x>
    16e8:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_round>
    16ec:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscA>
    16f0:	38 f0       	brcs	.+14     	; 0x1700 <__mulsf3+0x1c>
    16f2:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fp_pscB>
    16f6:	20 f0       	brcs	.+8      	; 0x1700 <__mulsf3+0x1c>
    16f8:	95 23       	and	r25, r21
    16fa:	11 f0       	breq	.+4      	; 0x1700 <__mulsf3+0x1c>
    16fc:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_inf>
    1700:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__fp_nan>
    1704:	11 24       	eor	r1, r1
    1706:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__fp_szero>

0000170a <__mulsf3x>:
    170a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_split3>
    170e:	70 f3       	brcs	.-36     	; 0x16ec <__mulsf3+0x8>

00001710 <__mulsf3_pse>:
    1710:	95 9f       	mul	r25, r21
    1712:	c1 f3       	breq	.-16     	; 0x1704 <__mulsf3+0x20>
    1714:	95 0f       	add	r25, r21
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	55 1f       	adc	r21, r21
    171a:	62 9f       	mul	r22, r18
    171c:	f0 01       	movw	r30, r0
    171e:	72 9f       	mul	r23, r18
    1720:	bb 27       	eor	r27, r27
    1722:	f0 0d       	add	r31, r0
    1724:	b1 1d       	adc	r27, r1
    1726:	63 9f       	mul	r22, r19
    1728:	aa 27       	eor	r26, r26
    172a:	f0 0d       	add	r31, r0
    172c:	b1 1d       	adc	r27, r1
    172e:	aa 1f       	adc	r26, r26
    1730:	64 9f       	mul	r22, r20
    1732:	66 27       	eor	r22, r22
    1734:	b0 0d       	add	r27, r0
    1736:	a1 1d       	adc	r26, r1
    1738:	66 1f       	adc	r22, r22
    173a:	82 9f       	mul	r24, r18
    173c:	22 27       	eor	r18, r18
    173e:	b0 0d       	add	r27, r0
    1740:	a1 1d       	adc	r26, r1
    1742:	62 1f       	adc	r22, r18
    1744:	73 9f       	mul	r23, r19
    1746:	b0 0d       	add	r27, r0
    1748:	a1 1d       	adc	r26, r1
    174a:	62 1f       	adc	r22, r18
    174c:	83 9f       	mul	r24, r19
    174e:	a0 0d       	add	r26, r0
    1750:	61 1d       	adc	r22, r1
    1752:	22 1f       	adc	r18, r18
    1754:	74 9f       	mul	r23, r20
    1756:	33 27       	eor	r19, r19
    1758:	a0 0d       	add	r26, r0
    175a:	61 1d       	adc	r22, r1
    175c:	23 1f       	adc	r18, r19
    175e:	84 9f       	mul	r24, r20
    1760:	60 0d       	add	r22, r0
    1762:	21 1d       	adc	r18, r1
    1764:	82 2f       	mov	r24, r18
    1766:	76 2f       	mov	r23, r22
    1768:	6a 2f       	mov	r22, r26
    176a:	11 24       	eor	r1, r1
    176c:	9f 57       	subi	r25, 0x7F	; 127
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	9a f0       	brmi	.+38     	; 0x1798 <__mulsf3_pse+0x88>
    1772:	f1 f0       	breq	.+60     	; 0x17b0 <__mulsf3_pse+0xa0>
    1774:	88 23       	and	r24, r24
    1776:	4a f0       	brmi	.+18     	; 0x178a <__mulsf3_pse+0x7a>
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	bb 1f       	adc	r27, r27
    177e:	66 1f       	adc	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	50 40       	sbci	r21, 0x00	; 0
    1788:	a9 f7       	brne	.-22     	; 0x1774 <__mulsf3_pse+0x64>
    178a:	9e 3f       	cpi	r25, 0xFE	; 254
    178c:	51 05       	cpc	r21, r1
    178e:	80 f0       	brcs	.+32     	; 0x17b0 <__mulsf3_pse+0xa0>
    1790:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__fp_inf>
    1794:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__fp_szero>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	e4 f3       	brlt	.-8      	; 0x1794 <__mulsf3_pse+0x84>
    179c:	98 3e       	cpi	r25, 0xE8	; 232
    179e:	d4 f3       	brlt	.-12     	; 0x1794 <__mulsf3_pse+0x84>
    17a0:	86 95       	lsr	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	e7 95       	ror	r30
    17ac:	9f 5f       	subi	r25, 0xFF	; 255
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <__mulsf3_pse+0x90>
    17b0:	fe 2b       	or	r31, r30
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <eeprom_read_byte>:
    17be:	f9 99       	sbic	0x1f, 1	; 31
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <eeprom_read_byte>
    17c2:	92 bd       	out	0x22, r25	; 34
    17c4:	81 bd       	out	0x21, r24	; 33
    17c6:	f8 9a       	sbi	0x1f, 0	; 31
    17c8:	99 27       	eor	r25, r25
    17ca:	80 b5       	in	r24, 0x20	; 32
    17cc:	08 95       	ret

000017ce <eeprom_write_byte>:
    17ce:	26 2f       	mov	r18, r22

000017d0 <eeprom_write_r18>:
    17d0:	f9 99       	sbic	0x1f, 1	; 31
    17d2:	fe cf       	rjmp	.-4      	; 0x17d0 <eeprom_write_r18>
    17d4:	1f ba       	out	0x1f, r1	; 31
    17d6:	92 bd       	out	0x22, r25	; 34
    17d8:	81 bd       	out	0x21, r24	; 33
    17da:	20 bd       	out	0x20, r18	; 32
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	fa 9a       	sbi	0x1f, 2	; 31
    17e2:	f9 9a       	sbi	0x1f, 1	; 31
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	08 95       	ret

000017ea <_exit>:
    17ea:	f8 94       	cli

000017ec <__stop_program>:
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <__stop_program>
