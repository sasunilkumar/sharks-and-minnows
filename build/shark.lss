
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	06 05       	cpc	r16, r6
      6a:	5d 05       	cpc	r21, r13
      6c:	71 05       	cpc	r23, r1
      6e:	a2 05       	cpc	r26, r2
      70:	a9 05       	cpc	r26, r9
      72:	88 05       	cpc	r24, r8
      74:	ac 05       	cpc	r26, r12
      76:	0a 07       	cpc	r16, r26
      78:	fb 07       	cpc	r31, r27
      7a:	fb 07       	cpc	r31, r27
      7c:	13 07       	cpc	r17, r19
      7e:	16 07       	cpc	r17, r22
      80:	19 07       	cpc	r17, r25
      82:	1b 07       	cpc	r17, r27
      84:	1d 07       	cpc	r17, r29
      86:	1f 07       	cpc	r17, r31
      88:	d0 07       	cpc	r29, r16
      8a:	31 07       	cpc	r19, r17

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e5       	ldi	r30, 0x52	; 82
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a8 30       	cpi	r26, 0x08	; 8
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a8 e0       	ldi	r26, 0x08	; 8
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
      da:	0c 94 27 0b 	jmp	0x164e	; 0x164e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

int message_sent = 0, new_message = 0, die = 0, rand = 0, curr;
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <message_sent+0x1>
      f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <message_sent>
      f4:	08 95       	ret

000000f6 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  transmit_msg.type = NORMAL;
      fa:	c6 e1       	ldi	r28, 0x16	; 22
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	88 83       	st	Y, r24
  transmit_msg.crc = message_crc(&transmit_msg);
     104:	ce 01       	movw	r24, r28
     106:	0e 94 0e 08 	call	0x101c	; 0x101c <message_crc>
     10a:	9b 87       	std	Y+11, r25	; 0x0b
     10c:	8a 87       	std	Y+10, r24	; 0x0a
}
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <set_motion>:
void message_tx_success() {
  message_sent = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     114:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <curr>
     118:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <curr+0x1>
     11c:	28 17       	cp	r18, r24
     11e:	39 07       	cpc	r19, r25
     120:	09 f1       	breq	.+66     	; 0x164 <set_motion+0x50>
        curr = new_motion;
     122:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <curr+0x1>
     126:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <curr>
        if (curr == STOP) {
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	11 f4       	brne	.+4      	; 0x132 <set_motion+0x1e>
          set_motors(0,0);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	16 c0       	rjmp	.+44     	; 0x15e <set_motion+0x4a>
        } else if (curr == FORWARD) {
     132:	81 30       	cpi	r24, 0x01	; 1
     134:	91 05       	cpc	r25, r1
     136:	39 f4       	brne	.+14     	; 0x146 <set_motion+0x32>
          spinup_motors();
     138:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     13c:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     140:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     144:	0d c0       	rjmp	.+26     	; 0x160 <set_motion+0x4c>
        } else if (curr == LEFT) {
     146:	02 97       	sbiw	r24, 0x02	; 2
     148:	31 f4       	brne	.+12     	; 0x156 <set_motion+0x42>
          spinup_motors();
     14a:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
          set_motors(kilo_turn_left, 0);
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     154:	05 c0       	rjmp	.+10     	; 0x160 <set_motion+0x4c>
        } else {
          spinup_motors();
     156:	0e 94 06 02 	call	0x40c	; 0x40c <spinup_motors>
          set_motors(0, kilo_turn_right);
     15a:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0c 94 01 02 	jmp	0x402	; 0x402 <set_motors>
     164:	08 95       	ret

00000166 <loop>:
  transmit_msg.data[0] = 1;
  transmit_msg.crc = message_crc(&transmit_msg);
}

void loop() {
  if (message_sent == 1) {
     166:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <message_sent>
     16a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <message_sent+0x1>
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	d9 f5       	brne	.+118    	; 0x1e8 <loop+0x82>
      message_sent = 0;
     172:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <message_sent+0x1>
     176:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <message_sent>
      set_color(RED);
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
      rand = rand_soft();
     180:	0e 94 a6 02 	call	0x54c	; 0x54c <rand_soft>
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     18a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
      if (die == 0) {
     18e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <die>
     192:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <die+0x1>
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	19 f4       	brne	.+6      	; 0x1a0 <loop+0x3a>
          set_motion(FORWARD);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	05 c0       	rjmp	.+10     	; 0x1aa <loop+0x44>
      } else if (die == 1) {
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	91 05       	cpc	r25, r1
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <loop+0x4a>
          set_motion(LEFT);
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 8a 00 	call	0x114	; 0x114 <set_motion>
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <loop+0x6a>
      } else if (die == 2) {
     1b0:	02 97       	sbiw	r24, 0x02	; 2
     1b2:	19 f4       	brne	.+6      	; 0x1ba <loop+0x54>
          set_motion(RIGHT);
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	f8 cf       	rjmp	.-16     	; 0x1aa <loop+0x44>
      } else {
	  set_color(WHITE);
     1ba:	85 e1       	ldi	r24, 0x15	; 21
     1bc:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
	  set_motion(STOP);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 8a 00 	call	0x114	; 0x114 <set_motion>
	  delay(2500);
     1c8:	84 ec       	ldi	r24, 0xC4	; 196
     1ca:	99 e0       	ldi	r25, 0x09	; 9
     1cc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay>
      }
      die = (rand % 3);
     1d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     1d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     1d8:	63 e0       	ldi	r22, 0x03	; 3
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divmodhi4>
     1e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <die+0x1>
     1e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <die>
     1e8:	08 95       	ret

000001ea <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1ea:	08 95       	ret

000001ec <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	08 95       	ret

000001f2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1f2:	08 95       	ret

000001f4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
    cli();
     202:	f8 94       	cli

    ports_off();
     204:	14 b8       	out	0x04, r1	; 4
     206:	17 b8       	out	0x07, r1	; 7
     208:	1a b8       	out	0x0a, r1	; 10
     20a:	15 b8       	out	0x05, r1	; 5
     20c:	18 b8       	out	0x08, r1	; 8
     20e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     210:	52 9a       	sbi	0x0a, 2	; 10
     212:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     214:	14 bc       	out	0x24, r1	; 36
     216:	85 e0       	ldi	r24, 0x05	; 5
     218:	85 bd       	out	0x25, r24	; 37
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	87 bd       	out	0x27, r24	; 39
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     224:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     228:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     22c:	2f e8       	ldi	r18, 0x8F	; 143
     22e:	3b e0       	ldi	r19, 0x0B	; 11
     230:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     234:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     238:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     23c:	53 98       	cbi	0x0a, 3	; 10
     23e:	23 98       	cbi	0x04, 3	; 4
     240:	91 ea       	ldi	r25, 0xA1	; 161
     242:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     246:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     24a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     24e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     252:	8b e0       	ldi	r24, 0x0B	; 11
     254:	80 bf       	out	0x30, r24	; 48
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     262:	83 e8       	ldi	r24, 0x83	; 131
     264:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     268:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     26c:	80 64       	ori	r24, 0x40	; 64
     26e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     272:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     276:	86 fd       	sbrc	r24, 6
     278:	fc cf       	rjmp	.-8      	; 0x272 <kilo_init+0x7e>
    adc_trigger_high_gain();
     27a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     27e:	83 ea       	ldi	r24, 0xA3	; 163
     280:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
    if (osccal != 0xFF)
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	11 f0       	breq	.+4      	; 0x29a <kilo_init+0xa6>
        OSCCAL = osccal;
     296:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     29a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     29e:	c1 e0       	ldi	r28, 0x01	; 1
     2a0:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     2a4:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     2a8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     2ac:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2b0:	80 e9       	ldi	r24, 0x90	; 144
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     2b8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2bc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     2c0:	88 73       	andi	r24, 0x38	; 56
     2c2:	11 f0       	breq	.+4      	; 0x2c8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2c4:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     2c8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     2cc:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     2d8:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     2dc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     2e0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     2e4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     2e8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     2f2:	82 e4       	ldi	r24, 0x42	; 66
     2f4:	9f e0       	ldi	r25, 0x0F	; 15
     2f6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     2fa:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2fe:	80 eb       	ldi	r24, 0xB0	; 176
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     306:	c8 2f       	mov	r28, r24
     308:	81 eb       	ldi	r24, 0xB1	; 177
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     310:	2c 2f       	mov	r18, r28
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	38 2b       	or	r19, r24
     316:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     31a:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     31e:	85 e0       	ldi	r24, 0x05	; 5
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     326:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     32a:	89 e0       	ldi	r24, 0x09	; 9
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     332:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     336:	8c e0       	ldi	r24, 0x0C	; 12
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     33e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     342:	84 e1       	ldi	r24, 0x14	; 20
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     34a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     34e:	0a e4       	ldi	r16, 0x4A	; 74
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	53 e2       	ldi	r21, 0x23	; 35
     354:	e5 2e       	mov	r14, r21
     356:	51 e0       	ldi	r21, 0x01	; 1
     358:	f5 2e       	mov	r15, r21
     35a:	c0 e2       	ldi	r28, 0x20	; 32
     35c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     364:	d8 2e       	mov	r13, r24
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     36e:	2d 2d       	mov	r18, r13
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	32 2f       	mov	r19, r18
     374:	22 27       	eor	r18, r18
     376:	28 2b       	or	r18, r24
     378:	f8 01       	movw	r30, r16
     37a:	21 93       	st	Z+, r18
     37c:	31 93       	st	Z+, r19
     37e:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     380:	ce 01       	movw	r24, r28
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     388:	d8 2e       	mov	r13, r24
     38a:	ce 01       	movw	r24, r28
     38c:	c1 96       	adiw	r24, 0x31	; 49
     38e:	0e 94 11 0b 	call	0x1622	; 0x1622 <eeprom_read_byte>
     392:	2d 2d       	mov	r18, r13
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	32 2f       	mov	r19, r18
     398:	22 27       	eor	r18, r18
     39a:	28 2b       	or	r18, r24
     39c:	f7 01       	movw	r30, r14
     39e:	21 93       	st	Z+, r18
     3a0:	31 93       	st	Z+, r19
     3a2:	7f 01       	movw	r14, r30
     3a4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3a6:	cc 33       	cpi	r28, 0x3C	; 60
     3a8:	d1 05       	cpc	r29, r1
     3aa:	c9 f6       	brne	.-78     	; 0x35e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3ac:	78 94       	sei
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	08 95       	ret

000003be <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	a8 95       	wdr
     3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3d4:	88 61       	ori	r24, 0x18	; 24
     3d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3de:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	41 f0       	breq	.+16     	; 0x400 <__EEPROM_REGION_LENGTH__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f0:	ef ec       	ldi	r30, 0xCF	; 207
     3f2:	f7 e0       	ldi	r31, 0x07	; 7
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <delay+0x8>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <delay+0xe>
     3fa:	00 00       	nop
        _delay_ms(1);
        ms--;
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f6 cf       	rjmp	.-20     	; 0x3ec <delay>
    }
}
     400:	08 95       	ret

00000402 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     402:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     406:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     40a:	08 95       	ret

0000040c <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     412:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <delay>

0000041e <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     41e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     422:	81 11       	cpse	r24, r1
     424:	1e c0       	rjmp	.+60     	; 0x462 <get_ambientlight+0x44>
        cli();
     426:	f8 94       	cli
        adc_setup_conversion(7);
     428:	87 e0       	ldi	r24, 0x07	; 7
     42a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     42e:	83 e8       	ldi	r24, 0x83	; 131
     430:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     434:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     43e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     442:	86 fd       	sbrc	r24, 6
     444:	fc cf       	rjmp	.-8      	; 0x43e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     446:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     44a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     44e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     452:	23 ea       	ldi	r18, 0xA3	; 163
     454:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     45e:	78 94       	sei
     460:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     466:	08 95       	ret

00000468 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     468:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     46c:	81 11       	cpse	r24, r1
     46e:	1e c0       	rjmp	.+60     	; 0x4ac <get_temperature+0x44>
        cli();
     470:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     472:	88 ec       	ldi	r24, 0xC8	; 200
     474:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     478:	87 e8       	ldi	r24, 0x87	; 135
     47a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     47e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     482:	80 64       	ori	r24, 0x40	; 64
     484:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     488:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     48c:	86 fd       	sbrc	r24, 6
     48e:	fc cf       	rjmp	.-8      	; 0x488 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     490:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     494:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     498:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     49c:	23 ea       	ldi	r18, 0xA3	; 163
     49e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4a8:	78 94       	sei
     4aa:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     4b0:	08 95       	ret

000004b2 <rand_hard>:

uint8_t rand_hard() {
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4bc:	e3 ea       	ldi	r30, 0xA3	; 163
     4be:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4c0:	c6 e0       	ldi	r28, 0x06	; 6
     4c2:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4c4:	a1 e0       	ldi	r26, 0x01	; 1
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4c8:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4ca:	f8 94       	cli
            adc_setup_conversion(6);
     4cc:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4d0:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4d4:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d8:	40 64       	ori	r20, 0x40	; 64
     4da:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4de:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e2:	46 fd       	sbrc	r20, 6
     4e4:	fc cf       	rjmp	.-8      	; 0x4de <rand_hard+0x2c>
            a = ADCW&0x1;
     4e6:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4ea:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4ee:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     4f0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f4:	50 64       	ori	r21, 0x40	; 64
     4f6:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4fa:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fe:	56 fd       	sbrc	r21, 6
     500:	fc cf       	rjmp	.-8      	; 0x4fa <rand_hard+0x48>
            b = ADCW&0x1;
     502:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     506:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     50a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     50e:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     512:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     516:	78 94       	sei
            tries++;
     518:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     51a:	61 70       	andi	r22, 0x01	; 1
     51c:	46 17       	cp	r20, r22
     51e:	51 f0       	breq	.+20     	; 0x534 <rand_hard+0x82>
        if (a)
     520:	44 23       	and	r20, r20
     522:	59 f0       	breq	.+22     	; 0x53a <rand_hard+0x88>
            num |= (1<<i);
     524:	ad 01       	movw	r20, r26
     526:	02 2e       	mov	r0, r18
     528:	01 c0       	rjmp	.+2      	; 0x52c <rand_hard+0x7a>
     52a:	44 0f       	add	r20, r20
     52c:	0a 94       	dec	r0
     52e:	ea f7       	brpl	.-6      	; 0x52a <rand_hard+0x78>
     530:	84 2b       	or	r24, r20
     532:	03 c0       	rjmp	.+6      	; 0x53a <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     534:	90 38       	cpi	r25, 0x80	; 128
     536:	49 f6       	brne	.-110    	; 0x4ca <rand_hard+0x18>
     538:	f3 cf       	rjmp	.-26     	; 0x520 <rand_hard+0x6e>
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     53e:	28 30       	cpi	r18, 0x08	; 8
     540:	31 05       	cpc	r19, r1
     542:	09 f0       	breq	.+2      	; 0x546 <rand_hard+0x94>
     544:	c1 cf       	rjmp	.-126    	; 0x4c8 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     54c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     550:	98 e0       	ldi	r25, 0x08	; 8
     552:	89 9f       	mul	r24, r25
     554:	90 01       	movw	r18, r0
     556:	11 24       	eor	r1, r1
     558:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     55a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	89 0f       	add	r24, r25
     562:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     566:	82 2f       	mov	r24, r18
     568:	82 95       	swap	r24
     56a:	86 95       	lsr	r24
     56c:	87 70       	andi	r24, 0x07	; 7
     56e:	28 27       	eor	r18, r24
     570:	96 95       	lsr	r25
     572:	96 95       	lsr	r25
     574:	82 2f       	mov	r24, r18
     576:	89 27       	eor	r24, r25
     578:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     57c:	08 95       	ret

0000057e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     57e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     582:	08 95       	ret

00000584 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     584:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     588:	81 11       	cpse	r24, r1
     58a:	16 c0       	rjmp	.+44     	; 0x5b8 <get_voltage+0x34>
        cli();                                    // disable interrupts
     58c:	f8 94       	cli
        adc_setup_conversion(6);
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     594:	83 e8       	ldi	r24, 0x83	; 131
     596:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     59a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59e:	80 64       	ori	r24, 0x40	; 64
     5a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a8:	86 fd       	sbrc	r24, 6
     5aa:	fc cf       	rjmp	.-8      	; 0x5a4 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5b4:	78 94       	sei
     5b6:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5b8:	8f ef       	ldi	r24, 0xFF	; 255
     5ba:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5bc:	08 95       	ret

000005be <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5be:	2f 92       	push	r2
     5c0:	3f 92       	push	r3
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5e4:	fc 01       	movw	r30, r24
     5e6:	c2 81       	ldd	r28, Z+2	; 0x02
     5e8:	d3 81       	ldd	r29, Z+3	; 0x03
     5ea:	c4 38       	cpi	r28, 0x84	; 132
     5ec:	f3 e0       	ldi	r31, 0x03	; 3
     5ee:	df 07       	cpc	r29, r31
     5f0:	0c f0       	brlt	.+2      	; 0x5f4 <estimate_distance+0x36>
     5f2:	7e c0       	rjmp	.+252    	; 0x6f0 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     5f4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     5f8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     5fc:	8c 17       	cp	r24, r28
     5fe:	9d 07       	cpc	r25, r29
     600:	08 f4       	brcc	.+2      	; 0x604 <estimate_distance+0x46>
     602:	6f c0       	rjmp	.+222    	; 0x6e2 <estimate_distance+0x124>
     604:	e5 e2       	ldi	r30, 0x25	; 37
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     60a:	81 91       	ld	r24, Z+
     60c:	91 91       	ld	r25, Z+
     60e:	8c 17       	cp	r24, r28
     610:	9d 07       	cpc	r25, r29
     612:	20 f0       	brcs	.+8      	; 0x61c <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     614:	1f 5f       	subi	r17, 0xFF	; 255
     616:	1e 30       	cpi	r17, 0x0E	; 14
     618:	c1 f7       	brne	.-16     	; 0x60a <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     61a:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     61c:	81 2f       	mov	r24, r17
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ed 5d       	subi	r30, 0xDD	; 221
     628:	fe 4f       	sbci	r31, 0xFE	; 254
     62a:	e0 80       	ld	r14, Z
     62c:	f1 80       	ldd	r15, Z+1	; 0x01
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	fc 01       	movw	r30, r24
     634:	ef 5d       	subi	r30, 0xDF	; 223
     636:	fe 4f       	sbci	r31, 0xFE	; 254
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	b7 01       	movw	r22, r14
     63e:	68 1b       	sub	r22, r24
     640:	79 0b       	sbc	r23, r25
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     652:	4b 01       	movw	r8, r22
     654:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     656:	be 01       	movw	r22, r28
     658:	0d 2e       	mov	r0, r29
     65a:	00 0c       	add	r0, r0
     65c:	88 0b       	sbc	r24, r24
     65e:	99 0b       	sbc	r25, r25
     660:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatsisf>
     664:	2b 01       	movw	r4, r22
     666:	3c 01       	movw	r6, r24
     668:	b7 01       	movw	r22, r14
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     672:	6b 01       	movw	r12, r22
     674:	7c 01       	movw	r14, r24
     676:	61 2f       	mov	r22, r17
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	5f e3       	ldi	r21, 0x3F	; 63
     68a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     698:	a5 01       	movw	r20, r10
     69a:	94 01       	movw	r18, r8
     69c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	c7 01       	movw	r24, r14
     6a6:	b6 01       	movw	r22, r12
     6a8:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c3 01       	movw	r24, r6
     6b2:	b2 01       	movw	r22, r4
     6b4:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e2       	ldi	r20, 0x20	; 32
     6be:	51 e4       	ldi	r21, 0x41	; 65
     6c0:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     6c4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fixsfsi>
     6c8:	7b 01       	movw	r14, r22
     6ca:	c5 01       	movw	r24, r10
     6cc:	b4 01       	movw	r22, r8
     6ce:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fixsfsi>
     6d2:	ab 01       	movw	r20, r22
     6d4:	bc 01       	movw	r22, r24
     6d6:	c7 01       	movw	r24, r14
     6d8:	ba 01       	movw	r22, r20
     6da:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divmodhi4>
     6de:	16 2f       	mov	r17, r22
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6e2:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6e4:	cd 3b       	cpi	r28, 0xBD	; 189
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	d8 07       	cpc	r29, r24
     6ea:	0c f4       	brge	.+2      	; 0x6ee <estimate_distance+0x130>
     6ec:	ca c0       	rjmp	.+404    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     6f0:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     6f2:	f1 01       	movw	r30, r2
     6f4:	c0 80       	ld	r12, Z
     6f6:	d1 80       	ldd	r13, Z+1	; 0x01
     6f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     6fc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     700:	8c 15       	cp	r24, r12
     702:	9d 05       	cpc	r25, r13
     704:	88 f0       	brcs	.+34     	; 0x728 <estimate_distance+0x16a>
     706:	ec e4       	ldi	r30, 0x4C	; 76
     708:	f1 e0       	ldi	r31, 0x01	; 1
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     710:	e1 90       	ld	r14, Z+
     712:	f1 90       	ld	r15, Z+
     714:	ec 14       	cp	r14, r12
     716:	fd 04       	cpc	r15, r13
     718:	08 f4       	brcc	.+2      	; 0x71c <estimate_distance+0x15e>
     71a:	58 c0       	rjmp	.+176    	; 0x7cc <estimate_distance+0x20e>
     71c:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     71e:	8e 30       	cpi	r24, 0x0E	; 14
     720:	91 05       	cpc	r25, r1
     722:	a9 f7       	brne	.-22     	; 0x70e <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     724:	0a e5       	ldi	r16, 0x5A	; 90
     726:	01 c0       	rjmp	.+2      	; 0x72a <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     728:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     72a:	1f 3f       	cpi	r17, 0xFF	; 255
     72c:	09 f4       	brne	.+2      	; 0x730 <estimate_distance+0x172>
     72e:	4b c0       	rjmp	.+150    	; 0x7c6 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     730:	be 01       	movw	r22, r28
     732:	dd 0f       	add	r29, r29
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatsisf>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	61 2f       	mov	r22, r17
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     74c:	4b 01       	movw	r8, r22
     74e:	5c 01       	movw	r10, r24
     750:	a7 01       	movw	r20, r14
     752:	96 01       	movw	r18, r12
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	81 e6       	ldi	r24, 0x61	; 97
     75a:	94 e4       	ldi	r25, 0x44	; 68
     75c:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c5 01       	movw	r24, r10
     766:	b4 01       	movw	r22, r8
     768:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     76c:	4b 01       	movw	r8, r22
     76e:	5c 01       	movw	r10, r24
     770:	60 2f       	mov	r22, r16
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     77c:	2b 01       	movw	r4, r22
     77e:	3c 01       	movw	r6, r24
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	4f e2       	ldi	r20, 0x2F	; 47
     786:	54 e4       	ldi	r21, 0x44	; 68
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	c3 01       	movw	r24, r6
     796:	b2 01       	movw	r22, r4
     798:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c5 01       	movw	r24, r10
     7a2:	b4 01       	movw	r22, r8
     7a4:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	48 e4       	ldi	r20, 0x48	; 72
     7ae:	53 e4       	ldi	r21, 0x43	; 67
     7b0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__divsf3>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	44 e0       	ldi	r20, 0x04	; 4
     7ba:	52 e4       	ldi	r21, 0x42	; 66
     7bc:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     7c0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fixunssfsi>
     7c4:	60 c0       	rjmp	.+192    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
        } else {
            return 33 + dist_low;
     7c6:	61 e2       	ldi	r22, 0x21	; 33
     7c8:	60 0f       	add	r22, r16
     7ca:	5d c0       	rjmp	.+186    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	fc 01       	movw	r30, r24
     7d2:	e8 5b       	subi	r30, 0xB8	; 184
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	b7 01       	movw	r22, r14
     7dc:	68 1b       	sub	r22, r24
     7de:	79 0b       	sbc	r23, r25
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     7f0:	4b 01       	movw	r8, r22
     7f2:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     7f4:	b6 01       	movw	r22, r12
     7f6:	dd 0c       	add	r13, r13
     7f8:	88 0b       	sbc	r24, r24
     7fa:	99 0b       	sbc	r25, r25
     7fc:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatsisf>
     800:	2b 01       	movw	r4, r22
     802:	3c 01       	movw	r6, r24
     804:	b7 01       	movw	r22, r14
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     80e:	6b 01       	movw	r12, r22
     810:	7c 01       	movw	r14, r24
     812:	63 2d       	mov	r22, r3
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatunsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	0e 94 02 09 	call	0x1204	; 0x1204 <__addsf3>
     834:	a5 01       	movw	r20, r10
     836:	94 01       	movw	r18, r8
     838:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	c3 01       	movw	r24, r6
     84e:	b2 01       	movw	r22, r4
     850:	0e 94 01 09 	call	0x1202	; 0x1202 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e2       	ldi	r20, 0x20	; 32
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__mulsf3>
     860:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fixsfsi>
     864:	7b 01       	movw	r14, r22
     866:	c5 01       	movw	r24, r10
     868:	b4 01       	movw	r22, r8
     86a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fixsfsi>
     86e:	ab 01       	movw	r20, r22
     870:	bc 01       	movw	r22, r24
     872:	c7 01       	movw	r24, r14
     874:	ba 01       	movw	r22, r20
     876:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divmodhi4>
     87a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     87c:	6f 3f       	cpi	r22, 0xFF	; 255
     87e:	09 f0       	breq	.+2      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     880:	54 cf       	rjmp	.-344    	; 0x72a <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     882:	61 e2       	ldi	r22, 0x21	; 33
     884:	61 0f       	add	r22, r17
    }
}
     886:	86 2f       	mov	r24, r22
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	6f 90       	pop	r6
     8a4:	5f 90       	pop	r5
     8a6:	4f 90       	pop	r4
     8a8:	3f 90       	pop	r3
     8aa:	2f 90       	pop	r2
     8ac:	08 95       	ret

000008ae <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	ef 93       	push	r30
     8ce:	ff 93       	push	r31
    tx_clock += tx_increment;
     8d0:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     8d4:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     8d8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     8dc:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     8e0:	82 0f       	add	r24, r18
     8e2:	93 1f       	adc	r25, r19
     8e4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     8e8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     8f4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8fc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     900:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     904:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     908:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	a1 1d       	adc	r26, r1
     910:	b1 1d       	adc	r27, r1
     912:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     916:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     91a:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     91e:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     922:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     926:	81 11       	cpse	r24, r1
     928:	2d c0       	rjmp	.+90     	; 0x984 <__stack+0x85>
     92a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     92e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     932:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     936:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	10 f5       	brcc	.+68     	; 0x984 <__stack+0x85>
     940:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	f1 f4       	brne	.+60     	; 0x984 <__stack+0x85>
        message_t *msg = kilo_message_tx();
     948:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     94c:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     950:	09 95       	icall
        if (msg) {
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	b9 f0       	breq	.+46     	; 0x984 <__stack+0x85>
            if (message_send(msg)) {
     956:	0e 94 2a 08 	call	0x1054	; 0x1054 <message_send>
     95a:	88 23       	and	r24, r24
     95c:	51 f0       	breq	.+20     	; 0x972 <__stack+0x73>
                kilo_message_tx_success();
     95e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     962:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     966:	09 95       	icall
                tx_clock = 0;
     968:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     96c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     970:	09 c0       	rjmp	.+18     	; 0x984 <__stack+0x85>
            } else {
                tx_increment = rand()&0xFF;
     972:	0e 94 84 00 	call	0x108	; 0x108 <setup+0x12>
     976:	9c 01       	movw	r18, r24
     978:	33 27       	eor	r19, r19
     97a:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     97e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     982:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9a6:	80 ff       	sbrs	r24, 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <set_color+0x8>
        DDRD |= (1<<5);
     9aa:	55 9a       	sbi	0x0a, 5	; 10
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     9ae:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     9b0:	81 ff       	sbrs	r24, 1
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <set_color+0x12>
        DDRD |= (1<<4);
     9b4:	54 9a       	sbi	0x0a, 4	; 10
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9b8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9ba:	82 ff       	sbrs	r24, 2
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <set_color+0x1c>
        DDRC |= (1<<3);
     9be:	3b 9a       	sbi	0x07, 3	; 7
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9c2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9c4:	83 ff       	sbrs	r24, 3
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <set_color+0x26>
        DDRC |= (1<<2);
     9c8:	3a 9a       	sbi	0x07, 2	; 7
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9cc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9ce:	84 ff       	sbrs	r24, 4
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <set_color+0x30>
        DDRC |= (1<<5);
     9d2:	3d 9a       	sbi	0x07, 5	; 7
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9d6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9d8:	85 ff       	sbrs	r24, 5
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <set_color+0x3a>
        DDRC |= (1<<4);
     9dc:	3c 9a       	sbi	0x07, 4	; 7
     9de:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9e0:	3c 98       	cbi	0x07, 4	; 7
     9e2:	08 95       	ret

000009e4 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9e4:	8c 01       	movw	r16, r24
     9e6:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9e8:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9ea:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9f0:	98 e1       	ldi	r25, 0x18	; 24
     9f2:	c9 2e       	mov	r12, r25
     9f4:	29 e2       	ldi	r18, 0x29	; 41
     9f6:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9f8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	e7 30       	cpi	r30, 0x07	; 7
     a00:	f1 05       	cpc	r31, r1
     a02:	d0 f7       	brcc	.-12     	; 0x9f8 <kilo_start+0x14>
     a04:	ec 5c       	subi	r30, 0xCC	; 204
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__tablejump2__>
            case SLEEPING:
                cli();
     a0c:	f8 94       	cli
                acomp_off();
     a0e:	80 b7       	in	r24, 0x30	; 48
     a10:	87 7f       	andi	r24, 0xF7	; 247
     a12:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a1e:	14 b8       	out	0x04, r1	; 4
     a20:	17 b8       	out	0x07, r1	; 7
     a22:	1a b8       	out	0x0a, r1	; 10
     a24:	15 b8       	out	0x05, r1	; 5
     a26:	18 b8       	out	0x08, r1	; 8
     a28:	1b b8       	out	0x0b, r1	; 11
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	a8 95       	wdr
     a30:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a3a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a3e:	80 64       	ori	r24, 0x40	; 64
     a40:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a44:	83 b7       	in	r24, 0x33	; 51
     a46:	81 7f       	andi	r24, 0xF1	; 241
     a48:	84 60       	ori	r24, 0x04	; 4
     a4a:	83 bf       	out	0x33, r24	; 51
                cli();
     a4c:	f8 94       	cli
                sleep_enable();
     a4e:	83 b7       	in	r24, 0x33	; 51
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	83 bf       	out	0x33, r24	; 51
                sei();
     a54:	78 94       	sei
                sleep_cpu();
     a56:	88 95       	sleep
                sleep_disable();
     a58:	83 b7       	in	r24, 0x33	; 51
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
     a5c:	83 bf       	out	0x33, r24	; 51
                sei();
     a5e:	78 94       	sei
                rx_busy = 0;
     a60:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     a64:	52 9a       	sbi	0x0a, 2	; 10
     a66:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a68:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a6c:	80 68       	ori	r24, 0x80	; 128
     a6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a72:	87 e5       	ldi	r24, 0x57	; 87
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <kilo_start+0x92>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <kilo_start+0x98>
     a7c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a7e:	80 b7       	in	r24, 0x30	; 48
     a80:	88 61       	ori	r24, 0x18	; 24
     a82:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a84:	8f e3       	ldi	r24, 0x3F	; 63
     a86:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8a:	ef e1       	ldi	r30, 0x1F	; 31
     a8c:	fe e4       	ldi	r31, 0x4E	; 78
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <kilo_start+0xaa>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <kilo_start+0xb0>
     a94:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a96:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     a9a:	88 23       	and	r24, r24
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <kilo_start+0xbc>
     a9e:	50 c0       	rjmp	.+160    	; 0xb40 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     aa6:	ff ef       	ldi	r31, 0xFF	; 255
     aa8:	20 e7       	ldi	r18, 0x70	; 112
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	f1 50       	subi	r31, 0x01	; 1
     aae:	20 40       	sbci	r18, 0x00	; 0
     ab0:	80 40       	sbci	r24, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <kilo_start+0xc8>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <kilo_start+0xd2>
     ab6:	00 00       	nop
     ab8:	43 c0       	rjmp	.+134    	; 0xb40 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     ac0:	ef ec       	ldi	r30, 0xCF	; 207
     ac2:	f7 e0       	ldi	r31, 0x07	; 7
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <kilo_start+0xe0>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <kilo_start+0xe6>
     aca:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     ad2:	ff ef       	ldi	r31, 0xFF	; 255
     ad4:	21 ee       	ldi	r18, 0xE1	; 225
     ad6:	84 e0       	ldi	r24, 0x04	; 4
     ad8:	f1 50       	subi	r31, 0x01	; 1
     ada:	20 40       	sbci	r18, 0x00	; 0
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <kilo_start+0xf4>
     ae0:	2c c0       	rjmp	.+88     	; 0xb3a <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     ae2:	0e 94 c2 02 	call	0x584	; 0x584 <get_voltage>
                if(voltage > 682)
     ae6:	8b 3a       	cpi	r24, 0xAB	; 171
     ae8:	e2 e0       	ldi	r30, 0x02	; 2
     aea:	9e 07       	cpc	r25, r30
     aec:	24 f0       	brlt	.+8      	; 0xaf6 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     aee:	8c e0       	ldi	r24, 0x0C	; 12
     af0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     af4:	81 cf       	rjmp	.-254    	; 0x9f8 <kilo_start+0x14>
                else if(voltage > 648)
     af6:	89 38       	cpi	r24, 0x89	; 137
     af8:	f2 e0       	ldi	r31, 0x02	; 2
     afa:	9f 07       	cpc	r25, r31
     afc:	14 f0       	brlt	.+4      	; 0xb02 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     afe:	80 e3       	ldi	r24, 0x30	; 48
     b00:	f7 cf       	rjmp	.-18     	; 0xaf0 <kilo_start+0x10c>
                else if(voltage > 614)
     b02:	87 36       	cpi	r24, 0x67	; 103
     b04:	92 40       	sbci	r25, 0x02	; 2
     b06:	14 f0       	brlt	.+4      	; 0xb0c <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b08:	8f e0       	ldi	r24, 0x0F	; 15
     b0a:	f2 cf       	rjmp	.-28     	; 0xaf0 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	f0 cf       	rjmp	.-32     	; 0xaf0 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b10:	48 99       	sbic	0x09, 0	; 9
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     b1a:	8f ec       	ldi	r24, 0xCF	; 207
     b1c:	97 e0       	ldi	r25, 0x07	; 7
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <kilo_start+0x13a>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <kilo_start+0x140>
     b24:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	e1 ee       	ldi	r30, 0xE1	; 225
     b30:	f4 e0       	ldi	r31, 0x04	; 4
     b32:	91 50       	subi	r25, 0x01	; 1
     b34:	e0 40       	sbci	r30, 0x00	; 0
     b36:	f0 40       	sbci	r31, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <kilo_start+0x14e>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <kilo_start+0x158>
     b3c:	00 00       	nop
     b3e:	5c cf       	rjmp	.-328    	; 0x9f8 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	d6 cf       	rjmp	.-84     	; 0xaf0 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b44:	d1 11       	cpse	r29, r1
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <kilo_start+0x168>
                    setup();
     b48:	f8 01       	movw	r30, r16
     b4a:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b4c:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b50:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b52:	f7 01       	movw	r30, r14
     b54:	09 95       	icall
                break;
     b56:	50 cf       	rjmp	.-352    	; 0x9f8 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b58:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b5c:	81 11       	cpse	r24, r1
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b60:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b64:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b68:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b6c:	45 cf       	rjmp	.-374    	; 0x9f8 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b6e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b72:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b76:	98 17       	cp	r25, r24
     b78:	09 f4       	brne	.+2      	; 0xb7c <kilo_start+0x198>
     b7a:	3e cf       	rjmp	.-388    	; 0x9f8 <kilo_start+0x14>
                        prev_motion = cur_motion;
     b7c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b80:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b84:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	89 f4       	brne	.+34     	; 0xbae <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b8c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b90:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b94:	8f e2       	ldi	r24, 0x2F	; 47
     b96:	95 e7       	ldi	r25, 0x75	; 117
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <kilo_start+0x1b4>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <kilo_start+0x1ba>
     b9e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ba0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ba8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bac:	25 cf       	rjmp	.-438    	; 0x9f8 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bb6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	59 f4       	brne	.+22     	; 0xbd4 <kilo_start+0x1f0>
     bbe:	ef e2       	ldi	r30, 0x2F	; 47
     bc0:	f5 e7       	ldi	r31, 0x75	; 117
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <kilo_start+0x1de>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <kilo_start+0x1e4>
     bc8:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bca:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bd2:	10 c0       	rjmp	.+32     	; 0xbf4 <kilo_start+0x210>
     bd4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bd8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bdc:	8f e2       	ldi	r24, 0x2F	; 47
     bde:	95 e7       	ldi	r25, 0x75	; 117
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <kilo_start+0x1fc>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <kilo_start+0x202>
     be6:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     be8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     bec:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bf0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bf4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bf8:	ff ce       	rjmp	.-514    	; 0x9f8 <kilo_start+0x14>

00000bfa <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
    rx_timer_off();
     c08:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c0c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c10:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     c1a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     c1e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     c22:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c26:	93 ea       	ldi	r25, 0xA3	; 163
     c28:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c2c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c64:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c68:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c72:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     c76:	88 23       	and	r24, r24
     c78:	21 f1       	breq	.+72     	; 0xcc2 <__vector_23+0x84>
        rx_timer_on();
     c7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c82:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c86:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     c8a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     c8e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <__vector_23+0x5a>
     c96:	af c1       	rjmp	.+862    	; 0xff6 <__vector_23+0x3b8>
            adc_finish_conversion();
     c98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c9c:	86 fd       	sbrc	r24, 6
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     ca0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ca4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ca8:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     cac:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cb6:	93 ea       	ldi	r25, 0xA3	; 163
     cb8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cbc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cc0:	9a c1       	rjmp	.+820    	; 0xff6 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cc2:	c9 01       	movw	r24, r18
     cc4:	87 58       	subi	r24, 0x87	; 135
     cc6:	91 09       	sbc	r25, r1
     cc8:	84 37       	cpi	r24, 0x74	; 116
     cca:	99 40       	sbci	r25, 0x09	; 9
     ccc:	a0 f0       	brcs	.+40     	; 0xcf6 <__vector_23+0xb8>
            rx_timer_off();
     cce:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cd2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cd6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cda:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     cde:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     ce2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     ce6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cea:	83 ea       	ldi	r24, 0xA3	; 163
     cec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cf0:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cf4:	80 c1       	rjmp	.+768    	; 0xff6 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     cf6:	26 58       	subi	r18, 0x86	; 134
     cf8:	31 09       	sbc	r19, r1
     cfa:	a4 ef       	ldi	r26, 0xF4	; 244
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	0e 94 de 08 	call	0x11bc	; 0x11bc <__umulhisi3>
     d02:	8c 01       	movw	r16, r24
     d04:	22 27       	eor	r18, r18
     d06:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d08:	08 30       	cpi	r16, 0x08	; 8
     d0a:	60 f4       	brcc	.+24     	; 0xd24 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <__vector_23+0xd6>
     d12:	88 0f       	add	r24, r24
     d14:	0a 95       	dec	r16
     d16:	ea f7       	brpl	.-6      	; 0xd12 <__vector_23+0xd4>
     d18:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d1c:	89 2b       	or	r24, r25
     d1e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     d22:	69 c1       	rjmp	.+722    	; 0xff6 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d24:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     d28:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     d2c:	88 23       	and	r24, r24
     d2e:	41 f1       	breq	.+80     	; 0xd80 <__vector_23+0x142>
                    adc_finish_conversion();
     d30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d34:	86 fd       	sbrc	r24, 6
     d36:	fc cf       	rjmp	.-8      	; 0xd30 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d38:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d3c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d40:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     d44:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     d48:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d4c:	83 ea       	ldi	r24, 0xA3	; 163
     d4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d58:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d5c:	99 23       	and	r25, r25
     d5e:	59 f0       	breq	.+22     	; 0xd76 <__vector_23+0x138>
                        rx_timer_off();
     d60:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d64:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d68:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d6c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     d70:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     d74:	40 c1       	rjmp	.+640    	; 0xff6 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d76:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     d7a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     d7e:	3b c1       	rjmp	.+630    	; 0xff6 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d80:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     d84:	e8 2f       	mov	r30, r24
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e4 59       	subi	r30, 0x94	; 148
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     d90:	90 83       	st	Z, r25
                    rx_byteindex++;
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d98:	8c 30       	cpi	r24, 0x0C	; 12
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__vector_23+0x160>
     d9c:	2c c1       	rjmp	.+600    	; 0xff6 <__vector_23+0x3b8>
                        rx_timer_off();
     d9e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     da2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     da6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     daa:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     dae:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     db2:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     db6:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     dba:	8c e6       	ldi	r24, 0x6C	; 108
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 0e 08 	call	0x101c	; 0x101c <message_crc>
     dc2:	08 17       	cp	r16, r24
     dc4:	19 07       	cpc	r17, r25
     dc6:	09 f0       	breq	.+2      	; 0xdca <__vector_23+0x18c>
     dc8:	16 c1       	rjmp	.+556    	; 0xff6 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     dca:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     dce:	e7 fd       	sbrc	r30, 7
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     dd2:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     dd6:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     dda:	61 e4       	ldi	r22, 0x41	; 65
     ddc:	71 e0       	ldi	r23, 0x01	; 1
     dde:	8c e6       	ldi	r24, 0x6C	; 108
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	09 95       	icall
     de4:	08 c1       	rjmp	.+528    	; 0xff6 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     de6:	88 e7       	ldi	r24, 0x78	; 120
     de8:	8e 0f       	add	r24, r30
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	30 f0       	brcs	.+12     	; 0xdfa <__vector_23+0x1bc>
        motors_off();
     dee:	53 98       	cbi	0x0a, 3	; 10
     df0:	23 98       	cbi	0x04, 3	; 4
     df2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     df6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     dfa:	8e 2f       	mov	r24, r30
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	e0 58       	subi	r30, 0x80	; 128
     e02:	f1 09       	sbc	r31, r1
     e04:	eb 30       	cpi	r30, 0x0B	; 11
     e06:	f1 05       	cpc	r31, r1
     e08:	08 f0       	brcs	.+2      	; 0xe0c <__vector_23+0x1ce>
     e0a:	f5 c0       	rjmp	.+490    	; 0xff6 <__vector_23+0x3b8>
     e0c:	e5 5c       	subi	r30, 0xC5	; 197
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e14:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e18:	8d 7f       	andi	r24, 0xFD	; 253
     e1a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e1e:	16 bc       	out	0x26, r1	; 38
            bootload();
     e20:	e0 e0       	ldi	r30, 0x00	; 0
     e22:	f0 e7       	ldi	r31, 0x70	; 112
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e26:	e0 e0       	ldi	r30, 0x00	; 0
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e2c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e30:	e2 c0       	rjmp	.+452    	; 0xff6 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	b2 c0       	rjmp	.+356    	; 0xf9a <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e36:	85 e0       	ldi	r24, 0x05	; 5
     e38:	b0 c0       	rjmp	.+352    	; 0xf9a <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	ae c0       	rjmp	.+348    	; 0xf9a <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e3e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	09 f4       	brne	.+2      	; 0xe48 <__vector_23+0x20a>
     e46:	d7 c0       	rjmp	.+430    	; 0xff6 <__vector_23+0x3b8>
     e48:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	09 f4       	brne	.+2      	; 0xe52 <__vector_23+0x214>
     e50:	d2 c0       	rjmp	.+420    	; 0xff6 <__vector_23+0x3b8>
                motors_on();
     e52:	53 9a       	sbi	0x0a, 3	; 10
     e54:	23 9a       	sbi	0x04, 3	; 4
     e56:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e5a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	9c c0       	rjmp	.+312    	; 0xf9a <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e62:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	09 f4       	brne	.+2      	; 0xe6c <__vector_23+0x22e>
     e6a:	4b c0       	rjmp	.+150    	; 0xf02 <__vector_23+0x2c4>
     e6c:	80 f4       	brcc	.+32     	; 0xe8e <__vector_23+0x250>
     e6e:	88 23       	and	r24, r24
     e70:	a9 f0       	breq	.+42     	; 0xe9c <__vector_23+0x25e>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	09 f0       	breq	.+2      	; 0xe78 <__vector_23+0x23a>
     e76:	82 c0       	rjmp	.+260    	; 0xf7c <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e78:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     e7c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     e80:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     e84:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     e88:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     e8c:	77 c0       	rjmp	.+238    	; 0xf7c <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	09 f4       	brne	.+2      	; 0xe94 <__vector_23+0x256>
     e92:	49 c0       	rjmp	.+146    	; 0xf26 <__vector_23+0x2e8>
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	09 f4       	brne	.+2      	; 0xe9a <__vector_23+0x25c>
     e98:	58 c0       	rjmp	.+176    	; 0xf4a <__vector_23+0x30c>
     e9a:	70 c0       	rjmp	.+224    	; 0xf7c <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e9c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     ea0:	86 30       	cpi	r24, 0x06	; 6
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__vector_23+0x268>
     ea4:	6b c0       	rjmp	.+214    	; 0xf7c <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     ea6:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     eaa:	80 eb       	ldi	r24, 0xB0	; 176
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     eb2:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     eb6:	81 eb       	ldi	r24, 0xB1	; 177
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ebe:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     ec2:	85 e0       	ldi	r24, 0x05	; 5
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     eca:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     ece:	89 e0       	ldi	r24, 0x09	; 9
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ed6:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ee2:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
     ee6:	84 e1       	ldi	r24, 0x14	; 20
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_write_byte>
                        motors_off();
     eee:	53 98       	cbi	0x0a, 3	; 10
     ef0:	23 98       	cbi	0x04, 3	; 4
     ef2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ef6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f00:	3d c0       	rjmp	.+122    	; 0xf7c <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f02:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f06:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
     f0a:	91 30       	cpi	r25, 0x01	; 1
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__vector_23+0x2d8>
     f0e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
     f12:	89 17       	cp	r24, r25
     f14:	99 f1       	breq	.+102    	; 0xf7c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f16:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f20:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
     f24:	2b c0       	rjmp	.+86     	; 0xf7c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f26:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f2a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
     f2e:	92 30       	cpi	r25, 0x02	; 2
     f30:	21 f4       	brne	.+8      	; 0xf3a <__vector_23+0x2fc>
     f32:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
     f36:	89 17       	cp	r24, r25
     f38:	09 f1       	breq	.+66     	; 0xf7c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f3a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f44:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
     f48:	19 c0       	rjmp	.+50     	; 0xf7c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f4a:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f4e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
     f52:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
     f56:	23 30       	cpi	r18, 0x03	; 3
     f58:	41 f4       	brne	.+16     	; 0xf6a <__vector_23+0x32c>
     f5a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
     f5e:	82 13       	cpse	r24, r18
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <__vector_23+0x32c>
     f62:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
     f66:	92 17       	cp	r25, r18
     f68:	49 f0       	breq	.+18     	; 0xf7c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f6a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f6e:	23 e0       	ldi	r18, 0x03	; 3
     f70:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f74:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f78:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f7c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f80:	88 23       	and	r24, r24
     f82:	c9 f1       	breq	.+114    	; 0xff6 <__vector_23+0x3b8>
     f84:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f88:	86 30       	cpi	r24, 0x06	; 6
     f8a:	a9 f1       	breq	.+106    	; 0xff6 <__vector_23+0x3b8>
                motors_on();
     f8c:	53 9a       	sbi	0x0a, 3	; 10
     f8e:	23 9a       	sbi	0x04, 3	; 4
     f90:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f94:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f9e:	2b c0       	rjmp	.+86     	; 0xff6 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     fa0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     fa4:	86 30       	cpi	r24, 0x06	; 6
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <__vector_23+0x38a>
                motors_on();
     fa8:	53 9a       	sbi	0x0a, 3	; 10
     faa:	23 9a       	sbi	0x04, 3	; 4
     fac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fb0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fba:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     fbe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <__vector_23+0x398>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <__vector_23+0x394>
     fda:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
     fde:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
     fe2:	82 23       	and	r24, r18
     fe4:	93 23       	and	r25, r19
     fe6:	89 2b       	or	r24, r25
     fe8:	21 f0       	breq	.+8      	; 0xff2 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     ff2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    101c:	fc 01       	movw	r30, r24
    101e:	9c 01       	movw	r18, r24
    1020:	26 5f       	subi	r18, 0xF6	; 246
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1028:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    102a:	84 27       	eor	r24, r20
    102c:	08 2e       	mov	r0, r24
    102e:	82 95       	swap	r24
    1030:	80 7f       	andi	r24, 0xF0	; 240
    1032:	80 25       	eor	r24, r0
    1034:	09 2e       	mov	r0, r25
    1036:	98 2f       	mov	r25, r24
    1038:	82 95       	swap	r24
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	08 26       	eor	r0, r24
    103e:	86 95       	lsr	r24
    1040:	98 27       	eor	r25, r24
    1042:	89 27       	eor	r24, r25
    1044:	88 0f       	add	r24, r24
    1046:	88 0f       	add	r24, r24
    1048:	88 0f       	add	r24, r24
    104a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    104c:	e2 17       	cp	r30, r18
    104e:	f3 07       	cpc	r31, r19
    1050:	59 f7       	brne	.-42     	; 0x1028 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1052:	08 95       	ret

00001054 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1054:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1056:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1058:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    105a:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    105e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1060:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1062:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1064:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1068:	20 30       	cpi	r18, 0x00	; 0
    106a:	29 f0       	breq	.+10     	; 0x1076 <message_send+0x22>
    106c:	00 00       	nop
    106e:	25 b1       	in	r18, 0x05	; 5
    1070:	23 2b       	or	r18, r19
    1072:	25 b9       	out	0x05, r18	; 5
    1074:	04 c0       	rjmp	.+8      	; 0x107e <message_send+0x2a>
    1076:	00 00       	nop
    1078:	00 00       	nop
    107a:	00 00       	nop
    107c:	00 c0       	rjmp	.+0      	; 0x107e <message_send+0x2a>
    107e:	00 00       	nop
    1080:	00 00       	nop
    1082:	00 00       	nop
    1084:	30 95       	com	r19
    1086:	25 b1       	in	r18, 0x05	; 5
    1088:	23 23       	and	r18, r19
    108a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    108c:	2e ea       	ldi	r18, 0xAE	; 174
    108e:	2a 95       	dec	r18
    1090:	f1 f7       	brne	.-4      	; 0x108e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1092:	2b ee       	ldi	r18, 0xEB	; 235

00001094 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1094:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1096:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    109a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    109c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    10a0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10a2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10a4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10a6:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10a8:	0f be       	out	0x3f, r0	; 63
    return 0
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <nocollision>:
nocollision:
    nop
    10ae:	00 00       	nop
    dec tmpreg1
    10b0:	2a 95       	dec	r18
    brne checkcollision
    10b2:	81 f7       	brne	.-32     	; 0x1094 <checkcollision>

    ldi tmpreg1, 0x01
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10b6:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    10ba:	20 30       	cpi	r18, 0x00	; 0
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <nocollision+0x1a>
    10be:	00 00       	nop
    10c0:	25 b1       	in	r18, 0x05	; 5
    10c2:	23 2b       	or	r18, r19
    10c4:	25 b9       	out	0x05, r18	; 5
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <nocollision+0x22>
    10c8:	00 00       	nop
    10ca:	00 00       	nop
    10cc:	00 00       	nop
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <nocollision+0x22>
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	30 95       	com	r19
    10d8:	25 b1       	in	r18, 0x05	; 5
    10da:	23 23       	and	r18, r19
    10dc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10de:	00 00       	nop
    10e0:	24 e5       	ldi	r18, 0x54	; 84
    10e2:	2a 95       	dec	r18
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10e6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10e8:	8c e0       	ldi	r24, 0x0C	; 12

000010ea <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10ea:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    10ee:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    10f0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    10f2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    10f4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    10f6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    10fa:	50 e0       	ldi	r21, 0x00	; 0

000010fc <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    10fc:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    10fe:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1100:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1102:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1104:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    1108:	20 30       	cpi	r18, 0x00	; 0
    110a:	29 f0       	breq	.+10     	; 0x1116 <sendbit+0x1a>
    110c:	00 00       	nop
    110e:	25 b1       	in	r18, 0x05	; 5
    1110:	23 2b       	or	r18, r19
    1112:	25 b9       	out	0x05, r18	; 5
    1114:	04 c0       	rjmp	.+8      	; 0x111e <sendbit+0x22>
    1116:	00 00       	nop
    1118:	00 00       	nop
    111a:	00 00       	nop
    111c:	00 c0       	rjmp	.+0      	; 0x111e <sendbit+0x22>
    111e:	00 00       	nop
    1120:	00 00       	nop
    1122:	00 00       	nop
    1124:	30 95       	com	r19
    1126:	25 b1       	in	r18, 0x05	; 5
    1128:	23 23       	and	r18, r19
    112a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    112c:	00 00       	nop
    112e:	21 e5       	ldi	r18, 0x51	; 81
    1130:	2a 95       	dec	r18
    1132:	f1 f7       	brne	.-4      	; 0x1130 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1134:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1136:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1138:	9a 95       	dec	r25
    brne sendbit
    113a:	01 f7       	brne	.-64     	; 0x10fc <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    113c:	8a 95       	dec	r24
    brne sendbyte
    113e:	a9 f6       	brne	.-86     	; 0x10ea <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1140:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1142:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1144:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1146:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1148:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    114c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    114e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1150:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1152:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1154:	0f be       	out	0x3f, r0	; 63
    return 1
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret

0000115a <main>:
  }
}

int main() {
  kilo_init();
    115a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <kilo_init>
  kilo_message_tx = message_tx;
    115e:	81 e7       	ldi	r24, 0x71	; 113
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1166:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    116a:	84 e7       	ldi	r24, 0x74	; 116
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    1172:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
  kilo_start(setup, loop);
    1176:	63 eb       	ldi	r22, 0xB3	; 179
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	8b e7       	ldi	r24, 0x7B	; 123
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <kilo_start>
  return 0;
}
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	08 95       	ret

00001188 <__divmodhi4>:
    1188:	97 fb       	bst	r25, 7
    118a:	07 2e       	mov	r0, r23
    118c:	16 f4       	brtc	.+4      	; 0x1192 <__divmodhi4+0xa>
    118e:	00 94       	com	r0
    1190:	07 d0       	rcall	.+14     	; 0x11a0 <__divmodhi4_neg1>
    1192:	77 fd       	sbrc	r23, 7
    1194:	09 d0       	rcall	.+18     	; 0x11a8 <__divmodhi4_neg2>
    1196:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodhi4>
    119a:	07 fc       	sbrc	r0, 7
    119c:	05 d0       	rcall	.+10     	; 0x11a8 <__divmodhi4_neg2>
    119e:	3e f4       	brtc	.+14     	; 0x11ae <__divmodhi4_exit>

000011a0 <__divmodhi4_neg1>:
    11a0:	90 95       	com	r25
    11a2:	81 95       	neg	r24
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__divmodhi4_neg2>:
    11a8:	70 95       	com	r23
    11aa:	61 95       	neg	r22
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255

000011ae <__divmodhi4_exit>:
    11ae:	08 95       	ret

000011b0 <__tablejump2__>:
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	05 90       	lpm	r0, Z+
    11b6:	f4 91       	lpm	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	09 94       	ijmp

000011bc <__umulhisi3>:
    11bc:	a2 9f       	mul	r26, r18
    11be:	b0 01       	movw	r22, r0
    11c0:	b3 9f       	mul	r27, r19
    11c2:	c0 01       	movw	r24, r0
    11c4:	a3 9f       	mul	r26, r19
    11c6:	70 0d       	add	r23, r0
    11c8:	81 1d       	adc	r24, r1
    11ca:	11 24       	eor	r1, r1
    11cc:	91 1d       	adc	r25, r1
    11ce:	b2 9f       	mul	r27, r18
    11d0:	70 0d       	add	r23, r0
    11d2:	81 1d       	adc	r24, r1
    11d4:	11 24       	eor	r1, r1
    11d6:	91 1d       	adc	r25, r1
    11d8:	08 95       	ret

000011da <__udivmodhi4>:
    11da:	aa 1b       	sub	r26, r26
    11dc:	bb 1b       	sub	r27, r27
    11de:	51 e1       	ldi	r21, 0x11	; 17
    11e0:	07 c0       	rjmp	.+14     	; 0x11f0 <__udivmodhi4_ep>

000011e2 <__udivmodhi4_loop>:
    11e2:	aa 1f       	adc	r26, r26
    11e4:	bb 1f       	adc	r27, r27
    11e6:	a6 17       	cp	r26, r22
    11e8:	b7 07       	cpc	r27, r23
    11ea:	10 f0       	brcs	.+4      	; 0x11f0 <__udivmodhi4_ep>
    11ec:	a6 1b       	sub	r26, r22
    11ee:	b7 0b       	sbc	r27, r23

000011f0 <__udivmodhi4_ep>:
    11f0:	88 1f       	adc	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	5a 95       	dec	r21
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <__udivmodhi4_loop>
    11f8:	80 95       	com	r24
    11fa:	90 95       	com	r25
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	08 95       	ret

00001202 <__subsf3>:
    1202:	50 58       	subi	r21, 0x80	; 128

00001204 <__addsf3>:
    1204:	bb 27       	eor	r27, r27
    1206:	aa 27       	eor	r26, r26
    1208:	0e 94 19 09 	call	0x1232	; 0x1232 <__addsf3x>
    120c:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_round>
    1210:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_pscA>
    1214:	38 f0       	brcs	.+14     	; 0x1224 <__addsf3+0x20>
    1216:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_pscB>
    121a:	20 f0       	brcs	.+8      	; 0x1224 <__addsf3+0x20>
    121c:	39 f4       	brne	.+14     	; 0x122c <__addsf3+0x28>
    121e:	9f 3f       	cpi	r25, 0xFF	; 255
    1220:	19 f4       	brne	.+6      	; 0x1228 <__addsf3+0x24>
    1222:	26 f4       	brtc	.+8      	; 0x122c <__addsf3+0x28>
    1224:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_nan>
    1228:	0e f4       	brtc	.+2      	; 0x122c <__addsf3+0x28>
    122a:	e0 95       	com	r30
    122c:	e7 fb       	bst	r30, 7
    122e:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_inf>

00001232 <__addsf3x>:
    1232:	e9 2f       	mov	r30, r25
    1234:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fp_split3>
    1238:	58 f3       	brcs	.-42     	; 0x1210 <__addsf3+0xc>
    123a:	ba 17       	cp	r27, r26
    123c:	62 07       	cpc	r22, r18
    123e:	73 07       	cpc	r23, r19
    1240:	84 07       	cpc	r24, r20
    1242:	95 07       	cpc	r25, r21
    1244:	20 f0       	brcs	.+8      	; 0x124e <__addsf3x+0x1c>
    1246:	79 f4       	brne	.+30     	; 0x1266 <__addsf3x+0x34>
    1248:	a6 f5       	brtc	.+104    	; 0x12b2 <__addsf3x+0x80>
    124a:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_zero>
    124e:	0e f4       	brtc	.+2      	; 0x1252 <__addsf3x+0x20>
    1250:	e0 95       	com	r30
    1252:	0b 2e       	mov	r0, r27
    1254:	ba 2f       	mov	r27, r26
    1256:	a0 2d       	mov	r26, r0
    1258:	0b 01       	movw	r0, r22
    125a:	b9 01       	movw	r22, r18
    125c:	90 01       	movw	r18, r0
    125e:	0c 01       	movw	r0, r24
    1260:	ca 01       	movw	r24, r20
    1262:	a0 01       	movw	r20, r0
    1264:	11 24       	eor	r1, r1
    1266:	ff 27       	eor	r31, r31
    1268:	59 1b       	sub	r21, r25
    126a:	99 f0       	breq	.+38     	; 0x1292 <__addsf3x+0x60>
    126c:	59 3f       	cpi	r21, 0xF9	; 249
    126e:	50 f4       	brcc	.+20     	; 0x1284 <__addsf3x+0x52>
    1270:	50 3e       	cpi	r21, 0xE0	; 224
    1272:	68 f1       	brcs	.+90     	; 0x12ce <__addsf3x+0x9c>
    1274:	1a 16       	cp	r1, r26
    1276:	f0 40       	sbci	r31, 0x00	; 0
    1278:	a2 2f       	mov	r26, r18
    127a:	23 2f       	mov	r18, r19
    127c:	34 2f       	mov	r19, r20
    127e:	44 27       	eor	r20, r20
    1280:	58 5f       	subi	r21, 0xF8	; 248
    1282:	f3 cf       	rjmp	.-26     	; 0x126a <__addsf3x+0x38>
    1284:	46 95       	lsr	r20
    1286:	37 95       	ror	r19
    1288:	27 95       	ror	r18
    128a:	a7 95       	ror	r26
    128c:	f0 40       	sbci	r31, 0x00	; 0
    128e:	53 95       	inc	r21
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__addsf3x+0x52>
    1292:	7e f4       	brtc	.+30     	; 0x12b2 <__addsf3x+0x80>
    1294:	1f 16       	cp	r1, r31
    1296:	ba 0b       	sbc	r27, r26
    1298:	62 0b       	sbc	r22, r18
    129a:	73 0b       	sbc	r23, r19
    129c:	84 0b       	sbc	r24, r20
    129e:	ba f0       	brmi	.+46     	; 0x12ce <__addsf3x+0x9c>
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	a1 f0       	breq	.+40     	; 0x12cc <__addsf3x+0x9a>
    12a4:	ff 0f       	add	r31, r31
    12a6:	bb 1f       	adc	r27, r27
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	c2 f7       	brpl	.-16     	; 0x12a0 <__addsf3x+0x6e>
    12b0:	0e c0       	rjmp	.+28     	; 0x12ce <__addsf3x+0x9c>
    12b2:	ba 0f       	add	r27, r26
    12b4:	62 1f       	adc	r22, r18
    12b6:	73 1f       	adc	r23, r19
    12b8:	84 1f       	adc	r24, r20
    12ba:	48 f4       	brcc	.+18     	; 0x12ce <__addsf3x+0x9c>
    12bc:	87 95       	ror	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	b7 95       	ror	r27
    12c4:	f7 95       	ror	r31
    12c6:	9e 3f       	cpi	r25, 0xFE	; 254
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <__addsf3x+0x9a>
    12ca:	b0 cf       	rjmp	.-160    	; 0x122c <__addsf3+0x28>
    12cc:	93 95       	inc	r25
    12ce:	88 0f       	add	r24, r24
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <__addsf3x+0xa2>
    12d2:	99 27       	eor	r25, r25
    12d4:	ee 0f       	add	r30, r30
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	08 95       	ret

000012dc <__divsf3>:
    12dc:	0e 94 82 09 	call	0x1304	; 0x1304 <__divsf3x>
    12e0:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_round>
    12e4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_pscB>
    12e8:	58 f0       	brcs	.+22     	; 0x1300 <__divsf3+0x24>
    12ea:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_pscA>
    12ee:	40 f0       	brcs	.+16     	; 0x1300 <__divsf3+0x24>
    12f0:	29 f4       	brne	.+10     	; 0x12fc <__divsf3+0x20>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	29 f0       	breq	.+10     	; 0x1300 <__divsf3+0x24>
    12f6:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_inf>
    12fa:	51 11       	cpse	r21, r1
    12fc:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_szero>
    1300:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_nan>

00001304 <__divsf3x>:
    1304:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fp_split3>
    1308:	68 f3       	brcs	.-38     	; 0x12e4 <__divsf3+0x8>

0000130a <__divsf3_pse>:
    130a:	99 23       	and	r25, r25
    130c:	b1 f3       	breq	.-20     	; 0x12fa <__divsf3+0x1e>
    130e:	55 23       	and	r21, r21
    1310:	91 f3       	breq	.-28     	; 0x12f6 <__divsf3+0x1a>
    1312:	95 1b       	sub	r25, r21
    1314:	55 0b       	sbc	r21, r21
    1316:	bb 27       	eor	r27, r27
    1318:	aa 27       	eor	r26, r26
    131a:	62 17       	cp	r22, r18
    131c:	73 07       	cpc	r23, r19
    131e:	84 07       	cpc	r24, r20
    1320:	38 f0       	brcs	.+14     	; 0x1330 <__divsf3_pse+0x26>
    1322:	9f 5f       	subi	r25, 0xFF	; 255
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	22 0f       	add	r18, r18
    1328:	33 1f       	adc	r19, r19
    132a:	44 1f       	adc	r20, r20
    132c:	aa 1f       	adc	r26, r26
    132e:	a9 f3       	breq	.-22     	; 0x131a <__divsf3_pse+0x10>
    1330:	35 d0       	rcall	.+106    	; 0x139c <__divsf3_pse+0x92>
    1332:	0e 2e       	mov	r0, r30
    1334:	3a f0       	brmi	.+14     	; 0x1344 <__divsf3_pse+0x3a>
    1336:	e0 e8       	ldi	r30, 0x80	; 128
    1338:	32 d0       	rcall	.+100    	; 0x139e <__divsf3_pse+0x94>
    133a:	91 50       	subi	r25, 0x01	; 1
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	e6 95       	lsr	r30
    1340:	00 1c       	adc	r0, r0
    1342:	ca f7       	brpl	.-14     	; 0x1336 <__divsf3_pse+0x2c>
    1344:	2b d0       	rcall	.+86     	; 0x139c <__divsf3_pse+0x92>
    1346:	fe 2f       	mov	r31, r30
    1348:	29 d0       	rcall	.+82     	; 0x139c <__divsf3_pse+0x92>
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	bb 1f       	adc	r27, r27
    1352:	26 17       	cp	r18, r22
    1354:	37 07       	cpc	r19, r23
    1356:	48 07       	cpc	r20, r24
    1358:	ab 07       	cpc	r26, r27
    135a:	b0 e8       	ldi	r27, 0x80	; 128
    135c:	09 f0       	breq	.+2      	; 0x1360 <__divsf3_pse+0x56>
    135e:	bb 0b       	sbc	r27, r27
    1360:	80 2d       	mov	r24, r0
    1362:	bf 01       	movw	r22, r30
    1364:	ff 27       	eor	r31, r31
    1366:	93 58       	subi	r25, 0x83	; 131
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	3a f0       	brmi	.+14     	; 0x137a <__divsf3_pse+0x70>
    136c:	9e 3f       	cpi	r25, 0xFE	; 254
    136e:	51 05       	cpc	r21, r1
    1370:	78 f0       	brcs	.+30     	; 0x1390 <__divsf3_pse+0x86>
    1372:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_inf>
    1376:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_szero>
    137a:	5f 3f       	cpi	r21, 0xFF	; 255
    137c:	e4 f3       	brlt	.-8      	; 0x1376 <__divsf3_pse+0x6c>
    137e:	98 3e       	cpi	r25, 0xE8	; 232
    1380:	d4 f3       	brlt	.-12     	; 0x1376 <__divsf3_pse+0x6c>
    1382:	86 95       	lsr	r24
    1384:	77 95       	ror	r23
    1386:	67 95       	ror	r22
    1388:	b7 95       	ror	r27
    138a:	f7 95       	ror	r31
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	c9 f7       	brne	.-14     	; 0x1382 <__divsf3_pse+0x78>
    1390:	88 0f       	add	r24, r24
    1392:	91 1d       	adc	r25, r1
    1394:	96 95       	lsr	r25
    1396:	87 95       	ror	r24
    1398:	97 f9       	bld	r25, 7
    139a:	08 95       	ret
    139c:	e1 e0       	ldi	r30, 0x01	; 1
    139e:	66 0f       	add	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	bb 1f       	adc	r27, r27
    13a6:	62 17       	cp	r22, r18
    13a8:	73 07       	cpc	r23, r19
    13aa:	84 07       	cpc	r24, r20
    13ac:	ba 07       	cpc	r27, r26
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__divsf3_pse+0xae>
    13b0:	62 1b       	sub	r22, r18
    13b2:	73 0b       	sbc	r23, r19
    13b4:	84 0b       	sbc	r24, r20
    13b6:	ba 0b       	sbc	r27, r26
    13b8:	ee 1f       	adc	r30, r30
    13ba:	88 f7       	brcc	.-30     	; 0x139e <__divsf3_pse+0x94>
    13bc:	e0 95       	com	r30
    13be:	08 95       	ret

000013c0 <__fixsfsi>:
    13c0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fixunssfsi>
    13c4:	68 94       	set
    13c6:	b1 11       	cpse	r27, r1
    13c8:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_szero>
    13cc:	08 95       	ret

000013ce <__fixunssfsi>:
    13ce:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_splitA>
    13d2:	88 f0       	brcs	.+34     	; 0x13f6 <__fixunssfsi+0x28>
    13d4:	9f 57       	subi	r25, 0x7F	; 127
    13d6:	98 f0       	brcs	.+38     	; 0x13fe <__fixunssfsi+0x30>
    13d8:	b9 2f       	mov	r27, r25
    13da:	99 27       	eor	r25, r25
    13dc:	b7 51       	subi	r27, 0x17	; 23
    13de:	b0 f0       	brcs	.+44     	; 0x140c <__fixunssfsi+0x3e>
    13e0:	e1 f0       	breq	.+56     	; 0x141a <__fixunssfsi+0x4c>
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	1a f0       	brmi	.+6      	; 0x13f2 <__fixunssfsi+0x24>
    13ec:	ba 95       	dec	r27
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__fixunssfsi+0x14>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <__fixunssfsi+0x4c>
    13f2:	b1 30       	cpi	r27, 0x01	; 1
    13f4:	91 f0       	breq	.+36     	; 0x141a <__fixunssfsi+0x4c>
    13f6:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_zero>
    13fa:	b1 e0       	ldi	r27, 0x01	; 1
    13fc:	08 95       	ret
    13fe:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__fp_zero>
    1402:	67 2f       	mov	r22, r23
    1404:	78 2f       	mov	r23, r24
    1406:	88 27       	eor	r24, r24
    1408:	b8 5f       	subi	r27, 0xF8	; 248
    140a:	39 f0       	breq	.+14     	; 0x141a <__fixunssfsi+0x4c>
    140c:	b9 3f       	cpi	r27, 0xF9	; 249
    140e:	cc f3       	brlt	.-14     	; 0x1402 <__fixunssfsi+0x34>
    1410:	86 95       	lsr	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	b3 95       	inc	r27
    1418:	d9 f7       	brne	.-10     	; 0x1410 <__fixunssfsi+0x42>
    141a:	3e f4       	brtc	.+14     	; 0x142a <__fixunssfsi+0x5c>
    141c:	90 95       	com	r25
    141e:	80 95       	com	r24
    1420:	70 95       	com	r23
    1422:	61 95       	neg	r22
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	8f 4f       	sbci	r24, 0xFF	; 255
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	08 95       	ret

0000142c <__floatunsisf>:
    142c:	e8 94       	clt
    142e:	09 c0       	rjmp	.+18     	; 0x1442 <__floatsisf+0x12>

00001430 <__floatsisf>:
    1430:	97 fb       	bst	r25, 7
    1432:	3e f4       	brtc	.+14     	; 0x1442 <__floatsisf+0x12>
    1434:	90 95       	com	r25
    1436:	80 95       	com	r24
    1438:	70 95       	com	r23
    143a:	61 95       	neg	r22
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	99 23       	and	r25, r25
    1444:	a9 f0       	breq	.+42     	; 0x1470 <__floatsisf+0x40>
    1446:	f9 2f       	mov	r31, r25
    1448:	96 e9       	ldi	r25, 0x96	; 150
    144a:	bb 27       	eor	r27, r27
    144c:	93 95       	inc	r25
    144e:	f6 95       	lsr	r31
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	f1 11       	cpse	r31, r1
    145a:	f8 cf       	rjmp	.-16     	; 0x144c <__floatsisf+0x1c>
    145c:	fa f4       	brpl	.+62     	; 0x149c <__floatsisf+0x6c>
    145e:	bb 0f       	add	r27, r27
    1460:	11 f4       	brne	.+4      	; 0x1466 <__floatsisf+0x36>
    1462:	60 ff       	sbrs	r22, 0
    1464:	1b c0       	rjmp	.+54     	; 0x149c <__floatsisf+0x6c>
    1466:	6f 5f       	subi	r22, 0xFF	; 255
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	8f 4f       	sbci	r24, 0xFF	; 255
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	16 c0       	rjmp	.+44     	; 0x149c <__floatsisf+0x6c>
    1470:	88 23       	and	r24, r24
    1472:	11 f0       	breq	.+4      	; 0x1478 <__floatsisf+0x48>
    1474:	96 e9       	ldi	r25, 0x96	; 150
    1476:	11 c0       	rjmp	.+34     	; 0x149a <__floatsisf+0x6a>
    1478:	77 23       	and	r23, r23
    147a:	21 f0       	breq	.+8      	; 0x1484 <__floatsisf+0x54>
    147c:	9e e8       	ldi	r25, 0x8E	; 142
    147e:	87 2f       	mov	r24, r23
    1480:	76 2f       	mov	r23, r22
    1482:	05 c0       	rjmp	.+10     	; 0x148e <__floatsisf+0x5e>
    1484:	66 23       	and	r22, r22
    1486:	71 f0       	breq	.+28     	; 0x14a4 <__floatsisf+0x74>
    1488:	96 e8       	ldi	r25, 0x86	; 134
    148a:	86 2f       	mov	r24, r22
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	2a f0       	brmi	.+10     	; 0x149c <__floatsisf+0x6c>
    1492:	9a 95       	dec	r25
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	88 1f       	adc	r24, r24
    149a:	da f7       	brpl	.-10     	; 0x1492 <__floatsisf+0x62>
    149c:	88 0f       	add	r24, r24
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__fp_inf>:
    14a6:	97 f9       	bld	r25, 7
    14a8:	9f 67       	ori	r25, 0x7F	; 127
    14aa:	80 e8       	ldi	r24, 0x80	; 128
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	08 95       	ret

000014b2 <__fp_nan>:
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	80 ec       	ldi	r24, 0xC0	; 192
    14b6:	08 95       	ret

000014b8 <__fp_pscA>:
    14b8:	00 24       	eor	r0, r0
    14ba:	0a 94       	dec	r0
    14bc:	16 16       	cp	r1, r22
    14be:	17 06       	cpc	r1, r23
    14c0:	18 06       	cpc	r1, r24
    14c2:	09 06       	cpc	r0, r25
    14c4:	08 95       	ret

000014c6 <__fp_pscB>:
    14c6:	00 24       	eor	r0, r0
    14c8:	0a 94       	dec	r0
    14ca:	12 16       	cp	r1, r18
    14cc:	13 06       	cpc	r1, r19
    14ce:	14 06       	cpc	r1, r20
    14d0:	05 06       	cpc	r0, r21
    14d2:	08 95       	ret

000014d4 <__fp_round>:
    14d4:	09 2e       	mov	r0, r25
    14d6:	03 94       	inc	r0
    14d8:	00 0c       	add	r0, r0
    14da:	11 f4       	brne	.+4      	; 0x14e0 <__fp_round+0xc>
    14dc:	88 23       	and	r24, r24
    14de:	52 f0       	brmi	.+20     	; 0x14f4 <__fp_round+0x20>
    14e0:	bb 0f       	add	r27, r27
    14e2:	40 f4       	brcc	.+16     	; 0x14f4 <__fp_round+0x20>
    14e4:	bf 2b       	or	r27, r31
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__fp_round+0x18>
    14e8:	60 ff       	sbrs	r22, 0
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <__fp_round+0x20>
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	08 95       	ret

000014f6 <__fp_split3>:
    14f6:	57 fd       	sbrc	r21, 7
    14f8:	90 58       	subi	r25, 0x80	; 128
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	59 f0       	breq	.+22     	; 0x1516 <__fp_splitA+0x10>
    1500:	5f 3f       	cpi	r21, 0xFF	; 255
    1502:	71 f0       	breq	.+28     	; 0x1520 <__fp_splitA+0x1a>
    1504:	47 95       	ror	r20

00001506 <__fp_splitA>:
    1506:	88 0f       	add	r24, r24
    1508:	97 fb       	bst	r25, 7
    150a:	99 1f       	adc	r25, r25
    150c:	61 f0       	breq	.+24     	; 0x1526 <__fp_splitA+0x20>
    150e:	9f 3f       	cpi	r25, 0xFF	; 255
    1510:	79 f0       	breq	.+30     	; 0x1530 <__fp_splitA+0x2a>
    1512:	87 95       	ror	r24
    1514:	08 95       	ret
    1516:	12 16       	cp	r1, r18
    1518:	13 06       	cpc	r1, r19
    151a:	14 06       	cpc	r1, r20
    151c:	55 1f       	adc	r21, r21
    151e:	f2 cf       	rjmp	.-28     	; 0x1504 <__fp_split3+0xe>
    1520:	46 95       	lsr	r20
    1522:	f1 df       	rcall	.-30     	; 0x1506 <__fp_splitA>
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <__fp_splitA+0x30>
    1526:	16 16       	cp	r1, r22
    1528:	17 06       	cpc	r1, r23
    152a:	18 06       	cpc	r1, r24
    152c:	99 1f       	adc	r25, r25
    152e:	f1 cf       	rjmp	.-30     	; 0x1512 <__fp_splitA+0xc>
    1530:	86 95       	lsr	r24
    1532:	71 05       	cpc	r23, r1
    1534:	61 05       	cpc	r22, r1
    1536:	08 94       	sec
    1538:	08 95       	ret

0000153a <__fp_zero>:
    153a:	e8 94       	clt

0000153c <__fp_szero>:
    153c:	bb 27       	eor	r27, r27
    153e:	66 27       	eor	r22, r22
    1540:	77 27       	eor	r23, r23
    1542:	cb 01       	movw	r24, r22
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__mulsf3>:
    1548:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulsf3x>
    154c:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_round>
    1550:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_pscA>
    1554:	38 f0       	brcs	.+14     	; 0x1564 <__mulsf3+0x1c>
    1556:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_pscB>
    155a:	20 f0       	brcs	.+8      	; 0x1564 <__mulsf3+0x1c>
    155c:	95 23       	and	r25, r21
    155e:	11 f0       	breq	.+4      	; 0x1564 <__mulsf3+0x1c>
    1560:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_inf>
    1564:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_nan>
    1568:	11 24       	eor	r1, r1
    156a:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_szero>

0000156e <__mulsf3x>:
    156e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fp_split3>
    1572:	70 f3       	brcs	.-36     	; 0x1550 <__mulsf3+0x8>

00001574 <__mulsf3_pse>:
    1574:	95 9f       	mul	r25, r21
    1576:	c1 f3       	breq	.-16     	; 0x1568 <__mulsf3+0x20>
    1578:	95 0f       	add	r25, r21
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	55 1f       	adc	r21, r21
    157e:	62 9f       	mul	r22, r18
    1580:	f0 01       	movw	r30, r0
    1582:	72 9f       	mul	r23, r18
    1584:	bb 27       	eor	r27, r27
    1586:	f0 0d       	add	r31, r0
    1588:	b1 1d       	adc	r27, r1
    158a:	63 9f       	mul	r22, r19
    158c:	aa 27       	eor	r26, r26
    158e:	f0 0d       	add	r31, r0
    1590:	b1 1d       	adc	r27, r1
    1592:	aa 1f       	adc	r26, r26
    1594:	64 9f       	mul	r22, r20
    1596:	66 27       	eor	r22, r22
    1598:	b0 0d       	add	r27, r0
    159a:	a1 1d       	adc	r26, r1
    159c:	66 1f       	adc	r22, r22
    159e:	82 9f       	mul	r24, r18
    15a0:	22 27       	eor	r18, r18
    15a2:	b0 0d       	add	r27, r0
    15a4:	a1 1d       	adc	r26, r1
    15a6:	62 1f       	adc	r22, r18
    15a8:	73 9f       	mul	r23, r19
    15aa:	b0 0d       	add	r27, r0
    15ac:	a1 1d       	adc	r26, r1
    15ae:	62 1f       	adc	r22, r18
    15b0:	83 9f       	mul	r24, r19
    15b2:	a0 0d       	add	r26, r0
    15b4:	61 1d       	adc	r22, r1
    15b6:	22 1f       	adc	r18, r18
    15b8:	74 9f       	mul	r23, r20
    15ba:	33 27       	eor	r19, r19
    15bc:	a0 0d       	add	r26, r0
    15be:	61 1d       	adc	r22, r1
    15c0:	23 1f       	adc	r18, r19
    15c2:	84 9f       	mul	r24, r20
    15c4:	60 0d       	add	r22, r0
    15c6:	21 1d       	adc	r18, r1
    15c8:	82 2f       	mov	r24, r18
    15ca:	76 2f       	mov	r23, r22
    15cc:	6a 2f       	mov	r22, r26
    15ce:	11 24       	eor	r1, r1
    15d0:	9f 57       	subi	r25, 0x7F	; 127
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	9a f0       	brmi	.+38     	; 0x15fc <__mulsf3_pse+0x88>
    15d6:	f1 f0       	breq	.+60     	; 0x1614 <__mulsf3_pse+0xa0>
    15d8:	88 23       	and	r24, r24
    15da:	4a f0       	brmi	.+18     	; 0x15ee <__mulsf3_pse+0x7a>
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	bb 1f       	adc	r27, r27
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	a9 f7       	brne	.-22     	; 0x15d8 <__mulsf3_pse+0x64>
    15ee:	9e 3f       	cpi	r25, 0xFE	; 254
    15f0:	51 05       	cpc	r21, r1
    15f2:	80 f0       	brcs	.+32     	; 0x1614 <__mulsf3_pse+0xa0>
    15f4:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_inf>
    15f8:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__fp_szero>
    15fc:	5f 3f       	cpi	r21, 0xFF	; 255
    15fe:	e4 f3       	brlt	.-8      	; 0x15f8 <__mulsf3_pse+0x84>
    1600:	98 3e       	cpi	r25, 0xE8	; 232
    1602:	d4 f3       	brlt	.-12     	; 0x15f8 <__mulsf3_pse+0x84>
    1604:	86 95       	lsr	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	f7 95       	ror	r31
    160e:	e7 95       	ror	r30
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c1 f7       	brne	.-16     	; 0x1604 <__mulsf3_pse+0x90>
    1614:	fe 2b       	or	r31, r30
    1616:	88 0f       	add	r24, r24
    1618:	91 1d       	adc	r25, r1
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret

00001622 <eeprom_read_byte>:
    1622:	f9 99       	sbic	0x1f, 1	; 31
    1624:	fe cf       	rjmp	.-4      	; 0x1622 <eeprom_read_byte>
    1626:	92 bd       	out	0x22, r25	; 34
    1628:	81 bd       	out	0x21, r24	; 33
    162a:	f8 9a       	sbi	0x1f, 0	; 31
    162c:	99 27       	eor	r25, r25
    162e:	80 b5       	in	r24, 0x20	; 32
    1630:	08 95       	ret

00001632 <eeprom_write_byte>:
    1632:	26 2f       	mov	r18, r22

00001634 <eeprom_write_r18>:
    1634:	f9 99       	sbic	0x1f, 1	; 31
    1636:	fe cf       	rjmp	.-4      	; 0x1634 <eeprom_write_r18>
    1638:	1f ba       	out	0x1f, r1	; 31
    163a:	92 bd       	out	0x22, r25	; 34
    163c:	81 bd       	out	0x21, r24	; 33
    163e:	20 bd       	out	0x20, r18	; 32
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	fa 9a       	sbi	0x1f, 2	; 31
    1646:	f9 9a       	sbi	0x1f, 1	; 31
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	08 95       	ret

0000164e <_exit>:
    164e:	f8 94       	cli

00001650 <__stop_program>:
    1650:	ff cf       	rjmp	.-2      	; 0x1650 <__stop_program>
