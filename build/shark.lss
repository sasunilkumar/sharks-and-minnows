
build/shark.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	98 05       	cpc	r25, r8
      6a:	ef 05       	cpc	r30, r15
      6c:	03 06       	cpc	r0, r19
      6e:	34 06       	cpc	r3, r20
      70:	3b 06       	cpc	r3, r27
      72:	1a 06       	cpc	r1, r26
      74:	3e 06       	cpc	r3, r30
      76:	9c 07       	cpc	r25, r28
      78:	8d 08       	sbc	r8, r13
      7a:	8d 08       	sbc	r8, r13
      7c:	a5 07       	cpc	r26, r21
      7e:	a8 07       	cpc	r26, r24
      80:	ab 07       	cpc	r26, r27
      82:	ad 07       	cpc	r26, r29
      84:	af 07       	cpc	r26, r31
      86:	b1 07       	cpc	r27, r17
      88:	62 08       	sbc	r6, r2
      8a:	c3 07       	cpc	r28, r19

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 ef       	ldi	r30, 0xF8	; 248
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 38       	cpi	r26, 0x80	; 128
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
      da:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

// Functions continuously called to emit a message, like a beacon
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	86 e1       	ldi	r24, 0x16	; 22
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <message_sent+0x1>
      f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <message_sent>
      f4:	08 95       	ret

000000f6 <set_motion.part.0>:
// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
    set_motors(0,0);                      // Kilobot stands still
  } else if (new_motion == FORWARD) {
    spinup_motors();                      // Kilobot moves forward
      f6:	0e 94 98 02 	call	0x530	; 0x530 <spinup_motors>
    set_motors(kilo_straight_left, kilo_straight_right);
      fa:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
      fe:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_left>
     102:	0c 94 93 02 	jmp	0x526	; 0x526 <set_motors>

00000106 <sample_light>:
#define LEFT 2
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
    int16_t number_of_samples = 0;
    long sum = 0;
     112:	c1 2c       	mov	r12, r1
     114:	d1 2c       	mov	r13, r1
     116:	76 01       	movw	r14, r12
#define RIGHT 3

/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;
    while (number_of_samples < 300) {
        int16_t sample = get_ambientlight();    // obtain reading from light sensor
     11c:	0e 94 a1 02 	call	0x542	; 0x542 <get_ambientlight>
        if (sample != -1) {                     // -1 indicates bad sample, discard
     120:	8f 3f       	cpi	r24, 0xFF	; 255
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	92 07       	cpc	r25, r18
     126:	49 f0       	breq	.+18     	; 0x13a <sample_light+0x34>
            sum = sum + sample;
     128:	09 2e       	mov	r0, r25
     12a:	00 0c       	add	r0, r0
     12c:	aa 0b       	sbc	r26, r26
     12e:	bb 0b       	sbc	r27, r27
     130:	c8 0e       	add	r12, r24
     132:	d9 1e       	adc	r13, r25
     134:	ea 1e       	adc	r14, r26
     136:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     138:	21 96       	adiw	r28, 0x01	; 1
/* Function that averages out several hundred samples of light to
   determine the light level at a given point in time */
int16_t sample_light() {
    int16_t number_of_samples = 0;
    long sum = 0;
    while (number_of_samples < 300) {
     13a:	cc 32       	cpi	r28, 0x2C	; 44
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	d8 07       	cpc	r29, r24
     140:	6c f3       	brlt	.-38     	; 0x11c <sample_light+0x16>
        if (sample != -1) {                     // -1 indicates bad sample, discard
            sum = sum + sample;
            number_of_samples = number_of_samples + 1;
        }
    }
    return sum / number_of_samples;             // average readings over many samples
     142:	9e 01       	movw	r18, r28
     144:	dd 0f       	add	r29, r29
     146:	44 0b       	sbc	r20, r20
     148:	55 0b       	sbc	r21, r21
     14a:	c7 01       	movw	r24, r14
     14c:	b6 01       	movw	r22, r12
     14e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divmodsi4>
}
     152:	c9 01       	movw	r24, r18
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	df 90       	pop	r13
     15e:	cf 90       	pop	r12
     160:	08 95       	ret

00000162 <setup>:
}

/* Function runs once upon program initialization
   * takes measurement of light and sets message parameters
   * at beginning of program execution */
void setup() {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
  transmit_msg.type = NORMAL;
     166:	c6 e1       	ldi	r28, 0x16	; 22
     168:	d1 e0       	ldi	r29, 0x01	; 1
     16a:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	88 83       	st	Y, r24
  transmit_msg.crc = message_crc(&transmit_msg);
     170:	ce 01       	movw	r24, r28
     172:	0e 94 a0 08 	call	0x1140	; 0x1140 <message_crc>
     176:	9b 87       	std	Y+11, r25	; 0x0b
     178:	8a 87       	std	Y+10, r24	; 0x0a
  current_light = sample_light();
     17a:	0e 94 83 00 	call	0x106	; 0x106 <sample_light>
     17e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <set_motion>:

// Function representing FSM of possible motion directions
void set_motion(int new_motion){
  if (new_motion == STOP) {
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	11 f4       	brne	.+4      	; 0x194 <set_motion+0x8>
    set_motors(0,0);                      // Kilobot stands still
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <set_motion+0x2a>
  } else if (new_motion == FORWARD) {
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	91 05       	cpc	r25, r1
     198:	11 f4       	brne	.+4      	; 0x19e <set_motion+0x12>
     19a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <set_motion.part.0>
    spinup_motors();                      // Kilobot moves forward
    set_motors(kilo_straight_left, kilo_straight_right);
  } else if (new_motion == LEFT) {
     19e:	02 97       	sbiw	r24, 0x02	; 2
     1a0:	31 f4       	brne	.+12     	; 0x1ae <set_motion+0x22>
    spinup_motors();
     1a2:	0e 94 98 02 	call	0x530	; 0x530 <spinup_motors>
    set_motors(kilo_turn_left, 0);        // Kilobot turns left
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <set_motion+0x2c>
  } else {
    spinup_motors();
     1ae:	0e 94 98 02 	call	0x530	; 0x530 <spinup_motors>
    set_motors(0, kilo_turn_right);       // Kilobot turns right
     1b2:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0c 94 93 02 	jmp	0x526	; 0x526 <set_motors>

000001bc <random_walk>:
  }
}

// Function dictating random walk behavior
void random_walk(int die) {
      if (die == 0) {
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	19 f4       	brne	.+6      	; 0x1c6 <random_walk+0xa>
     1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <set_motion.part.0>
     1c4:	34 c0       	rjmp	.+104    	; 0x22e <random_walk+0x72>
          set_motion(FORWARD);
      } else if (die == 1) {
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	91 05       	cpc	r25, r1
     1ca:	19 f4       	brne	.+6      	; 0x1d2 <random_walk+0x16>
          set_motion(LEFT);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	05 c0       	rjmp	.+10     	; 0x1dc <random_walk+0x20>
      } else if (die == 2) {
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	91 05       	cpc	r25, r1
     1d6:	29 f4       	brne	.+10     	; 0x1e2 <random_walk+0x26>
          set_motion(RIGHT);
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
     1e0:	26 c0       	rjmp	.+76     	; 0x22e <random_walk+0x72>
      } else if (die == 3 || die == 4) {  // Initialization phase
     1e2:	9c 01       	movw	r18, r24
     1e4:	23 50       	subi	r18, 0x03	; 3
     1e6:	31 09       	sbc	r19, r1
     1e8:	22 30       	cpi	r18, 0x02	; 2
     1ea:	31 05       	cpc	r19, r1
     1ec:	c8 f4       	brcc	.+50     	; 0x220 <random_walk+0x64>
          if (die == 4) {
     1ee:	04 97       	sbiw	r24, 0x04	; 4
     1f0:	59 f4       	brne	.+22     	; 0x208 <random_walk+0x4c>
	    set_color(WHITE);
     1f2:	85 e1       	ldi	r24, 0x15	; 21
     1f4:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
	    set_motion(STOP);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
	    delay(1500);
     200:	8c ed       	ldi	r24, 0xDC	; 220
     202:	95 e0       	ldi	r25, 0x05	; 5
     204:	0e 94 88 02 	call	0x510	; 0x510 <delay>
          }
          set_color(GREEN);
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
          set_motion(STOP);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
	  delay(1500);
     216:	8c ed       	ldi	r24, 0xDC	; 220
     218:	95 e0       	ldi	r25, 0x05	; 5
     21a:	0e 94 88 02 	call	0x510	; 0x510 <delay>
     21e:	07 c0       	rjmp	.+14     	; 0x22e <random_walk+0x72>
      } else {				  // Error handling, shouldn't reach
          set_motion(STOP);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
	  set_color(OFF);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
      }
      delay(100);
     22e:	84 e6       	ldi	r24, 0x64	; 100
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0c 94 88 02 	jmp	0x510	; 0x510 <delay>

00000236 <shark>:

// Function dictating behavior of shark
int16_t shark() {
  if (message_sent == 1) {
     236:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <message_sent>
     23a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <message_sent+0x1>
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	01 f5       	brne	.+64     	; 0x282 <shark+0x4c>
      message_sent = 0;
     242:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <message_sent+0x1>
     246:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <message_sent>
      set_color(RED);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
      rand = rand_soft();
     250:	0e 94 38 03 	call	0x670	; 0x670 <rand_soft>
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rand+0x1>
     25a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rand>
      random_walk(die);
     25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     266:	0e 94 de 00 	call	0x1bc	; 0x1bc <random_walk>
      die = (rand % 3);
     26a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rand>
     26e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rand+0x1>
     272:	63 e0       	ldi	r22, 0x03	; 3
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 56 09 	call	0x12ac	; 0x12ac <__divmodhi4>
     27a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     27e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
  return sample_light();
     282:	0c 94 83 00 	jmp	0x106	; 0x106 <sample_light>

00000286 <random_delayed>:
}

int16_t random_delayed() {
  last_changed = kilo_ticks;
     286:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     28a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     28e:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     292:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     296:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <last_changed+0x1>
     29a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_changed>
  while (kilo_ticks < last_changed + 16) {
     29e:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <kilo_ticks>
     2a2:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <kilo_ticks+0x1>
     2a6:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <kilo_ticks+0x2>
     2aa:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <kilo_ticks+0x3>
     2ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_changed>
     2b2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <last_changed+0x1>
     2b6:	40 96       	adiw	r24, 0x10	; 16
     2b8:	09 2e       	mov	r0, r25
     2ba:	00 0c       	add	r0, r0
     2bc:	aa 0b       	sbc	r26, r26
     2be:	bb 0b       	sbc	r27, r27
     2c0:	48 17       	cp	r20, r24
     2c2:	59 07       	cpc	r21, r25
     2c4:	6a 07       	cpc	r22, r26
     2c6:	7b 07       	cpc	r23, r27
     2c8:	18 f4       	brcc	.+6      	; 0x2d0 <random_delayed+0x4a>
    shark();
     2ca:	0e 94 1b 01 	call	0x236	; 0x236 <shark>
     2ce:	e7 cf       	rjmp	.-50     	; 0x29e <random_delayed+0x18>
  }
  return sample_light();
     2d0:	0c 94 83 00 	jmp	0x106	; 0x106 <sample_light>

000002d4 <loop>:
}

void loop() {
  if (current_light < 1020 && current_light > 1000) {	// Continuously check if light level above threshold
     2d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     2d8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     2dc:	89 5e       	subi	r24, 0xE9	; 233
     2de:	93 40       	sbci	r25, 0x03	; 3
     2e0:	43 97       	sbiw	r24, 0x13	; 19
     2e2:	70 f4       	brcc	.+28     	; 0x300 <loop+0x2c>
    set_motion(STOP);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 c6 00 	call	0x18c	; 0x18c <set_motion>
    set_color(GREEN);
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
    delay(500);			// If below, block for 1/4 second
     2f2:	84 ef       	ldi	r24, 0xF4	; 244
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 88 02 	call	0x510	; 0x510 <delay>
    current_light = random_delayed();
     2fa:	0e 94 43 01 	call	0x286	; 0x286 <random_delayed>
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <loop+0x30>
  } else {
    current_light = shark();	// Take new light level reading
     300:	0e 94 1b 01 	call	0x236	; 0x236 <shark>
     304:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     308:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     30c:	08 95       	ret

0000030e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     30e:	08 95       	ret

00000310 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	08 95       	ret

00000316 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     316:	08 95       	ret

00000318 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
    cli();
     326:	f8 94       	cli

    ports_off();
     328:	14 b8       	out	0x04, r1	; 4
     32a:	17 b8       	out	0x07, r1	; 7
     32c:	1a b8       	out	0x0a, r1	; 10
     32e:	15 b8       	out	0x05, r1	; 5
     330:	18 b8       	out	0x08, r1	; 8
     332:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     334:	52 9a       	sbi	0x0a, 2	; 10
     336:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     338:	14 bc       	out	0x24, r1	; 36
     33a:	85 e0       	ldi	r24, 0x05	; 5
     33c:	85 bd       	out	0x25, r24	; 37
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	87 bd       	out	0x27, r24	; 39
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     348:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     34c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     350:	2f e8       	ldi	r18, 0x8F	; 143
     352:	3b e0       	ldi	r19, 0x0B	; 11
     354:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     358:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     35c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     360:	53 98       	cbi	0x0a, 3	; 10
     362:	23 98       	cbi	0x04, 3	; 4
     364:	91 ea       	ldi	r25, 0xA1	; 161
     366:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     36a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     36e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     372:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     376:	8b e0       	ldi	r24, 0x0B	; 11
     378:	80 bf       	out	0x30, r24	; 48
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     380:	86 e0       	ldi	r24, 0x06	; 6
     382:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     386:	83 e8       	ldi	r24, 0x83	; 131
     388:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     38c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     390:	80 64       	ori	r24, 0x40	; 64
     392:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     396:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39a:	86 fd       	sbrc	r24, 6
     39c:	fc cf       	rjmp	.-8      	; 0x396 <kilo_init+0x7e>
    adc_trigger_high_gain();
     39e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3a2:	83 ea       	ldi	r24, 0xA3	; 163
     3a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
    if (osccal != 0xFF)
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	11 f0       	breq	.+4      	; 0x3be <kilo_init+0xa6>
        OSCCAL = osccal;
     3ba:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     3be:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    rx_leadingbit = 1;
     3c2:	c1 e0       	ldi	r28, 0x01	; 1
     3c4:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     3c8:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <rx_leadingbyte>
    rx_byteindex = 0;
     3cc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
    rx_bytevalue = 0;
     3d0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3d4:	80 e9       	ldi	r24, 0x90	; 144
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     3dc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     3e0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <tx_mask>
     3e4:	88 73       	andi	r24, 0x38	; 56
     3e6:	11 f0       	breq	.+4      	; 0x3ec <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3e8:	c0 93 3f 01 	sts	0x013F, r28	; 0x80013f <tx_mask>
    tx_clock = 0;
     3ec:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     3f0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
    tx_increment = 255;
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     3fc:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    kilo_ticks = 0;
     400:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks>
     404:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x1>
     408:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x2>
     40c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x3>
    kilo_state = IDLE;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    kilo_tx_period = 3906;
     416:	82 e4       	ldi	r24, 0x42	; 66
     418:	9f e0       	ldi	r25, 0x0F	; 15
     41a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_tx_period+0x1>
     41e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     422:	80 eb       	ldi	r24, 0xB0	; 176
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     42a:	c8 2f       	mov	r28, r24
     42c:	81 eb       	ldi	r24, 0xB1	; 177
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     434:	2c 2f       	mov	r18, r28
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	38 2b       	or	r19, r24
     43a:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <kilo_uid+0x1>
     43e:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     442:	85 e0       	ldi	r24, 0x05	; 5
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     44a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     44e:	89 e0       	ldi	r24, 0x09	; 9
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     456:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     462:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     466:	84 e1       	ldi	r24, 0x14	; 20
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     46e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
     472:	0a e4       	ldi	r16, 0x4A	; 74
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	53 e2       	ldi	r21, 0x23	; 35
     478:	e5 2e       	mov	r14, r21
     47a:	51 e0       	ldi	r21, 0x01	; 1
     47c:	f5 2e       	mov	r15, r21
     47e:	c0 e2       	ldi	r28, 0x20	; 32
     480:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     482:	ce 01       	movw	r24, r28
     484:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     488:	d8 2e       	mov	r13, r24
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     492:	2d 2d       	mov	r18, r13
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	32 2f       	mov	r19, r18
     498:	22 27       	eor	r18, r18
     49a:	28 2b       	or	r18, r24
     49c:	f8 01       	movw	r30, r16
     49e:	21 93       	st	Z+, r18
     4a0:	31 93       	st	Z+, r19
     4a2:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4a4:	ce 01       	movw	r24, r28
     4a6:	c0 96       	adiw	r24, 0x30	; 48
     4a8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     4ac:	d8 2e       	mov	r13, r24
     4ae:	ce 01       	movw	r24, r28
     4b0:	c1 96       	adiw	r24, 0x31	; 49
     4b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <eeprom_read_byte>
     4b6:	2d 2d       	mov	r18, r13
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	32 2f       	mov	r19, r18
     4bc:	22 27       	eor	r18, r18
     4be:	28 2b       	or	r18, r24
     4c0:	f7 01       	movw	r30, r14
     4c2:	21 93       	st	Z+, r18
     4c4:	31 93       	st	Z+, r19
     4c6:	7f 01       	movw	r14, r30
     4c8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4ca:	cc 33       	cpi	r28, 0x3C	; 60
     4cc:	d1 05       	cpc	r29, r1
     4ce:	c9 f6       	brne	.-78     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4d0:	78 94       	sei
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	08 95       	ret

000004e2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8f 93       	push	r24
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	a8 95       	wdr
     4f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4f8:	88 61       	ori	r24, 0x18	; 24
     4fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     502:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     504:	8f 91       	pop	r24
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	41 f0       	breq	.+16     	; 0x524 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     514:	ef ec       	ldi	r30, 0xCF	; 207
     516:	f7 e0       	ldi	r31, 0x07	; 7
     518:	31 97       	sbiw	r30, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <delay+0x8>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <delay+0xe>
     51e:	00 00       	nop
        _delay_ms(1);
        ms--;
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f6 cf       	rjmp	.-20     	; 0x510 <delay>
    }
}
     524:	08 95       	ret

00000526 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     526:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     52a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     52e:	08 95       	ret

00000530 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     536:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     53a:	8f e0       	ldi	r24, 0x0F	; 15
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0c 94 88 02 	jmp	0x510	; 0x510 <delay>

00000542 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     542:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     546:	81 11       	cpse	r24, r1
     548:	1e c0       	rjmp	.+60     	; 0x586 <get_ambientlight+0x44>
        cli();
     54a:	f8 94       	cli
        adc_setup_conversion(7);
     54c:	87 e0       	ldi	r24, 0x07	; 7
     54e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     552:	83 e8       	ldi	r24, 0x83	; 131
     554:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     558:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     562:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     566:	86 fd       	sbrc	r24, 6
     568:	fc cf       	rjmp	.-8      	; 0x562 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     56a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     56e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     572:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     576:	23 ea       	ldi	r18, 0xA3	; 163
     578:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     582:	78 94       	sei
     584:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     58a:	08 95       	ret

0000058c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     58c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     590:	81 11       	cpse	r24, r1
     592:	1e c0       	rjmp	.+60     	; 0x5d0 <get_temperature+0x44>
        cli();
     594:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     596:	88 ec       	ldi	r24, 0xC8	; 200
     598:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     59c:	87 e8       	ldi	r24, 0x87	; 135
     59e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a6:	80 64       	ori	r24, 0x40	; 64
     5a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b0:	86 fd       	sbrc	r24, 6
     5b2:	fc cf       	rjmp	.-8      	; 0x5ac <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     5b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5bc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5c0:	23 ea       	ldi	r18, 0xA3	; 163
     5c2:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     5cc:	78 94       	sei
     5ce:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     5d4:	08 95       	ret

000005d6 <rand_hard>:

uint8_t rand_hard() {
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     5de:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     5e0:	e3 ea       	ldi	r30, 0xA3	; 163
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     5e4:	c6 e0       	ldi	r28, 0x06	; 6
     5e6:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     5e8:	a1 e0       	ldi	r26, 0x01	; 1
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     5ec:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     5ee:	f8 94       	cli
            adc_setup_conversion(6);
     5f0:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5f4:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     5f8:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fc:	40 64       	ori	r20, 0x40	; 64
     5fe:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     602:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     606:	46 fd       	sbrc	r20, 6
     608:	fc cf       	rjmp	.-8      	; 0x602 <rand_hard+0x2c>
            a = ADCW&0x1;
     60a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     60e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     612:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     614:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     618:	50 64       	ori	r21, 0x40	; 64
     61a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     61e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     622:	56 fd       	sbrc	r21, 6
     624:	fc cf       	rjmp	.-8      	; 0x61e <rand_hard+0x48>
            b = ADCW&0x1;
     626:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     62a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     62e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     632:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     636:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     63a:	78 94       	sei
            tries++;
     63c:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     63e:	61 70       	andi	r22, 0x01	; 1
     640:	46 17       	cp	r20, r22
     642:	51 f0       	breq	.+20     	; 0x658 <rand_hard+0x82>
        if (a)
     644:	44 23       	and	r20, r20
     646:	59 f0       	breq	.+22     	; 0x65e <rand_hard+0x88>
            num |= (1<<i);
     648:	ad 01       	movw	r20, r26
     64a:	02 2e       	mov	r0, r18
     64c:	01 c0       	rjmp	.+2      	; 0x650 <rand_hard+0x7a>
     64e:	44 0f       	add	r20, r20
     650:	0a 94       	dec	r0
     652:	ea f7       	brpl	.-6      	; 0x64e <rand_hard+0x78>
     654:	84 2b       	or	r24, r20
     656:	03 c0       	rjmp	.+6      	; 0x65e <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     658:	90 38       	cpi	r25, 0x80	; 128
     65a:	49 f6       	brne	.-110    	; 0x5ee <rand_hard+0x18>
     65c:	f3 cf       	rjmp	.-26     	; 0x644 <rand_hard+0x6e>
     65e:	2f 5f       	subi	r18, 0xFF	; 255
     660:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     662:	28 30       	cpi	r18, 0x08	; 8
     664:	31 05       	cpc	r19, r1
     666:	09 f0       	breq	.+2      	; 0x66a <rand_hard+0x94>
     668:	c1 cf       	rjmp	.-126    	; 0x5ec <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     670:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     674:	98 e0       	ldi	r25, 0x08	; 8
     676:	89 9f       	mul	r24, r25
     678:	90 01       	movw	r18, r0
     67a:	11 24       	eor	r1, r1
     67c:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     67e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <accumulator>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	89 0f       	add	r24, r25
     686:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accumulator>
     68a:	82 2f       	mov	r24, r18
     68c:	82 95       	swap	r24
     68e:	86 95       	lsr	r24
     690:	87 70       	andi	r24, 0x07	; 7
     692:	28 27       	eor	r18, r24
     694:	96 95       	lsr	r25
     696:	96 95       	lsr	r25
     698:	82 2f       	mov	r24, r18
     69a:	89 27       	eor	r24, r25
     69c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     6a0:	08 95       	ret

000006a2 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     6a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     6a6:	08 95       	ret

000006a8 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6a8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     6ac:	81 11       	cpse	r24, r1
     6ae:	16 c0       	rjmp	.+44     	; 0x6dc <get_voltage+0x34>
        cli();                                    // disable interrupts
     6b0:	f8 94       	cli
        adc_setup_conversion(6);
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6b8:	83 e8       	ldi	r24, 0x83	; 131
     6ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6c2:	80 64       	ori	r24, 0x40	; 64
     6c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     6c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6cc:	86 fd       	sbrc	r24, 6
     6ce:	fc cf       	rjmp	.-8      	; 0x6c8 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     6d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     6d8:	78 94       	sei
     6da:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     6e0:	08 95       	ret

000006e2 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     708:	fc 01       	movw	r30, r24
     70a:	c2 81       	ldd	r28, Z+2	; 0x02
     70c:	d3 81       	ldd	r29, Z+3	; 0x03
     70e:	c4 38       	cpi	r28, 0x84	; 132
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	df 07       	cpc	r29, r31
     714:	0c f0       	brlt	.+2      	; 0x718 <estimate_distance+0x36>
     716:	7e c0       	rjmp	.+252    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
        if (dist->high_gain > kilo_irhigh[0]) {
     718:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_irhigh>
     71c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <kilo_irhigh+0x1>
     720:	8c 17       	cp	r24, r28
     722:	9d 07       	cpc	r25, r29
     724:	08 f4       	brcc	.+2      	; 0x728 <estimate_distance+0x46>
     726:	6f c0       	rjmp	.+222    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     728:	e5 e2       	ldi	r30, 0x25	; 37
     72a:	f1 e0       	ldi	r31, 0x01	; 1
     72c:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     72e:	81 91       	ld	r24, Z+
     730:	91 91       	ld	r25, Z+
     732:	8c 17       	cp	r24, r28
     734:	9d 07       	cpc	r25, r29
     736:	20 f0       	brcs	.+8      	; 0x740 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     738:	1f 5f       	subi	r17, 0xFF	; 255
     73a:	1e 30       	cpi	r17, 0x0E	; 14
     73c:	c1 f7       	brne	.-16     	; 0x72e <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     73e:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     740:	81 2f       	mov	r24, r17
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ed 5d       	subi	r30, 0xDD	; 221
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	e0 80       	ld	r14, Z
     750:	f1 80       	ldd	r15, Z+1	; 0x01
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	fc 01       	movw	r30, r24
     758:	ef 5d       	subi	r30, 0xDF	; 223
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	b7 01       	movw	r22, r14
     762:	68 1b       	sub	r22, r24
     764:	79 0b       	sbc	r23, r25
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     77a:	be 01       	movw	r22, r28
     77c:	0d 2e       	mov	r0, r29
     77e:	00 0c       	add	r0, r0
     780:	88 0b       	sbc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__floatsisf>
     788:	2b 01       	movw	r4, r22
     78a:	3c 01       	movw	r6, r24
     78c:	b7 01       	movw	r22, r14
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
     79a:	61 2f       	mov	r22, r17
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	5f e3       	ldi	r21, 0x3F	; 63
     7ae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	a9 01       	movw	r20, r18
     7b8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c3 01       	movw	r24, r6
     7d6:	b2 01       	movw	r22, r4
     7d8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     7e8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fixsfsi>
     7ec:	7b 01       	movw	r14, r22
     7ee:	c5 01       	movw	r24, r10
     7f0:	b4 01       	movw	r22, r8
     7f2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fixsfsi>
     7f6:	ab 01       	movw	r20, r22
     7f8:	bc 01       	movw	r22, r24
     7fa:	c7 01       	movw	r24, r14
     7fc:	ba 01       	movw	r22, r20
     7fe:	0e 94 56 09 	call	0x12ac	; 0x12ac <__divmodhi4>
     802:	16 2f       	mov	r17, r22
     804:	01 c0       	rjmp	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     806:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     808:	cd 3b       	cpi	r28, 0xBD	; 189
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	d8 07       	cpc	r29, r24
     80e:	0c f4       	brge	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	ca c0       	rjmp	.+404    	; 0x9a6 <__stack+0xa7>
     812:	01 c0       	rjmp	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     814:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     816:	f1 01       	movw	r30, r2
     818:	c0 80       	ld	r12, Z
     81a:	d1 80       	ldd	r13, Z+1	; 0x01
     81c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <kilo_irlow>
     820:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <kilo_irlow+0x1>
     824:	8c 15       	cp	r24, r12
     826:	9d 05       	cpc	r25, r13
     828:	88 f0       	brcs	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     82a:	ec e4       	ldi	r30, 0x4C	; 76
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     834:	e1 90       	ld	r14, Z+
     836:	f1 90       	ld	r15, Z+
     838:	ec 14       	cp	r14, r12
     83a:	fd 04       	cpc	r15, r13
     83c:	08 f4       	brcc	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	58 c0       	rjmp	.+176    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     840:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     842:	8e 30       	cpi	r24, 0x0E	; 14
     844:	91 05       	cpc	r25, r1
     846:	a9 f7       	brne	.-22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     848:	0a e5       	ldi	r16, 0x5A	; 90
     84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     84c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     84e:	1f 3f       	cpi	r17, 0xFF	; 255
     850:	09 f4       	brne	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     852:	4b c0       	rjmp	.+150    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     854:	be 01       	movw	r22, r28
     856:	dd 0f       	add	r29, r29
     858:	88 0b       	sbc	r24, r24
     85a:	99 0b       	sbc	r25, r25
     85c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__floatsisf>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	61 2f       	mov	r22, r17
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     870:	4b 01       	movw	r8, r22
     872:	5c 01       	movw	r10, r24
     874:	a7 01       	movw	r20, r14
     876:	96 01       	movw	r18, r12
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	81 e6       	ldi	r24, 0x61	; 97
     87e:	94 e4       	ldi	r25, 0x44	; 68
     880:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c5 01       	movw	r24, r10
     88a:	b4 01       	movw	r22, r8
     88c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     890:	4b 01       	movw	r8, r22
     892:	5c 01       	movw	r10, r24
     894:	60 2f       	mov	r22, r16
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     8a0:	2b 01       	movw	r4, r22
     8a2:	3c 01       	movw	r6, r24
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	4f e2       	ldi	r20, 0x2F	; 47
     8aa:	54 e4       	ldi	r21, 0x44	; 68
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c3 01       	movw	r24, r6
     8ba:	b2 01       	movw	r22, r4
     8bc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 e4       	ldi	r20, 0x48	; 72
     8d2:	53 e4       	ldi	r21, 0x43	; 67
     8d4:	0e 94 41 0a 	call	0x1482	; 0x1482 <__divsf3>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	44 e0       	ldi	r20, 0x04	; 4
     8de:	52 e4       	ldi	r21, 0x42	; 66
     8e0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     8e4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fixunssfsi>
     8e8:	60 c0       	rjmp	.+192    	; 0x9aa <__stack+0xab>
        } else {
            return 33 + dist_low;
     8ea:	61 e2       	ldi	r22, 0x21	; 33
     8ec:	60 0f       	add	r22, r16
     8ee:	5d c0       	rjmp	.+186    	; 0x9aa <__stack+0xab>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	fc 01       	movw	r30, r24
     8f6:	e8 5b       	subi	r30, 0xB8	; 184
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	b7 01       	movw	r22, r14
     900:	68 1b       	sub	r22, r24
     902:	79 0b       	sbc	r23, r25
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     914:	4b 01       	movw	r8, r22
     916:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     918:	b6 01       	movw	r22, r12
     91a:	dd 0c       	add	r13, r13
     91c:	88 0b       	sbc	r24, r24
     91e:	99 0b       	sbc	r25, r25
     920:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__floatsisf>
     924:	2b 01       	movw	r4, r22
     926:	3c 01       	movw	r6, r24
     928:	b7 01       	movw	r22, r14
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     932:	6b 01       	movw	r12, r22
     934:	7c 01       	movw	r14, r24
     936:	63 2d       	mov	r22, r3
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__floatunsisf>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	5f e3       	ldi	r21, 0x3F	; 63
     94a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	a9 01       	movw	r20, r18
     954:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__addsf3>
     958:	a5 01       	movw	r20, r10
     95a:	94 01       	movw	r18, r8
     95c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     960:	9b 01       	movw	r18, r22
     962:	ac 01       	movw	r20, r24
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	c3 01       	movw	r24, r6
     972:	b2 01       	movw	r22, r4
     974:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e2       	ldi	r20, 0x20	; 32
     97e:	51 e4       	ldi	r21, 0x41	; 65
     980:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__mulsf3>
     984:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fixsfsi>
     988:	7b 01       	movw	r14, r22
     98a:	c5 01       	movw	r24, r10
     98c:	b4 01       	movw	r22, r8
     98e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fixsfsi>
     992:	ab 01       	movw	r20, r22
     994:	bc 01       	movw	r22, r24
     996:	c7 01       	movw	r24, r14
     998:	ba 01       	movw	r22, r20
     99a:	0e 94 56 09 	call	0x12ac	; 0x12ac <__divmodhi4>
     99e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     9a0:	6f 3f       	cpi	r22, 0xFF	; 255
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	54 cf       	rjmp	.-344    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     9a6:	61 e2       	ldi	r22, 0x21	; 33
     9a8:	61 0f       	add	r22, r17
    }
}
     9aa:	86 2f       	mov	r24, r22
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	7f 90       	pop	r7
     9c6:	6f 90       	pop	r6
     9c8:	5f 90       	pop	r5
     9ca:	4f 90       	pop	r4
     9cc:	3f 90       	pop	r3
     9ce:	2f 90       	pop	r2
     9d0:	08 95       	ret

000009d2 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
    tx_clock += tx_increment;
     9f4:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     9f8:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     9fc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_increment>
     a00:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tx_increment+0x1>
     a04:	82 0f       	add	r24, r18
     a06:	93 1f       	adc	r25, r19
     a08:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_clock+0x1>
     a0c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_clock>
    tx_increment = 0xFF;
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_increment+0x1>
     a18:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_increment>
    OCR0A = tx_increment;
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     a20:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <kilo_ticks>
     a24:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <kilo_ticks+0x1>
     a28:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <kilo_ticks+0x2>
     a2c:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <kilo_ticks+0x3>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	a1 1d       	adc	r26, r1
     a34:	b1 1d       	adc	r27, r1
     a36:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <kilo_ticks>
     a3a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <kilo_ticks+0x1>
     a3e:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <kilo_ticks+0x2>
     a42:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a46:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     a4a:	81 11       	cpse	r24, r1
     a4c:	2d c0       	rjmp	.+90     	; 0xaa8 <__vector_14+0xd6>
     a4e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_tx_period>
     a52:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_tx_period+0x1>
     a56:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <tx_clock>
     a5a:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <tx_clock+0x1>
     a5e:	82 17       	cp	r24, r18
     a60:	93 07       	cpc	r25, r19
     a62:	10 f5       	brcc	.+68     	; 0xaa8 <__vector_14+0xd6>
     a64:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	f1 f4       	brne	.+60     	; 0xaa8 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     a6c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     a70:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     a74:	09 95       	icall
        if (msg) {
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	b9 f0       	breq	.+46     	; 0xaa8 <__vector_14+0xd6>
            if (message_send(msg)) {
     a7a:	0e 94 bc 08 	call	0x1178	; 0x1178 <message_send>
     a7e:	88 23       	and	r24, r24
     a80:	51 f0       	breq	.+20     	; 0xa96 <__vector_14+0xc4>
                kilo_message_tx_success();
     a82:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     a86:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     a8a:	09 95       	icall
                tx_clock = 0;
     a8c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <tx_clock+0x1>
     a90:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock>
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a96:	0e 94 87 00 	call	0x10e	; 0x10e <sample_light+0x8>
     a9a:	9c 01       	movw	r18, r24
     a9c:	33 27       	eor	r19, r19
     a9e:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <tx_increment+0x1>
     aa2:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <tx_increment>
                OCR0A = tx_increment;
     aa6:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     aca:	80 ff       	sbrs	r24, 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <set_color+0x8>
        DDRD |= (1<<5);
     ace:	55 9a       	sbi	0x0a, 5	; 10
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     ad2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     ad4:	81 ff       	sbrs	r24, 1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <set_color+0x12>
        DDRD |= (1<<4);
     ad8:	54 9a       	sbi	0x0a, 4	; 10
     ada:	01 c0       	rjmp	.+2      	; 0xade <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     adc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     ade:	82 ff       	sbrs	r24, 2
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <set_color+0x1c>
        DDRC |= (1<<3);
     ae2:	3b 9a       	sbi	0x07, 3	; 7
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     ae6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     ae8:	83 ff       	sbrs	r24, 3
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <set_color+0x26>
        DDRC |= (1<<2);
     aec:	3a 9a       	sbi	0x07, 2	; 7
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     af0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     af2:	84 ff       	sbrs	r24, 4
     af4:	02 c0       	rjmp	.+4      	; 0xafa <set_color+0x30>
        DDRC |= (1<<5);
     af6:	3d 9a       	sbi	0x07, 5	; 7
     af8:	01 c0       	rjmp	.+2      	; 0xafc <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     afa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     afc:	85 ff       	sbrs	r24, 5
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <set_color+0x3a>
        DDRC |= (1<<4);
     b00:	3c 9a       	sbi	0x07, 4	; 7
     b02:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     b04:	3c 98       	cbi	0x07, 4	; 7
     b06:	08 95       	ret

00000b08 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     b08:	8c 01       	movw	r16, r24
     b0a:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b0e:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b14:	98 e1       	ldi	r25, 0x18	; 24
     b16:	c9 2e       	mov	r12, r25
     b18:	29 e2       	ldi	r18, 0x29	; 41
     b1a:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b1c:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <kilo_state>
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	e7 30       	cpi	r30, 0x07	; 7
     b24:	f1 05       	cpc	r31, r1
     b26:	d0 f7       	brcc	.-12     	; 0xb1c <kilo_start+0x14>
     b28:	ec 5c       	subi	r30, 0xCC	; 204
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__tablejump2__>
            case SLEEPING:
                cli();
     b30:	f8 94       	cli
                acomp_off();
     b32:	80 b7       	in	r24, 0x30	; 48
     b34:	87 7f       	andi	r24, 0xF7	; 247
     b36:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b38:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b3c:	8f 77       	andi	r24, 0x7F	; 127
     b3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     b42:	14 b8       	out	0x04, r1	; 4
     b44:	17 b8       	out	0x07, r1	; 7
     b46:	1a b8       	out	0x0a, r1	; 10
     b48:	15 b8       	out	0x05, r1	; 5
     b4a:	18 b8       	out	0x08, r1	; 8
     b4c:	1b b8       	out	0x0b, r1	; 11
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	a8 95       	wdr
     b54:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b62:	80 64       	ori	r24, 0x40	; 64
     b64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b68:	83 b7       	in	r24, 0x33	; 51
     b6a:	81 7f       	andi	r24, 0xF1	; 241
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	83 bf       	out	0x33, r24	; 51
                cli();
     b70:	f8 94       	cli
                sleep_enable();
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	83 bf       	out	0x33, r24	; 51
                sei();
     b78:	78 94       	sei
                sleep_cpu();
     b7a:	88 95       	sleep
                sleep_disable();
     b7c:	83 b7       	in	r24, 0x33	; 51
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	83 bf       	out	0x33, r24	; 51
                sei();
     b82:	78 94       	sei
                rx_busy = 0;
     b84:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
                ports_on();
     b88:	52 9a       	sbi	0x0a, 2	; 10
     b8a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b96:	87 e5       	ldi	r24, 0x57	; 87
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <kilo_start+0x92>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <kilo_start+0x98>
     ba0:	00 00       	nop
                _delay_us(300);
                acomp_on();
     ba2:	80 b7       	in	r24, 0x30	; 48
     ba4:	88 61       	ori	r24, 0x18	; 24
     ba6:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     ba8:	8f e3       	ldi	r24, 0x3F	; 63
     baa:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bae:	ef e1       	ldi	r30, 0x1F	; 31
     bb0:	fe e4       	ldi	r31, 0x4E	; 78
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <kilo_start+0xaa>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <kilo_start+0xb0>
     bb8:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     bba:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <rx_busy>
     bbe:	88 23       	and	r24, r24
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <kilo_start+0xbc>
     bc2:	50 c0       	rjmp	.+160    	; 0xc64 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     bca:	ff ef       	ldi	r31, 0xFF	; 255
     bcc:	20 e7       	ldi	r18, 0x70	; 112
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	20 40       	sbci	r18, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <kilo_start+0xc8>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <kilo_start+0xd2>
     bda:	00 00       	nop
     bdc:	43 c0       	rjmp	.+134    	; 0xc64 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     bde:	8c e0       	ldi	r24, 0x0C	; 12
     be0:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     be4:	ef ec       	ldi	r30, 0xCF	; 207
     be6:	f7 e0       	ldi	r31, 0x07	; 7
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <kilo_start+0xe0>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <kilo_start+0xe6>
     bee:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     bf6:	ff ef       	ldi	r31, 0xFF	; 255
     bf8:	21 ee       	ldi	r18, 0xE1	; 225
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	f1 50       	subi	r31, 0x01	; 1
     bfe:	20 40       	sbci	r18, 0x00	; 0
     c00:	80 40       	sbci	r24, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <kilo_start+0xf4>
     c04:	2c c0       	rjmp	.+88     	; 0xc5e <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     c06:	0e 94 54 03 	call	0x6a8	; 0x6a8 <get_voltage>
                if(voltage > 682)
     c0a:	8b 3a       	cpi	r24, 0xAB	; 171
     c0c:	e2 e0       	ldi	r30, 0x02	; 2
     c0e:	9e 07       	cpc	r25, r30
     c10:	24 f0       	brlt	.+8      	; 0xc1a <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     c18:	81 cf       	rjmp	.-254    	; 0xb1c <kilo_start+0x14>
                else if(voltage > 648)
     c1a:	89 38       	cpi	r24, 0x89	; 137
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	9f 07       	cpc	r25, r31
     c20:	14 f0       	brlt	.+4      	; 0xc26 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     c22:	80 e3       	ldi	r24, 0x30	; 48
     c24:	f7 cf       	rjmp	.-18     	; 0xc14 <kilo_start+0x10c>
                else if(voltage > 614)
     c26:	87 36       	cpi	r24, 0x67	; 103
     c28:	92 40       	sbci	r25, 0x02	; 2
     c2a:	14 f0       	brlt	.+4      	; 0xc30 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     c2c:	8f e0       	ldi	r24, 0x0F	; 15
     c2e:	f2 cf       	rjmp	.-28     	; 0xc14 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	f0 cf       	rjmp	.-32     	; 0xc14 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     c34:	48 99       	sbic	0x09, 0	; 9
     c36:	16 c0       	rjmp	.+44     	; 0xc64 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     c3e:	8f ec       	ldi	r24, 0xCF	; 207
     c40:	97 e0       	ldi	r25, 0x07	; 7
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <kilo_start+0x13a>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <kilo_start+0x140>
     c48:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
     c50:	9f ef       	ldi	r25, 0xFF	; 255
     c52:	e1 ee       	ldi	r30, 0xE1	; 225
     c54:	f4 e0       	ldi	r31, 0x04	; 4
     c56:	91 50       	subi	r25, 0x01	; 1
     c58:	e0 40       	sbci	r30, 0x00	; 0
     c5a:	f0 40       	sbci	r31, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <kilo_start+0x14e>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <kilo_start+0x158>
     c60:	00 00       	nop
     c62:	5c cf       	rjmp	.-328    	; 0xb1c <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	d6 cf       	rjmp	.-84     	; 0xc14 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     c68:	d1 11       	cpse	r29, r1
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <kilo_start+0x168>
                    setup();
     c6c:	f8 01       	movw	r30, r16
     c6e:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     c70:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <kilo_state>
     c74:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     c76:	f7 01       	movw	r30, r14
     c78:	09 95       	icall
                break;
     c7a:	50 cf       	rjmp	.-352    	; 0xb1c <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     c7c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     c80:	81 11       	cpse	r24, r1
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c84:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c88:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c8c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
     c90:	45 cf       	rjmp	.-374    	; 0xb1c <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c92:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     c96:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prev_motion>
     c9a:	98 17       	cp	r25, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <kilo_start+0x198>
     c9e:	3e cf       	rjmp	.-388    	; 0xb1c <kilo_start+0x14>
                        prev_motion = cur_motion;
     ca0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     ca4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ca8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	89 f4       	brne	.+34     	; 0xcd2 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cb0:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cb4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cb8:	8f e2       	ldi	r24, 0x2F	; 47
     cba:	95 e7       	ldi	r25, 0x75	; 117
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <kilo_start+0x1b4>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <kilo_start+0x1ba>
     cc2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cc4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cc8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ccc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cd0:	25 cf       	rjmp	.-438    	; 0xb1c <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cd2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cd6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cda:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	59 f4       	brne	.+22     	; 0xcf8 <kilo_start+0x1f0>
     ce2:	ef e2       	ldi	r30, 0x2F	; 47
     ce4:	f5 e7       	ldi	r31, 0x75	; 117
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <kilo_start+0x1de>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <kilo_start+0x1e4>
     cec:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     cee:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cf2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     cf6:	10 c0       	rjmp	.+32     	; 0xd18 <kilo_start+0x210>
     cf8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cfc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d00:	8f e2       	ldi	r24, 0x2F	; 47
     d02:	95 e7       	ldi	r25, 0x75	; 117
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <kilo_start+0x1fc>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <kilo_start+0x202>
     d0a:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d0c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_straight_right>
     d10:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d14:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d18:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d1c:	ff ce       	rjmp	.-514    	; 0xb1c <kilo_start+0x14>

00000d1e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
    rx_timer_off();
     d2c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d30:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d34:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_leadingbit>
    rx_leadingbyte = 1;
     d3e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
    rx_busy = 0;
     d42:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
    adc_trigger_high_gain();
     d46:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d4a:	93 ea       	ldi	r25, 0xA3	; 163
     d4c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d50:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d88:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d8c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	40 93 49 01 	sts	0x0149, r20	; 0x800149 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d96:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx_leadingbit>
     d9a:	88 23       	and	r24, r24
     d9c:	21 f1       	breq	.+72     	; 0xde6 <__vector_23+0x84>
        rx_timer_on();
     d9e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     da2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     da6:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     daa:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_bytevalue>
        rx_leadingbit = 0;
     dae:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_leadingbit>
        if (rx_leadingbyte) {
     db2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <__vector_23+0x5a>
     dba:	af c1       	rjmp	.+862    	; 0x111a <__vector_23+0x3b8>
            adc_finish_conversion();
     dbc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dc0:	86 fd       	sbrc	r24, 6
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     dc4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dc8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     dcc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x3>
     dd0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist+0x2>
            adc_trigger_low_gain();
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     dda:	93 ea       	ldi	r25, 0xA3	; 163
     ddc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     de0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     de4:	9a c1       	rjmp	.+820    	; 0x111a <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     de6:	c9 01       	movw	r24, r18
     de8:	87 58       	subi	r24, 0x87	; 135
     dea:	91 09       	sbc	r25, r1
     dec:	84 37       	cpi	r24, 0x74	; 116
     dee:	99 40       	sbci	r25, 0x09	; 9
     df0:	a0 f0       	brcs	.+40     	; 0xe1a <__vector_23+0xb8>
            rx_timer_off();
     df2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dfa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     dfe:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
            rx_leadingbyte = 1;
     e02:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
            rx_busy = 0;
     e06:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
            adc_trigger_high_gain();
     e0a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e0e:	83 ea       	ldi	r24, 0xA3	; 163
     e10:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e14:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e18:	80 c1       	rjmp	.+768    	; 0x111a <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     e1a:	26 58       	subi	r18, 0x86	; 134
     e1c:	31 09       	sbc	r19, r1
     e1e:	a4 ef       	ldi	r26, 0xF4	; 244
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	0e 94 8f 09 	call	0x131e	; 0x131e <__umulhisi3>
     e26:	8c 01       	movw	r16, r24
     e28:	22 27       	eor	r18, r18
     e2a:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     e2c:	08 30       	cpi	r16, 0x08	; 8
     e2e:	60 f4       	brcc	.+24     	; 0xe48 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <__vector_23+0xd6>
     e36:	88 0f       	add	r24, r24
     e38:	0a 95       	dec	r16
     e3a:	ea f7       	brpl	.-6      	; 0xe36 <__vector_23+0xd4>
     e3c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     e40:	89 2b       	or	r24, r25
     e42:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_bytevalue>
     e46:	69 c1       	rjmp	.+722    	; 0x111a <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e48:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <rx_leadingbit>
                if (rx_leadingbyte) {
     e4c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_leadingbyte>
     e50:	88 23       	and	r24, r24
     e52:	41 f1       	breq	.+80     	; 0xea4 <__vector_23+0x142>
                    adc_finish_conversion();
     e54:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e58:	86 fd       	sbrc	r24, 6
     e5a:	fc cf       	rjmp	.-8      	; 0xe54 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e5c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e60:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e64:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x1>
     e68:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist>
                    adc_trigger_high_gain();
     e6c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e70:	83 ea       	ldi	r24, 0xA3	; 163
     e72:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     e7c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     e80:	99 23       	and	r25, r25
     e82:	59 f0       	breq	.+22     	; 0xe9a <__vector_23+0x138>
                        rx_timer_off();
     e84:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e88:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e8c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e90:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     e94:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>
     e98:	40 c1       	rjmp	.+640    	; 0x111a <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e9a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rx_leadingbyte>
                        rx_byteindex = 0;
     e9e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_byteindex>
     ea2:	3b c1       	rjmp	.+630    	; 0x111a <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     ea4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_byteindex>
     ea8:	e8 2f       	mov	r30, r24
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	e4 59       	subi	r30, 0x94	; 148
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_bytevalue>
     eb4:	90 83       	st	Z, r25
                    rx_byteindex++;
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ebc:	8c 30       	cpi	r24, 0x0C	; 12
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__vector_23+0x160>
     ec0:	2c c1       	rjmp	.+600    	; 0x111a <__vector_23+0x3b8>
                        rx_timer_off();
     ec2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ec6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     eca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ece:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <rx_leadingbyte>
                        rx_busy = 0;
     ed2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     ed6:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <rx_msg+0xa>
     eda:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <rx_msg+0xb>
     ede:	8c e6       	ldi	r24, 0x6C	; 108
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 a0 08 	call	0x1140	; 0x1140 <message_crc>
     ee6:	08 17       	cp	r16, r24
     ee8:	19 07       	cpc	r17, r25
     eea:	09 f0       	breq	.+2      	; 0xeee <__vector_23+0x18c>
     eec:	16 c1       	rjmp	.+556    	; 0x111a <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     eee:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <rx_msg+0x9>
     ef2:	e7 fd       	sbrc	r30, 7
     ef4:	0a c0       	rjmp	.+20     	; 0xf0a <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     ef6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     efa:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     efe:	61 e4       	ldi	r22, 0x41	; 65
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	8c e6       	ldi	r24, 0x6C	; 108
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	09 95       	icall
     f08:	08 c1       	rjmp	.+528    	; 0x111a <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f0a:	88 e7       	ldi	r24, 0x78	; 120
     f0c:	8e 0f       	add	r24, r30
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	30 f0       	brcs	.+12     	; 0xf1e <__vector_23+0x1bc>
        motors_off();
     f12:	53 98       	cbi	0x0a, 3	; 10
     f14:	23 98       	cbi	0x04, 3	; 4
     f16:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f1a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     f1e:	8e 2f       	mov	r24, r30
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	fc 01       	movw	r30, r24
     f24:	e0 58       	subi	r30, 0x80	; 128
     f26:	f1 09       	sbc	r31, r1
     f28:	eb 30       	cpi	r30, 0x0B	; 11
     f2a:	f1 05       	cpc	r31, r1
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <__vector_23+0x1ce>
     f2e:	f5 c0       	rjmp	.+490    	; 0x111a <__vector_23+0x3b8>
     f30:	e5 5c       	subi	r30, 0xC5	; 197
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     f38:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f3c:	8d 7f       	andi	r24, 0xFD	; 253
     f3e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f42:	16 bc       	out	0x26, r1	; 38
            bootload();
     f44:	e0 e0       	ldi	r30, 0x00	; 0
     f46:	f0 e7       	ldi	r31, 0x70	; 112
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f50:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <kilo_state>
     f54:	e2 c0       	rjmp	.+452    	; 0x111a <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	b2 c0       	rjmp	.+356    	; 0x10be <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	b0 c0       	rjmp	.+352    	; 0x10be <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	ae c0       	rjmp	.+348    	; 0x10be <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f62:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	09 f4       	brne	.+2      	; 0xf6c <__vector_23+0x20a>
     f6a:	d7 c0       	rjmp	.+430    	; 0x111a <__vector_23+0x3b8>
     f6c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	09 f4       	brne	.+2      	; 0xf76 <__vector_23+0x214>
     f74:	d2 c0       	rjmp	.+420    	; 0x111a <__vector_23+0x3b8>
                motors_on();
     f76:	53 9a       	sbi	0x0a, 3	; 10
     f78:	23 9a       	sbi	0x04, 3	; 4
     f7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f7e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	9c c0       	rjmp	.+312    	; 0x10be <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f86:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	09 f4       	brne	.+2      	; 0xf90 <__vector_23+0x22e>
     f8e:	4b c0       	rjmp	.+150    	; 0x1026 <__vector_23+0x2c4>
     f90:	80 f4       	brcc	.+32     	; 0xfb2 <__vector_23+0x250>
     f92:	88 23       	and	r24, r24
     f94:	a9 f0       	breq	.+42     	; 0xfc0 <__vector_23+0x25e>
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <__vector_23+0x23a>
     f9a:	82 c0       	rjmp	.+260    	; 0x10a0 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f9c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x1>
     fa0:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <rx_msg+0x2>
     fa4:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_uid+0x1>
     fa8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_uid>
                    cur_motion = MOVE_STOP;
     fac:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
     fb0:	77 c0       	rjmp	.+238    	; 0x10a0 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <__vector_23+0x256>
     fb6:	49 c0       	rjmp	.+146    	; 0x104a <__vector_23+0x2e8>
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	09 f4       	brne	.+2      	; 0xfbe <__vector_23+0x25c>
     fbc:	58 c0       	rjmp	.+176    	; 0x106e <__vector_23+0x30c>
     fbe:	70 c0       	rjmp	.+224    	; 0x10a0 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     fc0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     fc4:	86 30       	cpi	r24, 0x06	; 6
     fc6:	09 f0       	breq	.+2      	; 0xfca <__vector_23+0x268>
     fc8:	6b c0       	rjmp	.+214    	; 0x10a0 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     fca:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid>
     fce:	80 eb       	ldi	r24, 0xB0	; 176
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     fd6:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_uid+0x1>
     fda:	81 eb       	ldi	r24, 0xB1	; 177
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     fe2:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_turn_left>
     fe6:	85 e0       	ldi	r24, 0x05	; 5
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     fee:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_turn_right>
     ff2:	89 e0       	ldi	r24, 0x09	; 9
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ffa:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_left>
     ffe:	8c e0       	ldi	r24, 0x0C	; 12
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1006:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_straight_right>
    100a:	84 e1       	ldi	r24, 0x14	; 20
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_write_byte>
                        motors_off();
    1012:	53 98       	cbi	0x0a, 3	; 10
    1014:	23 98       	cbi	0x04, 3	; 4
    1016:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    101a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    1024:	3d c0       	rjmp	.+122    	; 0x10a0 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1026:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
    102a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x3>
    102e:	91 30       	cpi	r25, 0x01	; 1
    1030:	21 f4       	brne	.+8      	; 0x103a <__vector_23+0x2d8>
    1032:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_turn_left>
    1036:	89 17       	cp	r24, r25
    1038:	99 f1       	breq	.+102    	; 0x10a0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    103a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_LEFT;
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1044:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_turn_left>
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    104a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
    104e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x4>
    1052:	92 30       	cpi	r25, 0x02	; 2
    1054:	21 f4       	brne	.+8      	; 0x105e <__vector_23+0x2fc>
    1056:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_turn_right>
    105a:	89 17       	cp	r24, r25
    105c:	09 f1       	breq	.+66     	; 0x10a0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    105e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1068:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_turn_right>
    106c:	19 c0       	rjmp	.+50     	; 0x10a0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    106e:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <cur_motion>
    1072:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x6>
    1076:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x5>
    107a:	23 30       	cpi	r18, 0x03	; 3
    107c:	41 f4       	brne	.+16     	; 0x108e <__vector_23+0x32c>
    107e:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_straight_right>
    1082:	82 13       	cpse	r24, r18
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__vector_23+0x32c>
    1086:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_left>
    108a:	92 17       	cp	r25, r18
    108c:	49 f0       	breq	.+18     	; 0x10a0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    108e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1092:	23 e0       	ldi	r18, 0x03	; 3
    1094:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1098:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    109c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10a0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg>
    10a4:	88 23       	and	r24, r24
    10a6:	c9 f1       	breq	.+114    	; 0x111a <__vector_23+0x3b8>
    10a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    10ac:	86 30       	cpi	r24, 0x06	; 6
    10ae:	a9 f1       	breq	.+106    	; 0x111a <__vector_23+0x3b8>
                motors_on();
    10b0:	53 9a       	sbi	0x0a, 3	; 10
    10b2:	23 9a       	sbi	0x04, 3	; 4
    10b4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10b8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    10bc:	86 e0       	ldi	r24, 0x06	; 6
    10be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    10c2:	2b c0       	rjmp	.+86     	; 0x111a <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10c4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    10c8:	86 30       	cpi	r24, 0x06	; 6
    10ca:	81 f0       	breq	.+32     	; 0x10ec <__vector_23+0x38a>
                motors_on();
    10cc:	53 9a       	sbi	0x0a, 3	; 10
    10ce:	23 9a       	sbi	0x04, 3	; 4
    10d0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10d4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 65 05 	call	0xaca	; 0xaca <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    10de:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
    10e2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                kilo_state = MOVING;
    10e6:	86 e0       	ldi	r24, 0x06	; 6
    10e8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <rx_msg>
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__vector_23+0x398>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <__vector_23+0x394>
    10fe:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_uid>
    1102:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <kilo_uid+0x1>
    1106:	82 23       	and	r24, r18
    1108:	93 23       	and	r25, r19
    110a:	89 2b       	or	r24, r25
    110c:	21 f0       	breq	.+8      	; 0x1116 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cur_motion>
    1114:	02 c0       	rjmp	.+4      	; 0x111a <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1116:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
                    }
                }
            }
        }
    }
}
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1140:	fc 01       	movw	r30, r24
    1142:	9c 01       	movw	r18, r24
    1144:	26 5f       	subi	r18, 0xF6	; 246
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    114c:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    114e:	84 27       	eor	r24, r20
    1150:	08 2e       	mov	r0, r24
    1152:	82 95       	swap	r24
    1154:	80 7f       	andi	r24, 0xF0	; 240
    1156:	80 25       	eor	r24, r0
    1158:	09 2e       	mov	r0, r25
    115a:	98 2f       	mov	r25, r24
    115c:	82 95       	swap	r24
    115e:	8f 70       	andi	r24, 0x0F	; 15
    1160:	08 26       	eor	r0, r24
    1162:	86 95       	lsr	r24
    1164:	98 27       	eor	r25, r24
    1166:	89 27       	eor	r24, r25
    1168:	88 0f       	add	r24, r24
    116a:	88 0f       	add	r24, r24
    116c:	88 0f       	add	r24, r24
    116e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1170:	e2 17       	cp	r30, r18
    1172:	f3 07       	cpc	r31, r19
    1174:	59 f7       	brne	.-42     	; 0x114c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1176:	08 95       	ret

00001178 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1178:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    117a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    117c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    117e:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tx_mask>
    or tmpreg1, ddrreg
    1182:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1184:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1186:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1188:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    118c:	20 30       	cpi	r18, 0x00	; 0
    118e:	29 f0       	breq	.+10     	; 0x119a <message_send+0x22>
    1190:	00 00       	nop
    1192:	25 b1       	in	r18, 0x05	; 5
    1194:	23 2b       	or	r18, r19
    1196:	25 b9       	out	0x05, r18	; 5
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <message_send+0x2a>
    119a:	00 00       	nop
    119c:	00 00       	nop
    119e:	00 00       	nop
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <message_send+0x2a>
    11a2:	00 00       	nop
    11a4:	00 00       	nop
    11a6:	00 00       	nop
    11a8:	30 95       	com	r19
    11aa:	25 b1       	in	r18, 0x05	; 5
    11ac:	23 23       	and	r18, r19
    11ae:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    11b0:	2e ea       	ldi	r18, 0xAE	; 174
    11b2:	2a 95       	dec	r18
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    11b6:	2b ee       	ldi	r18, 0xEB	; 235

000011b8 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    11b8:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    11ba:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11be:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11c0:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    11c4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11c6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11c8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11ca:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11cc:	0f be       	out	0x3f, r0	; 63
    return 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <nocollision>:
nocollision:
    nop
    11d2:	00 00       	nop
    dec tmpreg1
    11d4:	2a 95       	dec	r18
    brne checkcollision
    11d6:	81 f7       	brne	.-32     	; 0x11b8 <checkcollision>

    ldi tmpreg1, 0x01
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    11da:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    11de:	20 30       	cpi	r18, 0x00	; 0
    11e0:	29 f0       	breq	.+10     	; 0x11ec <nocollision+0x1a>
    11e2:	00 00       	nop
    11e4:	25 b1       	in	r18, 0x05	; 5
    11e6:	23 2b       	or	r18, r19
    11e8:	25 b9       	out	0x05, r18	; 5
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <nocollision+0x22>
    11ec:	00 00       	nop
    11ee:	00 00       	nop
    11f0:	00 00       	nop
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <nocollision+0x22>
    11f4:	00 00       	nop
    11f6:	00 00       	nop
    11f8:	00 00       	nop
    11fa:	30 95       	com	r19
    11fc:	25 b1       	in	r18, 0x05	; 5
    11fe:	23 23       	and	r18, r19
    1200:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1202:	00 00       	nop
    1204:	24 e5       	ldi	r18, 0x54	; 84
    1206:	2a 95       	dec	r18
    1208:	f1 f7       	brne	.-4      	; 0x1206 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    120a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    120c:	8c e0       	ldi	r24, 0x0C	; 12

0000120e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    120e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1210:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1212:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1214:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1216:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1218:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    121a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    121c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    121e:	50 e0       	ldi	r21, 0x00	; 0

00001220 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1220:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1222:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1224:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1226:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1228:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    122c:	20 30       	cpi	r18, 0x00	; 0
    122e:	29 f0       	breq	.+10     	; 0x123a <sendbit+0x1a>
    1230:	00 00       	nop
    1232:	25 b1       	in	r18, 0x05	; 5
    1234:	23 2b       	or	r18, r19
    1236:	25 b9       	out	0x05, r18	; 5
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <sendbit+0x22>
    123a:	00 00       	nop
    123c:	00 00       	nop
    123e:	00 00       	nop
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <sendbit+0x22>
    1242:	00 00       	nop
    1244:	00 00       	nop
    1246:	00 00       	nop
    1248:	30 95       	com	r19
    124a:	25 b1       	in	r18, 0x05	; 5
    124c:	23 23       	and	r18, r19
    124e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1250:	00 00       	nop
    1252:	21 e5       	ldi	r18, 0x51	; 81
    1254:	2a 95       	dec	r18
    1256:	f1 f7       	brne	.-4      	; 0x1254 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1258:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    125a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    125c:	9a 95       	dec	r25
    brne sendbit
    125e:	01 f7       	brne	.-64     	; 0x1220 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1260:	8a 95       	dec	r24
    brne sendbyte
    1262:	a9 f6       	brne	.-86     	; 0x120e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1264:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1266:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1268:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    126a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    126c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <tx_mask>
    com tmpreg2
    1270:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1272:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1274:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1276:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1278:	0f be       	out	0x3f, r0	; 63
    return 1
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	08 95       	ret

0000127e <main>:
  }
}

int main() {
  kilo_init();                          // Begin program execution
    127e:	0e 94 8c 01 	call	0x318	; 0x318 <kilo_init>
  kilo_message_tx = message_tx;         // Begin speaker loop
    1282:	81 e7       	ldi	r24, 0x71	; 113
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    128a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success; // Begin speaker validation loop
    128e:	84 e7       	ldi	r24, 0x74	; 116
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    1296:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);              // Begin motion
    129a:	6a e6       	ldi	r22, 0x6A	; 106
    129c:	71 e0       	ldi	r23, 0x01	; 1
    129e:	81 eb       	ldi	r24, 0xB1	; 177
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 84 05 	call	0xb08	; 0xb08 <kilo_start>
  return 0;
}
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	08 95       	ret

000012ac <__divmodhi4>:
    12ac:	97 fb       	bst	r25, 7
    12ae:	07 2e       	mov	r0, r23
    12b0:	16 f4       	brtc	.+4      	; 0x12b6 <__divmodhi4+0xa>
    12b2:	00 94       	com	r0
    12b4:	07 d0       	rcall	.+14     	; 0x12c4 <__divmodhi4_neg1>
    12b6:	77 fd       	sbrc	r23, 7
    12b8:	09 d0       	rcall	.+18     	; 0x12cc <__divmodhi4_neg2>
    12ba:	0e 94 9e 09 	call	0x133c	; 0x133c <__udivmodhi4>
    12be:	07 fc       	sbrc	r0, 7
    12c0:	05 d0       	rcall	.+10     	; 0x12cc <__divmodhi4_neg2>
    12c2:	3e f4       	brtc	.+14     	; 0x12d2 <__divmodhi4_exit>

000012c4 <__divmodhi4_neg1>:
    12c4:	90 95       	com	r25
    12c6:	81 95       	neg	r24
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	08 95       	ret

000012cc <__divmodhi4_neg2>:
    12cc:	70 95       	com	r23
    12ce:	61 95       	neg	r22
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255

000012d2 <__divmodhi4_exit>:
    12d2:	08 95       	ret

000012d4 <__divmodsi4>:
    12d4:	05 2e       	mov	r0, r21
    12d6:	97 fb       	bst	r25, 7
    12d8:	1e f4       	brtc	.+6      	; 0x12e0 <__divmodsi4+0xc>
    12da:	00 94       	com	r0
    12dc:	0e 94 81 09 	call	0x1302	; 0x1302 <__negsi2>
    12e0:	57 fd       	sbrc	r21, 7
    12e2:	07 d0       	rcall	.+14     	; 0x12f2 <__divmodsi4_neg2>
    12e4:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
    12e8:	07 fc       	sbrc	r0, 7
    12ea:	03 d0       	rcall	.+6      	; 0x12f2 <__divmodsi4_neg2>
    12ec:	4e f4       	brtc	.+18     	; 0x1300 <__divmodsi4_exit>
    12ee:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__negsi2>

000012f2 <__divmodsi4_neg2>:
    12f2:	50 95       	com	r21
    12f4:	40 95       	com	r20
    12f6:	30 95       	com	r19
    12f8:	21 95       	neg	r18
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	4f 4f       	sbci	r20, 0xFF	; 255
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001300 <__divmodsi4_exit>:
    1300:	08 95       	ret

00001302 <__negsi2>:
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	08 95       	ret

00001312 <__tablejump2__>:
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	05 90       	lpm	r0, Z+
    1318:	f4 91       	lpm	r31, Z
    131a:	e0 2d       	mov	r30, r0
    131c:	09 94       	ijmp

0000131e <__umulhisi3>:
    131e:	a2 9f       	mul	r26, r18
    1320:	b0 01       	movw	r22, r0
    1322:	b3 9f       	mul	r27, r19
    1324:	c0 01       	movw	r24, r0
    1326:	a3 9f       	mul	r26, r19
    1328:	70 0d       	add	r23, r0
    132a:	81 1d       	adc	r24, r1
    132c:	11 24       	eor	r1, r1
    132e:	91 1d       	adc	r25, r1
    1330:	b2 9f       	mul	r27, r18
    1332:	70 0d       	add	r23, r0
    1334:	81 1d       	adc	r24, r1
    1336:	11 24       	eor	r1, r1
    1338:	91 1d       	adc	r25, r1
    133a:	08 95       	ret

0000133c <__udivmodhi4>:
    133c:	aa 1b       	sub	r26, r26
    133e:	bb 1b       	sub	r27, r27
    1340:	51 e1       	ldi	r21, 0x11	; 17
    1342:	07 c0       	rjmp	.+14     	; 0x1352 <__udivmodhi4_ep>

00001344 <__udivmodhi4_loop>:
    1344:	aa 1f       	adc	r26, r26
    1346:	bb 1f       	adc	r27, r27
    1348:	a6 17       	cp	r26, r22
    134a:	b7 07       	cpc	r27, r23
    134c:	10 f0       	brcs	.+4      	; 0x1352 <__udivmodhi4_ep>
    134e:	a6 1b       	sub	r26, r22
    1350:	b7 0b       	sbc	r27, r23

00001352 <__udivmodhi4_ep>:
    1352:	88 1f       	adc	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	5a 95       	dec	r21
    1358:	a9 f7       	brne	.-22     	; 0x1344 <__udivmodhi4_loop>
    135a:	80 95       	com	r24
    135c:	90 95       	com	r25
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	08 95       	ret

00001364 <__udivmodsi4>:
    1364:	a1 e2       	ldi	r26, 0x21	; 33
    1366:	1a 2e       	mov	r1, r26
    1368:	aa 1b       	sub	r26, r26
    136a:	bb 1b       	sub	r27, r27
    136c:	fd 01       	movw	r30, r26
    136e:	0d c0       	rjmp	.+26     	; 0x138a <__udivmodsi4_ep>

00001370 <__udivmodsi4_loop>:
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	ee 1f       	adc	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	a2 17       	cp	r26, r18
    137a:	b3 07       	cpc	r27, r19
    137c:	e4 07       	cpc	r30, r20
    137e:	f5 07       	cpc	r31, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__udivmodsi4_ep>
    1382:	a2 1b       	sub	r26, r18
    1384:	b3 0b       	sbc	r27, r19
    1386:	e4 0b       	sbc	r30, r20
    1388:	f5 0b       	sbc	r31, r21

0000138a <__udivmodsi4_ep>:
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	1a 94       	dec	r1
    1394:	69 f7       	brne	.-38     	; 0x1370 <__udivmodsi4_loop>
    1396:	60 95       	com	r22
    1398:	70 95       	com	r23
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	bd 01       	movw	r22, r26
    13a4:	cf 01       	movw	r24, r30
    13a6:	08 95       	ret

000013a8 <__subsf3>:
    13a8:	50 58       	subi	r21, 0x80	; 128

000013aa <__addsf3>:
    13aa:	bb 27       	eor	r27, r27
    13ac:	aa 27       	eor	r26, r26
    13ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__addsf3x>
    13b2:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_round>
    13b6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscA>
    13ba:	38 f0       	brcs	.+14     	; 0x13ca <__addsf3+0x20>
    13bc:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_pscB>
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <__addsf3+0x20>
    13c2:	39 f4       	brne	.+14     	; 0x13d2 <__addsf3+0x28>
    13c4:	9f 3f       	cpi	r25, 0xFF	; 255
    13c6:	19 f4       	brne	.+6      	; 0x13ce <__addsf3+0x24>
    13c8:	26 f4       	brtc	.+8      	; 0x13d2 <__addsf3+0x28>
    13ca:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_nan>
    13ce:	0e f4       	brtc	.+2      	; 0x13d2 <__addsf3+0x28>
    13d0:	e0 95       	com	r30
    13d2:	e7 fb       	bst	r30, 7
    13d4:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>

000013d8 <__addsf3x>:
    13d8:	e9 2f       	mov	r30, r25
    13da:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_split3>
    13de:	58 f3       	brcs	.-42     	; 0x13b6 <__addsf3+0xc>
    13e0:	ba 17       	cp	r27, r26
    13e2:	62 07       	cpc	r22, r18
    13e4:	73 07       	cpc	r23, r19
    13e6:	84 07       	cpc	r24, r20
    13e8:	95 07       	cpc	r25, r21
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <__addsf3x+0x1c>
    13ec:	79 f4       	brne	.+30     	; 0x140c <__addsf3x+0x34>
    13ee:	a6 f5       	brtc	.+104    	; 0x1458 <__addsf3x+0x80>
    13f0:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_zero>
    13f4:	0e f4       	brtc	.+2      	; 0x13f8 <__addsf3x+0x20>
    13f6:	e0 95       	com	r30
    13f8:	0b 2e       	mov	r0, r27
    13fa:	ba 2f       	mov	r27, r26
    13fc:	a0 2d       	mov	r26, r0
    13fe:	0b 01       	movw	r0, r22
    1400:	b9 01       	movw	r22, r18
    1402:	90 01       	movw	r18, r0
    1404:	0c 01       	movw	r0, r24
    1406:	ca 01       	movw	r24, r20
    1408:	a0 01       	movw	r20, r0
    140a:	11 24       	eor	r1, r1
    140c:	ff 27       	eor	r31, r31
    140e:	59 1b       	sub	r21, r25
    1410:	99 f0       	breq	.+38     	; 0x1438 <__addsf3x+0x60>
    1412:	59 3f       	cpi	r21, 0xF9	; 249
    1414:	50 f4       	brcc	.+20     	; 0x142a <__addsf3x+0x52>
    1416:	50 3e       	cpi	r21, 0xE0	; 224
    1418:	68 f1       	brcs	.+90     	; 0x1474 <__addsf3x+0x9c>
    141a:	1a 16       	cp	r1, r26
    141c:	f0 40       	sbci	r31, 0x00	; 0
    141e:	a2 2f       	mov	r26, r18
    1420:	23 2f       	mov	r18, r19
    1422:	34 2f       	mov	r19, r20
    1424:	44 27       	eor	r20, r20
    1426:	58 5f       	subi	r21, 0xF8	; 248
    1428:	f3 cf       	rjmp	.-26     	; 0x1410 <__addsf3x+0x38>
    142a:	46 95       	lsr	r20
    142c:	37 95       	ror	r19
    142e:	27 95       	ror	r18
    1430:	a7 95       	ror	r26
    1432:	f0 40       	sbci	r31, 0x00	; 0
    1434:	53 95       	inc	r21
    1436:	c9 f7       	brne	.-14     	; 0x142a <__addsf3x+0x52>
    1438:	7e f4       	brtc	.+30     	; 0x1458 <__addsf3x+0x80>
    143a:	1f 16       	cp	r1, r31
    143c:	ba 0b       	sbc	r27, r26
    143e:	62 0b       	sbc	r22, r18
    1440:	73 0b       	sbc	r23, r19
    1442:	84 0b       	sbc	r24, r20
    1444:	ba f0       	brmi	.+46     	; 0x1474 <__addsf3x+0x9c>
    1446:	91 50       	subi	r25, 0x01	; 1
    1448:	a1 f0       	breq	.+40     	; 0x1472 <__addsf3x+0x9a>
    144a:	ff 0f       	add	r31, r31
    144c:	bb 1f       	adc	r27, r27
    144e:	66 1f       	adc	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	c2 f7       	brpl	.-16     	; 0x1446 <__addsf3x+0x6e>
    1456:	0e c0       	rjmp	.+28     	; 0x1474 <__addsf3x+0x9c>
    1458:	ba 0f       	add	r27, r26
    145a:	62 1f       	adc	r22, r18
    145c:	73 1f       	adc	r23, r19
    145e:	84 1f       	adc	r24, r20
    1460:	48 f4       	brcc	.+18     	; 0x1474 <__addsf3x+0x9c>
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b7 95       	ror	r27
    146a:	f7 95       	ror	r31
    146c:	9e 3f       	cpi	r25, 0xFE	; 254
    146e:	08 f0       	brcs	.+2      	; 0x1472 <__addsf3x+0x9a>
    1470:	b0 cf       	rjmp	.-160    	; 0x13d2 <__addsf3+0x28>
    1472:	93 95       	inc	r25
    1474:	88 0f       	add	r24, r24
    1476:	08 f0       	brcs	.+2      	; 0x147a <__addsf3x+0xa2>
    1478:	99 27       	eor	r25, r25
    147a:	ee 0f       	add	r30, r30
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	08 95       	ret

00001482 <__divsf3>:
    1482:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__divsf3x>
    1486:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_round>
    148a:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_pscB>
    148e:	58 f0       	brcs	.+22     	; 0x14a6 <__divsf3+0x24>
    1490:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscA>
    1494:	40 f0       	brcs	.+16     	; 0x14a6 <__divsf3+0x24>
    1496:	29 f4       	brne	.+10     	; 0x14a2 <__divsf3+0x20>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	29 f0       	breq	.+10     	; 0x14a6 <__divsf3+0x24>
    149c:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    14a0:	51 11       	cpse	r21, r1
    14a2:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_szero>
    14a6:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_nan>

000014aa <__divsf3x>:
    14aa:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_split3>
    14ae:	68 f3       	brcs	.-38     	; 0x148a <__divsf3+0x8>

000014b0 <__divsf3_pse>:
    14b0:	99 23       	and	r25, r25
    14b2:	b1 f3       	breq	.-20     	; 0x14a0 <__divsf3+0x1e>
    14b4:	55 23       	and	r21, r21
    14b6:	91 f3       	breq	.-28     	; 0x149c <__divsf3+0x1a>
    14b8:	95 1b       	sub	r25, r21
    14ba:	55 0b       	sbc	r21, r21
    14bc:	bb 27       	eor	r27, r27
    14be:	aa 27       	eor	r26, r26
    14c0:	62 17       	cp	r22, r18
    14c2:	73 07       	cpc	r23, r19
    14c4:	84 07       	cpc	r24, r20
    14c6:	38 f0       	brcs	.+14     	; 0x14d6 <__divsf3_pse+0x26>
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	44 1f       	adc	r20, r20
    14d2:	aa 1f       	adc	r26, r26
    14d4:	a9 f3       	breq	.-22     	; 0x14c0 <__divsf3_pse+0x10>
    14d6:	35 d0       	rcall	.+106    	; 0x1542 <__divsf3_pse+0x92>
    14d8:	0e 2e       	mov	r0, r30
    14da:	3a f0       	brmi	.+14     	; 0x14ea <__divsf3_pse+0x3a>
    14dc:	e0 e8       	ldi	r30, 0x80	; 128
    14de:	32 d0       	rcall	.+100    	; 0x1544 <__divsf3_pse+0x94>
    14e0:	91 50       	subi	r25, 0x01	; 1
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	e6 95       	lsr	r30
    14e6:	00 1c       	adc	r0, r0
    14e8:	ca f7       	brpl	.-14     	; 0x14dc <__divsf3_pse+0x2c>
    14ea:	2b d0       	rcall	.+86     	; 0x1542 <__divsf3_pse+0x92>
    14ec:	fe 2f       	mov	r31, r30
    14ee:	29 d0       	rcall	.+82     	; 0x1542 <__divsf3_pse+0x92>
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	bb 1f       	adc	r27, r27
    14f8:	26 17       	cp	r18, r22
    14fa:	37 07       	cpc	r19, r23
    14fc:	48 07       	cpc	r20, r24
    14fe:	ab 07       	cpc	r26, r27
    1500:	b0 e8       	ldi	r27, 0x80	; 128
    1502:	09 f0       	breq	.+2      	; 0x1506 <__divsf3_pse+0x56>
    1504:	bb 0b       	sbc	r27, r27
    1506:	80 2d       	mov	r24, r0
    1508:	bf 01       	movw	r22, r30
    150a:	ff 27       	eor	r31, r31
    150c:	93 58       	subi	r25, 0x83	; 131
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	3a f0       	brmi	.+14     	; 0x1520 <__divsf3_pse+0x70>
    1512:	9e 3f       	cpi	r25, 0xFE	; 254
    1514:	51 05       	cpc	r21, r1
    1516:	78 f0       	brcs	.+30     	; 0x1536 <__divsf3_pse+0x86>
    1518:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    151c:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_szero>
    1520:	5f 3f       	cpi	r21, 0xFF	; 255
    1522:	e4 f3       	brlt	.-8      	; 0x151c <__divsf3_pse+0x6c>
    1524:	98 3e       	cpi	r25, 0xE8	; 232
    1526:	d4 f3       	brlt	.-12     	; 0x151c <__divsf3_pse+0x6c>
    1528:	86 95       	lsr	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b7 95       	ror	r27
    1530:	f7 95       	ror	r31
    1532:	9f 5f       	subi	r25, 0xFF	; 255
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__divsf3_pse+0x78>
    1536:	88 0f       	add	r24, r24
    1538:	91 1d       	adc	r25, r1
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret
    1542:	e1 e0       	ldi	r30, 0x01	; 1
    1544:	66 0f       	add	r22, r22
    1546:	77 1f       	adc	r23, r23
    1548:	88 1f       	adc	r24, r24
    154a:	bb 1f       	adc	r27, r27
    154c:	62 17       	cp	r22, r18
    154e:	73 07       	cpc	r23, r19
    1550:	84 07       	cpc	r24, r20
    1552:	ba 07       	cpc	r27, r26
    1554:	20 f0       	brcs	.+8      	; 0x155e <__divsf3_pse+0xae>
    1556:	62 1b       	sub	r22, r18
    1558:	73 0b       	sbc	r23, r19
    155a:	84 0b       	sbc	r24, r20
    155c:	ba 0b       	sbc	r27, r26
    155e:	ee 1f       	adc	r30, r30
    1560:	88 f7       	brcc	.-30     	; 0x1544 <__divsf3_pse+0x94>
    1562:	e0 95       	com	r30
    1564:	08 95       	ret

00001566 <__fixsfsi>:
    1566:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fixunssfsi>
    156a:	68 94       	set
    156c:	b1 11       	cpse	r27, r1
    156e:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_szero>
    1572:	08 95       	ret

00001574 <__fixunssfsi>:
    1574:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__fp_splitA>
    1578:	88 f0       	brcs	.+34     	; 0x159c <__fixunssfsi+0x28>
    157a:	9f 57       	subi	r25, 0x7F	; 127
    157c:	98 f0       	brcs	.+38     	; 0x15a4 <__fixunssfsi+0x30>
    157e:	b9 2f       	mov	r27, r25
    1580:	99 27       	eor	r25, r25
    1582:	b7 51       	subi	r27, 0x17	; 23
    1584:	b0 f0       	brcs	.+44     	; 0x15b2 <__fixunssfsi+0x3e>
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <__fixunssfsi+0x4c>
    1588:	66 0f       	add	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	1a f0       	brmi	.+6      	; 0x1598 <__fixunssfsi+0x24>
    1592:	ba 95       	dec	r27
    1594:	c9 f7       	brne	.-14     	; 0x1588 <__fixunssfsi+0x14>
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <__fixunssfsi+0x4c>
    1598:	b1 30       	cpi	r27, 0x01	; 1
    159a:	91 f0       	breq	.+36     	; 0x15c0 <__fixunssfsi+0x4c>
    159c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fp_zero>
    15a0:	b1 e0       	ldi	r27, 0x01	; 1
    15a2:	08 95       	ret
    15a4:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_zero>
    15a8:	67 2f       	mov	r22, r23
    15aa:	78 2f       	mov	r23, r24
    15ac:	88 27       	eor	r24, r24
    15ae:	b8 5f       	subi	r27, 0xF8	; 248
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <__fixunssfsi+0x4c>
    15b2:	b9 3f       	cpi	r27, 0xF9	; 249
    15b4:	cc f3       	brlt	.-14     	; 0x15a8 <__fixunssfsi+0x34>
    15b6:	86 95       	lsr	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	b3 95       	inc	r27
    15be:	d9 f7       	brne	.-10     	; 0x15b6 <__fixunssfsi+0x42>
    15c0:	3e f4       	brtc	.+14     	; 0x15d0 <__fixunssfsi+0x5c>
    15c2:	90 95       	com	r25
    15c4:	80 95       	com	r24
    15c6:	70 95       	com	r23
    15c8:	61 95       	neg	r22
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	8f 4f       	sbci	r24, 0xFF	; 255
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	08 95       	ret

000015d2 <__floatunsisf>:
    15d2:	e8 94       	clt
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <__floatsisf+0x12>

000015d6 <__floatsisf>:
    15d6:	97 fb       	bst	r25, 7
    15d8:	3e f4       	brtc	.+14     	; 0x15e8 <__floatsisf+0x12>
    15da:	90 95       	com	r25
    15dc:	80 95       	com	r24
    15de:	70 95       	com	r23
    15e0:	61 95       	neg	r22
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	8f 4f       	sbci	r24, 0xFF	; 255
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	99 23       	and	r25, r25
    15ea:	a9 f0       	breq	.+42     	; 0x1616 <__floatsisf+0x40>
    15ec:	f9 2f       	mov	r31, r25
    15ee:	96 e9       	ldi	r25, 0x96	; 150
    15f0:	bb 27       	eor	r27, r27
    15f2:	93 95       	inc	r25
    15f4:	f6 95       	lsr	r31
    15f6:	87 95       	ror	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b7 95       	ror	r27
    15fe:	f1 11       	cpse	r31, r1
    1600:	f8 cf       	rjmp	.-16     	; 0x15f2 <__floatsisf+0x1c>
    1602:	fa f4       	brpl	.+62     	; 0x1642 <__floatsisf+0x6c>
    1604:	bb 0f       	add	r27, r27
    1606:	11 f4       	brne	.+4      	; 0x160c <__floatsisf+0x36>
    1608:	60 ff       	sbrs	r22, 0
    160a:	1b c0       	rjmp	.+54     	; 0x1642 <__floatsisf+0x6c>
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	8f 4f       	sbci	r24, 0xFF	; 255
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	16 c0       	rjmp	.+44     	; 0x1642 <__floatsisf+0x6c>
    1616:	88 23       	and	r24, r24
    1618:	11 f0       	breq	.+4      	; 0x161e <__floatsisf+0x48>
    161a:	96 e9       	ldi	r25, 0x96	; 150
    161c:	11 c0       	rjmp	.+34     	; 0x1640 <__floatsisf+0x6a>
    161e:	77 23       	and	r23, r23
    1620:	21 f0       	breq	.+8      	; 0x162a <__floatsisf+0x54>
    1622:	9e e8       	ldi	r25, 0x8E	; 142
    1624:	87 2f       	mov	r24, r23
    1626:	76 2f       	mov	r23, r22
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <__floatsisf+0x5e>
    162a:	66 23       	and	r22, r22
    162c:	71 f0       	breq	.+28     	; 0x164a <__floatsisf+0x74>
    162e:	96 e8       	ldi	r25, 0x86	; 134
    1630:	86 2f       	mov	r24, r22
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	2a f0       	brmi	.+10     	; 0x1642 <__floatsisf+0x6c>
    1638:	9a 95       	dec	r25
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	88 1f       	adc	r24, r24
    1640:	da f7       	brpl	.-10     	; 0x1638 <__floatsisf+0x62>
    1642:	88 0f       	add	r24, r24
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	97 f9       	bld	r25, 7
    164a:	08 95       	ret

0000164c <__fp_inf>:
    164c:	97 f9       	bld	r25, 7
    164e:	9f 67       	ori	r25, 0x7F	; 127
    1650:	80 e8       	ldi	r24, 0x80	; 128
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	08 95       	ret

00001658 <__fp_nan>:
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	80 ec       	ldi	r24, 0xC0	; 192
    165c:	08 95       	ret

0000165e <__fp_pscA>:
    165e:	00 24       	eor	r0, r0
    1660:	0a 94       	dec	r0
    1662:	16 16       	cp	r1, r22
    1664:	17 06       	cpc	r1, r23
    1666:	18 06       	cpc	r1, r24
    1668:	09 06       	cpc	r0, r25
    166a:	08 95       	ret

0000166c <__fp_pscB>:
    166c:	00 24       	eor	r0, r0
    166e:	0a 94       	dec	r0
    1670:	12 16       	cp	r1, r18
    1672:	13 06       	cpc	r1, r19
    1674:	14 06       	cpc	r1, r20
    1676:	05 06       	cpc	r0, r21
    1678:	08 95       	ret

0000167a <__fp_round>:
    167a:	09 2e       	mov	r0, r25
    167c:	03 94       	inc	r0
    167e:	00 0c       	add	r0, r0
    1680:	11 f4       	brne	.+4      	; 0x1686 <__fp_round+0xc>
    1682:	88 23       	and	r24, r24
    1684:	52 f0       	brmi	.+20     	; 0x169a <__fp_round+0x20>
    1686:	bb 0f       	add	r27, r27
    1688:	40 f4       	brcc	.+16     	; 0x169a <__fp_round+0x20>
    168a:	bf 2b       	or	r27, r31
    168c:	11 f4       	brne	.+4      	; 0x1692 <__fp_round+0x18>
    168e:	60 ff       	sbrs	r22, 0
    1690:	04 c0       	rjmp	.+8      	; 0x169a <__fp_round+0x20>
    1692:	6f 5f       	subi	r22, 0xFF	; 255
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	8f 4f       	sbci	r24, 0xFF	; 255
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	08 95       	ret

0000169c <__fp_split3>:
    169c:	57 fd       	sbrc	r21, 7
    169e:	90 58       	subi	r25, 0x80	; 128
    16a0:	44 0f       	add	r20, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	59 f0       	breq	.+22     	; 0x16bc <__fp_splitA+0x10>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <__fp_splitA+0x1a>
    16aa:	47 95       	ror	r20

000016ac <__fp_splitA>:
    16ac:	88 0f       	add	r24, r24
    16ae:	97 fb       	bst	r25, 7
    16b0:	99 1f       	adc	r25, r25
    16b2:	61 f0       	breq	.+24     	; 0x16cc <__fp_splitA+0x20>
    16b4:	9f 3f       	cpi	r25, 0xFF	; 255
    16b6:	79 f0       	breq	.+30     	; 0x16d6 <__fp_splitA+0x2a>
    16b8:	87 95       	ror	r24
    16ba:	08 95       	ret
    16bc:	12 16       	cp	r1, r18
    16be:	13 06       	cpc	r1, r19
    16c0:	14 06       	cpc	r1, r20
    16c2:	55 1f       	adc	r21, r21
    16c4:	f2 cf       	rjmp	.-28     	; 0x16aa <__fp_split3+0xe>
    16c6:	46 95       	lsr	r20
    16c8:	f1 df       	rcall	.-30     	; 0x16ac <__fp_splitA>
    16ca:	08 c0       	rjmp	.+16     	; 0x16dc <__fp_splitA+0x30>
    16cc:	16 16       	cp	r1, r22
    16ce:	17 06       	cpc	r1, r23
    16d0:	18 06       	cpc	r1, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	f1 cf       	rjmp	.-30     	; 0x16b8 <__fp_splitA+0xc>
    16d6:	86 95       	lsr	r24
    16d8:	71 05       	cpc	r23, r1
    16da:	61 05       	cpc	r22, r1
    16dc:	08 94       	sec
    16de:	08 95       	ret

000016e0 <__fp_zero>:
    16e0:	e8 94       	clt

000016e2 <__fp_szero>:
    16e2:	bb 27       	eor	r27, r27
    16e4:	66 27       	eor	r22, r22
    16e6:	77 27       	eor	r23, r23
    16e8:	cb 01       	movw	r24, r22
    16ea:	97 f9       	bld	r25, 7
    16ec:	08 95       	ret

000016ee <__mulsf3>:
    16ee:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__mulsf3x>
    16f2:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_round>
    16f6:	0e 94 2f 0b 	call	0x165e	; 0x165e <__fp_pscA>
    16fa:	38 f0       	brcs	.+14     	; 0x170a <__mulsf3+0x1c>
    16fc:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_pscB>
    1700:	20 f0       	brcs	.+8      	; 0x170a <__mulsf3+0x1c>
    1702:	95 23       	and	r25, r21
    1704:	11 f0       	breq	.+4      	; 0x170a <__mulsf3+0x1c>
    1706:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    170a:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_nan>
    170e:	11 24       	eor	r1, r1
    1710:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_szero>

00001714 <__mulsf3x>:
    1714:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_split3>
    1718:	70 f3       	brcs	.-36     	; 0x16f6 <__mulsf3+0x8>

0000171a <__mulsf3_pse>:
    171a:	95 9f       	mul	r25, r21
    171c:	c1 f3       	breq	.-16     	; 0x170e <__mulsf3+0x20>
    171e:	95 0f       	add	r25, r21
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	55 1f       	adc	r21, r21
    1724:	62 9f       	mul	r22, r18
    1726:	f0 01       	movw	r30, r0
    1728:	72 9f       	mul	r23, r18
    172a:	bb 27       	eor	r27, r27
    172c:	f0 0d       	add	r31, r0
    172e:	b1 1d       	adc	r27, r1
    1730:	63 9f       	mul	r22, r19
    1732:	aa 27       	eor	r26, r26
    1734:	f0 0d       	add	r31, r0
    1736:	b1 1d       	adc	r27, r1
    1738:	aa 1f       	adc	r26, r26
    173a:	64 9f       	mul	r22, r20
    173c:	66 27       	eor	r22, r22
    173e:	b0 0d       	add	r27, r0
    1740:	a1 1d       	adc	r26, r1
    1742:	66 1f       	adc	r22, r22
    1744:	82 9f       	mul	r24, r18
    1746:	22 27       	eor	r18, r18
    1748:	b0 0d       	add	r27, r0
    174a:	a1 1d       	adc	r26, r1
    174c:	62 1f       	adc	r22, r18
    174e:	73 9f       	mul	r23, r19
    1750:	b0 0d       	add	r27, r0
    1752:	a1 1d       	adc	r26, r1
    1754:	62 1f       	adc	r22, r18
    1756:	83 9f       	mul	r24, r19
    1758:	a0 0d       	add	r26, r0
    175a:	61 1d       	adc	r22, r1
    175c:	22 1f       	adc	r18, r18
    175e:	74 9f       	mul	r23, r20
    1760:	33 27       	eor	r19, r19
    1762:	a0 0d       	add	r26, r0
    1764:	61 1d       	adc	r22, r1
    1766:	23 1f       	adc	r18, r19
    1768:	84 9f       	mul	r24, r20
    176a:	60 0d       	add	r22, r0
    176c:	21 1d       	adc	r18, r1
    176e:	82 2f       	mov	r24, r18
    1770:	76 2f       	mov	r23, r22
    1772:	6a 2f       	mov	r22, r26
    1774:	11 24       	eor	r1, r1
    1776:	9f 57       	subi	r25, 0x7F	; 127
    1778:	50 40       	sbci	r21, 0x00	; 0
    177a:	9a f0       	brmi	.+38     	; 0x17a2 <__mulsf3_pse+0x88>
    177c:	f1 f0       	breq	.+60     	; 0x17ba <__mulsf3_pse+0xa0>
    177e:	88 23       	and	r24, r24
    1780:	4a f0       	brmi	.+18     	; 0x1794 <__mulsf3_pse+0x7a>
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	bb 1f       	adc	r27, r27
    1788:	66 1f       	adc	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	91 50       	subi	r25, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	a9 f7       	brne	.-22     	; 0x177e <__mulsf3_pse+0x64>
    1794:	9e 3f       	cpi	r25, 0xFE	; 254
    1796:	51 05       	cpc	r21, r1
    1798:	80 f0       	brcs	.+32     	; 0x17ba <__mulsf3_pse+0xa0>
    179a:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__fp_inf>
    179e:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__fp_szero>
    17a2:	5f 3f       	cpi	r21, 0xFF	; 255
    17a4:	e4 f3       	brlt	.-8      	; 0x179e <__mulsf3_pse+0x84>
    17a6:	98 3e       	cpi	r25, 0xE8	; 232
    17a8:	d4 f3       	brlt	.-12     	; 0x179e <__mulsf3_pse+0x84>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	f7 95       	ror	r31
    17b4:	e7 95       	ror	r30
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
    17b8:	c1 f7       	brne	.-16     	; 0x17aa <__mulsf3_pse+0x90>
    17ba:	fe 2b       	or	r31, r30
    17bc:	88 0f       	add	r24, r24
    17be:	91 1d       	adc	r25, r1
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret

000017c8 <eeprom_read_byte>:
    17c8:	f9 99       	sbic	0x1f, 1	; 31
    17ca:	fe cf       	rjmp	.-4      	; 0x17c8 <eeprom_read_byte>
    17cc:	92 bd       	out	0x22, r25	; 34
    17ce:	81 bd       	out	0x21, r24	; 33
    17d0:	f8 9a       	sbi	0x1f, 0	; 31
    17d2:	99 27       	eor	r25, r25
    17d4:	80 b5       	in	r24, 0x20	; 32
    17d6:	08 95       	ret

000017d8 <eeprom_write_byte>:
    17d8:	26 2f       	mov	r18, r22

000017da <eeprom_write_r18>:
    17da:	f9 99       	sbic	0x1f, 1	; 31
    17dc:	fe cf       	rjmp	.-4      	; 0x17da <eeprom_write_r18>
    17de:	1f ba       	out	0x1f, r1	; 31
    17e0:	92 bd       	out	0x22, r25	; 34
    17e2:	81 bd       	out	0x21, r24	; 33
    17e4:	20 bd       	out	0x20, r18	; 32
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	fa 9a       	sbi	0x1f, 2	; 31
    17ec:	f9 9a       	sbi	0x1f, 1	; 31
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	08 95       	ret

000017f4 <_exit>:
    17f4:	f8 94       	cli

000017f6 <__stop_program>:
    17f6:	ff cf       	rjmp	.-2      	; 0x17f6 <__stop_program>
