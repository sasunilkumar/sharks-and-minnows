
build/minnow.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	f1 04       	cpc	r15, r1
      6a:	48 05       	cpc	r20, r8
      6c:	5c 05       	cpc	r21, r12
      6e:	8d 05       	cpc	r24, r13
      70:	94 05       	cpc	r25, r4
      72:	73 05       	cpc	r23, r3
      74:	97 05       	cpc	r25, r7
      76:	f5 06       	cpc	r15, r21
      78:	e6 07       	cpc	r30, r22
      7a:	e6 07       	cpc	r30, r22
      7c:	fe 06       	cpc	r15, r30
      7e:	01 07       	cpc	r16, r17
      80:	04 07       	cpc	r16, r20
      82:	06 07       	cpc	r16, r22
      84:	08 07       	cpc	r16, r24
      86:	0a 07       	cpc	r16, r26
      88:	bb 07       	cpc	r27, r27
      8a:	1c 07       	cpc	r17, r28

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e1       	ldi	r30, 0x1C	; 28
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a8 30       	cpi	r26, 0x08	; 8
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a8 e0       	ldi	r26, 0x08	; 8
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 37       	cpi	r26, 0x7E	; 126
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 98 08 	call	0x1130	; 0x1130 <main>
      da:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
#define LEFT 2
#define RIGHT 3

int new_message = 0, curr = 0, rand = 0, die = 0;
message_t rcvd_message;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  rcvd_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	a4 e1       	ldi	r26, 0x14	; 20
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  new_message = 1;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <new_message+0x1>
      fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <new_message>
      fe:	08 95       	ret

00000100 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
     100:	08 95       	ret

00000102 <set_motion>:
  rcvd_message = *msg;
  new_message = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     102:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curr>
     106:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curr+0x1>
     10a:	28 17       	cp	r18, r24
     10c:	39 07       	cpc	r19, r25
     10e:	09 f1       	breq	.+66     	; 0x152 <set_motion+0x50>
        curr = new_motion;
     110:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <curr+0x1>
     114:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <curr>
        if (curr == STOP) {
     118:	00 97       	sbiw	r24, 0x00	; 0
     11a:	11 f4       	brne	.+4      	; 0x120 <set_motion+0x1e>
          set_motors(0,0);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	16 c0       	rjmp	.+44     	; 0x14c <set_motion+0x4a>
        } else if (curr == FORWARD) {
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	91 05       	cpc	r25, r1
     124:	39 f4       	brne	.+14     	; 0x134 <set_motion+0x32>
          spinup_motors();
     126:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     12a:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_straight_right>
     12e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_straight_left>
     132:	0d c0       	rjmp	.+26     	; 0x14e <set_motion+0x4c>
        } else if (curr == LEFT) {
     134:	02 97       	sbiw	r24, 0x02	; 2
     136:	31 f4       	brne	.+12     	; 0x144 <set_motion+0x42>
          spinup_motors();
     138:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spinup_motors>
          set_motors(kilo_turn_left, 0);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_turn_left>
     142:	05 c0       	rjmp	.+10     	; 0x14e <set_motion+0x4c>
        } else {
          spinup_motors();
     144:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spinup_motors>
          set_motors(0, kilo_turn_right);
     148:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_turn_right>
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <set_motors>
     152:	08 95       	ret

00000154 <loop>:
}

void setup() {
}
void loop() {
  if (new_message == 1) {
     154:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <new_message>
     158:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <new_message+0x1>
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	59 f4       	brne	.+22     	; 0x176 <loop+0x22>
      new_message = 0;
     160:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <new_message+0x1>
     164:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <new_message>
      set_color(VIOLET);
     168:	81 e1       	ldi	r24, 0x11	; 17
     16a:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
      set_motion(STOP);
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0c 94 81 00 	jmp	0x102	; 0x102 <set_motion>
  } else {
      set_color(RGB(0,0,1));
     176:	80 e1       	ldi	r24, 0x10	; 16
     178:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
      rand = rand_soft();
     17c:	0e 94 91 02 	call	0x522	; 0x522 <rand_soft>
     180:	28 2f       	mov	r18, r24
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <rand+0x1>
     188:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <rand>
     18c:	83 70       	andi	r24, 0x03	; 3
      die = (rand % 4);
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
     196:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
      if (die == 0) {
     19a:	81 11       	cpse	r24, r1
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <loop+0x50>
          set_motion(FORWARD);
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <loop+0x60>
      } else if (die == 1) {
     1a4:	21 30       	cpi	r18, 0x01	; 1
     1a6:	31 05       	cpc	r19, r1
     1a8:	19 f4       	brne	.+6      	; 0x1b0 <loop+0x5c>
          set_motion(LEFT);
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <loop+0x60>
      } else {
          set_motion(RIGHT);
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 81 00 	call	0x102	; 0x102 <set_motion>
      }
      delay(100);
     1b8:	84 e6       	ldi	r24, 0x64	; 100
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <delay>

000001c0 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1c0:	08 95       	ret

000001c2 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	08 95       	ret

000001c8 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1c8:	08 95       	ret

000001ca <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1ca:	df 92       	push	r13
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
    cli();
     1d8:	f8 94       	cli

    ports_off();
     1da:	14 b8       	out	0x04, r1	; 4
     1dc:	17 b8       	out	0x07, r1	; 7
     1de:	1a b8       	out	0x0a, r1	; 10
     1e0:	15 b8       	out	0x05, r1	; 5
     1e2:	18 b8       	out	0x08, r1	; 8
     1e4:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1e6:	52 9a       	sbi	0x0a, 2	; 10
     1e8:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1ea:	14 bc       	out	0x24, r1	; 36
     1ec:	85 e0       	ldi	r24, 0x05	; 5
     1ee:	85 bd       	out	0x25, r24	; 37
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	87 bd       	out	0x27, r24	; 39
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     1fa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     1fe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     202:	2f e8       	ldi	r18, 0x8F	; 143
     204:	3b e0       	ldi	r19, 0x0B	; 11
     206:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     20a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     20e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     212:	53 98       	cbi	0x0a, 3	; 10
     214:	23 98       	cbi	0x04, 3	; 4
     216:	91 ea       	ldi	r25, 0xA1	; 161
     218:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     21c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     220:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     224:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     228:	8b e0       	ldi	r24, 0x0B	; 11
     22a:	80 bf       	out	0x30, r24	; 48
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     232:	86 e0       	ldi	r24, 0x06	; 6
     234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     238:	83 e8       	ldi	r24, 0x83	; 131
     23a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     23e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     24c:	86 fd       	sbrc	r24, 6
     24e:	fc cf       	rjmp	.-8      	; 0x248 <kilo_init+0x7e>
    adc_trigger_high_gain();
     250:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     254:	83 ea       	ldi	r24, 0xA3	; 163
     256:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
    if (osccal != 0xFF)
     268:	8f 3f       	cpi	r24, 0xFF	; 255
     26a:	11 f0       	breq	.+4      	; 0x270 <kilo_init+0xa6>
        OSCCAL = osccal;
     26c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     270:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
    rx_leadingbit = 1;
     274:	c1 e0       	ldi	r28, 0x01	; 1
     276:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <rx_leadingbit>
    rx_leadingbyte = 1;
     27a:	c0 93 64 01 	sts	0x0164, r28	; 0x800164 <rx_leadingbyte>
    rx_byteindex = 0;
     27e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rx_byteindex>
    rx_bytevalue = 0;
     282:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     286:	80 e9       	ldi	r24, 0x90	; 144
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     28e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     292:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tx_mask>
     296:	88 73       	andi	r24, 0x38	; 56
     298:	11 f0       	breq	.+4      	; 0x29e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     29a:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <tx_mask>
    tx_clock = 0;
     29e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock+0x1>
     2a2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <tx_clock>
    tx_increment = 255;
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_increment+0x1>
     2ae:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_increment>
    kilo_ticks = 0;
     2b2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks>
     2b6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x1>
     2ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks+0x2>
     2be:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x3>
    kilo_state = IDLE;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     2c8:	82 e4       	ldi	r24, 0x42	; 66
     2ca:	9f e0       	ldi	r25, 0x0F	; 15
     2cc:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <kilo_tx_period+0x1>
     2d0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2d4:	80 eb       	ldi	r24, 0xB0	; 176
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     2dc:	c8 2f       	mov	r28, r24
     2de:	81 eb       	ldi	r24, 0xB1	; 177
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     2e6:	2c 2f       	mov	r18, r28
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	38 2b       	or	r19, r24
     2ec:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <kilo_uid+0x1>
     2f0:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     2f4:	85 e0       	ldi	r24, 0x05	; 5
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     2fc:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     300:	89 e0       	ldi	r24, 0x09	; 9
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     308:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     30c:	8c e0       	ldi	r24, 0x0C	; 12
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     314:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     318:	84 e1       	ldi	r24, 0x14	; 20
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     320:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <kilo_straight_right>
     324:	08 e4       	ldi	r16, 0x48	; 72
     326:	11 e0       	ldi	r17, 0x01	; 1
     328:	51 e2       	ldi	r21, 0x21	; 33
     32a:	e5 2e       	mov	r14, r21
     32c:	51 e0       	ldi	r21, 0x01	; 1
     32e:	f5 2e       	mov	r15, r21
     330:	c0 e2       	ldi	r28, 0x20	; 32
     332:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     334:	ce 01       	movw	r24, r28
     336:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     33a:	d8 2e       	mov	r13, r24
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     344:	2d 2d       	mov	r18, r13
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	32 2f       	mov	r19, r18
     34a:	22 27       	eor	r18, r18
     34c:	28 2b       	or	r18, r24
     34e:	f8 01       	movw	r30, r16
     350:	21 93       	st	Z+, r18
     352:	31 93       	st	Z+, r19
     354:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     356:	ce 01       	movw	r24, r28
     358:	c0 96       	adiw	r24, 0x30	; 48
     35a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     35e:	d8 2e       	mov	r13, r24
     360:	ce 01       	movw	r24, r28
     362:	c1 96       	adiw	r24, 0x31	; 49
     364:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <eeprom_read_byte>
     368:	2d 2d       	mov	r18, r13
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	32 2f       	mov	r19, r18
     36e:	22 27       	eor	r18, r18
     370:	28 2b       	or	r18, r24
     372:	f7 01       	movw	r30, r14
     374:	21 93       	st	Z+, r18
     376:	31 93       	st	Z+, r19
     378:	7f 01       	movw	r14, r30
     37a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     37c:	cc 33       	cpi	r28, 0x3C	; 60
     37e:	d1 05       	cpc	r29, r1
     380:	c9 f6       	brne	.-78     	; 0x334 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     382:	78 94       	sei
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	08 95       	ret

00000394 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	8f 93       	push	r24
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	a8 95       	wdr
     3a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3aa:	88 61       	ori	r24, 0x18	; 24
     3ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3b0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3b4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3b6:	8f 91       	pop	r24
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	41 f0       	breq	.+16     	; 0x3d6 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c6:	ef ec       	ldi	r30, 0xCF	; 207
     3c8:	f7 e0       	ldi	r31, 0x07	; 7
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <delay+0x8>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <delay+0xe>
     3d0:	00 00       	nop
        _delay_ms(1);
        ms--;
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f6 cf       	rjmp	.-20     	; 0x3c2 <delay>
    }
}
     3d6:	08 95       	ret

000003d8 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3d8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3dc:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3e0:	08 95       	ret

000003e2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3e8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     3ec:	8f e0       	ldi	r24, 0x0F	; 15
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <delay>

000003f4 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     3f4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     3f8:	81 11       	cpse	r24, r1
     3fa:	1e c0       	rjmp	.+60     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
        cli();
     3fc:	f8 94       	cli
        adc_setup_conversion(7);
     3fe:	87 e0       	ldi	r24, 0x07	; 7
     400:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     404:	83 e8       	ldi	r24, 0x83	; 131
     406:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     40a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     40e:	80 64       	ori	r24, 0x40	; 64
     410:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     414:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     418:	86 fd       	sbrc	r24, 6
     41a:	fc cf       	rjmp	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
        light = ADCW;                             // store AD result
     41c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     420:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     424:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     428:	23 ea       	ldi	r18, 0xA3	; 163
     42a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     434:	78 94       	sei
     436:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     43c:	08 95       	ret

0000043e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     43e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     442:	81 11       	cpse	r24, r1
     444:	1e c0       	rjmp	.+60     	; 0x482 <get_temperature+0x44>
        cli();
     446:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     448:	88 ec       	ldi	r24, 0xC8	; 200
     44a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     44e:	87 e8       	ldi	r24, 0x87	; 135
     450:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     454:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     45e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     462:	86 fd       	sbrc	r24, 6
     464:	fc cf       	rjmp	.-8      	; 0x45e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     466:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     46a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     46e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     472:	23 ea       	ldi	r18, 0xA3	; 163
     474:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     47e:	78 94       	sei
     480:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     486:	08 95       	ret

00000488 <rand_hard>:

uint8_t rand_hard() {
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     490:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     492:	e3 ea       	ldi	r30, 0xA3	; 163
     494:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     496:	c6 e0       	ldi	r28, 0x06	; 6
     498:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     49a:	a1 e0       	ldi	r26, 0x01	; 1
     49c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     49e:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4a0:	f8 94       	cli
            adc_setup_conversion(6);
     4a2:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4a6:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4aa:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ae:	40 64       	ori	r20, 0x40	; 64
     4b0:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4b4:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b8:	46 fd       	sbrc	r20, 6
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <rand_hard+0x2c>
            a = ADCW&0x1;
     4bc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4c0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4c4:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     4c6:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ca:	50 64       	ori	r21, 0x40	; 64
     4cc:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4d0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d4:	56 fd       	sbrc	r21, 6
     4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <rand_hard+0x48>
            b = ADCW&0x1;
     4d8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4dc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     4e0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4e4:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e8:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     4ec:	78 94       	sei
            tries++;
     4ee:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     4f0:	61 70       	andi	r22, 0x01	; 1
     4f2:	46 17       	cp	r20, r22
     4f4:	51 f0       	breq	.+20     	; 0x50a <rand_hard+0x82>
        if (a)
     4f6:	44 23       	and	r20, r20
     4f8:	59 f0       	breq	.+22     	; 0x510 <rand_hard+0x88>
            num |= (1<<i);
     4fa:	ad 01       	movw	r20, r26
     4fc:	02 2e       	mov	r0, r18
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <rand_hard+0x7a>
     500:	44 0f       	add	r20, r20
     502:	0a 94       	dec	r0
     504:	ea f7       	brpl	.-6      	; 0x500 <rand_hard+0x78>
     506:	84 2b       	or	r24, r20
     508:	03 c0       	rjmp	.+6      	; 0x510 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     50a:	90 38       	cpi	r25, 0x80	; 128
     50c:	49 f6       	brne	.-110    	; 0x4a0 <rand_hard+0x18>
     50e:	f3 cf       	rjmp	.-26     	; 0x4f6 <rand_hard+0x6e>
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     514:	28 30       	cpi	r18, 0x08	; 8
     516:	31 05       	cpc	r19, r1
     518:	09 f0       	breq	.+2      	; 0x51c <rand_hard+0x94>
     51a:	c1 cf       	rjmp	.-126    	; 0x49e <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     522:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     526:	98 e0       	ldi	r25, 0x08	; 8
     528:	89 9f       	mul	r24, r25
     52a:	90 01       	movw	r18, r0
     52c:	11 24       	eor	r1, r1
     52e:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     530:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	89 0f       	add	r24, r25
     538:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     53c:	82 2f       	mov	r24, r18
     53e:	82 95       	swap	r24
     540:	86 95       	lsr	r24
     542:	87 70       	andi	r24, 0x07	; 7
     544:	28 27       	eor	r18, r24
     546:	96 95       	lsr	r25
     548:	96 95       	lsr	r25
     54a:	82 2f       	mov	r24, r18
     54c:	89 27       	eor	r24, r25
     54e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     552:	08 95       	ret

00000554 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     554:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     558:	08 95       	ret

0000055a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     55a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     55e:	81 11       	cpse	r24, r1
     560:	16 c0       	rjmp	.+44     	; 0x58e <get_voltage+0x34>
        cli();                                    // disable interrupts
     562:	f8 94       	cli
        adc_setup_conversion(6);
     564:	86 e0       	ldi	r24, 0x06	; 6
     566:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     56a:	83 e8       	ldi	r24, 0x83	; 131
     56c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     570:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     574:	80 64       	ori	r24, 0x40	; 64
     576:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     57a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     57e:	86 fd       	sbrc	r24, 6
     580:	fc cf       	rjmp	.-8      	; 0x57a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     582:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     586:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     58a:	78 94       	sei
     58c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     592:	08 95       	ret

00000594 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     594:	2f 92       	push	r2
     596:	3f 92       	push	r3
     598:	4f 92       	push	r4
     59a:	5f 92       	push	r5
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5ba:	fc 01       	movw	r30, r24
     5bc:	c2 81       	ldd	r28, Z+2	; 0x02
     5be:	d3 81       	ldd	r29, Z+3	; 0x03
     5c0:	c4 38       	cpi	r28, 0x84	; 132
     5c2:	f3 e0       	ldi	r31, 0x03	; 3
     5c4:	df 07       	cpc	r29, r31
     5c6:	0c f0       	brlt	.+2      	; 0x5ca <estimate_distance+0x36>
     5c8:	7e c0       	rjmp	.+252    	; 0x6c6 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     5ca:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <kilo_irhigh>
     5ce:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <kilo_irhigh+0x1>
     5d2:	8c 17       	cp	r24, r28
     5d4:	9d 07       	cpc	r25, r29
     5d6:	08 f4       	brcc	.+2      	; 0x5da <estimate_distance+0x46>
     5d8:	6f c0       	rjmp	.+222    	; 0x6b8 <estimate_distance+0x124>
     5da:	e3 e2       	ldi	r30, 0x23	; 35
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     5e0:	81 91       	ld	r24, Z+
     5e2:	91 91       	ld	r25, Z+
     5e4:	8c 17       	cp	r24, r28
     5e6:	9d 07       	cpc	r25, r29
     5e8:	20 f0       	brcs	.+8      	; 0x5f2 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     5ea:	1f 5f       	subi	r17, 0xFF	; 255
     5ec:	1e 30       	cpi	r17, 0x0E	; 14
     5ee:	c1 f7       	brne	.-16     	; 0x5e0 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     5f0:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     5f2:	81 2f       	mov	r24, r17
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	ef 5d       	subi	r30, 0xDF	; 223
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	e0 80       	ld	r14, Z
     602:	f1 80       	ldd	r15, Z+1	; 0x01
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	fc 01       	movw	r30, r24
     60a:	e1 5e       	subi	r30, 0xE1	; 225
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	b7 01       	movw	r22, r14
     614:	68 1b       	sub	r22, r24
     616:	79 0b       	sbc	r23, r25
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     62c:	be 01       	movw	r22, r28
     62e:	0d 2e       	mov	r0, r29
     630:	00 0c       	add	r0, r0
     632:	88 0b       	sbc	r24, r24
     634:	99 0b       	sbc	r25, r25
     636:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatsisf>
     63a:	2b 01       	movw	r4, r22
     63c:	3c 01       	movw	r6, r24
     63e:	b7 01       	movw	r22, r14
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     648:	6b 01       	movw	r12, r22
     64a:	7c 01       	movw	r14, r24
     64c:	61 2f       	mov	r22, r17
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	5f e3       	ldi	r21, 0x3F	; 63
     660:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     66e:	a5 01       	movw	r20, r10
     670:	94 01       	movw	r18, r8
     672:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c7 01       	movw	r24, r14
     67c:	b6 01       	movw	r22, r12
     67e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	c3 01       	movw	r24, r6
     688:	b2 01       	movw	r22, r4
     68a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e2       	ldi	r20, 0x20	; 32
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     69a:	0e 94 c5 09 	call	0x138a	; 0x138a <__fixsfsi>
     69e:	7b 01       	movw	r14, r22
     6a0:	c5 01       	movw	r24, r10
     6a2:	b4 01       	movw	r22, r8
     6a4:	0e 94 c5 09 	call	0x138a	; 0x138a <__fixsfsi>
     6a8:	ab 01       	movw	r20, r22
     6aa:	bc 01       	movw	r22, r24
     6ac:	c7 01       	movw	r24, r14
     6ae:	ba 01       	movw	r22, r20
     6b0:	0e 94 a9 08 	call	0x1152	; 0x1152 <__divmodhi4>
     6b4:	16 2f       	mov	r17, r22
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6b8:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6ba:	cd 3b       	cpi	r28, 0xBD	; 189
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	d8 07       	cpc	r29, r24
     6c0:	0c f4       	brge	.+2      	; 0x6c4 <estimate_distance+0x130>
     6c2:	ca c0       	rjmp	.+404    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     6c6:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     6c8:	f1 01       	movw	r30, r2
     6ca:	c0 80       	ld	r12, Z
     6cc:	d1 80       	ldd	r13, Z+1	; 0x01
     6ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <kilo_irlow>
     6d2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <kilo_irlow+0x1>
     6d6:	8c 15       	cp	r24, r12
     6d8:	9d 05       	cpc	r25, r13
     6da:	88 f0       	brcs	.+34     	; 0x6fe <estimate_distance+0x16a>
     6dc:	ea e4       	ldi	r30, 0x4A	; 74
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     6e6:	e1 90       	ld	r14, Z+
     6e8:	f1 90       	ld	r15, Z+
     6ea:	ec 14       	cp	r14, r12
     6ec:	fd 04       	cpc	r15, r13
     6ee:	08 f4       	brcc	.+2      	; 0x6f2 <estimate_distance+0x15e>
     6f0:	58 c0       	rjmp	.+176    	; 0x7a2 <estimate_distance+0x20e>
     6f2:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     6f4:	8e 30       	cpi	r24, 0x0E	; 14
     6f6:	91 05       	cpc	r25, r1
     6f8:	a9 f7       	brne	.-22     	; 0x6e4 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     6fa:	0a e5       	ldi	r16, 0x5A	; 90
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     6fe:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     700:	1f 3f       	cpi	r17, 0xFF	; 255
     702:	09 f4       	brne	.+2      	; 0x706 <estimate_distance+0x172>
     704:	4b c0       	rjmp	.+150    	; 0x79c <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     706:	be 01       	movw	r22, r28
     708:	dd 0f       	add	r29, r29
     70a:	88 0b       	sbc	r24, r24
     70c:	99 0b       	sbc	r25, r25
     70e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatsisf>
     712:	6b 01       	movw	r12, r22
     714:	7c 01       	movw	r14, r24
     716:	61 2f       	mov	r22, r17
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     722:	4b 01       	movw	r8, r22
     724:	5c 01       	movw	r10, r24
     726:	a7 01       	movw	r20, r14
     728:	96 01       	movw	r18, r12
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	81 e6       	ldi	r24, 0x61	; 97
     730:	94 e4       	ldi	r25, 0x44	; 68
     732:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c5 01       	movw	r24, r10
     73c:	b4 01       	movw	r22, r8
     73e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     742:	4b 01       	movw	r8, r22
     744:	5c 01       	movw	r10, r24
     746:	60 2f       	mov	r22, r16
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     752:	2b 01       	movw	r4, r22
     754:	3c 01       	movw	r6, r24
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4f e2       	ldi	r20, 0x2F	; 47
     75c:	54 e4       	ldi	r21, 0x44	; 68
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	c3 01       	movw	r24, r6
     76c:	b2 01       	movw	r22, r4
     76e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	c5 01       	movw	r24, r10
     778:	b4 01       	movw	r22, r8
     77a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	48 e4       	ldi	r20, 0x48	; 72
     784:	53 e4       	ldi	r21, 0x43	; 67
     786:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__divsf3>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	44 e0       	ldi	r20, 0x04	; 4
     790:	52 e4       	ldi	r21, 0x42	; 66
     792:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     796:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
     79a:	60 c0       	rjmp	.+192    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
        } else {
            return 33 + dist_low;
     79c:	61 e2       	ldi	r22, 0x21	; 33
     79e:	60 0f       	add	r22, r16
     7a0:	5d c0       	rjmp	.+186    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	fc 01       	movw	r30, r24
     7a8:	ea 5b       	subi	r30, 0xBA	; 186
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	b7 01       	movw	r22, r14
     7b2:	68 1b       	sub	r22, r24
     7b4:	79 0b       	sbc	r23, r25
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     7c6:	4b 01       	movw	r8, r22
     7c8:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     7ca:	b6 01       	movw	r22, r12
     7cc:	dd 0c       	add	r13, r13
     7ce:	88 0b       	sbc	r24, r24
     7d0:	99 0b       	sbc	r25, r25
     7d2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__floatsisf>
     7d6:	2b 01       	movw	r4, r22
     7d8:	3c 01       	movw	r6, r24
     7da:	b7 01       	movw	r22, r14
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     7e4:	6b 01       	movw	r12, r22
     7e6:	7c 01       	movw	r14, r24
     7e8:	63 2d       	mov	r22, r3
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatunsisf>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	a9 01       	movw	r20, r18
     806:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3>
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     812:	9b 01       	movw	r18, r22
     814:	ac 01       	movw	r20, r24
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c3 01       	movw	r24, r6
     824:	b2 01       	movw	r22, r4
     826:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e2       	ldi	r20, 0x20	; 32
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     836:	0e 94 c5 09 	call	0x138a	; 0x138a <__fixsfsi>
     83a:	7b 01       	movw	r14, r22
     83c:	c5 01       	movw	r24, r10
     83e:	b4 01       	movw	r22, r8
     840:	0e 94 c5 09 	call	0x138a	; 0x138a <__fixsfsi>
     844:	ab 01       	movw	r20, r22
     846:	bc 01       	movw	r22, r24
     848:	c7 01       	movw	r24, r14
     84a:	ba 01       	movw	r22, r20
     84c:	0e 94 a9 08 	call	0x1152	; 0x1152 <__divmodhi4>
     850:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     852:	6f 3f       	cpi	r22, 0xFF	; 255
     854:	09 f0       	breq	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	54 cf       	rjmp	.-344    	; 0x700 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     858:	61 e2       	ldi	r22, 0x21	; 33
     85a:	61 0f       	add	r22, r17
    }
}
     85c:	86 2f       	mov	r24, r22
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	5f 90       	pop	r5
     87c:	4f 90       	pop	r4
     87e:	3f 90       	pop	r3
     880:	2f 90       	pop	r2
     882:	08 95       	ret

00000884 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
    tx_clock += tx_increment;
     8a6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <tx_clock>
     8aa:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <tx_clock+0x1>
     8ae:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tx_increment>
     8b2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tx_increment+0x1>
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tx_clock+0x1>
     8be:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_clock>
    tx_increment = 0xFF;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_increment+0x1>
     8ca:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_increment>
    OCR0A = tx_increment;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8d2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <kilo_ticks>
     8d6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <kilo_ticks+0x1>
     8da:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <kilo_ticks+0x2>
     8de:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <kilo_ticks+0x3>
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	a1 1d       	adc	r26, r1
     8e6:	b1 1d       	adc	r27, r1
     8e8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <kilo_ticks>
     8ec:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <kilo_ticks+0x1>
     8f0:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <kilo_ticks+0x2>
     8f4:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     8f8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     8fc:	81 11       	cpse	r24, r1
     8fe:	2d c0       	rjmp	.+90     	; 0x95a <__stack+0x5b>
     900:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <kilo_tx_period>
     904:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_tx_period+0x1>
     908:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <tx_clock>
     90c:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <tx_clock+0x1>
     910:	82 17       	cp	r24, r18
     912:	93 07       	cpc	r25, r19
     914:	10 f5       	brcc	.+68     	; 0x95a <__stack+0x5b>
     916:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     91a:	84 30       	cpi	r24, 0x04	; 4
     91c:	f1 f4       	brne	.+60     	; 0x95a <__stack+0x5b>
        message_t *msg = kilo_message_tx();
     91e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     922:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     926:	09 95       	icall
        if (msg) {
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	b9 f0       	breq	.+46     	; 0x95a <__stack+0x5b>
            if (message_send(msg)) {
     92c:	0e 94 15 08 	call	0x102a	; 0x102a <message_send>
     930:	88 23       	and	r24, r24
     932:	51 f0       	breq	.+20     	; 0x948 <__stack+0x49>
                kilo_message_tx_success();
     934:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     938:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     93c:	09 95       	icall
                tx_clock = 0;
     93e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock+0x1>
     942:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <tx_clock>
     946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
            } else {
                tx_increment = rand()&0xFF;
     948:	0e 94 85 00 	call	0x10a	; 0x10a <set_motion+0x8>
     94c:	9c 01       	movw	r18, r24
     94e:	33 27       	eor	r19, r19
     950:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <tx_increment+0x1>
     954:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <tx_increment>
                OCR0A = tx_increment;
     958:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     97c:	80 ff       	sbrs	r24, 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <set_color+0x8>
        DDRD |= (1<<5);
     980:	55 9a       	sbi	0x0a, 5	; 10
     982:	01 c0       	rjmp	.+2      	; 0x986 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     984:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     986:	81 ff       	sbrs	r24, 1
     988:	02 c0       	rjmp	.+4      	; 0x98e <set_color+0x12>
        DDRD |= (1<<4);
     98a:	54 9a       	sbi	0x0a, 4	; 10
     98c:	01 c0       	rjmp	.+2      	; 0x990 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     98e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     990:	82 ff       	sbrs	r24, 2
     992:	02 c0       	rjmp	.+4      	; 0x998 <set_color+0x1c>
        DDRC |= (1<<3);
     994:	3b 9a       	sbi	0x07, 3	; 7
     996:	01 c0       	rjmp	.+2      	; 0x99a <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     998:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     99a:	83 ff       	sbrs	r24, 3
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <set_color+0x26>
        DDRC |= (1<<2);
     99e:	3a 9a       	sbi	0x07, 2	; 7
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9a2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9a4:	84 ff       	sbrs	r24, 4
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <set_color+0x30>
        DDRC |= (1<<5);
     9a8:	3d 9a       	sbi	0x07, 5	; 7
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9ac:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9ae:	85 ff       	sbrs	r24, 5
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <set_color+0x3a>
        DDRC |= (1<<4);
     9b2:	3c 9a       	sbi	0x07, 4	; 7
     9b4:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9b6:	3c 98       	cbi	0x07, 4	; 7
     9b8:	08 95       	ret

000009ba <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9ba:	8c 01       	movw	r16, r24
     9bc:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9be:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9c0:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9c6:	98 e1       	ldi	r25, 0x18	; 24
     9c8:	c9 2e       	mov	r12, r25
     9ca:	29 e2       	ldi	r18, 0x29	; 41
     9cc:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9ce:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	e7 30       	cpi	r30, 0x07	; 7
     9d6:	f1 05       	cpc	r31, r1
     9d8:	d0 f7       	brcc	.-12     	; 0x9ce <kilo_start+0x14>
     9da:	ec 5c       	subi	r30, 0xCC	; 204
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__tablejump2__>
            case SLEEPING:
                cli();
     9e2:	f8 94       	cli
                acomp_off();
     9e4:	80 b7       	in	r24, 0x30	; 48
     9e6:	87 7f       	andi	r24, 0xF7	; 247
     9e8:	80 bf       	out	0x30, r24	; 48
                adc_off();
     9ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     9f4:	14 b8       	out	0x04, r1	; 4
     9f6:	17 b8       	out	0x07, r1	; 7
     9f8:	1a b8       	out	0x0a, r1	; 10
     9fa:	15 b8       	out	0x05, r1	; 5
     9fc:	18 b8       	out	0x08, r1	; 8
     9fe:	1b b8       	out	0x0b, r1	; 11
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	a8 95       	wdr
     a06:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a10:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a14:	80 64       	ori	r24, 0x40	; 64
     a16:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a1a:	83 b7       	in	r24, 0x33	; 51
     a1c:	81 7f       	andi	r24, 0xF1	; 241
     a1e:	84 60       	ori	r24, 0x04	; 4
     a20:	83 bf       	out	0x33, r24	; 51
                cli();
     a22:	f8 94       	cli
                sleep_enable();
     a24:	83 b7       	in	r24, 0x33	; 51
     a26:	81 60       	ori	r24, 0x01	; 1
     a28:	83 bf       	out	0x33, r24	; 51
                sei();
     a2a:	78 94       	sei
                sleep_cpu();
     a2c:	88 95       	sleep
                sleep_disable();
     a2e:	83 b7       	in	r24, 0x33	; 51
     a30:	8e 7f       	andi	r24, 0xFE	; 254
     a32:	83 bf       	out	0x33, r24	; 51
                sei();
     a34:	78 94       	sei
                rx_busy = 0;
     a36:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
                ports_on();
     a3a:	52 9a       	sbi	0x0a, 2	; 10
     a3c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a48:	87 e5       	ldi	r24, 0x57	; 87
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <kilo_start+0x92>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <kilo_start+0x98>
     a52:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a54:	80 b7       	in	r24, 0x30	; 48
     a56:	88 61       	ori	r24, 0x18	; 24
     a58:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a60:	ef e1       	ldi	r30, 0x1F	; 31
     a62:	fe e4       	ldi	r31, 0x4E	; 78
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <kilo_start+0xaa>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <kilo_start+0xb0>
     a6a:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a6c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_busy>
     a70:	88 23       	and	r24, r24
     a72:	09 f4       	brne	.+2      	; 0xa76 <kilo_start+0xbc>
     a74:	50 c0       	rjmp	.+160    	; 0xb16 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     a7c:	ff ef       	ldi	r31, 0xFF	; 255
     a7e:	20 e7       	ldi	r18, 0x70	; 112
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	f1 50       	subi	r31, 0x01	; 1
     a84:	20 40       	sbci	r18, 0x00	; 0
     a86:	80 40       	sbci	r24, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <kilo_start+0xc8>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <kilo_start+0xd2>
     a8c:	00 00       	nop
     a8e:	43 c0       	rjmp	.+134    	; 0xb16 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a90:	8c e0       	ldi	r24, 0x0C	; 12
     a92:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     a96:	ef ec       	ldi	r30, 0xCF	; 207
     a98:	f7 e0       	ldi	r31, 0x07	; 7
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <kilo_start+0xe0>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <kilo_start+0xe6>
     aa0:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     aa8:	ff ef       	ldi	r31, 0xFF	; 255
     aaa:	21 ee       	ldi	r18, 0xE1	; 225
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	f1 50       	subi	r31, 0x01	; 1
     ab0:	20 40       	sbci	r18, 0x00	; 0
     ab2:	80 40       	sbci	r24, 0x00	; 0
     ab4:	e1 f7       	brne	.-8      	; 0xaae <kilo_start+0xf4>
     ab6:	2c c0       	rjmp	.+88     	; 0xb10 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     ab8:	0e 94 ad 02 	call	0x55a	; 0x55a <get_voltage>
                if(voltage > 682)
     abc:	8b 3a       	cpi	r24, 0xAB	; 171
     abe:	e2 e0       	ldi	r30, 0x02	; 2
     ac0:	9e 07       	cpc	r25, r30
     ac2:	24 f0       	brlt	.+8      	; 0xacc <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     ac4:	8c e0       	ldi	r24, 0x0C	; 12
     ac6:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     aca:	81 cf       	rjmp	.-254    	; 0x9ce <kilo_start+0x14>
                else if(voltage > 648)
     acc:	89 38       	cpi	r24, 0x89	; 137
     ace:	f2 e0       	ldi	r31, 0x02	; 2
     ad0:	9f 07       	cpc	r25, r31
     ad2:	14 f0       	brlt	.+4      	; 0xad8 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     ad4:	80 e3       	ldi	r24, 0x30	; 48
     ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <kilo_start+0x10c>
                else if(voltage > 614)
     ad8:	87 36       	cpi	r24, 0x67	; 103
     ada:	92 40       	sbci	r25, 0x02	; 2
     adc:	14 f0       	brlt	.+4      	; 0xae2 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     ade:	8f e0       	ldi	r24, 0x0F	; 15
     ae0:	f2 cf       	rjmp	.-28     	; 0xac6 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	f0 cf       	rjmp	.-32     	; 0xac6 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     ae6:	48 99       	sbic	0x09, 0	; 9
     ae8:	16 c0       	rjmp	.+44     	; 0xb16 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     af0:	8f ec       	ldi	r24, 0xCF	; 207
     af2:	97 e0       	ldi	r25, 0x07	; 7
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <kilo_start+0x13a>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <kilo_start+0x140>
     afa:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	e1 ee       	ldi	r30, 0xE1	; 225
     b06:	f4 e0       	ldi	r31, 0x04	; 4
     b08:	91 50       	subi	r25, 0x01	; 1
     b0a:	e0 40       	sbci	r30, 0x00	; 0
     b0c:	f0 40       	sbci	r31, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <kilo_start+0x14e>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <kilo_start+0x158>
     b12:	00 00       	nop
     b14:	5c cf       	rjmp	.-328    	; 0x9ce <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	d6 cf       	rjmp	.-84     	; 0xac6 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b1a:	d1 11       	cpse	r29, r1
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <kilo_start+0x168>
                    setup();
     b1e:	f8 01       	movw	r30, r16
     b20:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b22:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     b26:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b28:	f7 01       	movw	r30, r14
     b2a:	09 95       	icall
                break;
     b2c:	50 cf       	rjmp	.-352    	; 0x9ce <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b2e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b32:	81 11       	cpse	r24, r1
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b36:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b3a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b3e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     b42:	45 cf       	rjmp	.-374    	; 0x9ce <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b44:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     b48:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     b4c:	98 17       	cp	r25, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <kilo_start+0x198>
     b50:	3e cf       	rjmp	.-388    	; 0x9ce <kilo_start+0x14>
                        prev_motion = cur_motion;
     b52:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b56:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b5a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	89 f4       	brne	.+34     	; 0xb84 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b62:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b66:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b6a:	8f e2       	ldi	r24, 0x2F	; 47
     b6c:	95 e7       	ldi	r25, 0x75	; 117
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <kilo_start+0x1b4>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <kilo_start+0x1ba>
     b74:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b76:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b7a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b7e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b82:	25 cf       	rjmp	.-438    	; 0x9ce <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b84:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b88:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b8c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	59 f4       	brne	.+22     	; 0xbaa <kilo_start+0x1f0>
     b94:	ef e2       	ldi	r30, 0x2F	; 47
     b96:	f5 e7       	ldi	r31, 0x75	; 117
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <kilo_start+0x1de>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <kilo_start+0x1e4>
     b9e:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     ba0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     ba8:	10 c0       	rjmp	.+32     	; 0xbca <kilo_start+0x210>
     baa:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bae:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bb2:	8f e2       	ldi	r24, 0x2F	; 47
     bb4:	95 e7       	ldi	r25, 0x75	; 117
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <kilo_start+0x1fc>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <kilo_start+0x202>
     bbc:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bbe:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <kilo_straight_right>
     bc2:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bc6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bca:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bce:	ff ce       	rjmp	.-514    	; 0x9ce <kilo_start+0x14>

00000bd0 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
    rx_timer_off();
     bde:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     be2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     be6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <rx_leadingbit>
    rx_leadingbyte = 1;
     bf0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rx_leadingbyte>
    rx_busy = 0;
     bf4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
    adc_trigger_high_gain();
     bf8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bfc:	93 ea       	ldi	r25, 0xA3	; 163
     bfe:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c02:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c48:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <rx_leadingbit>
     c4c:	88 23       	and	r24, r24
     c4e:	21 f1       	breq	.+72     	; 0xc98 <__vector_23+0x84>
        rx_timer_on();
     c50:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c54:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c58:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c5c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_bytevalue>
        rx_leadingbit = 0;
     c60:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <rx_leadingbit>
        if (rx_leadingbyte) {
     c64:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_leadingbyte>
     c68:	88 23       	and	r24, r24
     c6a:	09 f4       	brne	.+2      	; 0xc6e <__vector_23+0x5a>
     c6c:	af c1       	rjmp	.+862    	; 0xfcc <__vector_23+0x3b8>
            adc_finish_conversion();
     c6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c72:	86 fd       	sbrc	r24, 6
     c74:	fc cf       	rjmp	.-8      	; 0xc6e <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c76:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c7a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c7e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <rx_dist+0x3>
     c82:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <rx_dist+0x2>
            adc_trigger_low_gain();
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c8c:	93 ea       	ldi	r25, 0xA3	; 163
     c8e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c92:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c96:	9a c1       	rjmp	.+820    	; 0xfcc <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c98:	c9 01       	movw	r24, r18
     c9a:	87 58       	subi	r24, 0x87	; 135
     c9c:	91 09       	sbc	r25, r1
     c9e:	84 37       	cpi	r24, 0x74	; 116
     ca0:	99 40       	sbci	r25, 0x09	; 9
     ca2:	a0 f0       	brcs	.+40     	; 0xccc <__vector_23+0xb8>
            rx_timer_off();
     ca4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ca8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cb0:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <rx_leadingbit>
            rx_leadingbyte = 1;
     cb4:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <rx_leadingbyte>
            rx_busy = 0;
     cb8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
            adc_trigger_high_gain();
     cbc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cc0:	83 ea       	ldi	r24, 0xA3	; 163
     cc2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cc6:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cca:	80 c1       	rjmp	.+768    	; 0xfcc <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     ccc:	26 58       	subi	r18, 0x86	; 134
     cce:	31 09       	sbc	r19, r1
     cd0:	a4 ef       	ldi	r26, 0xF4	; 244
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	0e 94 c3 08 	call	0x1186	; 0x1186 <__umulhisi3>
     cd8:	8c 01       	movw	r16, r24
     cda:	22 27       	eor	r18, r18
     cdc:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     cde:	08 30       	cpi	r16, 0x08	; 8
     ce0:	60 f4       	brcc	.+24     	; 0xcfa <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <__vector_23+0xd6>
     ce8:	88 0f       	add	r24, r24
     cea:	0a 95       	dec	r16
     cec:	ea f7       	brpl	.-6      	; 0xce8 <__vector_23+0xd4>
     cee:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     cf2:	89 2b       	or	r24, r25
     cf4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_bytevalue>
     cf8:	69 c1       	rjmp	.+722    	; 0xfcc <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     cfa:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <rx_leadingbit>
                if (rx_leadingbyte) {
     cfe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_leadingbyte>
     d02:	88 23       	and	r24, r24
     d04:	41 f1       	breq	.+80     	; 0xd56 <__vector_23+0x142>
                    adc_finish_conversion();
     d06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d0a:	86 fd       	sbrc	r24, 6
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d0e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d12:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d16:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x1>
     d1a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist>
                    adc_trigger_high_gain();
     d1e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d22:	83 ea       	ldi	r24, 0xA3	; 163
     d24:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d2e:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     d32:	99 23       	and	r25, r25
     d34:	59 f0       	breq	.+22     	; 0xd4c <__vector_23+0x138>
                        rx_timer_off();
     d36:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d3a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d3e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d42:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rx_leadingbyte>
                        rx_busy = 0;
     d46:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>
     d4a:	40 c1       	rjmp	.+640    	; 0xfcc <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d4c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <rx_leadingbyte>
                        rx_byteindex = 0;
     d50:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <rx_byteindex>
     d54:	3b c1       	rjmp	.+630    	; 0xfcc <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d56:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <rx_byteindex>
     d5a:	e8 2f       	mov	r30, r24
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e6 59       	subi	r30, 0x96	; 150
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_bytevalue>
     d66:	90 83       	st	Z, r25
                    rx_byteindex++;
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d6e:	8c 30       	cpi	r24, 0x0C	; 12
     d70:	09 f0       	breq	.+2      	; 0xd74 <__vector_23+0x160>
     d72:	2c c1       	rjmp	.+600    	; 0xfcc <__vector_23+0x3b8>
                        rx_timer_off();
     d74:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d78:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d7c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d80:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <rx_leadingbyte>
                        rx_busy = 0;
     d84:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d88:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <rx_msg+0xa>
     d8c:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <rx_msg+0xb>
     d90:	8a e6       	ldi	r24, 0x6A	; 106
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	0e 94 f9 07 	call	0xff2	; 0xff2 <message_crc>
     d98:	08 17       	cp	r16, r24
     d9a:	19 07       	cpc	r17, r25
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_23+0x18c>
     d9e:	16 c1       	rjmp	.+556    	; 0xfcc <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     da0:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <rx_msg+0x9>
     da4:	e7 fd       	sbrc	r30, 7
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     da8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     dac:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     db0:	6f e3       	ldi	r22, 0x3F	; 63
     db2:	71 e0       	ldi	r23, 0x01	; 1
     db4:	8a e6       	ldi	r24, 0x6A	; 106
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	09 95       	icall
     dba:	08 c1       	rjmp	.+528    	; 0xfcc <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     dbc:	88 e7       	ldi	r24, 0x78	; 120
     dbe:	8e 0f       	add	r24, r30
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	30 f0       	brcs	.+12     	; 0xdd0 <__vector_23+0x1bc>
        motors_off();
     dc4:	53 98       	cbi	0x0a, 3	; 10
     dc6:	23 98       	cbi	0x04, 3	; 4
     dc8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dcc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     dd0:	8e 2f       	mov	r24, r30
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	e0 58       	subi	r30, 0x80	; 128
     dd8:	f1 09       	sbc	r31, r1
     dda:	eb 30       	cpi	r30, 0x0B	; 11
     ddc:	f1 05       	cpc	r31, r1
     dde:	08 f0       	brcs	.+2      	; 0xde2 <__vector_23+0x1ce>
     de0:	f5 c0       	rjmp	.+490    	; 0xfcc <__vector_23+0x3b8>
     de2:	e5 5c       	subi	r30, 0xC5	; 197
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__tablejump2__>
        case BOOT:
            tx_timer_off();
     dea:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     df4:	16 bc       	out	0x26, r1	; 38
            bootload();
     df6:	e0 e0       	ldi	r30, 0x00	; 0
     df8:	f0 e7       	ldi	r31, 0x70	; 112
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     dfc:	e0 e0       	ldi	r30, 0x00	; 0
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e02:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e06:	e2 c0       	rjmp	.+452    	; 0xfcc <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	b2 c0       	rjmp	.+356    	; 0xf70 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	b0 c0       	rjmp	.+352    	; 0xf70 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	ae c0       	rjmp	.+348    	; 0xf70 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e14:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	09 f4       	brne	.+2      	; 0xe1e <__vector_23+0x20a>
     e1c:	d7 c0       	rjmp	.+430    	; 0xfcc <__vector_23+0x3b8>
     e1e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	09 f4       	brne	.+2      	; 0xe28 <__vector_23+0x214>
     e26:	d2 c0       	rjmp	.+420    	; 0xfcc <__vector_23+0x3b8>
                motors_on();
     e28:	53 9a       	sbi	0x0a, 3	; 10
     e2a:	23 9a       	sbi	0x04, 3	; 4
     e2c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e30:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	9c c0       	rjmp	.+312    	; 0xf70 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e38:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_msg>
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__vector_23+0x22e>
     e40:	4b c0       	rjmp	.+150    	; 0xed8 <__vector_23+0x2c4>
     e42:	80 f4       	brcc	.+32     	; 0xe64 <__vector_23+0x250>
     e44:	88 23       	and	r24, r24
     e46:	a9 f0       	breq	.+42     	; 0xe72 <__vector_23+0x25e>
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__vector_23+0x23a>
     e4c:	82 c0       	rjmp	.+260    	; 0xf52 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e4e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x1>
     e52:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_msg+0x2>
     e56:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <kilo_uid+0x1>
     e5a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_uid>
                    cur_motion = MOVE_STOP;
     e5e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     e62:	77 c0       	rjmp	.+238    	; 0xf52 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	09 f4       	brne	.+2      	; 0xe6a <__vector_23+0x256>
     e68:	49 c0       	rjmp	.+146    	; 0xefc <__vector_23+0x2e8>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__vector_23+0x25c>
     e6e:	58 c0       	rjmp	.+176    	; 0xf20 <__vector_23+0x30c>
     e70:	70 c0       	rjmp	.+224    	; 0xf52 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e72:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e76:	86 30       	cpi	r24, 0x06	; 6
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_23+0x268>
     e7a:	6b c0       	rjmp	.+214    	; 0xf52 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e7c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_uid>
     e80:	80 eb       	ldi	r24, 0xB0	; 176
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e88:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_uid+0x1>
     e8c:	81 eb       	ldi	r24, 0xB1	; 177
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e94:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_turn_left>
     e98:	85 e0       	ldi	r24, 0x05	; 5
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ea0:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_turn_right>
     ea4:	89 e0       	ldi	r24, 0x09	; 9
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     eac:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_straight_left>
     eb0:	8c e0       	ldi	r24, 0x0C	; 12
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     eb8:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_straight_right>
     ebc:	84 e1       	ldi	r24, 0x14	; 20
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <eeprom_write_byte>
                        motors_off();
     ec4:	53 98       	cbi	0x0a, 3	; 10
     ec6:	23 98       	cbi	0x04, 3	; 4
     ec8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ecc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     ed6:	3d c0       	rjmp	.+122    	; 0xf52 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     ed8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     edc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <rx_msg+0x3>
     ee0:	91 30       	cpi	r25, 0x01	; 1
     ee2:	21 f4       	brne	.+8      	; 0xeec <__vector_23+0x2d8>
     ee4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <kilo_turn_left>
     ee8:	89 17       	cp	r24, r25
     eea:	99 f1       	breq	.+102    	; 0xf52 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     eec:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     ef6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_turn_left>
     efa:	2b c0       	rjmp	.+86     	; 0xf52 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     efc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f00:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg+0x4>
     f04:	92 30       	cpi	r25, 0x02	; 2
     f06:	21 f4       	brne	.+8      	; 0xf10 <__vector_23+0x2fc>
     f08:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_turn_right>
     f0c:	89 17       	cp	r24, r25
     f0e:	09 f1       	breq	.+66     	; 0xf52 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f10:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f1a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_turn_right>
     f1e:	19 c0       	rjmp	.+50     	; 0xf52 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f20:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     f24:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x6>
     f28:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <rx_msg+0x5>
     f2c:	23 30       	cpi	r18, 0x03	; 3
     f2e:	41 f4       	brne	.+16     	; 0xf40 <__vector_23+0x32c>
     f30:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <kilo_straight_right>
     f34:	82 13       	cpse	r24, r18
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <__vector_23+0x32c>
     f38:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <kilo_straight_left>
     f3c:	92 17       	cp	r25, r18
     f3e:	49 f0       	breq	.+18     	; 0xf52 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f40:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f44:	23 e0       	ldi	r18, 0x03	; 3
     f46:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f4a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f4e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f52:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_msg>
     f56:	88 23       	and	r24, r24
     f58:	c9 f1       	breq	.+114    	; 0xfcc <__vector_23+0x3b8>
     f5a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f5e:	86 30       	cpi	r24, 0x06	; 6
     f60:	a9 f1       	breq	.+106    	; 0xfcc <__vector_23+0x3b8>
                motors_on();
     f62:	53 9a       	sbi	0x0a, 3	; 10
     f64:	23 9a       	sbi	0x04, 3	; 4
     f66:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f6a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f6e:	86 e0       	ldi	r24, 0x06	; 6
     f70:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f74:	2b c0       	rjmp	.+86     	; 0xfcc <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f76:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     f7a:	86 30       	cpi	r24, 0x06	; 6
     f7c:	81 f0       	breq	.+32     	; 0xf9e <__vector_23+0x38a>
                motors_on();
     f7e:	53 9a       	sbi	0x0a, 3	; 10
     f80:	23 9a       	sbi	0x04, 3	; 4
     f82:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	0e 94 be 04 	call	0x97c	; 0x97c <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f90:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     f94:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	00 90 6a 01 	lds	r0, 0x016A	; 0x80016a <rx_msg>
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <__vector_23+0x398>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <__vector_23+0x394>
     fb0:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <kilo_uid>
     fb4:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <kilo_uid+0x1>
     fb8:	82 23       	and	r24, r18
     fba:	93 23       	and	r25, r19
     fbc:	89 2b       	or	r24, r25
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     fc8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     ff2:	fc 01       	movw	r30, r24
     ff4:	9c 01       	movw	r18, r24
     ff6:	26 5f       	subi	r18, 0xF6	; 246
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     ffe:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1000:	84 27       	eor	r24, r20
    1002:	08 2e       	mov	r0, r24
    1004:	82 95       	swap	r24
    1006:	80 7f       	andi	r24, 0xF0	; 240
    1008:	80 25       	eor	r24, r0
    100a:	09 2e       	mov	r0, r25
    100c:	98 2f       	mov	r25, r24
    100e:	82 95       	swap	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	08 26       	eor	r0, r24
    1014:	86 95       	lsr	r24
    1016:	98 27       	eor	r25, r24
    1018:	89 27       	eor	r24, r25
    101a:	88 0f       	add	r24, r24
    101c:	88 0f       	add	r24, r24
    101e:	88 0f       	add	r24, r24
    1020:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1022:	e2 17       	cp	r30, r18
    1024:	f3 07       	cpc	r31, r19
    1026:	59 f7       	brne	.-42     	; 0xffe <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1028:	08 95       	ret

0000102a <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    102a:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    102c:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    102e:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1030:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <tx_mask>
    or tmpreg1, ddrreg
    1034:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1036:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1038:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    103a:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    103e:	20 30       	cpi	r18, 0x00	; 0
    1040:	29 f0       	breq	.+10     	; 0x104c <message_send+0x22>
    1042:	00 00       	nop
    1044:	25 b1       	in	r18, 0x05	; 5
    1046:	23 2b       	or	r18, r19
    1048:	25 b9       	out	0x05, r18	; 5
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <message_send+0x2a>
    104c:	00 00       	nop
    104e:	00 00       	nop
    1050:	00 00       	nop
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <message_send+0x2a>
    1054:	00 00       	nop
    1056:	00 00       	nop
    1058:	00 00       	nop
    105a:	30 95       	com	r19
    105c:	25 b1       	in	r18, 0x05	; 5
    105e:	23 23       	and	r18, r19
    1060:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1062:	2e ea       	ldi	r18, 0xAE	; 174
    1064:	2a 95       	dec	r18
    1066:	f1 f7       	brne	.-4      	; 0x1064 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1068:	2b ee       	ldi	r18, 0xEB	; 235

0000106a <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    106a:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    106c:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    106e:	0a c0       	rjmp	.+20     	; 0x1084 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1070:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1072:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    com tmpreg2
    1076:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1078:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    107a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    107c:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    107e:	0f be       	out	0x3f, r0	; 63
    return 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret

00001084 <nocollision>:
nocollision:
    nop
    1084:	00 00       	nop
    dec tmpreg1
    1086:	2a 95       	dec	r18
    brne checkcollision
    1088:	81 f7       	brne	.-32     	; 0x106a <checkcollision>

    ldi tmpreg1, 0x01
    108a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    108c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    1090:	20 30       	cpi	r18, 0x00	; 0
    1092:	29 f0       	breq	.+10     	; 0x109e <nocollision+0x1a>
    1094:	00 00       	nop
    1096:	25 b1       	in	r18, 0x05	; 5
    1098:	23 2b       	or	r18, r19
    109a:	25 b9       	out	0x05, r18	; 5
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <nocollision+0x22>
    109e:	00 00       	nop
    10a0:	00 00       	nop
    10a2:	00 00       	nop
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <nocollision+0x22>
    10a6:	00 00       	nop
    10a8:	00 00       	nop
    10aa:	00 00       	nop
    10ac:	30 95       	com	r19
    10ae:	25 b1       	in	r18, 0x05	; 5
    10b0:	23 23       	and	r18, r19
    10b2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10b4:	00 00       	nop
    10b6:	24 e5       	ldi	r18, 0x54	; 84
    10b8:	2a 95       	dec	r18
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10bc:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10be:	8c e0       	ldi	r24, 0x0C	; 12

000010c0 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10c0:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    10c4:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    10c6:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    10c8:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    10ca:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    10cc:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    10d0:	50 e0       	ldi	r21, 0x00	; 0

000010d2 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    10d2:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    10d4:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    10d6:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    10d8:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    10da:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    10de:	20 30       	cpi	r18, 0x00	; 0
    10e0:	29 f0       	breq	.+10     	; 0x10ec <sendbit+0x1a>
    10e2:	00 00       	nop
    10e4:	25 b1       	in	r18, 0x05	; 5
    10e6:	23 2b       	or	r18, r19
    10e8:	25 b9       	out	0x05, r18	; 5
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <sendbit+0x22>
    10ec:	00 00       	nop
    10ee:	00 00       	nop
    10f0:	00 00       	nop
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <sendbit+0x22>
    10f4:	00 00       	nop
    10f6:	00 00       	nop
    10f8:	00 00       	nop
    10fa:	30 95       	com	r19
    10fc:	25 b1       	in	r18, 0x05	; 5
    10fe:	23 23       	and	r18, r19
    1100:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1102:	00 00       	nop
    1104:	21 e5       	ldi	r18, 0x51	; 81
    1106:	2a 95       	dec	r18
    1108:	f1 f7       	brne	.-4      	; 0x1106 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    110a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    110c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    110e:	9a 95       	dec	r25
    brne sendbit
    1110:	01 f7       	brne	.-64     	; 0x10d2 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1112:	8a 95       	dec	r24
    brne sendbyte
    1114:	a9 f6       	brne	.-86     	; 0x10c0 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1116:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1118:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    111a:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    111c:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    111e:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <tx_mask>
    com tmpreg2
    1122:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1124:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1126:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1128:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    112a:	0f be       	out	0x3f, r0	; 63
    return 1
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	08 95       	ret

00001130 <main>:
   }
}
int main() {
  kilo_init();
    1130:	0e 94 e5 00 	call	0x1ca	; 0x1ca <kilo_init>
  kilo_message_rx = message_rx;
    1134:	81 e7       	ldi	r24, 0x71	; 113
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    113c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
  kilo_start(setup, loop);
    1140:	6a ea       	ldi	r22, 0xAA	; 170
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e8       	ldi	r24, 0x80	; 128
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 dd 04 	call	0x9ba	; 0x9ba <kilo_start>
  return 0;
}
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	08 95       	ret

00001152 <__divmodhi4>:
    1152:	97 fb       	bst	r25, 7
    1154:	07 2e       	mov	r0, r23
    1156:	16 f4       	brtc	.+4      	; 0x115c <__divmodhi4+0xa>
    1158:	00 94       	com	r0
    115a:	07 d0       	rcall	.+14     	; 0x116a <__divmodhi4_neg1>
    115c:	77 fd       	sbrc	r23, 7
    115e:	09 d0       	rcall	.+18     	; 0x1172 <__divmodhi4_neg2>
    1160:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__udivmodhi4>
    1164:	07 fc       	sbrc	r0, 7
    1166:	05 d0       	rcall	.+10     	; 0x1172 <__divmodhi4_neg2>
    1168:	3e f4       	brtc	.+14     	; 0x1178 <__divmodhi4_exit>

0000116a <__divmodhi4_neg1>:
    116a:	90 95       	com	r25
    116c:	81 95       	neg	r24
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	08 95       	ret

00001172 <__divmodhi4_neg2>:
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255

00001178 <__divmodhi4_exit>:
    1178:	08 95       	ret

0000117a <__tablejump2__>:
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	05 90       	lpm	r0, Z+
    1180:	f4 91       	lpm	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	09 94       	ijmp

00001186 <__umulhisi3>:
    1186:	a2 9f       	mul	r26, r18
    1188:	b0 01       	movw	r22, r0
    118a:	b3 9f       	mul	r27, r19
    118c:	c0 01       	movw	r24, r0
    118e:	a3 9f       	mul	r26, r19
    1190:	70 0d       	add	r23, r0
    1192:	81 1d       	adc	r24, r1
    1194:	11 24       	eor	r1, r1
    1196:	91 1d       	adc	r25, r1
    1198:	b2 9f       	mul	r27, r18
    119a:	70 0d       	add	r23, r0
    119c:	81 1d       	adc	r24, r1
    119e:	11 24       	eor	r1, r1
    11a0:	91 1d       	adc	r25, r1
    11a2:	08 95       	ret

000011a4 <__udivmodhi4>:
    11a4:	aa 1b       	sub	r26, r26
    11a6:	bb 1b       	sub	r27, r27
    11a8:	51 e1       	ldi	r21, 0x11	; 17
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <__udivmodhi4_ep>

000011ac <__udivmodhi4_loop>:
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	a6 17       	cp	r26, r22
    11b2:	b7 07       	cpc	r27, r23
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <__udivmodhi4_ep>
    11b6:	a6 1b       	sub	r26, r22
    11b8:	b7 0b       	sbc	r27, r23

000011ba <__udivmodhi4_ep>:
    11ba:	88 1f       	adc	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	5a 95       	dec	r21
    11c0:	a9 f7       	brne	.-22     	; 0x11ac <__udivmodhi4_loop>
    11c2:	80 95       	com	r24
    11c4:	90 95       	com	r25
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	08 95       	ret

000011cc <__subsf3>:
    11cc:	50 58       	subi	r21, 0x80	; 128

000011ce <__addsf3>:
    11ce:	bb 27       	eor	r27, r27
    11d0:	aa 27       	eor	r26, r26
    11d2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__addsf3x>
    11d6:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_round>
    11da:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fp_pscA>
    11de:	38 f0       	brcs	.+14     	; 0x11ee <__addsf3+0x20>
    11e0:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_pscB>
    11e4:	20 f0       	brcs	.+8      	; 0x11ee <__addsf3+0x20>
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__addsf3+0x28>
    11e8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <__addsf3+0x24>
    11ec:	26 f4       	brtc	.+8      	; 0x11f6 <__addsf3+0x28>
    11ee:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_nan>
    11f2:	0e f4       	brtc	.+2      	; 0x11f6 <__addsf3+0x28>
    11f4:	e0 95       	com	r30
    11f6:	e7 fb       	bst	r30, 7
    11f8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_inf>

000011fc <__addsf3x>:
    11fc:	e9 2f       	mov	r30, r25
    11fe:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_split3>
    1202:	58 f3       	brcs	.-42     	; 0x11da <__addsf3+0xc>
    1204:	ba 17       	cp	r27, r26
    1206:	62 07       	cpc	r22, r18
    1208:	73 07       	cpc	r23, r19
    120a:	84 07       	cpc	r24, r20
    120c:	95 07       	cpc	r25, r21
    120e:	20 f0       	brcs	.+8      	; 0x1218 <__addsf3x+0x1c>
    1210:	79 f4       	brne	.+30     	; 0x1230 <__addsf3x+0x34>
    1212:	a6 f5       	brtc	.+104    	; 0x127c <__addsf3x+0x80>
    1214:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_zero>
    1218:	0e f4       	brtc	.+2      	; 0x121c <__addsf3x+0x20>
    121a:	e0 95       	com	r30
    121c:	0b 2e       	mov	r0, r27
    121e:	ba 2f       	mov	r27, r26
    1220:	a0 2d       	mov	r26, r0
    1222:	0b 01       	movw	r0, r22
    1224:	b9 01       	movw	r22, r18
    1226:	90 01       	movw	r18, r0
    1228:	0c 01       	movw	r0, r24
    122a:	ca 01       	movw	r24, r20
    122c:	a0 01       	movw	r20, r0
    122e:	11 24       	eor	r1, r1
    1230:	ff 27       	eor	r31, r31
    1232:	59 1b       	sub	r21, r25
    1234:	99 f0       	breq	.+38     	; 0x125c <__addsf3x+0x60>
    1236:	59 3f       	cpi	r21, 0xF9	; 249
    1238:	50 f4       	brcc	.+20     	; 0x124e <__addsf3x+0x52>
    123a:	50 3e       	cpi	r21, 0xE0	; 224
    123c:	68 f1       	brcs	.+90     	; 0x1298 <__addsf3x+0x9c>
    123e:	1a 16       	cp	r1, r26
    1240:	f0 40       	sbci	r31, 0x00	; 0
    1242:	a2 2f       	mov	r26, r18
    1244:	23 2f       	mov	r18, r19
    1246:	34 2f       	mov	r19, r20
    1248:	44 27       	eor	r20, r20
    124a:	58 5f       	subi	r21, 0xF8	; 248
    124c:	f3 cf       	rjmp	.-26     	; 0x1234 <__addsf3x+0x38>
    124e:	46 95       	lsr	r20
    1250:	37 95       	ror	r19
    1252:	27 95       	ror	r18
    1254:	a7 95       	ror	r26
    1256:	f0 40       	sbci	r31, 0x00	; 0
    1258:	53 95       	inc	r21
    125a:	c9 f7       	brne	.-14     	; 0x124e <__addsf3x+0x52>
    125c:	7e f4       	brtc	.+30     	; 0x127c <__addsf3x+0x80>
    125e:	1f 16       	cp	r1, r31
    1260:	ba 0b       	sbc	r27, r26
    1262:	62 0b       	sbc	r22, r18
    1264:	73 0b       	sbc	r23, r19
    1266:	84 0b       	sbc	r24, r20
    1268:	ba f0       	brmi	.+46     	; 0x1298 <__addsf3x+0x9c>
    126a:	91 50       	subi	r25, 0x01	; 1
    126c:	a1 f0       	breq	.+40     	; 0x1296 <__addsf3x+0x9a>
    126e:	ff 0f       	add	r31, r31
    1270:	bb 1f       	adc	r27, r27
    1272:	66 1f       	adc	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	c2 f7       	brpl	.-16     	; 0x126a <__addsf3x+0x6e>
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <__addsf3x+0x9c>
    127c:	ba 0f       	add	r27, r26
    127e:	62 1f       	adc	r22, r18
    1280:	73 1f       	adc	r23, r19
    1282:	84 1f       	adc	r24, r20
    1284:	48 f4       	brcc	.+18     	; 0x1298 <__addsf3x+0x9c>
    1286:	87 95       	ror	r24
    1288:	77 95       	ror	r23
    128a:	67 95       	ror	r22
    128c:	b7 95       	ror	r27
    128e:	f7 95       	ror	r31
    1290:	9e 3f       	cpi	r25, 0xFE	; 254
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__addsf3x+0x9a>
    1294:	b0 cf       	rjmp	.-160    	; 0x11f6 <__addsf3+0x28>
    1296:	93 95       	inc	r25
    1298:	88 0f       	add	r24, r24
    129a:	08 f0       	brcs	.+2      	; 0x129e <__addsf3x+0xa2>
    129c:	99 27       	eor	r25, r25
    129e:	ee 0f       	add	r30, r30
    12a0:	97 95       	ror	r25
    12a2:	87 95       	ror	r24
    12a4:	08 95       	ret

000012a6 <__divsf3>:
    12a6:	0e 94 67 09 	call	0x12ce	; 0x12ce <__divsf3x>
    12aa:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_round>
    12ae:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_pscB>
    12b2:	58 f0       	brcs	.+22     	; 0x12ca <__divsf3+0x24>
    12b4:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fp_pscA>
    12b8:	40 f0       	brcs	.+16     	; 0x12ca <__divsf3+0x24>
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <__divsf3+0x20>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	29 f0       	breq	.+10     	; 0x12ca <__divsf3+0x24>
    12c0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_inf>
    12c4:	51 11       	cpse	r21, r1
    12c6:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_szero>
    12ca:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_nan>

000012ce <__divsf3x>:
    12ce:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_split3>
    12d2:	68 f3       	brcs	.-38     	; 0x12ae <__divsf3+0x8>

000012d4 <__divsf3_pse>:
    12d4:	99 23       	and	r25, r25
    12d6:	b1 f3       	breq	.-20     	; 0x12c4 <__divsf3+0x1e>
    12d8:	55 23       	and	r21, r21
    12da:	91 f3       	breq	.-28     	; 0x12c0 <__divsf3+0x1a>
    12dc:	95 1b       	sub	r25, r21
    12de:	55 0b       	sbc	r21, r21
    12e0:	bb 27       	eor	r27, r27
    12e2:	aa 27       	eor	r26, r26
    12e4:	62 17       	cp	r22, r18
    12e6:	73 07       	cpc	r23, r19
    12e8:	84 07       	cpc	r24, r20
    12ea:	38 f0       	brcs	.+14     	; 0x12fa <__divsf3_pse+0x26>
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	22 0f       	add	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	44 1f       	adc	r20, r20
    12f6:	aa 1f       	adc	r26, r26
    12f8:	a9 f3       	breq	.-22     	; 0x12e4 <__divsf3_pse+0x10>
    12fa:	35 d0       	rcall	.+106    	; 0x1366 <__divsf3_pse+0x92>
    12fc:	0e 2e       	mov	r0, r30
    12fe:	3a f0       	brmi	.+14     	; 0x130e <__divsf3_pse+0x3a>
    1300:	e0 e8       	ldi	r30, 0x80	; 128
    1302:	32 d0       	rcall	.+100    	; 0x1368 <__divsf3_pse+0x94>
    1304:	91 50       	subi	r25, 0x01	; 1
    1306:	50 40       	sbci	r21, 0x00	; 0
    1308:	e6 95       	lsr	r30
    130a:	00 1c       	adc	r0, r0
    130c:	ca f7       	brpl	.-14     	; 0x1300 <__divsf3_pse+0x2c>
    130e:	2b d0       	rcall	.+86     	; 0x1366 <__divsf3_pse+0x92>
    1310:	fe 2f       	mov	r31, r30
    1312:	29 d0       	rcall	.+82     	; 0x1366 <__divsf3_pse+0x92>
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	bb 1f       	adc	r27, r27
    131c:	26 17       	cp	r18, r22
    131e:	37 07       	cpc	r19, r23
    1320:	48 07       	cpc	r20, r24
    1322:	ab 07       	cpc	r26, r27
    1324:	b0 e8       	ldi	r27, 0x80	; 128
    1326:	09 f0       	breq	.+2      	; 0x132a <__divsf3_pse+0x56>
    1328:	bb 0b       	sbc	r27, r27
    132a:	80 2d       	mov	r24, r0
    132c:	bf 01       	movw	r22, r30
    132e:	ff 27       	eor	r31, r31
    1330:	93 58       	subi	r25, 0x83	; 131
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	3a f0       	brmi	.+14     	; 0x1344 <__divsf3_pse+0x70>
    1336:	9e 3f       	cpi	r25, 0xFE	; 254
    1338:	51 05       	cpc	r21, r1
    133a:	78 f0       	brcs	.+30     	; 0x135a <__divsf3_pse+0x86>
    133c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_inf>
    1340:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_szero>
    1344:	5f 3f       	cpi	r21, 0xFF	; 255
    1346:	e4 f3       	brlt	.-8      	; 0x1340 <__divsf3_pse+0x6c>
    1348:	98 3e       	cpi	r25, 0xE8	; 232
    134a:	d4 f3       	brlt	.-12     	; 0x1340 <__divsf3_pse+0x6c>
    134c:	86 95       	lsr	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b7 95       	ror	r27
    1354:	f7 95       	ror	r31
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	c9 f7       	brne	.-14     	; 0x134c <__divsf3_pse+0x78>
    135a:	88 0f       	add	r24, r24
    135c:	91 1d       	adc	r25, r1
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	97 f9       	bld	r25, 7
    1364:	08 95       	ret
    1366:	e1 e0       	ldi	r30, 0x01	; 1
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	bb 1f       	adc	r27, r27
    1370:	62 17       	cp	r22, r18
    1372:	73 07       	cpc	r23, r19
    1374:	84 07       	cpc	r24, r20
    1376:	ba 07       	cpc	r27, r26
    1378:	20 f0       	brcs	.+8      	; 0x1382 <__divsf3_pse+0xae>
    137a:	62 1b       	sub	r22, r18
    137c:	73 0b       	sbc	r23, r19
    137e:	84 0b       	sbc	r24, r20
    1380:	ba 0b       	sbc	r27, r26
    1382:	ee 1f       	adc	r30, r30
    1384:	88 f7       	brcc	.-30     	; 0x1368 <__divsf3_pse+0x94>
    1386:	e0 95       	com	r30
    1388:	08 95       	ret

0000138a <__fixsfsi>:
    138a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fixunssfsi>
    138e:	68 94       	set
    1390:	b1 11       	cpse	r27, r1
    1392:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_szero>
    1396:	08 95       	ret

00001398 <__fixunssfsi>:
    1398:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_splitA>
    139c:	88 f0       	brcs	.+34     	; 0x13c0 <__fixunssfsi+0x28>
    139e:	9f 57       	subi	r25, 0x7F	; 127
    13a0:	98 f0       	brcs	.+38     	; 0x13c8 <__fixunssfsi+0x30>
    13a2:	b9 2f       	mov	r27, r25
    13a4:	99 27       	eor	r25, r25
    13a6:	b7 51       	subi	r27, 0x17	; 23
    13a8:	b0 f0       	brcs	.+44     	; 0x13d6 <__fixunssfsi+0x3e>
    13aa:	e1 f0       	breq	.+56     	; 0x13e4 <__fixunssfsi+0x4c>
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	1a f0       	brmi	.+6      	; 0x13bc <__fixunssfsi+0x24>
    13b6:	ba 95       	dec	r27
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__fixunssfsi+0x14>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <__fixunssfsi+0x4c>
    13bc:	b1 30       	cpi	r27, 0x01	; 1
    13be:	91 f0       	breq	.+36     	; 0x13e4 <__fixunssfsi+0x4c>
    13c0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__fp_zero>
    13c4:	b1 e0       	ldi	r27, 0x01	; 1
    13c6:	08 95       	ret
    13c8:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_zero>
    13cc:	67 2f       	mov	r22, r23
    13ce:	78 2f       	mov	r23, r24
    13d0:	88 27       	eor	r24, r24
    13d2:	b8 5f       	subi	r27, 0xF8	; 248
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <__fixunssfsi+0x4c>
    13d6:	b9 3f       	cpi	r27, 0xF9	; 249
    13d8:	cc f3       	brlt	.-14     	; 0x13cc <__fixunssfsi+0x34>
    13da:	86 95       	lsr	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b3 95       	inc	r27
    13e2:	d9 f7       	brne	.-10     	; 0x13da <__fixunssfsi+0x42>
    13e4:	3e f4       	brtc	.+14     	; 0x13f4 <__fixunssfsi+0x5c>
    13e6:	90 95       	com	r25
    13e8:	80 95       	com	r24
    13ea:	70 95       	com	r23
    13ec:	61 95       	neg	r22
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	08 95       	ret

000013f6 <__floatunsisf>:
    13f6:	e8 94       	clt
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <__floatsisf+0x12>

000013fa <__floatsisf>:
    13fa:	97 fb       	bst	r25, 7
    13fc:	3e f4       	brtc	.+14     	; 0x140c <__floatsisf+0x12>
    13fe:	90 95       	com	r25
    1400:	80 95       	com	r24
    1402:	70 95       	com	r23
    1404:	61 95       	neg	r22
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	99 23       	and	r25, r25
    140e:	a9 f0       	breq	.+42     	; 0x143a <__floatsisf+0x40>
    1410:	f9 2f       	mov	r31, r25
    1412:	96 e9       	ldi	r25, 0x96	; 150
    1414:	bb 27       	eor	r27, r27
    1416:	93 95       	inc	r25
    1418:	f6 95       	lsr	r31
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f1 11       	cpse	r31, r1
    1424:	f8 cf       	rjmp	.-16     	; 0x1416 <__floatsisf+0x1c>
    1426:	fa f4       	brpl	.+62     	; 0x1466 <__floatsisf+0x6c>
    1428:	bb 0f       	add	r27, r27
    142a:	11 f4       	brne	.+4      	; 0x1430 <__floatsisf+0x36>
    142c:	60 ff       	sbrs	r22, 0
    142e:	1b c0       	rjmp	.+54     	; 0x1466 <__floatsisf+0x6c>
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	16 c0       	rjmp	.+44     	; 0x1466 <__floatsisf+0x6c>
    143a:	88 23       	and	r24, r24
    143c:	11 f0       	breq	.+4      	; 0x1442 <__floatsisf+0x48>
    143e:	96 e9       	ldi	r25, 0x96	; 150
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <__floatsisf+0x6a>
    1442:	77 23       	and	r23, r23
    1444:	21 f0       	breq	.+8      	; 0x144e <__floatsisf+0x54>
    1446:	9e e8       	ldi	r25, 0x8E	; 142
    1448:	87 2f       	mov	r24, r23
    144a:	76 2f       	mov	r23, r22
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <__floatsisf+0x5e>
    144e:	66 23       	and	r22, r22
    1450:	71 f0       	breq	.+28     	; 0x146e <__floatsisf+0x74>
    1452:	96 e8       	ldi	r25, 0x86	; 134
    1454:	86 2f       	mov	r24, r22
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	2a f0       	brmi	.+10     	; 0x1466 <__floatsisf+0x6c>
    145c:	9a 95       	dec	r25
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	da f7       	brpl	.-10     	; 0x145c <__floatsisf+0x62>
    1466:	88 0f       	add	r24, r24
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	97 f9       	bld	r25, 7
    146e:	08 95       	ret

00001470 <__fp_inf>:
    1470:	97 f9       	bld	r25, 7
    1472:	9f 67       	ori	r25, 0x7F	; 127
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	08 95       	ret

0000147c <__fp_nan>:
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	80 ec       	ldi	r24, 0xC0	; 192
    1480:	08 95       	ret

00001482 <__fp_pscA>:
    1482:	00 24       	eor	r0, r0
    1484:	0a 94       	dec	r0
    1486:	16 16       	cp	r1, r22
    1488:	17 06       	cpc	r1, r23
    148a:	18 06       	cpc	r1, r24
    148c:	09 06       	cpc	r0, r25
    148e:	08 95       	ret

00001490 <__fp_pscB>:
    1490:	00 24       	eor	r0, r0
    1492:	0a 94       	dec	r0
    1494:	12 16       	cp	r1, r18
    1496:	13 06       	cpc	r1, r19
    1498:	14 06       	cpc	r1, r20
    149a:	05 06       	cpc	r0, r21
    149c:	08 95       	ret

0000149e <__fp_round>:
    149e:	09 2e       	mov	r0, r25
    14a0:	03 94       	inc	r0
    14a2:	00 0c       	add	r0, r0
    14a4:	11 f4       	brne	.+4      	; 0x14aa <__fp_round+0xc>
    14a6:	88 23       	and	r24, r24
    14a8:	52 f0       	brmi	.+20     	; 0x14be <__fp_round+0x20>
    14aa:	bb 0f       	add	r27, r27
    14ac:	40 f4       	brcc	.+16     	; 0x14be <__fp_round+0x20>
    14ae:	bf 2b       	or	r27, r31
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__fp_round+0x18>
    14b2:	60 ff       	sbrs	r22, 0
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <__fp_round+0x20>
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	08 95       	ret

000014c0 <__fp_split3>:
    14c0:	57 fd       	sbrc	r21, 7
    14c2:	90 58       	subi	r25, 0x80	; 128
    14c4:	44 0f       	add	r20, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	59 f0       	breq	.+22     	; 0x14e0 <__fp_splitA+0x10>
    14ca:	5f 3f       	cpi	r21, 0xFF	; 255
    14cc:	71 f0       	breq	.+28     	; 0x14ea <__fp_splitA+0x1a>
    14ce:	47 95       	ror	r20

000014d0 <__fp_splitA>:
    14d0:	88 0f       	add	r24, r24
    14d2:	97 fb       	bst	r25, 7
    14d4:	99 1f       	adc	r25, r25
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <__fp_splitA+0x20>
    14d8:	9f 3f       	cpi	r25, 0xFF	; 255
    14da:	79 f0       	breq	.+30     	; 0x14fa <__fp_splitA+0x2a>
    14dc:	87 95       	ror	r24
    14de:	08 95       	ret
    14e0:	12 16       	cp	r1, r18
    14e2:	13 06       	cpc	r1, r19
    14e4:	14 06       	cpc	r1, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	f2 cf       	rjmp	.-28     	; 0x14ce <__fp_split3+0xe>
    14ea:	46 95       	lsr	r20
    14ec:	f1 df       	rcall	.-30     	; 0x14d0 <__fp_splitA>
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <__fp_splitA+0x30>
    14f0:	16 16       	cp	r1, r22
    14f2:	17 06       	cpc	r1, r23
    14f4:	18 06       	cpc	r1, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	f1 cf       	rjmp	.-30     	; 0x14dc <__fp_splitA+0xc>
    14fa:	86 95       	lsr	r24
    14fc:	71 05       	cpc	r23, r1
    14fe:	61 05       	cpc	r22, r1
    1500:	08 94       	sec
    1502:	08 95       	ret

00001504 <__fp_zero>:
    1504:	e8 94       	clt

00001506 <__fp_szero>:
    1506:	bb 27       	eor	r27, r27
    1508:	66 27       	eor	r22, r22
    150a:	77 27       	eor	r23, r23
    150c:	cb 01       	movw	r24, r22
    150e:	97 f9       	bld	r25, 7
    1510:	08 95       	ret

00001512 <__mulsf3>:
    1512:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__mulsf3x>
    1516:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_round>
    151a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fp_pscA>
    151e:	38 f0       	brcs	.+14     	; 0x152e <__mulsf3+0x1c>
    1520:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_pscB>
    1524:	20 f0       	brcs	.+8      	; 0x152e <__mulsf3+0x1c>
    1526:	95 23       	and	r25, r21
    1528:	11 f0       	breq	.+4      	; 0x152e <__mulsf3+0x1c>
    152a:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_inf>
    152e:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_nan>
    1532:	11 24       	eor	r1, r1
    1534:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_szero>

00001538 <__mulsf3x>:
    1538:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_split3>
    153c:	70 f3       	brcs	.-36     	; 0x151a <__mulsf3+0x8>

0000153e <__mulsf3_pse>:
    153e:	95 9f       	mul	r25, r21
    1540:	c1 f3       	breq	.-16     	; 0x1532 <__mulsf3+0x20>
    1542:	95 0f       	add	r25, r21
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	55 1f       	adc	r21, r21
    1548:	62 9f       	mul	r22, r18
    154a:	f0 01       	movw	r30, r0
    154c:	72 9f       	mul	r23, r18
    154e:	bb 27       	eor	r27, r27
    1550:	f0 0d       	add	r31, r0
    1552:	b1 1d       	adc	r27, r1
    1554:	63 9f       	mul	r22, r19
    1556:	aa 27       	eor	r26, r26
    1558:	f0 0d       	add	r31, r0
    155a:	b1 1d       	adc	r27, r1
    155c:	aa 1f       	adc	r26, r26
    155e:	64 9f       	mul	r22, r20
    1560:	66 27       	eor	r22, r22
    1562:	b0 0d       	add	r27, r0
    1564:	a1 1d       	adc	r26, r1
    1566:	66 1f       	adc	r22, r22
    1568:	82 9f       	mul	r24, r18
    156a:	22 27       	eor	r18, r18
    156c:	b0 0d       	add	r27, r0
    156e:	a1 1d       	adc	r26, r1
    1570:	62 1f       	adc	r22, r18
    1572:	73 9f       	mul	r23, r19
    1574:	b0 0d       	add	r27, r0
    1576:	a1 1d       	adc	r26, r1
    1578:	62 1f       	adc	r22, r18
    157a:	83 9f       	mul	r24, r19
    157c:	a0 0d       	add	r26, r0
    157e:	61 1d       	adc	r22, r1
    1580:	22 1f       	adc	r18, r18
    1582:	74 9f       	mul	r23, r20
    1584:	33 27       	eor	r19, r19
    1586:	a0 0d       	add	r26, r0
    1588:	61 1d       	adc	r22, r1
    158a:	23 1f       	adc	r18, r19
    158c:	84 9f       	mul	r24, r20
    158e:	60 0d       	add	r22, r0
    1590:	21 1d       	adc	r18, r1
    1592:	82 2f       	mov	r24, r18
    1594:	76 2f       	mov	r23, r22
    1596:	6a 2f       	mov	r22, r26
    1598:	11 24       	eor	r1, r1
    159a:	9f 57       	subi	r25, 0x7F	; 127
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	9a f0       	brmi	.+38     	; 0x15c6 <__mulsf3_pse+0x88>
    15a0:	f1 f0       	breq	.+60     	; 0x15de <__mulsf3_pse+0xa0>
    15a2:	88 23       	and	r24, r24
    15a4:	4a f0       	brmi	.+18     	; 0x15b8 <__mulsf3_pse+0x7a>
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	bb 1f       	adc	r27, r27
    15ac:	66 1f       	adc	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	50 40       	sbci	r21, 0x00	; 0
    15b6:	a9 f7       	brne	.-22     	; 0x15a2 <__mulsf3_pse+0x64>
    15b8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ba:	51 05       	cpc	r21, r1
    15bc:	80 f0       	brcs	.+32     	; 0x15de <__mulsf3_pse+0xa0>
    15be:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_inf>
    15c2:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__fp_szero>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	e4 f3       	brlt	.-8      	; 0x15c2 <__mulsf3_pse+0x84>
    15ca:	98 3e       	cpi	r25, 0xE8	; 232
    15cc:	d4 f3       	brlt	.-12     	; 0x15c2 <__mulsf3_pse+0x84>
    15ce:	86 95       	lsr	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	f7 95       	ror	r31
    15d8:	e7 95       	ror	r30
    15da:	9f 5f       	subi	r25, 0xFF	; 255
    15dc:	c1 f7       	brne	.-16     	; 0x15ce <__mulsf3_pse+0x90>
    15de:	fe 2b       	or	r31, r30
    15e0:	88 0f       	add	r24, r24
    15e2:	91 1d       	adc	r25, r1
    15e4:	96 95       	lsr	r25
    15e6:	87 95       	ror	r24
    15e8:	97 f9       	bld	r25, 7
    15ea:	08 95       	ret

000015ec <eeprom_read_byte>:
    15ec:	f9 99       	sbic	0x1f, 1	; 31
    15ee:	fe cf       	rjmp	.-4      	; 0x15ec <eeprom_read_byte>
    15f0:	92 bd       	out	0x22, r25	; 34
    15f2:	81 bd       	out	0x21, r24	; 33
    15f4:	f8 9a       	sbi	0x1f, 0	; 31
    15f6:	99 27       	eor	r25, r25
    15f8:	80 b5       	in	r24, 0x20	; 32
    15fa:	08 95       	ret

000015fc <eeprom_write_byte>:
    15fc:	26 2f       	mov	r18, r22

000015fe <eeprom_write_r18>:
    15fe:	f9 99       	sbic	0x1f, 1	; 31
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <eeprom_write_r18>
    1602:	1f ba       	out	0x1f, r1	; 31
    1604:	92 bd       	out	0x22, r25	; 34
    1606:	81 bd       	out	0x21, r24	; 33
    1608:	20 bd       	out	0x20, r18	; 32
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	fa 9a       	sbi	0x1f, 2	; 31
    1610:	f9 9a       	sbi	0x1f, 1	; 31
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	08 95       	ret

00001618 <_exit>:
    1618:	f8 94       	cli

0000161a <__stop_program>:
    161a:	ff cf       	rjmp	.-2      	; 0x161a <__stop_program>
