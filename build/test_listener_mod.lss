
build/test_listener_mod.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	d8 04       	cpc	r13, r8
      6a:	2f 05       	cpc	r18, r15
      6c:	43 05       	cpc	r20, r3
      6e:	74 05       	cpc	r23, r4
      70:	7b 05       	cpc	r23, r11
      72:	5a 05       	cpc	r21, r10
      74:	7e 05       	cpc	r23, r14
      76:	dc 06       	cpc	r13, r28
      78:	cd 07       	cpc	r28, r29
      7a:	cd 07       	cpc	r28, r29
      7c:	e5 06       	cpc	r14, r21
      7e:	e8 06       	cpc	r14, r24
      80:	eb 06       	cpc	r14, r27
      82:	ed 06       	cpc	r14, r29
      84:	ef 06       	cpc	r14, r31
      86:	f1 06       	cpc	r15, r17
      88:	a2 07       	cpc	r26, r18
      8a:	03 07       	cpc	r16, r19

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ea e4       	ldi	r30, 0x4A	; 74
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	af 37       	cpi	r26, 0x7F	; 127
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <main>
      da:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
#include "kilolib.h"

int new_message = 0, dist = 0;
uint8_t data = 0;
message_t rcvd_message;
void message_rx(message_t *m, distance_measurement_t *d) {
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
      e8:	cb 01       	movw	r24, r22
  data = m->data[0];
      ea:	28 81       	ld	r18, Y
      ec:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
  dist = estimate_distance(d);
      f0:	0e 94 b1 02 	call	0x562	; 0x562 <estimate_distance>
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <dist+0x1>
      fa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <dist>
  rcvd_message = *m;
      fe:	8c e0       	ldi	r24, 0x0C	; 12
     100:	fe 01       	movw	r30, r28
     102:	a5 e1       	ldi	r26, 0x15	; 21
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	01 90       	ld	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	8a 95       	dec	r24
     10c:	e1 f7       	brne	.-8      	; 0x106 <message_rx+0x24>
  new_message = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <new_message+0x1>
     116:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <new_message>
}
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	08 95       	ret

00000120 <loop>:

void setup() {
}
void loop() {
  if (new_message == 1) {
     120:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <new_message>
     124:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <new_message+0x1>
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	71 f5       	brne	.+92     	; 0x188 <loop+0x68>
    new_message = 0;
     12c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <new_message+0x1>
     130:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <new_message>
    if (data == 1) {
     134:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
     138:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <dist>
     13c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <dist+0x1>
     140:	21 30       	cpi	r18, 0x01	; 1
     142:	31 f4       	brne	.+12     	; 0x150 <loop+0x30>
	if (dist <= 50) {
     144:	c3 97       	sbiw	r24, 0x33	; 51
     146:	14 f4       	brge	.+4      	; 0x14c <loop+0x2c>
	  set_color(RGB(0,0,1));
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	05 c0       	rjmp	.+10     	; 0x156 <loop+0x36>
          spinup_motors();
          set_motors(kilo_straight_left, kilo_straight_right);
          delay(2000);
	} else {
	  set_color(RGB(0,1,1));
     14c:	84 e1       	ldi	r24, 0x14	; 20
     14e:	13 c0       	rjmp	.+38     	; 0x176 <loop+0x56>
	}
    } else {
	if (dist <= 50) {
     150:	c3 97       	sbiw	r24, 0x33	; 51
     152:	84 f4       	brge	.+32     	; 0x174 <loop+0x54>
	  set_color(RGB(1,0,0));
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
          spinup_motors();
     15a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     15e:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_right>
     162:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <kilo_straight_left>
     166:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <set_motors>
          delay(2000);
     16a:	80 ed       	ldi	r24, 0xD0	; 208
     16c:	97 e0       	ldi	r25, 0x07	; 7
     16e:	0e 94 c8 01 	call	0x390	; 0x390 <delay>
     172:	03 c0       	rjmp	.+6      	; 0x17a <loop+0x5a>
	} else {
	  set_color(RGB(1,0,1));
     174:	81 e1       	ldi	r24, 0x11	; 17
     176:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
	}
    }
    delay(500);
     17a:	84 ef       	ldi	r24, 0xF4	; 244
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 c8 01 	call	0x390	; 0x390 <delay>
    set_color(RGB(0,0,0));
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0c 94 a5 04 	jmp	0x94a	; 0x94a <set_color>
     188:	08 95       	ret

0000018a <setup>:
     18a:	08 95       	ret

0000018c <loop2>:
  }
}
void loop2() {
     18c:	08 95       	ret

0000018e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     18e:	08 95       	ret

00000190 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	08 95       	ret

00000196 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     196:	08 95       	ret

00000198 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
    cli();
     1a6:	f8 94       	cli

    ports_off();
     1a8:	14 b8       	out	0x04, r1	; 4
     1aa:	17 b8       	out	0x07, r1	; 7
     1ac:	1a b8       	out	0x0a, r1	; 10
     1ae:	15 b8       	out	0x05, r1	; 5
     1b0:	18 b8       	out	0x08, r1	; 8
     1b2:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1b4:	52 9a       	sbi	0x0a, 2	; 10
     1b6:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1b8:	14 bc       	out	0x24, r1	; 36
     1ba:	85 e0       	ldi	r24, 0x05	; 5
     1bc:	85 bd       	out	0x25, r24	; 37
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	87 bd       	out	0x27, r24	; 39
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     1c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     1cc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     1d0:	2f e8       	ldi	r18, 0x8F	; 143
     1d2:	3b e0       	ldi	r19, 0x0B	; 11
     1d4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     1d8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     1dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     1e0:	53 98       	cbi	0x0a, 3	; 10
     1e2:	23 98       	cbi	0x04, 3	; 4
     1e4:	91 ea       	ldi	r25, 0xA1	; 161
     1e6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     1ea:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     1ee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1f2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1f6:	8b e0       	ldi	r24, 0x0B	; 11
     1f8:	80 bf       	out	0x30, r24	; 48
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     206:	83 e8       	ldi	r24, 0x83	; 131
     208:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     20c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     210:	80 64       	ori	r24, 0x40	; 64
     212:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     216:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     21a:	86 fd       	sbrc	r24, 6
     21c:	fc cf       	rjmp	.-8      	; 0x216 <kilo_init+0x7e>
    adc_trigger_high_gain();
     21e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     222:	83 ea       	ldi	r24, 0xA3	; 163
     224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
    if (osccal != 0xFF)
     236:	8f 3f       	cpi	r24, 0xFF	; 255
     238:	11 f0       	breq	.+4      	; 0x23e <kilo_init+0xa6>
        OSCCAL = osccal;
     23a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     23e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>
    rx_leadingbit = 1;
     242:	c1 e0       	ldi	r28, 0x01	; 1
     244:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <rx_leadingbit>
    rx_leadingbyte = 1;
     248:	c0 93 65 01 	sts	0x0165, r28	; 0x800165 <rx_leadingbyte>
    rx_byteindex = 0;
     24c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_byteindex>
    rx_bytevalue = 0;
     250:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     254:	80 e9       	ldi	r24, 0x90	; 144
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     25c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     260:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <tx_mask>
     264:	88 73       	andi	r24, 0x38	; 56
     266:	11 f0       	breq	.+4      	; 0x26c <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     268:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <tx_mask>
    tx_clock = 0;
     26c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock+0x1>
     270:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock>
    tx_increment = 255;
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <tx_increment+0x1>
     27c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <tx_increment>
    kilo_ticks = 0;
     280:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks>
     284:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <kilo_ticks+0x1>
     288:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <kilo_ticks+0x2>
     28c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks+0x3>
    kilo_state = IDLE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
    kilo_tx_period = 3906;
     296:	82 e4       	ldi	r24, 0x42	; 66
     298:	9f e0       	ldi	r25, 0x0F	; 15
     29a:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <kilo_tx_period+0x1>
     29e:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     2a2:	80 eb       	ldi	r24, 0xB0	; 176
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2aa:	c8 2f       	mov	r28, r24
     2ac:	81 eb       	ldi	r24, 0xB1	; 177
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2b4:	2c 2f       	mov	r18, r28
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	38 2b       	or	r19, r24
     2ba:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <kilo_uid+0x1>
     2be:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     2c2:	85 e0       	ldi	r24, 0x05	; 5
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2ca:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2ce:	89 e0       	ldi	r24, 0x09	; 9
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2d6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2da:	8c e0       	ldi	r24, 0x0C	; 12
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2e2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2e6:	84 e1       	ldi	r24, 0x14	; 20
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     2ee:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_right>
     2f2:	09 e4       	ldi	r16, 0x49	; 73
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	52 e2       	ldi	r21, 0x22	; 34
     2f8:	e5 2e       	mov	r14, r21
     2fa:	51 e0       	ldi	r21, 0x01	; 1
     2fc:	f5 2e       	mov	r15, r21
     2fe:	c0 e2       	ldi	r28, 0x20	; 32
     300:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     302:	ce 01       	movw	r24, r28
     304:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     308:	d8 2e       	mov	r13, r24
     30a:	ce 01       	movw	r24, r28
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     312:	2d 2d       	mov	r18, r13
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	32 2f       	mov	r19, r18
     318:	22 27       	eor	r18, r18
     31a:	28 2b       	or	r18, r24
     31c:	f8 01       	movw	r30, r16
     31e:	21 93       	st	Z+, r18
     320:	31 93       	st	Z+, r19
     322:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     324:	ce 01       	movw	r24, r28
     326:	c0 96       	adiw	r24, 0x30	; 48
     328:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     32c:	d8 2e       	mov	r13, r24
     32e:	ce 01       	movw	r24, r28
     330:	c1 96       	adiw	r24, 0x31	; 49
     332:	0e 94 39 0b 	call	0x1672	; 0x1672 <eeprom_read_byte>
     336:	2d 2d       	mov	r18, r13
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	32 2f       	mov	r19, r18
     33c:	22 27       	eor	r18, r18
     33e:	28 2b       	or	r18, r24
     340:	f7 01       	movw	r30, r14
     342:	21 93       	st	Z+, r18
     344:	31 93       	st	Z+, r19
     346:	7f 01       	movw	r14, r30
     348:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     34a:	cc 33       	cpi	r28, 0x3C	; 60
     34c:	d1 05       	cpc	r29, r1
     34e:	c9 f6       	brne	.-78     	; 0x302 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     350:	78 94       	sei
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	08 95       	ret

00000362 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     362:	1f 92       	push	r1
     364:	0f 92       	push	r0
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	0f 92       	push	r0
     36a:	11 24       	eor	r1, r1
     36c:	8f 93       	push	r24
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	a8 95       	wdr
     374:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     378:	88 61       	ori	r24, 0x18	; 24
     37a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     37e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     382:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     384:	8f 91       	pop	r24
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	41 f0       	breq	.+16     	; 0x3a4 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	ef ec       	ldi	r30, 0xCF	; 207
     396:	f7 e0       	ldi	r31, 0x07	; 7
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <delay+0x8>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <delay+0xe>
     39e:	00 00       	nop
        _delay_ms(1);
        ms--;
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f6 cf       	rjmp	.-20     	; 0x390 <delay>
    }
}
     3a4:	08 95       	ret

000003a6 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3aa:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3ae:	08 95       	ret

000003b0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3b6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     3ba:	8f e0       	ldi	r24, 0x0F	; 15
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0c 94 c8 01 	jmp	0x390	; 0x390 <delay>

000003c2 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     3c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rx_busy>
     3c6:	81 11       	cpse	r24, r1
     3c8:	1e c0       	rjmp	.+60     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
        cli();
     3ca:	f8 94       	cli
        adc_setup_conversion(7);
     3cc:	87 e0       	ldi	r24, 0x07	; 7
     3ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3d2:	83 e8       	ldi	r24, 0x83	; 131
     3d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3dc:	80 64       	ori	r24, 0x40	; 64
     3de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e6:	86 fd       	sbrc	r24, 6
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     3ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3f2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3f6:	23 ea       	ldi	r18, 0xA3	; 163
     3f8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     402:	78 94       	sei
     404:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     40a:	08 95       	ret

0000040c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     40c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rx_busy>
     410:	81 11       	cpse	r24, r1
     412:	1e c0       	rjmp	.+60     	; 0x450 <get_temperature+0x44>
        cli();
     414:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     416:	88 ec       	ldi	r24, 0xC8	; 200
     418:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     41c:	87 e8       	ldi	r24, 0x87	; 135
     41e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     422:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     426:	80 64       	ori	r24, 0x40	; 64
     428:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     42c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     430:	86 fd       	sbrc	r24, 6
     432:	fc cf       	rjmp	.-8      	; 0x42c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     434:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     438:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     43c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     440:	23 ea       	ldi	r18, 0xA3	; 163
     442:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     44c:	78 94       	sei
     44e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     454:	08 95       	ret

00000456 <rand_hard>:

uint8_t rand_hard() {
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     45e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     460:	e3 ea       	ldi	r30, 0xA3	; 163
     462:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     464:	c6 e0       	ldi	r28, 0x06	; 6
     466:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     468:	a1 e0       	ldi	r26, 0x01	; 1
     46a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     46c:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     46e:	f8 94       	cli
            adc_setup_conversion(6);
     470:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     474:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     478:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     47c:	40 64       	ori	r20, 0x40	; 64
     47e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     482:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     486:	46 fd       	sbrc	r20, 6
     488:	fc cf       	rjmp	.-8      	; 0x482 <rand_hard+0x2c>
            a = ADCW&0x1;
     48a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     48e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     492:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     494:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     498:	50 64       	ori	r21, 0x40	; 64
     49a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     49e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4a2:	56 fd       	sbrc	r21, 6
     4a4:	fc cf       	rjmp	.-8      	; 0x49e <rand_hard+0x48>
            b = ADCW&0x1;
     4a6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4aa:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     4ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4b2:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b6:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     4ba:	78 94       	sei
            tries++;
     4bc:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     4be:	61 70       	andi	r22, 0x01	; 1
     4c0:	46 17       	cp	r20, r22
     4c2:	51 f0       	breq	.+20     	; 0x4d8 <rand_hard+0x82>
        if (a)
     4c4:	44 23       	and	r20, r20
     4c6:	59 f0       	breq	.+22     	; 0x4de <rand_hard+0x88>
            num |= (1<<i);
     4c8:	ad 01       	movw	r20, r26
     4ca:	02 2e       	mov	r0, r18
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <rand_hard+0x7a>
     4ce:	44 0f       	add	r20, r20
     4d0:	0a 94       	dec	r0
     4d2:	ea f7       	brpl	.-6      	; 0x4ce <rand_hard+0x78>
     4d4:	84 2b       	or	r24, r20
     4d6:	03 c0       	rjmp	.+6      	; 0x4de <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     4d8:	90 38       	cpi	r25, 0x80	; 128
     4da:	49 f6       	brne	.-110    	; 0x46e <rand_hard+0x18>
     4dc:	f3 cf       	rjmp	.-26     	; 0x4c4 <rand_hard+0x6e>
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     4e2:	28 30       	cpi	r18, 0x08	; 8
     4e4:	31 05       	cpc	r19, r1
     4e6:	09 f0       	breq	.+2      	; 0x4ea <rand_hard+0x94>
     4e8:	c1 cf       	rjmp	.-126    	; 0x46c <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     4f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f4:	98 e0       	ldi	r25, 0x08	; 8
     4f6:	89 9f       	mul	r24, r25
     4f8:	90 01       	movw	r18, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <accumulator>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 0f       	add	r24, r25
     506:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <accumulator>
     50a:	82 2f       	mov	r24, r18
     50c:	82 95       	swap	r24
     50e:	86 95       	lsr	r24
     510:	87 70       	andi	r24, 0x07	; 7
     512:	28 27       	eor	r18, r24
     514:	96 95       	lsr	r25
     516:	96 95       	lsr	r25
     518:	82 2f       	mov	r24, r18
     51a:	89 27       	eor	r24, r25
     51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     520:	08 95       	ret

00000522 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     522:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     526:	08 95       	ret

00000528 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     528:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rx_busy>
     52c:	81 11       	cpse	r24, r1
     52e:	16 c0       	rjmp	.+44     	; 0x55c <get_voltage+0x34>
        cli();                                    // disable interrupts
     530:	f8 94       	cli
        adc_setup_conversion(6);
     532:	86 e0       	ldi	r24, 0x06	; 6
     534:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     538:	83 e8       	ldi	r24, 0x83	; 131
     53a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     53e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     542:	80 64       	ori	r24, 0x40	; 64
     544:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     548:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     54c:	86 fd       	sbrc	r24, 6
     54e:	fc cf       	rjmp	.-8      	; 0x548 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     550:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     554:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     558:	78 94       	sei
     55a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     560:	08 95       	ret

00000562 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     562:	2f 92       	push	r2
     564:	3f 92       	push	r3
     566:	4f 92       	push	r4
     568:	5f 92       	push	r5
     56a:	6f 92       	push	r6
     56c:	7f 92       	push	r7
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     588:	fc 01       	movw	r30, r24
     58a:	c2 81       	ldd	r28, Z+2	; 0x02
     58c:	d3 81       	ldd	r29, Z+3	; 0x03
     58e:	c4 38       	cpi	r28, 0x84	; 132
     590:	f3 e0       	ldi	r31, 0x03	; 3
     592:	df 07       	cpc	r29, r31
     594:	0c f0       	brlt	.+2      	; 0x598 <estimate_distance+0x36>
     596:	7e c0       	rjmp	.+252    	; 0x694 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     598:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_irhigh>
     59c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <kilo_irhigh+0x1>
     5a0:	8c 17       	cp	r24, r28
     5a2:	9d 07       	cpc	r25, r29
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <estimate_distance+0x46>
     5a6:	6f c0       	rjmp	.+222    	; 0x686 <estimate_distance+0x124>
     5a8:	e4 e2       	ldi	r30, 0x24	; 36
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     5ae:	81 91       	ld	r24, Z+
     5b0:	91 91       	ld	r25, Z+
     5b2:	8c 17       	cp	r24, r28
     5b4:	9d 07       	cpc	r25, r29
     5b6:	20 f0       	brcs	.+8      	; 0x5c0 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     5b8:	1f 5f       	subi	r17, 0xFF	; 255
     5ba:	1e 30       	cpi	r17, 0x0E	; 14
     5bc:	c1 f7       	brne	.-16     	; 0x5ae <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     5be:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     5c0:	81 2f       	mov	r24, r17
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc 01       	movw	r30, r24
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	ee 5d       	subi	r30, 0xDE	; 222
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	e0 80       	ld	r14, Z
     5d0:	f1 80       	ldd	r15, Z+1	; 0x01
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	fc 01       	movw	r30, r24
     5d8:	e0 5e       	subi	r30, 0xE0	; 224
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	b7 01       	movw	r22, r14
     5e2:	68 1b       	sub	r22, r24
     5e4:	79 0b       	sbc	r23, r25
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     5f6:	4b 01       	movw	r8, r22
     5f8:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5fa:	be 01       	movw	r22, r28
     5fc:	0d 2e       	mov	r0, r29
     5fe:	00 0c       	add	r0, r0
     600:	88 0b       	sbc	r24, r24
     602:	99 0b       	sbc	r25, r25
     604:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__floatsisf>
     608:	2b 01       	movw	r4, r22
     60a:	3c 01       	movw	r6, r24
     60c:	b7 01       	movw	r22, r14
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     616:	6b 01       	movw	r12, r22
     618:	7c 01       	movw	r14, r24
     61a:	61 2f       	mov	r22, r17
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	5f e3       	ldi	r21, 0x3F	; 63
     62e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	a9 01       	movw	r20, r18
     638:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     63c:	a5 01       	movw	r20, r10
     63e:	94 01       	movw	r18, r8
     640:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
     650:	9b 01       	movw	r18, r22
     652:	ac 01       	movw	r20, r24
     654:	c3 01       	movw	r24, r6
     656:	b2 01       	movw	r22, r4
     658:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e2       	ldi	r20, 0x20	; 32
     662:	51 e4       	ldi	r21, 0x41	; 65
     664:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     668:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fixsfsi>
     66c:	7b 01       	movw	r14, r22
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fixsfsi>
     676:	ab 01       	movw	r20, r22
     678:	bc 01       	movw	r22, r24
     67a:	c7 01       	movw	r24, r14
     67c:	ba 01       	movw	r22, r20
     67e:	0e 94 90 08 	call	0x1120	; 0x1120 <__divmodhi4>
     682:	16 2f       	mov	r17, r22
     684:	01 c0       	rjmp	.+2      	; 0x688 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     686:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     688:	cd 3b       	cpi	r28, 0xBD	; 189
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	d8 07       	cpc	r29, r24
     68e:	0c f4       	brge	.+2      	; 0x692 <estimate_distance+0x130>
     690:	ca c0       	rjmp	.+404    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     692:	01 c0       	rjmp	.+2      	; 0x696 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     694:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     696:	f1 01       	movw	r30, r2
     698:	c0 80       	ld	r12, Z
     69a:	d1 80       	ldd	r13, Z+1	; 0x01
     69c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <kilo_irlow>
     6a0:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <kilo_irlow+0x1>
     6a4:	8c 15       	cp	r24, r12
     6a6:	9d 05       	cpc	r25, r13
     6a8:	88 f0       	brcs	.+34     	; 0x6cc <estimate_distance+0x16a>
     6aa:	eb e4       	ldi	r30, 0x4B	; 75
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     6b4:	e1 90       	ld	r14, Z+
     6b6:	f1 90       	ld	r15, Z+
     6b8:	ec 14       	cp	r14, r12
     6ba:	fd 04       	cpc	r15, r13
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <estimate_distance+0x15e>
     6be:	58 c0       	rjmp	.+176    	; 0x770 <estimate_distance+0x20e>
     6c0:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     6c2:	8e 30       	cpi	r24, 0x0E	; 14
     6c4:	91 05       	cpc	r25, r1
     6c6:	a9 f7       	brne	.-22     	; 0x6b2 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     6c8:	0a e5       	ldi	r16, 0x5A	; 90
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     6cc:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     6ce:	1f 3f       	cpi	r17, 0xFF	; 255
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <estimate_distance+0x172>
     6d2:	4b c0       	rjmp	.+150    	; 0x76a <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     6d4:	be 01       	movw	r22, r28
     6d6:	dd 0f       	add	r29, r29
     6d8:	88 0b       	sbc	r24, r24
     6da:	99 0b       	sbc	r25, r25
     6dc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__floatsisf>
     6e0:	6b 01       	movw	r12, r22
     6e2:	7c 01       	movw	r14, r24
     6e4:	61 2f       	mov	r22, r17
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	a7 01       	movw	r20, r14
     6f6:	96 01       	movw	r18, r12
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	81 e6       	ldi	r24, 0x61	; 97
     6fe:	94 e4       	ldi	r25, 0x44	; 68
     700:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c5 01       	movw	r24, r10
     70a:	b4 01       	movw	r22, r8
     70c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
     714:	60 2f       	mov	r22, r16
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     720:	2b 01       	movw	r4, r22
     722:	3c 01       	movw	r6, r24
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	4f e2       	ldi	r20, 0x2F	; 47
     72a:	54 e4       	ldi	r21, 0x44	; 68
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c3 01       	movw	r24, r6
     73a:	b2 01       	movw	r22, r4
     73c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	c5 01       	movw	r24, r10
     746:	b4 01       	movw	r22, r8
     748:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	48 e4       	ldi	r20, 0x48	; 72
     752:	53 e4       	ldi	r21, 0x43	; 67
     754:	0e 94 3a 09 	call	0x1274	; 0x1274 <__divsf3>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	44 e0       	ldi	r20, 0x04	; 4
     75e:	52 e4       	ldi	r21, 0x42	; 66
     760:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     764:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixunssfsi>
     768:	60 c0       	rjmp	.+192    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
        } else {
            return 33 + dist_low;
     76a:	61 e2       	ldi	r22, 0x21	; 33
     76c:	60 0f       	add	r22, r16
     76e:	5d c0       	rjmp	.+186    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	fc 01       	movw	r30, r24
     776:	e9 5b       	subi	r30, 0xB9	; 185
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	b7 01       	movw	r22, r14
     780:	68 1b       	sub	r22, r24
     782:	79 0b       	sbc	r23, r25
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     794:	4b 01       	movw	r8, r22
     796:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     798:	b6 01       	movw	r22, r12
     79a:	dd 0c       	add	r13, r13
     79c:	88 0b       	sbc	r24, r24
     79e:	99 0b       	sbc	r25, r25
     7a0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__floatsisf>
     7a4:	2b 01       	movw	r4, r22
     7a6:	3c 01       	movw	r6, r24
     7a8:	b7 01       	movw	r22, r14
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     7b2:	6b 01       	movw	r12, r22
     7b4:	7c 01       	movw	r14, r24
     7b6:	63 2d       	mov	r22, r3
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__floatunsisf>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	5f e3       	ldi	r21, 0x3F	; 63
     7ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	0e 94 ce 08 	call	0x119c	; 0x119c <__addsf3>
     7d8:	a5 01       	movw	r20, r10
     7da:	94 01       	movw	r18, r8
     7dc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	c3 01       	movw	r24, r6
     7f2:	b2 01       	movw	r22, r4
     7f4:	0e 94 cd 08 	call	0x119a	; 0x119a <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e2       	ldi	r20, 0x20	; 32
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     804:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fixsfsi>
     808:	7b 01       	movw	r14, r22
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fixsfsi>
     812:	ab 01       	movw	r20, r22
     814:	bc 01       	movw	r22, r24
     816:	c7 01       	movw	r24, r14
     818:	ba 01       	movw	r22, r20
     81a:	0e 94 90 08 	call	0x1120	; 0x1120 <__divmodhi4>
     81e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     820:	6f 3f       	cpi	r22, 0xFF	; 255
     822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	54 cf       	rjmp	.-344    	; 0x6ce <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     826:	61 e2       	ldi	r22, 0x21	; 33
     828:	61 0f       	add	r22, r17
    }
}
     82a:	86 2f       	mov	r24, r22
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	7f 90       	pop	r7
     846:	6f 90       	pop	r6
     848:	5f 90       	pop	r5
     84a:	4f 90       	pop	r4
     84c:	3f 90       	pop	r3
     84e:	2f 90       	pop	r2
     850:	08 95       	ret

00000852 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
    tx_clock += tx_increment;
     874:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <tx_clock>
     878:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <tx_clock+0x1>
     87c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <tx_increment>
     880:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <tx_increment+0x1>
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <tx_clock+0x1>
     88c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tx_clock>
    tx_increment = 0xFF;
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <tx_increment+0x1>
     898:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <tx_increment>
    OCR0A = tx_increment;
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     8a0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <kilo_ticks>
     8a4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <kilo_ticks+0x1>
     8a8:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <kilo_ticks+0x2>
     8ac:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <kilo_ticks+0x3>
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	a1 1d       	adc	r26, r1
     8b4:	b1 1d       	adc	r27, r1
     8b6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <kilo_ticks>
     8ba:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <kilo_ticks+0x1>
     8be:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <kilo_ticks+0x2>
     8c2:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     8c6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rx_busy>
     8ca:	81 11       	cpse	r24, r1
     8cc:	2d c0       	rjmp	.+90     	; 0x928 <__stack+0x29>
     8ce:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_tx_period>
     8d2:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <kilo_tx_period+0x1>
     8d6:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <tx_clock>
     8da:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <tx_clock+0x1>
     8de:	82 17       	cp	r24, r18
     8e0:	93 07       	cpc	r25, r19
     8e2:	10 f5       	brcc	.+68     	; 0x928 <__stack+0x29>
     8e4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     8e8:	84 30       	cpi	r24, 0x04	; 4
     8ea:	f1 f4       	brne	.+60     	; 0x928 <__stack+0x29>
        message_t *msg = kilo_message_tx();
     8ec:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     8f0:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     8f4:	09 95       	icall
        if (msg) {
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	b9 f0       	breq	.+46     	; 0x928 <__stack+0x29>
            if (message_send(msg)) {
     8fa:	0e 94 fc 07 	call	0xff8	; 0xff8 <message_send>
     8fe:	88 23       	and	r24, r24
     900:	51 f0       	breq	.+20     	; 0x916 <__stack+0x17>
                kilo_message_tx_success();
     902:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     906:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     90a:	09 95       	icall
                tx_clock = 0;
     90c:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <tx_clock+0x1>
     910:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <tx_clock>
     914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
            } else {
                tx_increment = rand()&0xFF;
     916:	0e 94 29 0b 	call	0x1652	; 0x1652 <rand>
     91a:	9c 01       	movw	r18, r24
     91c:	33 27       	eor	r19, r19
     91e:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <tx_increment+0x1>
     922:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <tx_increment>
                OCR0A = tx_increment;
     926:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     94a:	80 ff       	sbrs	r24, 0
     94c:	02 c0       	rjmp	.+4      	; 0x952 <set_color+0x8>
        DDRD |= (1<<5);
     94e:	55 9a       	sbi	0x0a, 5	; 10
     950:	01 c0       	rjmp	.+2      	; 0x954 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     952:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     954:	81 ff       	sbrs	r24, 1
     956:	02 c0       	rjmp	.+4      	; 0x95c <set_color+0x12>
        DDRD |= (1<<4);
     958:	54 9a       	sbi	0x0a, 4	; 10
     95a:	01 c0       	rjmp	.+2      	; 0x95e <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     95c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     95e:	82 ff       	sbrs	r24, 2
     960:	02 c0       	rjmp	.+4      	; 0x966 <set_color+0x1c>
        DDRC |= (1<<3);
     962:	3b 9a       	sbi	0x07, 3	; 7
     964:	01 c0       	rjmp	.+2      	; 0x968 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     966:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     968:	83 ff       	sbrs	r24, 3
     96a:	02 c0       	rjmp	.+4      	; 0x970 <set_color+0x26>
        DDRC |= (1<<2);
     96c:	3a 9a       	sbi	0x07, 2	; 7
     96e:	01 c0       	rjmp	.+2      	; 0x972 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     970:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     972:	84 ff       	sbrs	r24, 4
     974:	02 c0       	rjmp	.+4      	; 0x97a <set_color+0x30>
        DDRC |= (1<<5);
     976:	3d 9a       	sbi	0x07, 5	; 7
     978:	01 c0       	rjmp	.+2      	; 0x97c <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     97a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     97c:	85 ff       	sbrs	r24, 5
     97e:	02 c0       	rjmp	.+4      	; 0x984 <set_color+0x3a>
        DDRC |= (1<<4);
     980:	3c 9a       	sbi	0x07, 4	; 7
     982:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     984:	3c 98       	cbi	0x07, 4	; 7
     986:	08 95       	ret

00000988 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     988:	8c 01       	movw	r16, r24
     98a:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     98c:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     98e:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     994:	98 e1       	ldi	r25, 0x18	; 24
     996:	c9 2e       	mov	r12, r25
     998:	29 e2       	ldi	r18, 0x29	; 41
     99a:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     99c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <kilo_state>
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	e7 30       	cpi	r30, 0x07	; 7
     9a4:	f1 05       	cpc	r31, r1
     9a6:	d0 f7       	brcc	.-12     	; 0x99c <kilo_start+0x14>
     9a8:	ec 5c       	subi	r30, 0xCC	; 204
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__tablejump2__>
            case SLEEPING:
                cli();
     9b0:	f8 94       	cli
                acomp_off();
     9b2:	80 b7       	in	r24, 0x30	; 48
     9b4:	87 7f       	andi	r24, 0xF7	; 247
     9b6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     9b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9bc:	8f 77       	andi	r24, 0x7F	; 127
     9be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     9c2:	14 b8       	out	0x04, r1	; 4
     9c4:	17 b8       	out	0x07, r1	; 7
     9c6:	1a b8       	out	0x0a, r1	; 10
     9c8:	15 b8       	out	0x05, r1	; 5
     9ca:	18 b8       	out	0x08, r1	; 8
     9cc:	1b b8       	out	0x0b, r1	; 11
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	a8 95       	wdr
     9d4:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     9de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9e2:	80 64       	ori	r24, 0x40	; 64
     9e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9e8:	83 b7       	in	r24, 0x33	; 51
     9ea:	81 7f       	andi	r24, 0xF1	; 241
     9ec:	84 60       	ori	r24, 0x04	; 4
     9ee:	83 bf       	out	0x33, r24	; 51
                cli();
     9f0:	f8 94       	cli
                sleep_enable();
     9f2:	83 b7       	in	r24, 0x33	; 51
     9f4:	81 60       	ori	r24, 0x01	; 1
     9f6:	83 bf       	out	0x33, r24	; 51
                sei();
     9f8:	78 94       	sei
                sleep_cpu();
     9fa:	88 95       	sleep
                sleep_disable();
     9fc:	83 b7       	in	r24, 0x33	; 51
     9fe:	8e 7f       	andi	r24, 0xFE	; 254
     a00:	83 bf       	out	0x33, r24	; 51
                sei();
     a02:	78 94       	sei
                rx_busy = 0;
     a04:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>
                ports_on();
     a08:	52 9a       	sbi	0x0a, 2	; 10
     a0a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a16:	87 e5       	ldi	r24, 0x57	; 87
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <kilo_start+0x92>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <kilo_start+0x98>
     a20:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a22:	80 b7       	in	r24, 0x30	; 48
     a24:	88 61       	ori	r24, 0x18	; 24
     a26:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a28:	8f e3       	ldi	r24, 0x3F	; 63
     a2a:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2e:	ef e1       	ldi	r30, 0x1F	; 31
     a30:	fe e4       	ldi	r31, 0x4E	; 78
     a32:	31 97       	sbiw	r30, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <kilo_start+0xaa>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <kilo_start+0xb0>
     a38:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a3a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <rx_busy>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <kilo_start+0xbc>
     a42:	50 c0       	rjmp	.+160    	; 0xae4 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     a4a:	ff ef       	ldi	r31, 0xFF	; 255
     a4c:	20 e7       	ldi	r18, 0x70	; 112
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	f1 50       	subi	r31, 0x01	; 1
     a52:	20 40       	sbci	r18, 0x00	; 0
     a54:	80 40       	sbci	r24, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <kilo_start+0xc8>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <kilo_start+0xd2>
     a5a:	00 00       	nop
     a5c:	43 c0       	rjmp	.+134    	; 0xae4 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     a64:	ef ec       	ldi	r30, 0xCF	; 207
     a66:	f7 e0       	ldi	r31, 0x07	; 7
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <kilo_start+0xe0>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <kilo_start+0xe6>
     a6e:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     a76:	ff ef       	ldi	r31, 0xFF	; 255
     a78:	21 ee       	ldi	r18, 0xE1	; 225
     a7a:	84 e0       	ldi	r24, 0x04	; 4
     a7c:	f1 50       	subi	r31, 0x01	; 1
     a7e:	20 40       	sbci	r18, 0x00	; 0
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <kilo_start+0xf4>
     a84:	2c c0       	rjmp	.+88     	; 0xade <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a86:	0e 94 94 02 	call	0x528	; 0x528 <get_voltage>
                if(voltage > 682)
     a8a:	8b 3a       	cpi	r24, 0xAB	; 171
     a8c:	e2 e0       	ldi	r30, 0x02	; 2
     a8e:	9e 07       	cpc	r25, r30
     a90:	24 f0       	brlt	.+8      	; 0xa9a <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a92:	8c e0       	ldi	r24, 0x0C	; 12
     a94:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     a98:	81 cf       	rjmp	.-254    	; 0x99c <kilo_start+0x14>
                else if(voltage > 648)
     a9a:	89 38       	cpi	r24, 0x89	; 137
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	9f 07       	cpc	r25, r31
     aa0:	14 f0       	brlt	.+4      	; 0xaa6 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     aa2:	80 e3       	ldi	r24, 0x30	; 48
     aa4:	f7 cf       	rjmp	.-18     	; 0xa94 <kilo_start+0x10c>
                else if(voltage > 614)
     aa6:	87 36       	cpi	r24, 0x67	; 103
     aa8:	92 40       	sbci	r25, 0x02	; 2
     aaa:	14 f0       	brlt	.+4      	; 0xab0 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     aac:	8f e0       	ldi	r24, 0x0F	; 15
     aae:	f2 cf       	rjmp	.-28     	; 0xa94 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	f0 cf       	rjmp	.-32     	; 0xa94 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     ab4:	48 99       	sbic	0x09, 0	; 9
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     abe:	8f ec       	ldi	r24, 0xCF	; 207
     ac0:	97 e0       	ldi	r25, 0x07	; 7
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <kilo_start+0x13a>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <kilo_start+0x140>
     ac8:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	e1 ee       	ldi	r30, 0xE1	; 225
     ad4:	f4 e0       	ldi	r31, 0x04	; 4
     ad6:	91 50       	subi	r25, 0x01	; 1
     ad8:	e0 40       	sbci	r30, 0x00	; 0
     ada:	f0 40       	sbci	r31, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <kilo_start+0x14e>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <kilo_start+0x158>
     ae0:	00 00       	nop
     ae2:	5c cf       	rjmp	.-328    	; 0x99c <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	d6 cf       	rjmp	.-84     	; 0xa94 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     ae8:	d1 11       	cpse	r29, r1
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <kilo_start+0x168>
                    setup();
     aec:	f8 01       	movw	r30, r16
     aee:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     af0:	d0 92 14 01 	sts	0x0114, r13	; 0x800114 <kilo_state>
     af4:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     af6:	f7 01       	movw	r30, r14
     af8:	09 95       	icall
                break;
     afa:	50 cf       	rjmp	.-352    	; 0x99c <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     afc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     b00:	81 11       	cpse	r24, r1
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b04:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b0c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
     b10:	45 cf       	rjmp	.-374    	; 0x99c <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b12:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
     b16:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <prev_motion>
     b1a:	98 17       	cp	r25, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <kilo_start+0x198>
     b1e:	3e cf       	rjmp	.-388    	; 0x99c <kilo_start+0x14>
                        prev_motion = cur_motion;
     b20:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     b24:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b28:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	89 f4       	brne	.+34     	; 0xb52 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b30:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b38:	8f e2       	ldi	r24, 0x2F	; 47
     b3a:	95 e7       	ldi	r25, 0x75	; 117
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <kilo_start+0x1b4>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <kilo_start+0x1ba>
     b42:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b44:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b4c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b50:	25 cf       	rjmp	.-438    	; 0x99c <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b52:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b56:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b5a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	59 f4       	brne	.+22     	; 0xb78 <kilo_start+0x1f0>
     b62:	ef e2       	ldi	r30, 0x2F	; 47
     b64:	f5 e7       	ldi	r31, 0x75	; 117
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <kilo_start+0x1de>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <kilo_start+0x1e4>
     b6c:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b6e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b72:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b76:	10 c0       	rjmp	.+32     	; 0xb98 <kilo_start+0x210>
     b78:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b7c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b80:	8f e2       	ldi	r24, 0x2F	; 47
     b82:	95 e7       	ldi	r25, 0x75	; 117
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <kilo_start+0x1fc>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <kilo_start+0x202>
     b8a:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b8c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <kilo_straight_right>
     b90:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b94:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b98:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b9c:	ff ce       	rjmp	.-514    	; 0x99c <kilo_start+0x14>

00000b9e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
    rx_timer_off();
     bac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bb0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bb4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rx_leadingbit>
    rx_leadingbyte = 1;
     bbe:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <rx_leadingbyte>
    rx_busy = 0;
     bc2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>
    adc_trigger_high_gain();
     bc6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bca:	93 ea       	ldi	r25, 0xA3	; 163
     bcc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bd0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c08:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c0c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c16:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <rx_leadingbit>
     c1a:	88 23       	and	r24, r24
     c1c:	21 f1       	breq	.+72     	; 0xc66 <__vector_23+0x84>
        rx_timer_on();
     c1e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c22:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c26:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c2a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <rx_bytevalue>
        rx_leadingbit = 0;
     c2e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rx_leadingbit>
        if (rx_leadingbyte) {
     c32:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <rx_leadingbyte>
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <__vector_23+0x5a>
     c3a:	af c1       	rjmp	.+862    	; 0xf9a <__vector_23+0x3b8>
            adc_finish_conversion();
     c3c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c40:	86 fd       	sbrc	r24, 6
     c42:	fc cf       	rjmp	.-8      	; 0xc3c <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c44:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c48:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c4c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <rx_dist+0x3>
     c50:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rx_dist+0x2>
            adc_trigger_low_gain();
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c5a:	93 ea       	ldi	r25, 0xA3	; 163
     c5c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c60:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c64:	9a c1       	rjmp	.+820    	; 0xf9a <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c66:	c9 01       	movw	r24, r18
     c68:	87 58       	subi	r24, 0x87	; 135
     c6a:	91 09       	sbc	r25, r1
     c6c:	84 37       	cpi	r24, 0x74	; 116
     c6e:	99 40       	sbci	r25, 0x09	; 9
     c70:	a0 f0       	brcs	.+40     	; 0xc9a <__vector_23+0xb8>
            rx_timer_off();
     c72:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c76:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c7a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c7e:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <rx_leadingbit>
            rx_leadingbyte = 1;
     c82:	40 93 65 01 	sts	0x0165, r20	; 0x800165 <rx_leadingbyte>
            rx_busy = 0;
     c86:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>
            adc_trigger_high_gain();
     c8a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c8e:	83 ea       	ldi	r24, 0xA3	; 163
     c90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c94:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c98:	80 c1       	rjmp	.+768    	; 0xf9a <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c9a:	26 58       	subi	r18, 0x86	; 134
     c9c:	31 09       	sbc	r19, r1
     c9e:	a4 ef       	ldi	r26, 0xF4	; 244
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	0e 94 aa 08 	call	0x1154	; 0x1154 <__umulhisi3>
     ca6:	8c 01       	movw	r16, r24
     ca8:	22 27       	eor	r18, r18
     caa:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     cac:	08 30       	cpi	r16, 0x08	; 8
     cae:	60 f4       	brcc	.+24     	; 0xcc8 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <__vector_23+0xd6>
     cb6:	88 0f       	add	r24, r24
     cb8:	0a 95       	dec	r16
     cba:	ea f7       	brpl	.-6      	; 0xcb6 <__vector_23+0xd4>
     cbc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rx_bytevalue>
     cc0:	89 2b       	or	r24, r25
     cc2:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <rx_bytevalue>
     cc6:	69 c1       	rjmp	.+722    	; 0xf9a <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     cc8:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <rx_leadingbit>
                if (rx_leadingbyte) {
     ccc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <rx_leadingbyte>
     cd0:	88 23       	and	r24, r24
     cd2:	41 f1       	breq	.+80     	; 0xd24 <__vector_23+0x142>
                    adc_finish_conversion();
     cd4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cd8:	86 fd       	sbrc	r24, 6
     cda:	fc cf       	rjmp	.-8      	; 0xcd4 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     cdc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ce0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ce4:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <rx_dist+0x1>
     ce8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_dist>
                    adc_trigger_high_gain();
     cec:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cf0:	83 ea       	ldi	r24, 0xA3	; 163
     cf2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     cfc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rx_bytevalue>
     d00:	99 23       	and	r25, r25
     d02:	59 f0       	breq	.+22     	; 0xd1a <__vector_23+0x138>
                        rx_timer_off();
     d04:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d08:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d0c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d10:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <rx_leadingbyte>
                        rx_busy = 0;
     d14:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>
     d18:	40 c1       	rjmp	.+640    	; 0xf9a <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d1a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <rx_leadingbyte>
                        rx_byteindex = 0;
     d1e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_byteindex>
     d22:	3b c1       	rjmp	.+630    	; 0xf9a <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d24:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_byteindex>
     d28:	e8 2f       	mov	r30, r24
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	e5 59       	subi	r30, 0x95	; 149
     d2e:	fe 4f       	sbci	r31, 0xFE	; 254
     d30:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rx_bytevalue>
     d34:	90 83       	st	Z, r25
                    rx_byteindex++;
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d3c:	8c 30       	cpi	r24, 0x0C	; 12
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__vector_23+0x160>
     d40:	2c c1       	rjmp	.+600    	; 0xf9a <__vector_23+0x3b8>
                        rx_timer_off();
     d42:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d46:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d4a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d4e:	40 93 65 01 	sts	0x0165, r20	; 0x800165 <rx_leadingbyte>
                        rx_busy = 0;
     d52:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d56:	00 91 75 01 	lds	r16, 0x0175	; 0x800175 <rx_msg+0xa>
     d5a:	10 91 76 01 	lds	r17, 0x0176	; 0x800176 <rx_msg+0xb>
     d5e:	8b e6       	ldi	r24, 0x6B	; 107
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <message_crc>
     d66:	08 17       	cp	r16, r24
     d68:	19 07       	cpc	r17, r25
     d6a:	09 f0       	breq	.+2      	; 0xd6e <__vector_23+0x18c>
     d6c:	16 c1       	rjmp	.+556    	; 0xf9a <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d6e:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <rx_msg+0x9>
     d72:	e7 fd       	sbrc	r30, 7
     d74:	0a c0       	rjmp	.+20     	; 0xd8a <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d76:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     d7a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     d7e:	60 e4       	ldi	r22, 0x40	; 64
     d80:	71 e0       	ldi	r23, 0x01	; 1
     d82:	8b e6       	ldi	r24, 0x6B	; 107
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	09 95       	icall
     d88:	08 c1       	rjmp	.+528    	; 0xf9a <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d8a:	88 e7       	ldi	r24, 0x78	; 120
     d8c:	8e 0f       	add	r24, r30
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	30 f0       	brcs	.+12     	; 0xd9e <__vector_23+0x1bc>
        motors_off();
     d92:	53 98       	cbi	0x0a, 3	; 10
     d94:	23 98       	cbi	0x04, 3	; 4
     d96:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d9a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d9e:	8e 2f       	mov	r24, r30
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	e0 58       	subi	r30, 0x80	; 128
     da6:	f1 09       	sbc	r31, r1
     da8:	eb 30       	cpi	r30, 0x0B	; 11
     daa:	f1 05       	cpc	r31, r1
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <__vector_23+0x1ce>
     dae:	f5 c0       	rjmp	.+490    	; 0xf9a <__vector_23+0x3b8>
     db0:	e5 5c       	subi	r30, 0xC5	; 197
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     db8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     dbc:	8d 7f       	andi	r24, 0xFD	; 253
     dbe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     dc2:	16 bc       	out	0x26, r1	; 38
            bootload();
     dc4:	e0 e0       	ldi	r30, 0x00	; 0
     dc6:	f0 e7       	ldi	r31, 0x70	; 112
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     dca:	e0 e0       	ldi	r30, 0x00	; 0
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     dd0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <kilo_state>
     dd4:	e2 c0       	rjmp	.+452    	; 0xf9a <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	b2 c0       	rjmp	.+356    	; 0xf3e <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	b0 c0       	rjmp	.+352    	; 0xf3e <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	ae c0       	rjmp	.+348    	; 0xf3e <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     de2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	09 f4       	brne	.+2      	; 0xdec <__vector_23+0x20a>
     dea:	d7 c0       	rjmp	.+430    	; 0xf9a <__vector_23+0x3b8>
     dec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	09 f4       	brne	.+2      	; 0xdf6 <__vector_23+0x214>
     df4:	d2 c0       	rjmp	.+420    	; 0xf9a <__vector_23+0x3b8>
                motors_on();
     df6:	53 9a       	sbi	0x0a, 3	; 10
     df8:	23 9a       	sbi	0x04, 3	; 4
     dfa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dfe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	9c c0       	rjmp	.+312    	; 0xf3e <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e06:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__vector_23+0x22e>
     e0e:	4b c0       	rjmp	.+150    	; 0xea6 <__vector_23+0x2c4>
     e10:	80 f4       	brcc	.+32     	; 0xe32 <__vector_23+0x250>
     e12:	88 23       	and	r24, r24
     e14:	a9 f0       	breq	.+42     	; 0xe40 <__vector_23+0x25e>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_23+0x23a>
     e1a:	82 c0       	rjmp	.+260    	; 0xf20 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e1c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x1>
     e20:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <rx_msg+0x2>
     e24:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kilo_uid+0x1>
     e28:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_uid>
                    cur_motion = MOVE_STOP;
     e2c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
     e30:	77 c0       	rjmp	.+238    	; 0xf20 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	09 f4       	brne	.+2      	; 0xe38 <__vector_23+0x256>
     e36:	49 c0       	rjmp	.+146    	; 0xeca <__vector_23+0x2e8>
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	09 f4       	brne	.+2      	; 0xe3e <__vector_23+0x25c>
     e3c:	58 c0       	rjmp	.+176    	; 0xeee <__vector_23+0x30c>
     e3e:	70 c0       	rjmp	.+224    	; 0xf20 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e40:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     e44:	86 30       	cpi	r24, 0x06	; 6
     e46:	09 f0       	breq	.+2      	; 0xe4a <__vector_23+0x268>
     e48:	6b c0       	rjmp	.+214    	; 0xf20 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e4a:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_uid>
     e4e:	80 eb       	ldi	r24, 0xB0	; 176
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e56:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_uid+0x1>
     e5a:	81 eb       	ldi	r24, 0xB1	; 177
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e62:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_turn_left>
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e6e:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <kilo_turn_right>
     e72:	89 e0       	ldi	r24, 0x09	; 9
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e7a:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <kilo_straight_left>
     e7e:	8c e0       	ldi	r24, 0x0C	; 12
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e86:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_straight_right>
     e8a:	84 e1       	ldi	r24, 0x14	; 20
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 41 0b 	call	0x1682	; 0x1682 <eeprom_write_byte>
                        motors_off();
     e92:	53 98       	cbi	0x0a, 3	; 10
     e94:	23 98       	cbi	0x04, 3	; 4
     e96:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e9a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
     ea4:	3d c0       	rjmp	.+122    	; 0xf20 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     ea6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
     eaa:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg+0x3>
     eae:	91 30       	cpi	r25, 0x01	; 1
     eb0:	21 f4       	brne	.+8      	; 0xeba <__vector_23+0x2d8>
     eb2:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <kilo_turn_left>
     eb6:	89 17       	cp	r24, r25
     eb8:	99 f1       	breq	.+102    	; 0xf20 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     eba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_LEFT;
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     ec4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_turn_left>
     ec8:	2b c0       	rjmp	.+86     	; 0xf20 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     eca:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
     ece:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x4>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	21 f4       	brne	.+8      	; 0xede <__vector_23+0x2fc>
     ed6:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <kilo_turn_right>
     eda:	89 17       	cp	r24, r25
     edc:	09 f1       	breq	.+66     	; 0xf20 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ede:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     ee8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <kilo_turn_right>
     eec:	19 c0       	rjmp	.+50     	; 0xf20 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     eee:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <cur_motion>
     ef2:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <rx_msg+0x6>
     ef6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_msg+0x5>
     efa:	23 30       	cpi	r18, 0x03	; 3
     efc:	41 f4       	brne	.+16     	; 0xf0e <__vector_23+0x32c>
     efe:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_straight_right>
     f02:	82 13       	cpse	r24, r18
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <__vector_23+0x32c>
     f06:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <kilo_straight_left>
     f0a:	92 17       	cp	r25, r18
     f0c:	49 f0       	breq	.+18     	; 0xf20 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f0e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f12:	23 e0       	ldi	r18, 0x03	; 3
     f14:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f18:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f1c:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f20:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg>
     f24:	88 23       	and	r24, r24
     f26:	c9 f1       	breq	.+114    	; 0xf9a <__vector_23+0x3b8>
     f28:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     f2c:	86 30       	cpi	r24, 0x06	; 6
     f2e:	a9 f1       	breq	.+106    	; 0xf9a <__vector_23+0x3b8>
                motors_on();
     f30:	53 9a       	sbi	0x0a, 3	; 10
     f32:	23 9a       	sbi	0x04, 3	; 4
     f34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f38:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f3c:	86 e0       	ldi	r24, 0x06	; 6
     f3e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
     f42:	2b c0       	rjmp	.+86     	; 0xf9a <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f44:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
     f48:	86 30       	cpi	r24, 0x06	; 6
     f4a:	81 f0       	breq	.+32     	; 0xf6c <__vector_23+0x38a>
                motors_on();
     f4c:	53 9a       	sbi	0x0a, 3	; 10
     f4e:	23 9a       	sbi	0x04, 3	; 4
     f50:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f54:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 a5 04 	call	0x94a	; 0x94a <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f5e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
     f62:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                kilo_state = MOVING;
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	00 90 6b 01 	lds	r0, 0x016B	; 0x80016b <rx_msg>
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <__vector_23+0x398>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <__vector_23+0x394>
     f7e:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <kilo_uid>
     f82:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <kilo_uid+0x1>
     f86:	82 23       	and	r24, r18
     f88:	93 23       	and	r25, r19
     f8a:	89 2b       	or	r24, r25
     f8c:	21 f0       	breq	.+8      	; 0xf96 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cur_motion>
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f96:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
                    }
                }
            }
        }
    }
}
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     fc0:	fc 01       	movw	r30, r24
     fc2:	9c 01       	movw	r18, r24
     fc4:	26 5f       	subi	r18, 0xF6	; 246
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     fcc:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     fce:	84 27       	eor	r24, r20
     fd0:	08 2e       	mov	r0, r24
     fd2:	82 95       	swap	r24
     fd4:	80 7f       	andi	r24, 0xF0	; 240
     fd6:	80 25       	eor	r24, r0
     fd8:	09 2e       	mov	r0, r25
     fda:	98 2f       	mov	r25, r24
     fdc:	82 95       	swap	r24
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	08 26       	eor	r0, r24
     fe2:	86 95       	lsr	r24
     fe4:	98 27       	eor	r25, r24
     fe6:	89 27       	eor	r24, r25
     fe8:	88 0f       	add	r24, r24
     fea:	88 0f       	add	r24, r24
     fec:	88 0f       	add	r24, r24
     fee:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     ff0:	e2 17       	cp	r30, r18
     ff2:	f3 07       	cpc	r31, r19
     ff4:	59 f7       	brne	.-42     	; 0xfcc <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     ff6:	08 95       	ret

00000ff8 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     ff8:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     ffa:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     ffc:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     ffe:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <tx_mask>
    or tmpreg1, ddrreg
    1002:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1004:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1006:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1008:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tx_mask>
    100c:	20 30       	cpi	r18, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <message_send+0x22>
    1010:	00 00       	nop
    1012:	25 b1       	in	r18, 0x05	; 5
    1014:	23 2b       	or	r18, r19
    1016:	25 b9       	out	0x05, r18	; 5
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <message_send+0x2a>
    101a:	00 00       	nop
    101c:	00 00       	nop
    101e:	00 00       	nop
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <message_send+0x2a>
    1022:	00 00       	nop
    1024:	00 00       	nop
    1026:	00 00       	nop
    1028:	30 95       	com	r19
    102a:	25 b1       	in	r18, 0x05	; 5
    102c:	23 23       	and	r18, r19
    102e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1030:	2e ea       	ldi	r18, 0xAE	; 174
    1032:	2a 95       	dec	r18
    1034:	f1 f7       	brne	.-4      	; 0x1032 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1036:	2b ee       	ldi	r18, 0xEB	; 235

00001038 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1038:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    103a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    103e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1040:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tx_mask>
    com tmpreg2
    1044:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1046:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1048:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    104a:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    104c:	0f be       	out	0x3f, r0	; 63
    return 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret

00001052 <nocollision>:
nocollision:
    nop
    1052:	00 00       	nop
    dec tmpreg1
    1054:	2a 95       	dec	r18
    brne checkcollision
    1056:	81 f7       	brne	.-32     	; 0x1038 <checkcollision>

    ldi tmpreg1, 0x01
    1058:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    105a:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tx_mask>
    105e:	20 30       	cpi	r18, 0x00	; 0
    1060:	29 f0       	breq	.+10     	; 0x106c <nocollision+0x1a>
    1062:	00 00       	nop
    1064:	25 b1       	in	r18, 0x05	; 5
    1066:	23 2b       	or	r18, r19
    1068:	25 b9       	out	0x05, r18	; 5
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <nocollision+0x22>
    106c:	00 00       	nop
    106e:	00 00       	nop
    1070:	00 00       	nop
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <nocollision+0x22>
    1074:	00 00       	nop
    1076:	00 00       	nop
    1078:	00 00       	nop
    107a:	30 95       	com	r19
    107c:	25 b1       	in	r18, 0x05	; 5
    107e:	23 23       	and	r18, r19
    1080:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1082:	00 00       	nop
    1084:	24 e5       	ldi	r18, 0x54	; 84
    1086:	2a 95       	dec	r18
    1088:	f1 f7       	brne	.-4      	; 0x1086 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    108a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    108c:	8c e0       	ldi	r24, 0x0C	; 12

0000108e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    108e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1090:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1092:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1094:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1096:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1098:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    109a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    109c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    109e:	50 e0       	ldi	r21, 0x00	; 0

000010a0 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    10a0:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    10a2:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    10a4:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    10a6:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    10a8:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tx_mask>
    10ac:	20 30       	cpi	r18, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <sendbit+0x1a>
    10b0:	00 00       	nop
    10b2:	25 b1       	in	r18, 0x05	; 5
    10b4:	23 2b       	or	r18, r19
    10b6:	25 b9       	out	0x05, r18	; 5
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <sendbit+0x22>
    10ba:	00 00       	nop
    10bc:	00 00       	nop
    10be:	00 00       	nop
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <sendbit+0x22>
    10c2:	00 00       	nop
    10c4:	00 00       	nop
    10c6:	00 00       	nop
    10c8:	30 95       	com	r19
    10ca:	25 b1       	in	r18, 0x05	; 5
    10cc:	23 23       	and	r18, r19
    10ce:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    10d0:	00 00       	nop
    10d2:	21 e5       	ldi	r18, 0x51	; 81
    10d4:	2a 95       	dec	r18
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    10d8:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    10da:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    10dc:	9a 95       	dec	r25
    brne sendbit
    10de:	01 f7       	brne	.-64     	; 0x10a0 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    10e0:	8a 95       	dec	r24
    brne sendbyte
    10e2:	a9 f6       	brne	.-86     	; 0x108e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    10e4:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    10e6:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    10e8:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10ea:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10ec:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tx_mask>
    com tmpreg2
    10f0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10f2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10f4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10f6:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10f8:	0f be       	out	0x3f, r0	; 63
    return 1
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret

000010fe <main>:

}
int main() {
  kilo_init();
    10fe:	0e 94 cc 00 	call	0x198	; 0x198 <kilo_init>
  kilo_message_rx = message_rx;
    1102:	81 e7       	ldi	r24, 0x71	; 113
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    110a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
  kilo_start(setup, loop);
    110e:	60 e9       	ldi	r22, 0x90	; 144
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	85 ec       	ldi	r24, 0xC5	; 197
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 c4 04 	call	0x988	; 0x988 <kilo_start>
  return 0;
}
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	08 95       	ret

00001120 <__divmodhi4>:
    1120:	97 fb       	bst	r25, 7
    1122:	07 2e       	mov	r0, r23
    1124:	16 f4       	brtc	.+4      	; 0x112a <__divmodhi4+0xa>
    1126:	00 94       	com	r0
    1128:	07 d0       	rcall	.+14     	; 0x1138 <__divmodhi4_neg1>
    112a:	77 fd       	sbrc	r23, 7
    112c:	09 d0       	rcall	.+18     	; 0x1140 <__divmodhi4_neg2>
    112e:	0e 94 b9 08 	call	0x1172	; 0x1172 <__udivmodhi4>
    1132:	07 fc       	sbrc	r0, 7
    1134:	05 d0       	rcall	.+10     	; 0x1140 <__divmodhi4_neg2>
    1136:	3e f4       	brtc	.+14     	; 0x1146 <__divmodhi4_exit>

00001138 <__divmodhi4_neg1>:
    1138:	90 95       	com	r25
    113a:	81 95       	neg	r24
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__divmodhi4_neg2>:
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255

00001146 <__divmodhi4_exit>:
    1146:	08 95       	ret

00001148 <__tablejump2__>:
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	05 90       	lpm	r0, Z+
    114e:	f4 91       	lpm	r31, Z
    1150:	e0 2d       	mov	r30, r0
    1152:	09 94       	ijmp

00001154 <__umulhisi3>:
    1154:	a2 9f       	mul	r26, r18
    1156:	b0 01       	movw	r22, r0
    1158:	b3 9f       	mul	r27, r19
    115a:	c0 01       	movw	r24, r0
    115c:	a3 9f       	mul	r26, r19
    115e:	70 0d       	add	r23, r0
    1160:	81 1d       	adc	r24, r1
    1162:	11 24       	eor	r1, r1
    1164:	91 1d       	adc	r25, r1
    1166:	b2 9f       	mul	r27, r18
    1168:	70 0d       	add	r23, r0
    116a:	81 1d       	adc	r24, r1
    116c:	11 24       	eor	r1, r1
    116e:	91 1d       	adc	r25, r1
    1170:	08 95       	ret

00001172 <__udivmodhi4>:
    1172:	aa 1b       	sub	r26, r26
    1174:	bb 1b       	sub	r27, r27
    1176:	51 e1       	ldi	r21, 0x11	; 17
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <__udivmodhi4_ep>

0000117a <__udivmodhi4_loop>:
    117a:	aa 1f       	adc	r26, r26
    117c:	bb 1f       	adc	r27, r27
    117e:	a6 17       	cp	r26, r22
    1180:	b7 07       	cpc	r27, r23
    1182:	10 f0       	brcs	.+4      	; 0x1188 <__udivmodhi4_ep>
    1184:	a6 1b       	sub	r26, r22
    1186:	b7 0b       	sbc	r27, r23

00001188 <__udivmodhi4_ep>:
    1188:	88 1f       	adc	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	5a 95       	dec	r21
    118e:	a9 f7       	brne	.-22     	; 0x117a <__udivmodhi4_loop>
    1190:	80 95       	com	r24
    1192:	90 95       	com	r25
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	08 95       	ret

0000119a <__subsf3>:
    119a:	50 58       	subi	r21, 0x80	; 128

0000119c <__addsf3>:
    119c:	bb 27       	eor	r27, r27
    119e:	aa 27       	eor	r26, r26
    11a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__addsf3x>
    11a4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    11a8:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    11ac:	38 f0       	brcs	.+14     	; 0x11bc <__addsf3+0x20>
    11ae:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    11b2:	20 f0       	brcs	.+8      	; 0x11bc <__addsf3+0x20>
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <__addsf3+0x28>
    11b6:	9f 3f       	cpi	r25, 0xFF	; 255
    11b8:	19 f4       	brne	.+6      	; 0x11c0 <__addsf3+0x24>
    11ba:	26 f4       	brtc	.+8      	; 0x11c4 <__addsf3+0x28>
    11bc:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_nan>
    11c0:	0e f4       	brtc	.+2      	; 0x11c4 <__addsf3+0x28>
    11c2:	e0 95       	com	r30
    11c4:	e7 fb       	bst	r30, 7
    11c6:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_inf>

000011ca <__addsf3x>:
    11ca:	e9 2f       	mov	r30, r25
    11cc:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    11d0:	58 f3       	brcs	.-42     	; 0x11a8 <__addsf3+0xc>
    11d2:	ba 17       	cp	r27, r26
    11d4:	62 07       	cpc	r22, r18
    11d6:	73 07       	cpc	r23, r19
    11d8:	84 07       	cpc	r24, r20
    11da:	95 07       	cpc	r25, r21
    11dc:	20 f0       	brcs	.+8      	; 0x11e6 <__addsf3x+0x1c>
    11de:	79 f4       	brne	.+30     	; 0x11fe <__addsf3x+0x34>
    11e0:	a6 f5       	brtc	.+104    	; 0x124a <__addsf3x+0x80>
    11e2:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_zero>
    11e6:	0e f4       	brtc	.+2      	; 0x11ea <__addsf3x+0x20>
    11e8:	e0 95       	com	r30
    11ea:	0b 2e       	mov	r0, r27
    11ec:	ba 2f       	mov	r27, r26
    11ee:	a0 2d       	mov	r26, r0
    11f0:	0b 01       	movw	r0, r22
    11f2:	b9 01       	movw	r22, r18
    11f4:	90 01       	movw	r18, r0
    11f6:	0c 01       	movw	r0, r24
    11f8:	ca 01       	movw	r24, r20
    11fa:	a0 01       	movw	r20, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	ff 27       	eor	r31, r31
    1200:	59 1b       	sub	r21, r25
    1202:	99 f0       	breq	.+38     	; 0x122a <__addsf3x+0x60>
    1204:	59 3f       	cpi	r21, 0xF9	; 249
    1206:	50 f4       	brcc	.+20     	; 0x121c <__addsf3x+0x52>
    1208:	50 3e       	cpi	r21, 0xE0	; 224
    120a:	68 f1       	brcs	.+90     	; 0x1266 <__addsf3x+0x9c>
    120c:	1a 16       	cp	r1, r26
    120e:	f0 40       	sbci	r31, 0x00	; 0
    1210:	a2 2f       	mov	r26, r18
    1212:	23 2f       	mov	r18, r19
    1214:	34 2f       	mov	r19, r20
    1216:	44 27       	eor	r20, r20
    1218:	58 5f       	subi	r21, 0xF8	; 248
    121a:	f3 cf       	rjmp	.-26     	; 0x1202 <__addsf3x+0x38>
    121c:	46 95       	lsr	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	a7 95       	ror	r26
    1224:	f0 40       	sbci	r31, 0x00	; 0
    1226:	53 95       	inc	r21
    1228:	c9 f7       	brne	.-14     	; 0x121c <__addsf3x+0x52>
    122a:	7e f4       	brtc	.+30     	; 0x124a <__addsf3x+0x80>
    122c:	1f 16       	cp	r1, r31
    122e:	ba 0b       	sbc	r27, r26
    1230:	62 0b       	sbc	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba f0       	brmi	.+46     	; 0x1266 <__addsf3x+0x9c>
    1238:	91 50       	subi	r25, 0x01	; 1
    123a:	a1 f0       	breq	.+40     	; 0x1264 <__addsf3x+0x9a>
    123c:	ff 0f       	add	r31, r31
    123e:	bb 1f       	adc	r27, r27
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	c2 f7       	brpl	.-16     	; 0x1238 <__addsf3x+0x6e>
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <__addsf3x+0x9c>
    124a:	ba 0f       	add	r27, r26
    124c:	62 1f       	adc	r22, r18
    124e:	73 1f       	adc	r23, r19
    1250:	84 1f       	adc	r24, r20
    1252:	48 f4       	brcc	.+18     	; 0x1266 <__addsf3x+0x9c>
    1254:	87 95       	ror	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	b7 95       	ror	r27
    125c:	f7 95       	ror	r31
    125e:	9e 3f       	cpi	r25, 0xFE	; 254
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__addsf3x+0x9a>
    1262:	b0 cf       	rjmp	.-160    	; 0x11c4 <__addsf3+0x28>
    1264:	93 95       	inc	r25
    1266:	88 0f       	add	r24, r24
    1268:	08 f0       	brcs	.+2      	; 0x126c <__addsf3x+0xa2>
    126a:	99 27       	eor	r25, r25
    126c:	ee 0f       	add	r30, r30
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	08 95       	ret

00001274 <__divsf3>:
    1274:	0e 94 4e 09 	call	0x129c	; 0x129c <__divsf3x>
    1278:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    127c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    1280:	58 f0       	brcs	.+22     	; 0x1298 <__divsf3+0x24>
    1282:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    1286:	40 f0       	brcs	.+16     	; 0x1298 <__divsf3+0x24>
    1288:	29 f4       	brne	.+10     	; 0x1294 <__divsf3+0x20>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	29 f0       	breq	.+10     	; 0x1298 <__divsf3+0x24>
    128e:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_inf>
    1292:	51 11       	cpse	r21, r1
    1294:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    1298:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_nan>

0000129c <__divsf3x>:
    129c:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    12a0:	68 f3       	brcs	.-38     	; 0x127c <__divsf3+0x8>

000012a2 <__divsf3_pse>:
    12a2:	99 23       	and	r25, r25
    12a4:	b1 f3       	breq	.-20     	; 0x1292 <__divsf3+0x1e>
    12a6:	55 23       	and	r21, r21
    12a8:	91 f3       	breq	.-28     	; 0x128e <__divsf3+0x1a>
    12aa:	95 1b       	sub	r25, r21
    12ac:	55 0b       	sbc	r21, r21
    12ae:	bb 27       	eor	r27, r27
    12b0:	aa 27       	eor	r26, r26
    12b2:	62 17       	cp	r22, r18
    12b4:	73 07       	cpc	r23, r19
    12b6:	84 07       	cpc	r24, r20
    12b8:	38 f0       	brcs	.+14     	; 0x12c8 <__divsf3_pse+0x26>
    12ba:	9f 5f       	subi	r25, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	22 0f       	add	r18, r18
    12c0:	33 1f       	adc	r19, r19
    12c2:	44 1f       	adc	r20, r20
    12c4:	aa 1f       	adc	r26, r26
    12c6:	a9 f3       	breq	.-22     	; 0x12b2 <__divsf3_pse+0x10>
    12c8:	35 d0       	rcall	.+106    	; 0x1334 <__divsf3_pse+0x92>
    12ca:	0e 2e       	mov	r0, r30
    12cc:	3a f0       	brmi	.+14     	; 0x12dc <__divsf3_pse+0x3a>
    12ce:	e0 e8       	ldi	r30, 0x80	; 128
    12d0:	32 d0       	rcall	.+100    	; 0x1336 <__divsf3_pse+0x94>
    12d2:	91 50       	subi	r25, 0x01	; 1
    12d4:	50 40       	sbci	r21, 0x00	; 0
    12d6:	e6 95       	lsr	r30
    12d8:	00 1c       	adc	r0, r0
    12da:	ca f7       	brpl	.-14     	; 0x12ce <__divsf3_pse+0x2c>
    12dc:	2b d0       	rcall	.+86     	; 0x1334 <__divsf3_pse+0x92>
    12de:	fe 2f       	mov	r31, r30
    12e0:	29 d0       	rcall	.+82     	; 0x1334 <__divsf3_pse+0x92>
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	bb 1f       	adc	r27, r27
    12ea:	26 17       	cp	r18, r22
    12ec:	37 07       	cpc	r19, r23
    12ee:	48 07       	cpc	r20, r24
    12f0:	ab 07       	cpc	r26, r27
    12f2:	b0 e8       	ldi	r27, 0x80	; 128
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <__divsf3_pse+0x56>
    12f6:	bb 0b       	sbc	r27, r27
    12f8:	80 2d       	mov	r24, r0
    12fa:	bf 01       	movw	r22, r30
    12fc:	ff 27       	eor	r31, r31
    12fe:	93 58       	subi	r25, 0x83	; 131
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	3a f0       	brmi	.+14     	; 0x1312 <__divsf3_pse+0x70>
    1304:	9e 3f       	cpi	r25, 0xFE	; 254
    1306:	51 05       	cpc	r21, r1
    1308:	78 f0       	brcs	.+30     	; 0x1328 <__divsf3_pse+0x86>
    130a:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_inf>
    130e:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    1312:	5f 3f       	cpi	r21, 0xFF	; 255
    1314:	e4 f3       	brlt	.-8      	; 0x130e <__divsf3_pse+0x6c>
    1316:	98 3e       	cpi	r25, 0xE8	; 232
    1318:	d4 f3       	brlt	.-12     	; 0x130e <__divsf3_pse+0x6c>
    131a:	86 95       	lsr	r24
    131c:	77 95       	ror	r23
    131e:	67 95       	ror	r22
    1320:	b7 95       	ror	r27
    1322:	f7 95       	ror	r31
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	c9 f7       	brne	.-14     	; 0x131a <__divsf3_pse+0x78>
    1328:	88 0f       	add	r24, r24
    132a:	91 1d       	adc	r25, r1
    132c:	96 95       	lsr	r25
    132e:	87 95       	ror	r24
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret
    1334:	e1 e0       	ldi	r30, 0x01	; 1
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	bb 1f       	adc	r27, r27
    133e:	62 17       	cp	r22, r18
    1340:	73 07       	cpc	r23, r19
    1342:	84 07       	cpc	r24, r20
    1344:	ba 07       	cpc	r27, r26
    1346:	20 f0       	brcs	.+8      	; 0x1350 <__divsf3_pse+0xae>
    1348:	62 1b       	sub	r22, r18
    134a:	73 0b       	sbc	r23, r19
    134c:	84 0b       	sbc	r24, r20
    134e:	ba 0b       	sbc	r27, r26
    1350:	ee 1f       	adc	r30, r30
    1352:	88 f7       	brcc	.-30     	; 0x1336 <__divsf3_pse+0x94>
    1354:	e0 95       	com	r30
    1356:	08 95       	ret

00001358 <__fixsfsi>:
    1358:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixunssfsi>
    135c:	68 94       	set
    135e:	b1 11       	cpse	r27, r1
    1360:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    1364:	08 95       	ret

00001366 <__fixunssfsi>:
    1366:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_splitA>
    136a:	88 f0       	brcs	.+34     	; 0x138e <__fixunssfsi+0x28>
    136c:	9f 57       	subi	r25, 0x7F	; 127
    136e:	98 f0       	brcs	.+38     	; 0x1396 <__fixunssfsi+0x30>
    1370:	b9 2f       	mov	r27, r25
    1372:	99 27       	eor	r25, r25
    1374:	b7 51       	subi	r27, 0x17	; 23
    1376:	b0 f0       	brcs	.+44     	; 0x13a4 <__fixunssfsi+0x3e>
    1378:	e1 f0       	breq	.+56     	; 0x13b2 <__fixunssfsi+0x4c>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	88 1f       	adc	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	1a f0       	brmi	.+6      	; 0x138a <__fixunssfsi+0x24>
    1384:	ba 95       	dec	r27
    1386:	c9 f7       	brne	.-14     	; 0x137a <__fixunssfsi+0x14>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <__fixunssfsi+0x4c>
    138a:	b1 30       	cpi	r27, 0x01	; 1
    138c:	91 f0       	breq	.+36     	; 0x13b2 <__fixunssfsi+0x4c>
    138e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_zero>
    1392:	b1 e0       	ldi	r27, 0x01	; 1
    1394:	08 95       	ret
    1396:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_zero>
    139a:	67 2f       	mov	r22, r23
    139c:	78 2f       	mov	r23, r24
    139e:	88 27       	eor	r24, r24
    13a0:	b8 5f       	subi	r27, 0xF8	; 248
    13a2:	39 f0       	breq	.+14     	; 0x13b2 <__fixunssfsi+0x4c>
    13a4:	b9 3f       	cpi	r27, 0xF9	; 249
    13a6:	cc f3       	brlt	.-14     	; 0x139a <__fixunssfsi+0x34>
    13a8:	86 95       	lsr	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b3 95       	inc	r27
    13b0:	d9 f7       	brne	.-10     	; 0x13a8 <__fixunssfsi+0x42>
    13b2:	3e f4       	brtc	.+14     	; 0x13c2 <__fixunssfsi+0x5c>
    13b4:	90 95       	com	r25
    13b6:	80 95       	com	r24
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	08 95       	ret

000013c4 <__floatunsisf>:
    13c4:	e8 94       	clt
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <__floatsisf+0x12>

000013c8 <__floatsisf>:
    13c8:	97 fb       	bst	r25, 7
    13ca:	3e f4       	brtc	.+14     	; 0x13da <__floatsisf+0x12>
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	99 23       	and	r25, r25
    13dc:	a9 f0       	breq	.+42     	; 0x1408 <__floatsisf+0x40>
    13de:	f9 2f       	mov	r31, r25
    13e0:	96 e9       	ldi	r25, 0x96	; 150
    13e2:	bb 27       	eor	r27, r27
    13e4:	93 95       	inc	r25
    13e6:	f6 95       	lsr	r31
    13e8:	87 95       	ror	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	f1 11       	cpse	r31, r1
    13f2:	f8 cf       	rjmp	.-16     	; 0x13e4 <__floatsisf+0x1c>
    13f4:	fa f4       	brpl	.+62     	; 0x1434 <__floatsisf+0x6c>
    13f6:	bb 0f       	add	r27, r27
    13f8:	11 f4       	brne	.+4      	; 0x13fe <__floatsisf+0x36>
    13fa:	60 ff       	sbrs	r22, 0
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <__floatsisf+0x6c>
    13fe:	6f 5f       	subi	r22, 0xFF	; 255
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <__floatsisf+0x6c>
    1408:	88 23       	and	r24, r24
    140a:	11 f0       	breq	.+4      	; 0x1410 <__floatsisf+0x48>
    140c:	96 e9       	ldi	r25, 0x96	; 150
    140e:	11 c0       	rjmp	.+34     	; 0x1432 <__floatsisf+0x6a>
    1410:	77 23       	and	r23, r23
    1412:	21 f0       	breq	.+8      	; 0x141c <__floatsisf+0x54>
    1414:	9e e8       	ldi	r25, 0x8E	; 142
    1416:	87 2f       	mov	r24, r23
    1418:	76 2f       	mov	r23, r22
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <__floatsisf+0x5e>
    141c:	66 23       	and	r22, r22
    141e:	71 f0       	breq	.+28     	; 0x143c <__floatsisf+0x74>
    1420:	96 e8       	ldi	r25, 0x86	; 134
    1422:	86 2f       	mov	r24, r22
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	2a f0       	brmi	.+10     	; 0x1434 <__floatsisf+0x6c>
    142a:	9a 95       	dec	r25
    142c:	66 0f       	add	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	da f7       	brpl	.-10     	; 0x142a <__floatsisf+0x62>
    1434:	88 0f       	add	r24, r24
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	97 f9       	bld	r25, 7
    143c:	08 95       	ret

0000143e <__fp_inf>:
    143e:	97 f9       	bld	r25, 7
    1440:	9f 67       	ori	r25, 0x7F	; 127
    1442:	80 e8       	ldi	r24, 0x80	; 128
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	08 95       	ret

0000144a <__fp_nan>:
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	80 ec       	ldi	r24, 0xC0	; 192
    144e:	08 95       	ret

00001450 <__fp_pscA>:
    1450:	00 24       	eor	r0, r0
    1452:	0a 94       	dec	r0
    1454:	16 16       	cp	r1, r22
    1456:	17 06       	cpc	r1, r23
    1458:	18 06       	cpc	r1, r24
    145a:	09 06       	cpc	r0, r25
    145c:	08 95       	ret

0000145e <__fp_pscB>:
    145e:	00 24       	eor	r0, r0
    1460:	0a 94       	dec	r0
    1462:	12 16       	cp	r1, r18
    1464:	13 06       	cpc	r1, r19
    1466:	14 06       	cpc	r1, r20
    1468:	05 06       	cpc	r0, r21
    146a:	08 95       	ret

0000146c <__fp_round>:
    146c:	09 2e       	mov	r0, r25
    146e:	03 94       	inc	r0
    1470:	00 0c       	add	r0, r0
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0xc>
    1474:	88 23       	and	r24, r24
    1476:	52 f0       	brmi	.+20     	; 0x148c <__fp_round+0x20>
    1478:	bb 0f       	add	r27, r27
    147a:	40 f4       	brcc	.+16     	; 0x148c <__fp_round+0x20>
    147c:	bf 2b       	or	r27, r31
    147e:	11 f4       	brne	.+4      	; 0x1484 <__fp_round+0x18>
    1480:	60 ff       	sbrs	r22, 0
    1482:	04 c0       	rjmp	.+8      	; 0x148c <__fp_round+0x20>
    1484:	6f 5f       	subi	r22, 0xFF	; 255
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__fp_split3>:
    148e:	57 fd       	sbrc	r21, 7
    1490:	90 58       	subi	r25, 0x80	; 128
    1492:	44 0f       	add	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	59 f0       	breq	.+22     	; 0x14ae <__fp_splitA+0x10>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	71 f0       	breq	.+28     	; 0x14b8 <__fp_splitA+0x1a>
    149c:	47 95       	ror	r20

0000149e <__fp_splitA>:
    149e:	88 0f       	add	r24, r24
    14a0:	97 fb       	bst	r25, 7
    14a2:	99 1f       	adc	r25, r25
    14a4:	61 f0       	breq	.+24     	; 0x14be <__fp_splitA+0x20>
    14a6:	9f 3f       	cpi	r25, 0xFF	; 255
    14a8:	79 f0       	breq	.+30     	; 0x14c8 <__fp_splitA+0x2a>
    14aa:	87 95       	ror	r24
    14ac:	08 95       	ret
    14ae:	12 16       	cp	r1, r18
    14b0:	13 06       	cpc	r1, r19
    14b2:	14 06       	cpc	r1, r20
    14b4:	55 1f       	adc	r21, r21
    14b6:	f2 cf       	rjmp	.-28     	; 0x149c <__fp_split3+0xe>
    14b8:	46 95       	lsr	r20
    14ba:	f1 df       	rcall	.-30     	; 0x149e <__fp_splitA>
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <__fp_splitA+0x30>
    14be:	16 16       	cp	r1, r22
    14c0:	17 06       	cpc	r1, r23
    14c2:	18 06       	cpc	r1, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	f1 cf       	rjmp	.-30     	; 0x14aa <__fp_splitA+0xc>
    14c8:	86 95       	lsr	r24
    14ca:	71 05       	cpc	r23, r1
    14cc:	61 05       	cpc	r22, r1
    14ce:	08 94       	sec
    14d0:	08 95       	ret

000014d2 <__fp_zero>:
    14d2:	e8 94       	clt

000014d4 <__fp_szero>:
    14d4:	bb 27       	eor	r27, r27
    14d6:	66 27       	eor	r22, r22
    14d8:	77 27       	eor	r23, r23
    14da:	cb 01       	movw	r24, r22
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <__mulsf3>:
    14e0:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulsf3x>
    14e4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_round>
    14e8:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_pscA>
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <__mulsf3+0x1c>
    14ee:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fp_pscB>
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__mulsf3+0x1c>
    14f4:	95 23       	and	r25, r21
    14f6:	11 f0       	breq	.+4      	; 0x14fc <__mulsf3+0x1c>
    14f8:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_inf>
    14fc:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__fp_nan>
    1500:	11 24       	eor	r1, r1
    1502:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>

00001506 <__mulsf3x>:
    1506:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_split3>
    150a:	70 f3       	brcs	.-36     	; 0x14e8 <__mulsf3+0x8>

0000150c <__mulsf3_pse>:
    150c:	95 9f       	mul	r25, r21
    150e:	c1 f3       	breq	.-16     	; 0x1500 <__mulsf3+0x20>
    1510:	95 0f       	add	r25, r21
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	55 1f       	adc	r21, r21
    1516:	62 9f       	mul	r22, r18
    1518:	f0 01       	movw	r30, r0
    151a:	72 9f       	mul	r23, r18
    151c:	bb 27       	eor	r27, r27
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	63 9f       	mul	r22, r19
    1524:	aa 27       	eor	r26, r26
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	aa 1f       	adc	r26, r26
    152c:	64 9f       	mul	r22, r20
    152e:	66 27       	eor	r22, r22
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	66 1f       	adc	r22, r22
    1536:	82 9f       	mul	r24, r18
    1538:	22 27       	eor	r18, r18
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	73 9f       	mul	r23, r19
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	83 9f       	mul	r24, r19
    154a:	a0 0d       	add	r26, r0
    154c:	61 1d       	adc	r22, r1
    154e:	22 1f       	adc	r18, r18
    1550:	74 9f       	mul	r23, r20
    1552:	33 27       	eor	r19, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	23 1f       	adc	r18, r19
    155a:	84 9f       	mul	r24, r20
    155c:	60 0d       	add	r22, r0
    155e:	21 1d       	adc	r18, r1
    1560:	82 2f       	mov	r24, r18
    1562:	76 2f       	mov	r23, r22
    1564:	6a 2f       	mov	r22, r26
    1566:	11 24       	eor	r1, r1
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	9a f0       	brmi	.+38     	; 0x1594 <__mulsf3_pse+0x88>
    156e:	f1 f0       	breq	.+60     	; 0x15ac <__mulsf3_pse+0xa0>
    1570:	88 23       	and	r24, r24
    1572:	4a f0       	brmi	.+18     	; 0x1586 <__mulsf3_pse+0x7a>
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	bb 1f       	adc	r27, r27
    157a:	66 1f       	adc	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__mulsf3_pse+0x64>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	80 f0       	brcs	.+32     	; 0x15ac <__mulsf3_pse+0xa0>
    158c:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_inf>
    1590:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__fp_szero>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	e4 f3       	brlt	.-8      	; 0x1590 <__mulsf3_pse+0x84>
    1598:	98 3e       	cpi	r25, 0xE8	; 232
    159a:	d4 f3       	brlt	.-12     	; 0x1590 <__mulsf3_pse+0x84>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f7 95       	ror	r31
    15a6:	e7 95       	ror	r30
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	c1 f7       	brne	.-16     	; 0x159c <__mulsf3_pse+0x90>
    15ac:	fe 2b       	or	r31, r30
    15ae:	88 0f       	add	r24, r24
    15b0:	91 1d       	adc	r25, r1
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret

000015ba <do_rand>:
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
    15d0:	68 81       	ld	r22, Y
    15d2:	79 81       	ldd	r23, Y+1	; 0x01
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	61 15       	cp	r22, r1
    15da:	71 05       	cpc	r23, r1
    15dc:	81 05       	cpc	r24, r1
    15de:	91 05       	cpc	r25, r1
    15e0:	21 f4       	brne	.+8      	; 0x15ea <do_rand+0x30>
    15e2:	64 e2       	ldi	r22, 0x24	; 36
    15e4:	79 ed       	ldi	r23, 0xD9	; 217
    15e6:	8b e5       	ldi	r24, 0x5B	; 91
    15e8:	97 e0       	ldi	r25, 0x07	; 7
    15ea:	2d e1       	ldi	r18, 0x1D	; 29
    15ec:	33 ef       	ldi	r19, 0xF3	; 243
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 4f 0b 	call	0x169e	; 0x169e <__divmodsi4>
    15f6:	49 01       	movw	r8, r18
    15f8:	5a 01       	movw	r10, r20
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	a7 ea       	ldi	r26, 0xA7	; 167
    1600:	b1 e4       	ldi	r27, 0x41	; 65
    1602:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__muluhisi3>
    1606:	6b 01       	movw	r12, r22
    1608:	7c 01       	movw	r14, r24
    160a:	ac ee       	ldi	r26, 0xEC	; 236
    160c:	b4 ef       	ldi	r27, 0xF4	; 244
    160e:	a5 01       	movw	r20, r10
    1610:	94 01       	movw	r18, r8
    1612:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulohisi3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8c 0d       	add	r24, r12
    161c:	9d 1d       	adc	r25, r13
    161e:	ae 1d       	adc	r26, r14
    1620:	bf 1d       	adc	r27, r15
    1622:	b7 ff       	sbrs	r27, 7
    1624:	03 c0       	rjmp	.+6      	; 0x162c <do_rand+0x72>
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	a1 09       	sbc	r26, r1
    162a:	b0 48       	sbci	r27, 0x80	; 128
    162c:	88 83       	st	Y, r24
    162e:	99 83       	std	Y+1, r25	; 0x01
    1630:	aa 83       	std	Y+2, r26	; 0x02
    1632:	bb 83       	std	Y+3, r27	; 0x03
    1634:	9f 77       	andi	r25, 0x7F	; 127
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	9f 90       	pop	r9
    1648:	8f 90       	pop	r8
    164a:	08 95       	ret

0000164c <rand_r>:
    164c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <do_rand>
    1650:	08 95       	ret

00001652 <rand>:
    1652:	87 e0       	ldi	r24, 0x07	; 7
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <do_rand>
    165a:	08 95       	ret

0000165c <srand>:
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1664:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1668:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    166c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1670:	08 95       	ret

00001672 <eeprom_read_byte>:
    1672:	f9 99       	sbic	0x1f, 1	; 31
    1674:	fe cf       	rjmp	.-4      	; 0x1672 <eeprom_read_byte>
    1676:	92 bd       	out	0x22, r25	; 34
    1678:	81 bd       	out	0x21, r24	; 33
    167a:	f8 9a       	sbi	0x1f, 0	; 31
    167c:	99 27       	eor	r25, r25
    167e:	80 b5       	in	r24, 0x20	; 32
    1680:	08 95       	ret

00001682 <eeprom_write_byte>:
    1682:	26 2f       	mov	r18, r22

00001684 <eeprom_write_r18>:
    1684:	f9 99       	sbic	0x1f, 1	; 31
    1686:	fe cf       	rjmp	.-4      	; 0x1684 <eeprom_write_r18>
    1688:	1f ba       	out	0x1f, r1	; 31
    168a:	92 bd       	out	0x22, r25	; 34
    168c:	81 bd       	out	0x21, r24	; 33
    168e:	20 bd       	out	0x20, r18	; 32
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	fa 9a       	sbi	0x1f, 2	; 31
    1696:	f9 9a       	sbi	0x1f, 1	; 31
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	08 95       	ret

0000169e <__divmodsi4>:
    169e:	05 2e       	mov	r0, r21
    16a0:	97 fb       	bst	r25, 7
    16a2:	1e f4       	brtc	.+6      	; 0x16aa <__divmodsi4+0xc>
    16a4:	00 94       	com	r0
    16a6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__negsi2>
    16aa:	57 fd       	sbrc	r21, 7
    16ac:	07 d0       	rcall	.+14     	; 0x16bc <__divmodsi4_neg2>
    16ae:	0e 94 81 0b 	call	0x1702	; 0x1702 <__udivmodsi4>
    16b2:	07 fc       	sbrc	r0, 7
    16b4:	03 d0       	rcall	.+6      	; 0x16bc <__divmodsi4_neg2>
    16b6:	4e f4       	brtc	.+18     	; 0x16ca <__divmodsi4_exit>
    16b8:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__negsi2>

000016bc <__divmodsi4_neg2>:
    16bc:	50 95       	com	r21
    16be:	40 95       	com	r20
    16c0:	30 95       	com	r19
    16c2:	21 95       	neg	r18
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	4f 4f       	sbci	r20, 0xFF	; 255
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255

000016ca <__divmodsi4_exit>:
    16ca:	08 95       	ret

000016cc <__negsi2>:
    16cc:	90 95       	com	r25
    16ce:	80 95       	com	r24
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	08 95       	ret

000016dc <__muluhisi3>:
    16dc:	0e 94 aa 08 	call	0x1154	; 0x1154 <__umulhisi3>
    16e0:	a5 9f       	mul	r26, r21
    16e2:	90 0d       	add	r25, r0
    16e4:	b4 9f       	mul	r27, r20
    16e6:	90 0d       	add	r25, r0
    16e8:	a4 9f       	mul	r26, r20
    16ea:	80 0d       	add	r24, r0
    16ec:	91 1d       	adc	r25, r1
    16ee:	11 24       	eor	r1, r1
    16f0:	08 95       	ret

000016f2 <__mulshisi3>:
    16f2:	b7 ff       	sbrs	r27, 7
    16f4:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__muluhisi3>

000016f8 <__mulohisi3>:
    16f8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__muluhisi3>
    16fc:	82 1b       	sub	r24, r18
    16fe:	93 0b       	sbc	r25, r19
    1700:	08 95       	ret

00001702 <__udivmodsi4>:
    1702:	a1 e2       	ldi	r26, 0x21	; 33
    1704:	1a 2e       	mov	r1, r26
    1706:	aa 1b       	sub	r26, r26
    1708:	bb 1b       	sub	r27, r27
    170a:	fd 01       	movw	r30, r26
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <__udivmodsi4_ep>

0000170e <__udivmodsi4_loop>:
    170e:	aa 1f       	adc	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	ee 1f       	adc	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	a2 17       	cp	r26, r18
    1718:	b3 07       	cpc	r27, r19
    171a:	e4 07       	cpc	r30, r20
    171c:	f5 07       	cpc	r31, r21
    171e:	20 f0       	brcs	.+8      	; 0x1728 <__udivmodsi4_ep>
    1720:	a2 1b       	sub	r26, r18
    1722:	b3 0b       	sbc	r27, r19
    1724:	e4 0b       	sbc	r30, r20
    1726:	f5 0b       	sbc	r31, r21

00001728 <__udivmodsi4_ep>:
    1728:	66 1f       	adc	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	1a 94       	dec	r1
    1732:	69 f7       	brne	.-38     	; 0x170e <__udivmodsi4_loop>
    1734:	60 95       	com	r22
    1736:	70 95       	com	r23
    1738:	80 95       	com	r24
    173a:	90 95       	com	r25
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	bd 01       	movw	r22, r26
    1742:	cf 01       	movw	r24, r30
    1744:	08 95       	ret

00001746 <_exit>:
    1746:	f8 94       	cli

00001748 <__stop_program>:
    1748:	ff cf       	rjmp	.-2      	; 0x1748 <__stop_program>
