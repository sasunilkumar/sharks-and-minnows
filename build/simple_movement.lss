
build/simple_movement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	c2 04       	cpc	r12, r2
      6a:	19 05       	cpc	r17, r9
      6c:	2d 05       	cpc	r18, r13
      6e:	5e 05       	cpc	r21, r14
      70:	65 05       	cpc	r22, r5
      72:	44 05       	cpc	r20, r4
      74:	68 05       	cpc	r22, r8
      76:	c6 06       	cpc	r12, r22
      78:	b7 07       	cpc	r27, r23
      7a:	b7 07       	cpc	r27, r23
      7c:	cf 06       	cpc	r12, r31
      7e:	d2 06       	cpc	r13, r18
      80:	d5 06       	cpc	r13, r21
      82:	d7 06       	cpc	r13, r23
      84:	d9 06       	cpc	r13, r25
      86:	db 06       	cpc	r13, r27
      88:	8c 07       	cpc	r24, r28
      8a:	ed 06       	cpc	r14, r29

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e1       	ldi	r30, 0x12	; 18
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <main>
      da:	0c 94 87 0b 	jmp	0x170e	; 0x170e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include "kilolib.h"

void setup() {
      e2:	08 95       	ret

000000e4 <loop>:

}

void loop() {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	c2 e0       	ldi	r28, 0x02	; 2
      ea:	d0 e0       	ldi	r29, 0x00	; 0
  int i = 0;
  while (i < 2) {
	  spinup_motors();
      ec:	0e 94 c2 01 	call	0x384	; 0x384 <spinup_motors>
	  set_motors(kilo_straight_left, kilo_straight_right);
      f0:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_straight_right>
      f4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_straight_left>
      f8:	0e 94 bd 01 	call	0x37a	; 0x37a <set_motors>
	  set_color(RGB(0,1,0));
      fc:	84 e0       	ldi	r24, 0x04	; 4
      fe:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
	  delay(2000);
     102:	80 ed       	ldi	r24, 0xD0	; 208
     104:	97 e0       	ldi	r25, 0x07	; 7
     106:	0e 94 b2 01 	call	0x364	; 0x364 <delay>
	  
	  spinup_motors();
     10a:	0e 94 c2 01 	call	0x384	; 0x384 <spinup_motors>
	  set_motors(kilo_turn_left, 0);
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_turn_left>
     114:	0e 94 bd 01 	call	0x37a	; 0x37a <set_motors>
	  set_color(RGB(1,0,0));
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
	  delay(2000);
     11e:	80 ed       	ldi	r24, 0xD0	; 208
     120:	97 e0       	ldi	r25, 0x07	; 7
     122:	0e 94 b2 01 	call	0x364	; 0x364 <delay>

	  spinup_motors();
     126:	0e 94 c2 01 	call	0x384	; 0x384 <spinup_motors>
	  set_motors(0, kilo_turn_right);
     12a:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <kilo_turn_right>
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	0e 94 bd 01 	call	0x37a	; 0x37a <set_motors>
	  set_color(RGB(0,1,1));
     134:	84 e1       	ldi	r24, 0x14	; 20
     136:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
	  delay(2000);
     13a:	80 ed       	ldi	r24, 0xD0	; 208
     13c:	97 e0       	ldi	r25, 0x07	; 7
     13e:	0e 94 b2 01 	call	0x364	; 0x364 <delay>

	  set_motors(0,0);
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 bd 01 	call	0x37a	; 0x37a <set_motors>
	  set_color(RGB(0,0,0));
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
	  delay(500);
     150:	84 ef       	ldi	r24, 0xF4	; 244
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 b2 01 	call	0x364	; 0x364 <delay>
     158:	21 97       	sbiw	r28, 0x01	; 1

}

void loop() {
  int i = 0;
  while (i < 2) {
     15a:	41 f6       	brne	.-112    	; 0xec <loop+0x8>
	  set_motors(0,0);
	  set_color(RGB(0,0,0));
	  delay(500);
	  i++;
  }
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     162:	08 95       	ret

00000164 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

0000016a <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     16a:	08 95       	ret

0000016c <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
    cli();
     17a:	f8 94       	cli

    ports_off();
     17c:	14 b8       	out	0x04, r1	; 4
     17e:	17 b8       	out	0x07, r1	; 7
     180:	1a b8       	out	0x0a, r1	; 10
     182:	15 b8       	out	0x05, r1	; 5
     184:	18 b8       	out	0x08, r1	; 8
     186:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     188:	52 9a       	sbi	0x0a, 2	; 10
     18a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     18c:	14 bc       	out	0x24, r1	; 36
     18e:	85 e0       	ldi	r24, 0x05	; 5
     190:	85 bd       	out	0x25, r24	; 37
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	87 bd       	out	0x27, r24	; 39
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     19c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     1a0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     1a4:	2f e8       	ldi	r18, 0x8F	; 143
     1a6:	3b e0       	ldi	r19, 0x0B	; 11
     1a8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     1ac:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     1b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     1b4:	53 98       	cbi	0x0a, 3	; 10
     1b6:	23 98       	cbi	0x04, 3	; 4
     1b8:	91 ea       	ldi	r25, 0xA1	; 161
     1ba:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     1be:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     1c2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1c6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1ca:	8b e0       	ldi	r24, 0x0B	; 11
     1cc:	80 bf       	out	0x30, r24	; 48
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1da:	83 e8       	ldi	r24, 0x83	; 131
     1dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1e4:	80 64       	ori	r24, 0x40	; 64
     1e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ee:	86 fd       	sbrc	r24, 6
     1f0:	fc cf       	rjmp	.-8      	; 0x1ea <kilo_init+0x7e>
    adc_trigger_high_gain();
     1f2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1f6:	83 ea       	ldi	r24, 0xA3	; 163
     1f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
    if (osccal != 0xFF)
     20a:	8f 3f       	cpi	r24, 0xFF	; 255
     20c:	11 f0       	breq	.+4      	; 0x212 <kilo_init+0xa6>
        OSCCAL = osccal;
     20e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     212:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    rx_leadingbit = 1;
     216:	c1 e0       	ldi	r28, 0x01	; 1
     218:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     21c:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <rx_leadingbyte>
    rx_byteindex = 0;
     220:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
    rx_bytevalue = 0;
     224:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     228:	80 e9       	ldi	r24, 0x90	; 144
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     230:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     234:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_mask>
     238:	88 73       	andi	r24, 0x38	; 56
     23a:	11 f0       	breq	.+4      	; 0x240 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     23c:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <tx_mask>
    tx_clock = 0;
     240:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     244:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
    tx_increment = 255;
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     250:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    kilo_ticks = 0;
     254:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <kilo_ticks>
     258:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <kilo_ticks+0x1>
     25c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks+0x2>
     260:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x3>
    kilo_state = IDLE;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    kilo_tx_period = 3906;
     26a:	82 e4       	ldi	r24, 0x42	; 66
     26c:	9f e0       	ldi	r25, 0x0F	; 15
     26e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <kilo_tx_period+0x1>
     272:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     276:	80 eb       	ldi	r24, 0xB0	; 176
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     27e:	c8 2f       	mov	r28, r24
     280:	81 eb       	ldi	r24, 0xB1	; 177
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     288:	2c 2f       	mov	r18, r28
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	38 2b       	or	r19, r24
     28e:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <kilo_uid+0x1>
     292:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     296:	85 e0       	ldi	r24, 0x05	; 5
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     29e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2a2:	89 e0       	ldi	r24, 0x09	; 9
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     2aa:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2ae:	8c e0       	ldi	r24, 0x0C	; 12
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     2b6:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2ba:	84 e1       	ldi	r24, 0x14	; 20
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     2c2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_straight_right>
     2c6:	08 e3       	ldi	r16, 0x38	; 56
     2c8:	11 e0       	ldi	r17, 0x01	; 1
     2ca:	51 e1       	ldi	r21, 0x11	; 17
     2cc:	e5 2e       	mov	r14, r21
     2ce:	51 e0       	ldi	r21, 0x01	; 1
     2d0:	f5 2e       	mov	r15, r21
     2d2:	c0 e2       	ldi	r28, 0x20	; 32
     2d4:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     2dc:	d8 2e       	mov	r13, r24
     2de:	ce 01       	movw	r24, r28
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     2e6:	2d 2d       	mov	r18, r13
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	32 2f       	mov	r19, r18
     2ec:	22 27       	eor	r18, r18
     2ee:	28 2b       	or	r18, r24
     2f0:	f8 01       	movw	r30, r16
     2f2:	21 93       	st	Z+, r18
     2f4:	31 93       	st	Z+, r19
     2f6:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2f8:	ce 01       	movw	r24, r28
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     300:	d8 2e       	mov	r13, r24
     302:	ce 01       	movw	r24, r28
     304:	c1 96       	adiw	r24, 0x31	; 49
     306:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_read_byte>
     30a:	2d 2d       	mov	r18, r13
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	32 2f       	mov	r19, r18
     310:	22 27       	eor	r18, r18
     312:	28 2b       	or	r18, r24
     314:	f7 01       	movw	r30, r14
     316:	21 93       	st	Z+, r18
     318:	31 93       	st	Z+, r19
     31a:	7f 01       	movw	r14, r30
     31c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     31e:	cc 33       	cpi	r28, 0x3C	; 60
     320:	d1 05       	cpc	r29, r1
     322:	c9 f6       	brne	.-78     	; 0x2d6 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     324:	78 94       	sei
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	08 95       	ret

00000336 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	8f 93       	push	r24
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	a8 95       	wdr
     348:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     34c:	88 61       	ori	r24, 0x18	; 24
     34e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     352:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     356:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     358:	8f 91       	pop	r24
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	41 f0       	breq	.+16     	; 0x378 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     368:	ef ec       	ldi	r30, 0xCF	; 207
     36a:	f7 e0       	ldi	r31, 0x07	; 7
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <delay+0x8>
     370:	00 c0       	rjmp	.+0      	; 0x372 <delay+0xe>
     372:	00 00       	nop
        _delay_ms(1);
        ms--;
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f6 cf       	rjmp	.-20     	; 0x364 <delay>
    }
}
     378:	08 95       	ret

0000037a <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     37a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     37e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     382:	08 95       	ret

00000384 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     38a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     38e:	8f e0       	ldi	r24, 0x0F	; 15
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0c 94 b2 01 	jmp	0x364	; 0x364 <delay>

00000396 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     396:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     39a:	81 11       	cpse	r24, r1
     39c:	1e c0       	rjmp	.+60     	; 0x3da <get_ambientlight+0x44>
        cli();
     39e:	f8 94       	cli
        adc_setup_conversion(7);
     3a0:	87 e0       	ldi	r24, 0x07	; 7
     3a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3a6:	83 e8       	ldi	r24, 0x83	; 131
     3a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ba:	86 fd       	sbrc	r24, 6
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     3be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3c6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3ca:	23 ea       	ldi	r18, 0xA3	; 163
     3cc:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3d6:	78 94       	sei
     3d8:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     3de:	08 95       	ret

000003e0 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     3e0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     3e4:	81 11       	cpse	r24, r1
     3e6:	1e c0       	rjmp	.+60     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
        cli();
     3e8:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     3ea:	88 ec       	ldi	r24, 0xC8	; 200
     3ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     3f0:	87 e8       	ldi	r24, 0x87	; 135
     3f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3fa:	80 64       	ori	r24, 0x40	; 64
     3fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     400:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     404:	86 fd       	sbrc	r24, 6
     406:	fc cf       	rjmp	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
        temp = ADCW;                             // store AD result
     408:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     40c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     410:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     414:	23 ea       	ldi	r18, 0xA3	; 163
     416:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     420:	78 94       	sei
     422:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     428:	08 95       	ret

0000042a <rand_hard>:

uint8_t rand_hard() {
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     432:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     434:	e3 ea       	ldi	r30, 0xA3	; 163
     436:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     438:	c6 e0       	ldi	r28, 0x06	; 6
     43a:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     43c:	a1 e0       	ldi	r26, 0x01	; 1
     43e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     440:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     442:	f8 94       	cli
            adc_setup_conversion(6);
     444:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     448:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     44c:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     450:	40 64       	ori	r20, 0x40	; 64
     452:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     456:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     45a:	46 fd       	sbrc	r20, 6
     45c:	fc cf       	rjmp	.-8      	; 0x456 <rand_hard+0x2c>
            a = ADCW&0x1;
     45e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     462:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     466:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     468:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     46c:	50 64       	ori	r21, 0x40	; 64
     46e:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     472:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     476:	56 fd       	sbrc	r21, 6
     478:	fc cf       	rjmp	.-8      	; 0x472 <rand_hard+0x48>
            b = ADCW&0x1;
     47a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     47e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     482:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     486:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     48a:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     48e:	78 94       	sei
            tries++;
     490:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     492:	61 70       	andi	r22, 0x01	; 1
     494:	46 17       	cp	r20, r22
     496:	51 f0       	breq	.+20     	; 0x4ac <rand_hard+0x82>
        if (a)
     498:	44 23       	and	r20, r20
     49a:	59 f0       	breq	.+22     	; 0x4b2 <rand_hard+0x88>
            num |= (1<<i);
     49c:	ad 01       	movw	r20, r26
     49e:	02 2e       	mov	r0, r18
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <rand_hard+0x7a>
     4a2:	44 0f       	add	r20, r20
     4a4:	0a 94       	dec	r0
     4a6:	ea f7       	brpl	.-6      	; 0x4a2 <rand_hard+0x78>
     4a8:	84 2b       	or	r24, r20
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     4ac:	90 38       	cpi	r25, 0x80	; 128
     4ae:	49 f6       	brne	.-110    	; 0x442 <rand_hard+0x18>
     4b0:	f3 cf       	rjmp	.-26     	; 0x498 <rand_hard+0x6e>
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     4b6:	28 30       	cpi	r18, 0x08	; 8
     4b8:	31 05       	cpc	r19, r1
     4ba:	09 f0       	breq	.+2      	; 0x4be <rand_hard+0x94>
     4bc:	c1 cf       	rjmp	.-126    	; 0x440 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     4c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	89 9f       	mul	r24, r25
     4cc:	90 01       	movw	r18, r0
     4ce:	11 24       	eor	r1, r1
     4d0:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4d2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 0f       	add	r24, r25
     4da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     4de:	82 2f       	mov	r24, r18
     4e0:	82 95       	swap	r24
     4e2:	86 95       	lsr	r24
     4e4:	87 70       	andi	r24, 0x07	; 7
     4e6:	28 27       	eor	r18, r24
     4e8:	96 95       	lsr	r25
     4ea:	96 95       	lsr	r25
     4ec:	82 2f       	mov	r24, r18
     4ee:	89 27       	eor	r24, r25
     4f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     4f4:	08 95       	ret

000004f6 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     4f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4fa:	08 95       	ret

000004fc <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4fc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     500:	81 11       	cpse	r24, r1
     502:	16 c0       	rjmp	.+44     	; 0x530 <get_voltage+0x34>
        cli();                                    // disable interrupts
     504:	f8 94       	cli
        adc_setup_conversion(6);
     506:	86 e0       	ldi	r24, 0x06	; 6
     508:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     50c:	83 e8       	ldi	r24, 0x83	; 131
     50e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     512:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     51c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     520:	86 fd       	sbrc	r24, 6
     522:	fc cf       	rjmp	.-8      	; 0x51c <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     524:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     528:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     52c:	78 94       	sei
     52e:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     534:	08 95       	ret

00000536 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     536:	2f 92       	push	r2
     538:	3f 92       	push	r3
     53a:	4f 92       	push	r4
     53c:	5f 92       	push	r5
     53e:	6f 92       	push	r6
     540:	7f 92       	push	r7
     542:	8f 92       	push	r8
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     55c:	fc 01       	movw	r30, r24
     55e:	c2 81       	ldd	r28, Z+2	; 0x02
     560:	d3 81       	ldd	r29, Z+3	; 0x03
     562:	c4 38       	cpi	r28, 0x84	; 132
     564:	f3 e0       	ldi	r31, 0x03	; 3
     566:	df 07       	cpc	r29, r31
     568:	0c f0       	brlt	.+2      	; 0x56c <estimate_distance+0x36>
     56a:	7e c0       	rjmp	.+252    	; 0x668 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     56c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_irhigh>
     570:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <kilo_irhigh+0x1>
     574:	8c 17       	cp	r24, r28
     576:	9d 07       	cpc	r25, r29
     578:	08 f4       	brcc	.+2      	; 0x57c <estimate_distance+0x46>
     57a:	6f c0       	rjmp	.+222    	; 0x65a <estimate_distance+0x124>
     57c:	e3 e1       	ldi	r30, 0x13	; 19
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     582:	81 91       	ld	r24, Z+
     584:	91 91       	ld	r25, Z+
     586:	8c 17       	cp	r24, r28
     588:	9d 07       	cpc	r25, r29
     58a:	20 f0       	brcs	.+8      	; 0x594 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     58c:	1f 5f       	subi	r17, 0xFF	; 255
     58e:	1e 30       	cpi	r17, 0x0E	; 14
     590:	c1 f7       	brne	.-16     	; 0x582 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     592:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     594:	81 2f       	mov	r24, r17
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	fc 01       	movw	r30, r24
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	ef 5e       	subi	r30, 0xEF	; 239
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	e0 80       	ld	r14, Z
     5a4:	f1 80       	ldd	r15, Z+1	; 0x01
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	fc 01       	movw	r30, r24
     5ac:	e1 5f       	subi	r30, 0xF1	; 241
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	b7 01       	movw	r22, r14
     5b6:	68 1b       	sub	r22, r24
     5b8:	79 0b       	sbc	r23, r25
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     5ca:	4b 01       	movw	r8, r22
     5cc:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5ce:	be 01       	movw	r22, r28
     5d0:	0d 2e       	mov	r0, r29
     5d2:	00 0c       	add	r0, r0
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatsisf>
     5dc:	2b 01       	movw	r4, r22
     5de:	3c 01       	movw	r6, r24
     5e0:	b7 01       	movw	r22, r14
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
     5ee:	61 2f       	mov	r22, r17
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	a9 01       	movw	r20, r18
     60c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     610:	a5 01       	movw	r20, r10
     612:	94 01       	movw	r18, r8
     614:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c3 01       	movw	r24, r6
     62a:	b2 01       	movw	r22, r4
     62c:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e2       	ldi	r20, 0x20	; 32
     636:	51 e4       	ldi	r21, 0x41	; 65
     638:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     63c:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
     640:	7b 01       	movw	r14, r22
     642:	c5 01       	movw	r24, r10
     644:	b4 01       	movw	r22, r8
     646:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
     64a:	ab 01       	movw	r20, r22
     64c:	bc 01       	movw	r22, r24
     64e:	c7 01       	movw	r24, r14
     650:	ba 01       	movw	r22, r20
     652:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     656:	16 2f       	mov	r17, r22
     658:	01 c0       	rjmp	.+2      	; 0x65c <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     65a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     65c:	cd 3b       	cpi	r28, 0xBD	; 189
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	d8 07       	cpc	r29, r24
     662:	0c f4       	brge	.+2      	; 0x666 <estimate_distance+0x130>
     664:	ca c0       	rjmp	.+404    	; 0x7fa <estimate_distance+0x2c4>
     666:	01 c0       	rjmp	.+2      	; 0x66a <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     668:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     66a:	f1 01       	movw	r30, r2
     66c:	c0 80       	ld	r12, Z
     66e:	d1 80       	ldd	r13, Z+1	; 0x01
     670:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <kilo_irlow>
     674:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <kilo_irlow+0x1>
     678:	8c 15       	cp	r24, r12
     67a:	9d 05       	cpc	r25, r13
     67c:	88 f0       	brcs	.+34     	; 0x6a0 <estimate_distance+0x16a>
     67e:	ea e3       	ldi	r30, 0x3A	; 58
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     688:	e1 90       	ld	r14, Z+
     68a:	f1 90       	ld	r15, Z+
     68c:	ec 14       	cp	r14, r12
     68e:	fd 04       	cpc	r15, r13
     690:	08 f4       	brcc	.+2      	; 0x694 <estimate_distance+0x15e>
     692:	58 c0       	rjmp	.+176    	; 0x744 <estimate_distance+0x20e>
     694:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     696:	8e 30       	cpi	r24, 0x0E	; 14
     698:	91 05       	cpc	r25, r1
     69a:	a9 f7       	brne	.-22     	; 0x686 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     69c:	0a e5       	ldi	r16, 0x5A	; 90
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     6a0:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     6a2:	1f 3f       	cpi	r17, 0xFF	; 255
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <estimate_distance+0x172>
     6a6:	4b c0       	rjmp	.+150    	; 0x73e <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     6a8:	be 01       	movw	r22, r28
     6aa:	dd 0f       	add	r29, r29
     6ac:	88 0b       	sbc	r24, r24
     6ae:	99 0b       	sbc	r25, r25
     6b0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatsisf>
     6b4:	6b 01       	movw	r12, r22
     6b6:	7c 01       	movw	r14, r24
     6b8:	61 2f       	mov	r22, r17
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     6c4:	4b 01       	movw	r8, r22
     6c6:	5c 01       	movw	r10, r24
     6c8:	a7 01       	movw	r20, r14
     6ca:	96 01       	movw	r18, r12
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	81 e6       	ldi	r24, 0x61	; 97
     6d2:	94 e4       	ldi	r25, 0x44	; 68
     6d4:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c5 01       	movw	r24, r10
     6de:	b4 01       	movw	r22, r8
     6e0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24
     6e8:	60 2f       	mov	r22, r16
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     6f4:	2b 01       	movw	r4, r22
     6f6:	3c 01       	movw	r6, r24
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	4f e2       	ldi	r20, 0x2F	; 47
     6fe:	54 e4       	ldi	r21, 0x44	; 68
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     714:	9b 01       	movw	r18, r22
     716:	ac 01       	movw	r20, r24
     718:	c5 01       	movw	r24, r10
     71a:	b4 01       	movw	r22, r8
     71c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	48 e4       	ldi	r20, 0x48	; 72
     726:	53 e4       	ldi	r21, 0x43	; 67
     728:	0e 94 1e 09 	call	0x123c	; 0x123c <__divsf3>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	44 e0       	ldi	r20, 0x04	; 4
     732:	52 e4       	ldi	r21, 0x42	; 66
     734:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     738:	0e 94 97 09 	call	0x132e	; 0x132e <__fixunssfsi>
     73c:	60 c0       	rjmp	.+192    	; 0x7fe <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     73e:	61 e2       	ldi	r22, 0x21	; 33
     740:	60 0f       	add	r22, r16
     742:	5d c0       	rjmp	.+186    	; 0x7fe <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	fc 01       	movw	r30, r24
     74a:	ea 5c       	subi	r30, 0xCA	; 202
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	80 81       	ld	r24, Z
     750:	91 81       	ldd	r25, Z+1	; 0x01
     752:	b7 01       	movw	r22, r14
     754:	68 1b       	sub	r22, r24
     756:	79 0b       	sbc	r23, r25
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     768:	4b 01       	movw	r8, r22
     76a:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     76c:	b6 01       	movw	r22, r12
     76e:	dd 0c       	add	r13, r13
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatsisf>
     778:	2b 01       	movw	r4, r22
     77a:	3c 01       	movw	r6, r24
     77c:	b7 01       	movw	r22, r14
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     786:	6b 01       	movw	r12, r22
     788:	7c 01       	movw	r14, r24
     78a:	63 2d       	mov	r22, r3
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	5f e3       	ldi	r21, 0x3F	; 63
     79e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	a9 01       	movw	r20, r18
     7a8:	0e 94 b2 08 	call	0x1164	; 0x1164 <__addsf3>
     7ac:	a5 01       	movw	r20, r10
     7ae:	94 01       	movw	r18, r8
     7b0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     7b4:	9b 01       	movw	r18, r22
     7b6:	ac 01       	movw	r20, r24
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	0e 94 b1 08 	call	0x1162	; 0x1162 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e2       	ldi	r20, 0x20	; 32
     7d2:	51 e4       	ldi	r21, 0x41	; 65
     7d4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3>
     7d8:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
     7dc:	7b 01       	movw	r14, r22
     7de:	c5 01       	movw	r24, r10
     7e0:	b4 01       	movw	r22, r8
     7e2:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixsfsi>
     7e6:	ab 01       	movw	r20, r22
     7e8:	bc 01       	movw	r22, r24
     7ea:	c7 01       	movw	r24, r14
     7ec:	ba 01       	movw	r22, r20
     7ee:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divmodhi4>
     7f2:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     7f4:	6f 3f       	cpi	r22, 0xFF	; 255
     7f6:	09 f0       	breq	.+2      	; 0x7fa <estimate_distance+0x2c4>
     7f8:	54 cf       	rjmp	.-344    	; 0x6a2 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7fa:	61 e2       	ldi	r22, 0x21	; 33
     7fc:	61 0f       	add	r22, r17
    }
}
     7fe:	86 2f       	mov	r24, r22
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	7f 90       	pop	r7
     81a:	6f 90       	pop	r6
     81c:	5f 90       	pop	r5
     81e:	4f 90       	pop	r4
     820:	3f 90       	pop	r3
     822:	2f 90       	pop	r2
     824:	08 95       	ret

00000826 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	4f 93       	push	r20
     836:	5f 93       	push	r21
     838:	6f 93       	push	r22
     83a:	7f 93       	push	r23
     83c:	8f 93       	push	r24
     83e:	9f 93       	push	r25
     840:	af 93       	push	r26
     842:	bf 93       	push	r27
     844:	ef 93       	push	r30
     846:	ff 93       	push	r31
    tx_clock += tx_increment;
     848:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     84c:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     850:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_increment>
     854:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <tx_increment+0x1>
     858:	82 0f       	add	r24, r18
     85a:	93 1f       	adc	r25, r19
     85c:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_clock+0x1>
     860:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_clock>
    tx_increment = 0xFF;
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     86c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    OCR0A = tx_increment;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     874:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <kilo_ticks>
     878:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <kilo_ticks+0x1>
     87c:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <kilo_ticks+0x2>
     880:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <kilo_ticks+0x3>
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
     88a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <kilo_ticks>
     88e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <kilo_ticks+0x1>
     892:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <kilo_ticks+0x2>
     896:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     89a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     89e:	81 11       	cpse	r24, r1
     8a0:	2d c0       	rjmp	.+90     	; 0x8fc <__vector_14+0xd6>
     8a2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kilo_tx_period>
     8a6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_tx_period+0x1>
     8aa:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     8ae:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     8b2:	82 17       	cp	r24, r18
     8b4:	93 07       	cpc	r25, r19
     8b6:	10 f5       	brcc	.+68     	; 0x8fc <__vector_14+0xd6>
     8b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	f1 f4       	brne	.+60     	; 0x8fc <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     8c0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     8c4:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     8c8:	09 95       	icall
        if (msg) {
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	b9 f0       	breq	.+46     	; 0x8fc <__vector_14+0xd6>
            if (message_send(msg)) {
     8ce:	0e 94 e6 07 	call	0xfcc	; 0xfcc <message_send>
     8d2:	88 23       	and	r24, r24
     8d4:	51 f0       	breq	.+20     	; 0x8ea <__vector_14+0xc4>
                kilo_message_tx_success();
     8d6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     8da:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     8de:	09 95       	icall
                tx_clock = 0;
     8e0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     8e4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     8ea:	0e 94 0d 0b 	call	0x161a	; 0x161a <rand>
     8ee:	9c 01       	movw	r18, r24
     8f0:	33 27       	eor	r19, r19
     8f2:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <tx_increment+0x1>
     8f6:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <tx_increment>
                OCR0A = tx_increment;
     8fa:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	bf 91       	pop	r27
     902:	af 91       	pop	r26
     904:	9f 91       	pop	r25
     906:	8f 91       	pop	r24
     908:	7f 91       	pop	r23
     90a:	6f 91       	pop	r22
     90c:	5f 91       	pop	r21
     90e:	4f 91       	pop	r20
     910:	3f 91       	pop	r19
     912:	2f 91       	pop	r18
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     91e:	80 ff       	sbrs	r24, 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <set_color+0x8>
        DDRD |= (1<<5);
     922:	55 9a       	sbi	0x0a, 5	; 10
     924:	01 c0       	rjmp	.+2      	; 0x928 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     926:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     928:	81 ff       	sbrs	r24, 1
     92a:	02 c0       	rjmp	.+4      	; 0x930 <set_color+0x12>
        DDRD |= (1<<4);
     92c:	54 9a       	sbi	0x0a, 4	; 10
     92e:	01 c0       	rjmp	.+2      	; 0x932 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     930:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     932:	82 ff       	sbrs	r24, 2
     934:	02 c0       	rjmp	.+4      	; 0x93a <set_color+0x1c>
        DDRC |= (1<<3);
     936:	3b 9a       	sbi	0x07, 3	; 7
     938:	01 c0       	rjmp	.+2      	; 0x93c <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     93a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     93c:	83 ff       	sbrs	r24, 3
     93e:	02 c0       	rjmp	.+4      	; 0x944 <set_color+0x26>
        DDRC |= (1<<2);
     940:	3a 9a       	sbi	0x07, 2	; 7
     942:	01 c0       	rjmp	.+2      	; 0x946 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     944:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     946:	84 ff       	sbrs	r24, 4
     948:	02 c0       	rjmp	.+4      	; 0x94e <set_color+0x30>
        DDRC |= (1<<5);
     94a:	3d 9a       	sbi	0x07, 5	; 7
     94c:	01 c0       	rjmp	.+2      	; 0x950 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     94e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     950:	85 ff       	sbrs	r24, 5
     952:	02 c0       	rjmp	.+4      	; 0x958 <set_color+0x3a>
        DDRC |= (1<<4);
     954:	3c 9a       	sbi	0x07, 4	; 7
     956:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     958:	3c 98       	cbi	0x07, 4	; 7
     95a:	08 95       	ret

0000095c <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     95c:	8c 01       	movw	r16, r24
     95e:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     960:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     962:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     968:	98 e1       	ldi	r25, 0x18	; 24
     96a:	c9 2e       	mov	r12, r25
     96c:	29 e2       	ldi	r18, 0x29	; 41
     96e:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     970:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_state>
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	e7 30       	cpi	r30, 0x07	; 7
     978:	f1 05       	cpc	r31, r1
     97a:	d0 f7       	brcc	.-12     	; 0x970 <kilo_start+0x14>
     97c:	ec 5c       	subi	r30, 0xCC	; 204
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__tablejump2__>
            case SLEEPING:
                cli();
     984:	f8 94       	cli
                acomp_off();
     986:	80 b7       	in	r24, 0x30	; 48
     988:	87 7f       	andi	r24, 0xF7	; 247
     98a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     98c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     990:	8f 77       	andi	r24, 0x7F	; 127
     992:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     996:	14 b8       	out	0x04, r1	; 4
     998:	17 b8       	out	0x07, r1	; 7
     99a:	1a b8       	out	0x0a, r1	; 10
     99c:	15 b8       	out	0x05, r1	; 5
     99e:	18 b8       	out	0x08, r1	; 8
     9a0:	1b b8       	out	0x0b, r1	; 11
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	a8 95       	wdr
     9a8:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     9b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9b6:	80 64       	ori	r24, 0x40	; 64
     9b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9bc:	83 b7       	in	r24, 0x33	; 51
     9be:	81 7f       	andi	r24, 0xF1	; 241
     9c0:	84 60       	ori	r24, 0x04	; 4
     9c2:	83 bf       	out	0x33, r24	; 51
                cli();
     9c4:	f8 94       	cli
                sleep_enable();
     9c6:	83 b7       	in	r24, 0x33	; 51
     9c8:	81 60       	ori	r24, 0x01	; 1
     9ca:	83 bf       	out	0x33, r24	; 51
                sei();
     9cc:	78 94       	sei
                sleep_cpu();
     9ce:	88 95       	sleep
                sleep_disable();
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	83 bf       	out	0x33, r24	; 51
                sei();
     9d6:	78 94       	sei
                rx_busy = 0;
     9d8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
                ports_on();
     9dc:	52 9a       	sbi	0x0a, 2	; 10
     9de:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     9e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ea:	87 e5       	ldi	r24, 0x57	; 87
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <kilo_start+0x92>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <kilo_start+0x98>
     9f4:	00 00       	nop
                _delay_us(300);
                acomp_on();
     9f6:	80 b7       	in	r24, 0x30	; 48
     9f8:	88 61       	ori	r24, 0x18	; 24
     9fa:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9fc:	8f e3       	ldi	r24, 0x3F	; 63
     9fe:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a02:	ef e1       	ldi	r30, 0x1F	; 31
     a04:	fe e4       	ldi	r31, 0x4E	; 78
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <kilo_start+0xaa>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <kilo_start+0xb0>
     a0c:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a0e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     a12:	88 23       	and	r24, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <kilo_start+0xbc>
     a16:	50 c0       	rjmp	.+160    	; 0xab8 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     a1e:	ff ef       	ldi	r31, 0xFF	; 255
     a20:	20 e7       	ldi	r18, 0x70	; 112
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	f1 50       	subi	r31, 0x01	; 1
     a26:	20 40       	sbci	r18, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <kilo_start+0xc8>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <kilo_start+0xd2>
     a2e:	00 00       	nop
     a30:	43 c0       	rjmp	.+134    	; 0xab8 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a32:	8c e0       	ldi	r24, 0x0C	; 12
     a34:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     a38:	ef ec       	ldi	r30, 0xCF	; 207
     a3a:	f7 e0       	ldi	r31, 0x07	; 7
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <kilo_start+0xe0>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <kilo_start+0xe6>
     a42:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     a4a:	ff ef       	ldi	r31, 0xFF	; 255
     a4c:	21 ee       	ldi	r18, 0xE1	; 225
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	f1 50       	subi	r31, 0x01	; 1
     a52:	20 40       	sbci	r18, 0x00	; 0
     a54:	80 40       	sbci	r24, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <kilo_start+0xf4>
     a58:	2c c0       	rjmp	.+88     	; 0xab2 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a5a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get_voltage>
                if(voltage > 682)
     a5e:	8b 3a       	cpi	r24, 0xAB	; 171
     a60:	e2 e0       	ldi	r30, 0x02	; 2
     a62:	9e 07       	cpc	r25, r30
     a64:	24 f0       	brlt	.+8      	; 0xa6e <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     a6c:	81 cf       	rjmp	.-254    	; 0x970 <kilo_start+0x14>
                else if(voltage > 648)
     a6e:	89 38       	cpi	r24, 0x89	; 137
     a70:	f2 e0       	ldi	r31, 0x02	; 2
     a72:	9f 07       	cpc	r25, r31
     a74:	14 f0       	brlt	.+4      	; 0xa7a <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a76:	80 e3       	ldi	r24, 0x30	; 48
     a78:	f7 cf       	rjmp	.-18     	; 0xa68 <kilo_start+0x10c>
                else if(voltage > 614)
     a7a:	87 36       	cpi	r24, 0x67	; 103
     a7c:	92 40       	sbci	r25, 0x02	; 2
     a7e:	14 f0       	brlt	.+4      	; 0xa84 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a80:	8f e0       	ldi	r24, 0x0F	; 15
     a82:	f2 cf       	rjmp	.-28     	; 0xa68 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	f0 cf       	rjmp	.-32     	; 0xa68 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a88:	48 99       	sbic	0x09, 0	; 9
     a8a:	16 c0       	rjmp	.+44     	; 0xab8 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     a92:	8f ec       	ldi	r24, 0xCF	; 207
     a94:	97 e0       	ldi	r25, 0x07	; 7
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <kilo_start+0x13a>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <kilo_start+0x140>
     a9c:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
     aa6:	e1 ee       	ldi	r30, 0xE1	; 225
     aa8:	f4 e0       	ldi	r31, 0x04	; 4
     aaa:	91 50       	subi	r25, 0x01	; 1
     aac:	e0 40       	sbci	r30, 0x00	; 0
     aae:	f0 40       	sbci	r31, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <kilo_start+0x14e>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <kilo_start+0x158>
     ab4:	00 00       	nop
     ab6:	5c cf       	rjmp	.-328    	; 0x970 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	d6 cf       	rjmp	.-84     	; 0xa68 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     abc:	d1 11       	cpse	r29, r1
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <kilo_start+0x168>
                    setup();
     ac0:	f8 01       	movw	r30, r16
     ac2:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ac4:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <kilo_state>
     ac8:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     aca:	f7 01       	movw	r30, r14
     acc:	09 95       	icall
                break;
     ace:	50 cf       	rjmp	.-352    	; 0x970 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     ad0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     ad4:	81 11       	cpse	r24, r1
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ad8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     adc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     ae0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
     ae4:	45 cf       	rjmp	.-374    	; 0x970 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     ae6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     aea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prev_motion>
     aee:	98 17       	cp	r25, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <kilo_start+0x198>
     af2:	3e cf       	rjmp	.-388    	; 0x970 <kilo_start+0x14>
                        prev_motion = cur_motion;
     af4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     af8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     afc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	89 f4       	brne	.+34     	; 0xb26 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b04:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b0c:	8f e2       	ldi	r24, 0x2F	; 47
     b0e:	95 e7       	ldi	r25, 0x75	; 117
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <kilo_start+0x1b4>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <kilo_start+0x1ba>
     b16:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b18:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b1c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b20:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b24:	25 cf       	rjmp	.-438    	; 0x970 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b26:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b2a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b2e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	59 f4       	brne	.+22     	; 0xb4c <kilo_start+0x1f0>
     b36:	ef e2       	ldi	r30, 0x2F	; 47
     b38:	f5 e7       	ldi	r31, 0x75	; 117
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <kilo_start+0x1de>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <kilo_start+0x1e4>
     b40:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b42:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b46:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b4a:	10 c0       	rjmp	.+32     	; 0xb6c <kilo_start+0x210>
     b4c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b50:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b54:	8f e2       	ldi	r24, 0x2F	; 47
     b56:	95 e7       	ldi	r25, 0x75	; 117
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <kilo_start+0x1fc>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <kilo_start+0x202>
     b5e:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b60:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <kilo_straight_right>
     b64:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b68:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b6c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b70:	ff ce       	rjmp	.-514    	; 0x970 <kilo_start+0x14>

00000b72 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
    rx_timer_off();
     b80:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     b92:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
    rx_busy = 0;
     b96:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    adc_trigger_high_gain();
     b9a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b9e:	93 ea       	ldi	r25, 0xA3	; 163
     ba0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ba4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     bdc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     be0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_leadingbit>
     bee:	88 23       	and	r24, r24
     bf0:	21 f1       	breq	.+72     	; 0xc3a <__vector_23+0x84>
        rx_timer_on();
     bf2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bf6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bfa:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     bfe:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
        rx_leadingbit = 0;
     c02:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_leadingbit>
        if (rx_leadingbyte) {
     c06:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     c0a:	88 23       	and	r24, r24
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__vector_23+0x5a>
     c0e:	af c1       	rjmp	.+862    	; 0xf6e <__vector_23+0x3b8>
            adc_finish_conversion();
     c10:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c14:	86 fd       	sbrc	r24, 6
     c16:	fc cf       	rjmp	.-8      	; 0xc10 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c18:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c1c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c20:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x3>
     c24:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist+0x2>
            adc_trigger_low_gain();
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c2e:	93 ea       	ldi	r25, 0xA3	; 163
     c30:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c34:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c38:	9a c1       	rjmp	.+820    	; 0xf6e <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c3a:	c9 01       	movw	r24, r18
     c3c:	87 58       	subi	r24, 0x87	; 135
     c3e:	91 09       	sbc	r25, r1
     c40:	84 37       	cpi	r24, 0x74	; 116
     c42:	99 40       	sbci	r25, 0x09	; 9
     c44:	a0 f0       	brcs	.+40     	; 0xc6e <__vector_23+0xb8>
            rx_timer_off();
     c46:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c4a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c4e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c52:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
            rx_leadingbyte = 1;
     c56:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
            rx_busy = 0;
     c5a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
            adc_trigger_high_gain();
     c5e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c62:	83 ea       	ldi	r24, 0xA3	; 163
     c64:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c68:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c6c:	80 c1       	rjmp	.+768    	; 0xf6e <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c6e:	26 58       	subi	r18, 0x86	; 134
     c70:	31 09       	sbc	r19, r1
     c72:	a4 ef       	ldi	r26, 0xF4	; 244
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	0e 94 8e 08 	call	0x111c	; 0x111c <__umulhisi3>
     c7a:	8c 01       	movw	r16, r24
     c7c:	22 27       	eor	r18, r18
     c7e:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c80:	08 30       	cpi	r16, 0x08	; 8
     c82:	60 f4       	brcc	.+24     	; 0xc9c <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <__vector_23+0xd6>
     c8a:	88 0f       	add	r24, r24
     c8c:	0a 95       	dec	r16
     c8e:	ea f7       	brpl	.-6      	; 0xc8a <__vector_23+0xd4>
     c90:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     c94:	89 2b       	or	r24, r25
     c96:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_bytevalue>
     c9a:	69 c1       	rjmp	.+722    	; 0xf6e <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c9c:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
                if (rx_leadingbyte) {
     ca0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     ca4:	88 23       	and	r24, r24
     ca6:	41 f1       	breq	.+80     	; 0xcf8 <__vector_23+0x142>
                    adc_finish_conversion();
     ca8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cac:	86 fd       	sbrc	r24, 6
     cae:	fc cf       	rjmp	.-8      	; 0xca8 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     cb0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cb4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cb8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <rx_dist+0x1>
     cbc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_dist>
                    adc_trigger_high_gain();
     cc0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cc4:	83 ea       	ldi	r24, 0xA3	; 163
     cc6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     cd0:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     cd4:	99 23       	and	r25, r25
     cd6:	59 f0       	breq	.+22     	; 0xcee <__vector_23+0x138>
                        rx_timer_off();
     cd8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cdc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ce0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ce4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
     ce8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
     cec:	40 c1       	rjmp	.+640    	; 0xf6e <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cee:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_leadingbyte>
                        rx_byteindex = 0;
     cf2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
     cf6:	3b c1       	rjmp	.+630    	; 0xf6e <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     cf8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_byteindex>
     cfc:	e8 2f       	mov	r30, r24
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	e6 5a       	subi	r30, 0xA6	; 166
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     d08:	90 83       	st	Z, r25
                    rx_byteindex++;
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d10:	8c 30       	cpi	r24, 0x0C	; 12
     d12:	09 f0       	breq	.+2      	; 0xd16 <__vector_23+0x160>
     d14:	2c c1       	rjmp	.+600    	; 0xf6e <__vector_23+0x3b8>
                        rx_timer_off();
     d16:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d1a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d1e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d22:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
     d26:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d2a:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <rx_msg+0xa>
     d2e:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <rx_msg+0xb>
     d32:	8a e5       	ldi	r24, 0x5A	; 90
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 ca 07 	call	0xf94	; 0xf94 <message_crc>
     d3a:	08 17       	cp	r16, r24
     d3c:	19 07       	cpc	r17, r25
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__vector_23+0x18c>
     d40:	16 c1       	rjmp	.+556    	; 0xf6e <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d42:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <rx_msg+0x9>
     d46:	e7 fd       	sbrc	r30, 7
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d4a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     d4e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     d52:	6f e2       	ldi	r22, 0x2F	; 47
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	8a e5       	ldi	r24, 0x5A	; 90
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	09 95       	icall
     d5c:	08 c1       	rjmp	.+528    	; 0xf6e <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d5e:	88 e7       	ldi	r24, 0x78	; 120
     d60:	8e 0f       	add	r24, r30
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	30 f0       	brcs	.+12     	; 0xd72 <__vector_23+0x1bc>
        motors_off();
     d66:	53 98       	cbi	0x0a, 3	; 10
     d68:	23 98       	cbi	0x04, 3	; 4
     d6a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d6e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d72:	8e 2f       	mov	r24, r30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	fc 01       	movw	r30, r24
     d78:	e0 58       	subi	r30, 0x80	; 128
     d7a:	f1 09       	sbc	r31, r1
     d7c:	eb 30       	cpi	r30, 0x0B	; 11
     d7e:	f1 05       	cpc	r31, r1
     d80:	08 f0       	brcs	.+2      	; 0xd84 <__vector_23+0x1ce>
     d82:	f5 c0       	rjmp	.+490    	; 0xf6e <__vector_23+0x3b8>
     d84:	e5 5c       	subi	r30, 0xC5	; 197
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d8c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d96:	16 bc       	out	0x26, r1	; 38
            bootload();
     d98:	e0 e0       	ldi	r30, 0x00	; 0
     d9a:	f0 e7       	ldi	r31, 0x70	; 112
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d9e:	e0 e0       	ldi	r30, 0x00	; 0
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     da4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <kilo_state>
     da8:	e2 c0       	rjmp	.+452    	; 0xf6e <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	b2 c0       	rjmp	.+356    	; 0xf12 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	b0 c0       	rjmp	.+352    	; 0xf12 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	ae c0       	rjmp	.+348    	; 0xf12 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     db6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <__vector_23+0x20a>
     dbe:	d7 c0       	rjmp	.+430    	; 0xf6e <__vector_23+0x3b8>
     dc0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	09 f4       	brne	.+2      	; 0xdca <__vector_23+0x214>
     dc8:	d2 c0       	rjmp	.+420    	; 0xf6e <__vector_23+0x3b8>
                motors_on();
     dca:	53 9a       	sbi	0x0a, 3	; 10
     dcc:	23 9a       	sbi	0x04, 3	; 4
     dce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dd2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	9c c0       	rjmp	.+312    	; 0xf12 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dda:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	09 f4       	brne	.+2      	; 0xde4 <__vector_23+0x22e>
     de2:	4b c0       	rjmp	.+150    	; 0xe7a <__vector_23+0x2c4>
     de4:	80 f4       	brcc	.+32     	; 0xe06 <__vector_23+0x250>
     de6:	88 23       	and	r24, r24
     de8:	a9 f0       	breq	.+42     	; 0xe14 <__vector_23+0x25e>
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__vector_23+0x23a>
     dee:	82 c0       	rjmp	.+260    	; 0xef4 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     df0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_msg+0x1>
     df4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <rx_msg+0x2>
     df8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <kilo_uid+0x1>
     dfc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_uid>
                    cur_motion = MOVE_STOP;
     e00:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     e04:	77 c0       	rjmp	.+238    	; 0xef4 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e06:	83 30       	cpi	r24, 0x03	; 3
     e08:	09 f4       	brne	.+2      	; 0xe0c <__vector_23+0x256>
     e0a:	49 c0       	rjmp	.+146    	; 0xe9e <__vector_23+0x2e8>
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__vector_23+0x25c>
     e10:	58 c0       	rjmp	.+176    	; 0xec2 <__vector_23+0x30c>
     e12:	70 c0       	rjmp	.+224    	; 0xef4 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e14:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     e18:	86 30       	cpi	r24, 0x06	; 6
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_23+0x268>
     e1c:	6b c0       	rjmp	.+214    	; 0xef4 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e1e:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_uid>
     e22:	80 eb       	ldi	r24, 0xB0	; 176
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e2a:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <kilo_uid+0x1>
     e2e:	81 eb       	ldi	r24, 0xB1	; 177
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e36:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_turn_left>
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e42:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <kilo_turn_right>
     e46:	89 e0       	ldi	r24, 0x09	; 9
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e4e:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_straight_left>
     e52:	8c e0       	ldi	r24, 0x0C	; 12
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e5a:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_straight_right>
     e5e:	84 e1       	ldi	r24, 0x14	; 20
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 25 0b 	call	0x164a	; 0x164a <eeprom_write_byte>
                        motors_off();
     e66:	53 98       	cbi	0x0a, 3	; 10
     e68:	23 98       	cbi	0x04, 3	; 4
     e6a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e6e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     e78:	3d c0       	rjmp	.+122    	; 0xef4 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e7a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     e7e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x3>
     e82:	91 30       	cpi	r25, 0x01	; 1
     e84:	21 f4       	brne	.+8      	; 0xe8e <__vector_23+0x2d8>
     e86:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_turn_left>
     e8a:	89 17       	cp	r24, r25
     e8c:	99 f1       	breq	.+102    	; 0xef4 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e8e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_LEFT;
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e98:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
     e9c:	2b c0       	rjmp	.+86     	; 0xef4 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e9e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     ea2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg+0x4>
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <__vector_23+0x2fc>
     eaa:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <kilo_turn_right>
     eae:	89 17       	cp	r24, r25
     eb0:	09 f1       	breq	.+66     	; 0xef4 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     eb2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_RIGHT;
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     ebc:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
     ec0:	19 c0       	rjmp	.+50     	; 0xef4 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     ec2:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <cur_motion>
     ec6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x6>
     eca:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rx_msg+0x5>
     ece:	23 30       	cpi	r18, 0x03	; 3
     ed0:	41 f4       	brne	.+16     	; 0xee2 <__vector_23+0x32c>
     ed2:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <kilo_straight_right>
     ed6:	82 13       	cpse	r24, r18
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <__vector_23+0x32c>
     eda:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_straight_left>
     ede:	92 17       	cp	r25, r18
     ee0:	49 f0       	breq	.+18     	; 0xef4 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ee2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     ee6:	23 e0       	ldi	r18, 0x03	; 3
     ee8:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     eec:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     ef0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ef4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
     ef8:	88 23       	and	r24, r24
     efa:	c9 f1       	breq	.+114    	; 0xf6e <__vector_23+0x3b8>
     efc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     f00:	86 30       	cpi	r24, 0x06	; 6
     f02:	a9 f1       	breq	.+106    	; 0xf6e <__vector_23+0x3b8>
                motors_on();
     f04:	53 9a       	sbi	0x0a, 3	; 10
     f06:	23 9a       	sbi	0x04, 3	; 4
     f08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     f16:	2b c0       	rjmp	.+86     	; 0xf6e <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f18:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     f1c:	86 30       	cpi	r24, 0x06	; 6
     f1e:	81 f0       	breq	.+32     	; 0xf40 <__vector_23+0x38a>
                motors_on();
     f20:	53 9a       	sbi	0x0a, 3	; 10
     f22:	23 9a       	sbi	0x04, 3	; 4
     f24:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f28:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 8f 04 	call	0x91e	; 0x91e <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f32:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     f36:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                kilo_state = MOVING;
     f3a:	86 e0       	ldi	r24, 0x06	; 6
     f3c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <rx_msg>
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__vector_23+0x398>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <__vector_23+0x394>
     f52:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <kilo_uid>
     f56:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <kilo_uid+0x1>
     f5a:	82 23       	and	r24, r18
     f5c:	93 23       	and	r25, r19
     f5e:	89 2b       	or	r24, r25
     f60:	21 f0       	breq	.+8      	; 0xf6a <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f6a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
                    }
                }
            }
        }
    }
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f94:	fc 01       	movw	r30, r24
     f96:	9c 01       	movw	r18, r24
     f98:	26 5f       	subi	r18, 0xF6	; 246
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     fa0:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     fa2:	84 27       	eor	r24, r20
     fa4:	08 2e       	mov	r0, r24
     fa6:	82 95       	swap	r24
     fa8:	80 7f       	andi	r24, 0xF0	; 240
     faa:	80 25       	eor	r24, r0
     fac:	09 2e       	mov	r0, r25
     fae:	98 2f       	mov	r25, r24
     fb0:	82 95       	swap	r24
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	08 26       	eor	r0, r24
     fb6:	86 95       	lsr	r24
     fb8:	98 27       	eor	r25, r24
     fba:	89 27       	eor	r24, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	88 0f       	add	r24, r24
     fc0:	88 0f       	add	r24, r24
     fc2:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fc4:	e2 17       	cp	r30, r18
     fc6:	f3 07       	cpc	r31, r19
     fc8:	59 f7       	brne	.-42     	; 0xfa0 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fca:	08 95       	ret

00000fcc <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     fcc:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     fce:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     fd0:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     fd2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <tx_mask>
    or tmpreg1, ddrreg
     fd6:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     fd8:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     fda:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fdc:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
     fe0:	20 30       	cpi	r18, 0x00	; 0
     fe2:	29 f0       	breq	.+10     	; 0xfee <message_send+0x22>
     fe4:	00 00       	nop
     fe6:	25 b1       	in	r18, 0x05	; 5
     fe8:	23 2b       	or	r18, r19
     fea:	25 b9       	out	0x05, r18	; 5
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <message_send+0x2a>
     fee:	00 00       	nop
     ff0:	00 00       	nop
     ff2:	00 00       	nop
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <message_send+0x2a>
     ff6:	00 00       	nop
     ff8:	00 00       	nop
     ffa:	00 00       	nop
     ffc:	30 95       	com	r19
     ffe:	25 b1       	in	r18, 0x05	; 5
    1000:	23 23       	and	r18, r19
    1002:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1004:	2e ea       	ldi	r18, 0xAE	; 174
    1006:	2a 95       	dec	r18
    1008:	f1 f7       	brne	.-4      	; 0x1006 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    100a:	2b ee       	ldi	r18, 0xEB	; 235

0000100c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    100c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    100e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1012:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1014:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
    1018:	30 95       	com	r19
    in tmpreg1, IR_PORT
    101a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    101c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    101e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1020:	0f be       	out	0x3f, r0	; 63
    return 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret

00001026 <nocollision>:
nocollision:
    nop
    1026:	00 00       	nop
    dec tmpreg1
    1028:	2a 95       	dec	r18
    brne checkcollision
    102a:	81 f7       	brne	.-32     	; 0x100c <checkcollision>

    ldi tmpreg1, 0x01
    102c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    102e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    1032:	20 30       	cpi	r18, 0x00	; 0
    1034:	29 f0       	breq	.+10     	; 0x1040 <nocollision+0x1a>
    1036:	00 00       	nop
    1038:	25 b1       	in	r18, 0x05	; 5
    103a:	23 2b       	or	r18, r19
    103c:	25 b9       	out	0x05, r18	; 5
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <nocollision+0x22>
    1040:	00 00       	nop
    1042:	00 00       	nop
    1044:	00 00       	nop
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <nocollision+0x22>
    1048:	00 00       	nop
    104a:	00 00       	nop
    104c:	00 00       	nop
    104e:	30 95       	com	r19
    1050:	25 b1       	in	r18, 0x05	; 5
    1052:	23 23       	and	r18, r19
    1054:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1056:	00 00       	nop
    1058:	24 e5       	ldi	r18, 0x54	; 84
    105a:	2a 95       	dec	r18
    105c:	f1 f7       	brne	.-4      	; 0x105a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    105e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1060:	8c e0       	ldi	r24, 0x0C	; 12

00001062 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1062:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1064:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1066:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1068:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    106a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    106c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    106e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1070:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1072:	50 e0       	ldi	r21, 0x00	; 0

00001074 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1074:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1076:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1078:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    107a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    107c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    1080:	20 30       	cpi	r18, 0x00	; 0
    1082:	29 f0       	breq	.+10     	; 0x108e <sendbit+0x1a>
    1084:	00 00       	nop
    1086:	25 b1       	in	r18, 0x05	; 5
    1088:	23 2b       	or	r18, r19
    108a:	25 b9       	out	0x05, r18	; 5
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <sendbit+0x22>
    108e:	00 00       	nop
    1090:	00 00       	nop
    1092:	00 00       	nop
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <sendbit+0x22>
    1096:	00 00       	nop
    1098:	00 00       	nop
    109a:	00 00       	nop
    109c:	30 95       	com	r19
    109e:	25 b1       	in	r18, 0x05	; 5
    10a0:	23 23       	and	r18, r19
    10a2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    10a4:	00 00       	nop
    10a6:	21 e5       	ldi	r18, 0x51	; 81
    10a8:	2a 95       	dec	r18
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    10ac:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    10ae:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    10b0:	9a 95       	dec	r25
    brne sendbit
    10b2:	01 f7       	brne	.-64     	; 0x1074 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    10b4:	8a 95       	dec	r24
    brne sendbyte
    10b6:	a9 f6       	brne	.-86     	; 0x1062 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    10b8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    10ba:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    10bc:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10be:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10c0:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
    10c4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10c6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10c8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10ca:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10cc:	0f be       	out	0x3f, r0	; 63
    return 1
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret

000010d2 <main>:

int main() {
  kilo_init();
    10d2:	0e 94 b6 00 	call	0x16c	; 0x16c <kilo_init>
  kilo_start(setup, loop);
    10d6:	62 e7       	ldi	r22, 0x72	; 114
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	81 e7       	ldi	r24, 0x71	; 113
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 ae 04 	call	0x95c	; 0x95c <kilo_start>

  return 0;
}
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	08 95       	ret

000010e8 <__divmodhi4>:
    10e8:	97 fb       	bst	r25, 7
    10ea:	07 2e       	mov	r0, r23
    10ec:	16 f4       	brtc	.+4      	; 0x10f2 <__divmodhi4+0xa>
    10ee:	00 94       	com	r0
    10f0:	07 d0       	rcall	.+14     	; 0x1100 <__divmodhi4_neg1>
    10f2:	77 fd       	sbrc	r23, 7
    10f4:	09 d0       	rcall	.+18     	; 0x1108 <__divmodhi4_neg2>
    10f6:	0e 94 9d 08 	call	0x113a	; 0x113a <__udivmodhi4>
    10fa:	07 fc       	sbrc	r0, 7
    10fc:	05 d0       	rcall	.+10     	; 0x1108 <__divmodhi4_neg2>
    10fe:	3e f4       	brtc	.+14     	; 0x110e <__divmodhi4_exit>

00001100 <__divmodhi4_neg1>:
    1100:	90 95       	com	r25
    1102:	81 95       	neg	r24
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__divmodhi4_neg2>:
    1108:	70 95       	com	r23
    110a:	61 95       	neg	r22
    110c:	7f 4f       	sbci	r23, 0xFF	; 255

0000110e <__divmodhi4_exit>:
    110e:	08 95       	ret

00001110 <__tablejump2__>:
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	05 90       	lpm	r0, Z+
    1116:	f4 91       	lpm	r31, Z
    1118:	e0 2d       	mov	r30, r0
    111a:	09 94       	ijmp

0000111c <__umulhisi3>:
    111c:	a2 9f       	mul	r26, r18
    111e:	b0 01       	movw	r22, r0
    1120:	b3 9f       	mul	r27, r19
    1122:	c0 01       	movw	r24, r0
    1124:	a3 9f       	mul	r26, r19
    1126:	70 0d       	add	r23, r0
    1128:	81 1d       	adc	r24, r1
    112a:	11 24       	eor	r1, r1
    112c:	91 1d       	adc	r25, r1
    112e:	b2 9f       	mul	r27, r18
    1130:	70 0d       	add	r23, r0
    1132:	81 1d       	adc	r24, r1
    1134:	11 24       	eor	r1, r1
    1136:	91 1d       	adc	r25, r1
    1138:	08 95       	ret

0000113a <__udivmodhi4>:
    113a:	aa 1b       	sub	r26, r26
    113c:	bb 1b       	sub	r27, r27
    113e:	51 e1       	ldi	r21, 0x11	; 17
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <__udivmodhi4_ep>

00001142 <__udivmodhi4_loop>:
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	a6 17       	cp	r26, r22
    1148:	b7 07       	cpc	r27, r23
    114a:	10 f0       	brcs	.+4      	; 0x1150 <__udivmodhi4_ep>
    114c:	a6 1b       	sub	r26, r22
    114e:	b7 0b       	sbc	r27, r23

00001150 <__udivmodhi4_ep>:
    1150:	88 1f       	adc	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	5a 95       	dec	r21
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__udivmodhi4_loop>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	08 95       	ret

00001162 <__subsf3>:
    1162:	50 58       	subi	r21, 0x80	; 128

00001164 <__addsf3>:
    1164:	bb 27       	eor	r27, r27
    1166:	aa 27       	eor	r26, r26
    1168:	0e 94 c9 08 	call	0x1192	; 0x1192 <__addsf3x>
    116c:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_round>
    1170:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscA>
    1174:	38 f0       	brcs	.+14     	; 0x1184 <__addsf3+0x20>
    1176:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_pscB>
    117a:	20 f0       	brcs	.+8      	; 0x1184 <__addsf3+0x20>
    117c:	39 f4       	brne	.+14     	; 0x118c <__addsf3+0x28>
    117e:	9f 3f       	cpi	r25, 0xFF	; 255
    1180:	19 f4       	brne	.+6      	; 0x1188 <__addsf3+0x24>
    1182:	26 f4       	brtc	.+8      	; 0x118c <__addsf3+0x28>
    1184:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_nan>
    1188:	0e f4       	brtc	.+2      	; 0x118c <__addsf3+0x28>
    118a:	e0 95       	com	r30
    118c:	e7 fb       	bst	r30, 7
    118e:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_inf>

00001192 <__addsf3x>:
    1192:	e9 2f       	mov	r30, r25
    1194:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_split3>
    1198:	58 f3       	brcs	.-42     	; 0x1170 <__addsf3+0xc>
    119a:	ba 17       	cp	r27, r26
    119c:	62 07       	cpc	r22, r18
    119e:	73 07       	cpc	r23, r19
    11a0:	84 07       	cpc	r24, r20
    11a2:	95 07       	cpc	r25, r21
    11a4:	20 f0       	brcs	.+8      	; 0x11ae <__addsf3x+0x1c>
    11a6:	79 f4       	brne	.+30     	; 0x11c6 <__addsf3x+0x34>
    11a8:	a6 f5       	brtc	.+104    	; 0x1212 <__addsf3x+0x80>
    11aa:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_zero>
    11ae:	0e f4       	brtc	.+2      	; 0x11b2 <__addsf3x+0x20>
    11b0:	e0 95       	com	r30
    11b2:	0b 2e       	mov	r0, r27
    11b4:	ba 2f       	mov	r27, r26
    11b6:	a0 2d       	mov	r26, r0
    11b8:	0b 01       	movw	r0, r22
    11ba:	b9 01       	movw	r22, r18
    11bc:	90 01       	movw	r18, r0
    11be:	0c 01       	movw	r0, r24
    11c0:	ca 01       	movw	r24, r20
    11c2:	a0 01       	movw	r20, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	ff 27       	eor	r31, r31
    11c8:	59 1b       	sub	r21, r25
    11ca:	99 f0       	breq	.+38     	; 0x11f2 <__addsf3x+0x60>
    11cc:	59 3f       	cpi	r21, 0xF9	; 249
    11ce:	50 f4       	brcc	.+20     	; 0x11e4 <__addsf3x+0x52>
    11d0:	50 3e       	cpi	r21, 0xE0	; 224
    11d2:	68 f1       	brcs	.+90     	; 0x122e <__addsf3x+0x9c>
    11d4:	1a 16       	cp	r1, r26
    11d6:	f0 40       	sbci	r31, 0x00	; 0
    11d8:	a2 2f       	mov	r26, r18
    11da:	23 2f       	mov	r18, r19
    11dc:	34 2f       	mov	r19, r20
    11de:	44 27       	eor	r20, r20
    11e0:	58 5f       	subi	r21, 0xF8	; 248
    11e2:	f3 cf       	rjmp	.-26     	; 0x11ca <__addsf3x+0x38>
    11e4:	46 95       	lsr	r20
    11e6:	37 95       	ror	r19
    11e8:	27 95       	ror	r18
    11ea:	a7 95       	ror	r26
    11ec:	f0 40       	sbci	r31, 0x00	; 0
    11ee:	53 95       	inc	r21
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__addsf3x+0x52>
    11f2:	7e f4       	brtc	.+30     	; 0x1212 <__addsf3x+0x80>
    11f4:	1f 16       	cp	r1, r31
    11f6:	ba 0b       	sbc	r27, r26
    11f8:	62 0b       	sbc	r22, r18
    11fa:	73 0b       	sbc	r23, r19
    11fc:	84 0b       	sbc	r24, r20
    11fe:	ba f0       	brmi	.+46     	; 0x122e <__addsf3x+0x9c>
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	a1 f0       	breq	.+40     	; 0x122c <__addsf3x+0x9a>
    1204:	ff 0f       	add	r31, r31
    1206:	bb 1f       	adc	r27, r27
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	c2 f7       	brpl	.-16     	; 0x1200 <__addsf3x+0x6e>
    1210:	0e c0       	rjmp	.+28     	; 0x122e <__addsf3x+0x9c>
    1212:	ba 0f       	add	r27, r26
    1214:	62 1f       	adc	r22, r18
    1216:	73 1f       	adc	r23, r19
    1218:	84 1f       	adc	r24, r20
    121a:	48 f4       	brcc	.+18     	; 0x122e <__addsf3x+0x9c>
    121c:	87 95       	ror	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	b7 95       	ror	r27
    1224:	f7 95       	ror	r31
    1226:	9e 3f       	cpi	r25, 0xFE	; 254
    1228:	08 f0       	brcs	.+2      	; 0x122c <__addsf3x+0x9a>
    122a:	b0 cf       	rjmp	.-160    	; 0x118c <__addsf3+0x28>
    122c:	93 95       	inc	r25
    122e:	88 0f       	add	r24, r24
    1230:	08 f0       	brcs	.+2      	; 0x1234 <__addsf3x+0xa2>
    1232:	99 27       	eor	r25, r25
    1234:	ee 0f       	add	r30, r30
    1236:	97 95       	ror	r25
    1238:	87 95       	ror	r24
    123a:	08 95       	ret

0000123c <__divsf3>:
    123c:	0e 94 32 09 	call	0x1264	; 0x1264 <__divsf3x>
    1240:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_round>
    1244:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_pscB>
    1248:	58 f0       	brcs	.+22     	; 0x1260 <__divsf3+0x24>
    124a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscA>
    124e:	40 f0       	brcs	.+16     	; 0x1260 <__divsf3+0x24>
    1250:	29 f4       	brne	.+10     	; 0x125c <__divsf3+0x20>
    1252:	5f 3f       	cpi	r21, 0xFF	; 255
    1254:	29 f0       	breq	.+10     	; 0x1260 <__divsf3+0x24>
    1256:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_inf>
    125a:	51 11       	cpse	r21, r1
    125c:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_szero>
    1260:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_nan>

00001264 <__divsf3x>:
    1264:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_split3>
    1268:	68 f3       	brcs	.-38     	; 0x1244 <__divsf3+0x8>

0000126a <__divsf3_pse>:
    126a:	99 23       	and	r25, r25
    126c:	b1 f3       	breq	.-20     	; 0x125a <__divsf3+0x1e>
    126e:	55 23       	and	r21, r21
    1270:	91 f3       	breq	.-28     	; 0x1256 <__divsf3+0x1a>
    1272:	95 1b       	sub	r25, r21
    1274:	55 0b       	sbc	r21, r21
    1276:	bb 27       	eor	r27, r27
    1278:	aa 27       	eor	r26, r26
    127a:	62 17       	cp	r22, r18
    127c:	73 07       	cpc	r23, r19
    127e:	84 07       	cpc	r24, r20
    1280:	38 f0       	brcs	.+14     	; 0x1290 <__divsf3_pse+0x26>
    1282:	9f 5f       	subi	r25, 0xFF	; 255
    1284:	5f 4f       	sbci	r21, 0xFF	; 255
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	44 1f       	adc	r20, r20
    128c:	aa 1f       	adc	r26, r26
    128e:	a9 f3       	breq	.-22     	; 0x127a <__divsf3_pse+0x10>
    1290:	35 d0       	rcall	.+106    	; 0x12fc <__divsf3_pse+0x92>
    1292:	0e 2e       	mov	r0, r30
    1294:	3a f0       	brmi	.+14     	; 0x12a4 <__divsf3_pse+0x3a>
    1296:	e0 e8       	ldi	r30, 0x80	; 128
    1298:	32 d0       	rcall	.+100    	; 0x12fe <__divsf3_pse+0x94>
    129a:	91 50       	subi	r25, 0x01	; 1
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	e6 95       	lsr	r30
    12a0:	00 1c       	adc	r0, r0
    12a2:	ca f7       	brpl	.-14     	; 0x1296 <__divsf3_pse+0x2c>
    12a4:	2b d0       	rcall	.+86     	; 0x12fc <__divsf3_pse+0x92>
    12a6:	fe 2f       	mov	r31, r30
    12a8:	29 d0       	rcall	.+82     	; 0x12fc <__divsf3_pse+0x92>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	bb 1f       	adc	r27, r27
    12b2:	26 17       	cp	r18, r22
    12b4:	37 07       	cpc	r19, r23
    12b6:	48 07       	cpc	r20, r24
    12b8:	ab 07       	cpc	r26, r27
    12ba:	b0 e8       	ldi	r27, 0x80	; 128
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <__divsf3_pse+0x56>
    12be:	bb 0b       	sbc	r27, r27
    12c0:	80 2d       	mov	r24, r0
    12c2:	bf 01       	movw	r22, r30
    12c4:	ff 27       	eor	r31, r31
    12c6:	93 58       	subi	r25, 0x83	; 131
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	3a f0       	brmi	.+14     	; 0x12da <__divsf3_pse+0x70>
    12cc:	9e 3f       	cpi	r25, 0xFE	; 254
    12ce:	51 05       	cpc	r21, r1
    12d0:	78 f0       	brcs	.+30     	; 0x12f0 <__divsf3_pse+0x86>
    12d2:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_inf>
    12d6:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_szero>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	e4 f3       	brlt	.-8      	; 0x12d6 <__divsf3_pse+0x6c>
    12de:	98 3e       	cpi	r25, 0xE8	; 232
    12e0:	d4 f3       	brlt	.-12     	; 0x12d6 <__divsf3_pse+0x6c>
    12e2:	86 95       	lsr	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	f7 95       	ror	r31
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__divsf3_pse+0x78>
    12f0:	88 0f       	add	r24, r24
    12f2:	91 1d       	adc	r25, r1
    12f4:	96 95       	lsr	r25
    12f6:	87 95       	ror	r24
    12f8:	97 f9       	bld	r25, 7
    12fa:	08 95       	ret
    12fc:	e1 e0       	ldi	r30, 0x01	; 1
    12fe:	66 0f       	add	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	bb 1f       	adc	r27, r27
    1306:	62 17       	cp	r22, r18
    1308:	73 07       	cpc	r23, r19
    130a:	84 07       	cpc	r24, r20
    130c:	ba 07       	cpc	r27, r26
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__divsf3_pse+0xae>
    1310:	62 1b       	sub	r22, r18
    1312:	73 0b       	sbc	r23, r19
    1314:	84 0b       	sbc	r24, r20
    1316:	ba 0b       	sbc	r27, r26
    1318:	ee 1f       	adc	r30, r30
    131a:	88 f7       	brcc	.-30     	; 0x12fe <__divsf3_pse+0x94>
    131c:	e0 95       	com	r30
    131e:	08 95       	ret

00001320 <__fixsfsi>:
    1320:	0e 94 97 09 	call	0x132e	; 0x132e <__fixunssfsi>
    1324:	68 94       	set
    1326:	b1 11       	cpse	r27, r1
    1328:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_szero>
    132c:	08 95       	ret

0000132e <__fixunssfsi>:
    132e:	0e 94 33 0a 	call	0x1466	; 0x1466 <__fp_splitA>
    1332:	88 f0       	brcs	.+34     	; 0x1356 <__fixunssfsi+0x28>
    1334:	9f 57       	subi	r25, 0x7F	; 127
    1336:	98 f0       	brcs	.+38     	; 0x135e <__fixunssfsi+0x30>
    1338:	b9 2f       	mov	r27, r25
    133a:	99 27       	eor	r25, r25
    133c:	b7 51       	subi	r27, 0x17	; 23
    133e:	b0 f0       	brcs	.+44     	; 0x136c <__fixunssfsi+0x3e>
    1340:	e1 f0       	breq	.+56     	; 0x137a <__fixunssfsi+0x4c>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a f0       	brmi	.+6      	; 0x1352 <__fixunssfsi+0x24>
    134c:	ba 95       	dec	r27
    134e:	c9 f7       	brne	.-14     	; 0x1342 <__fixunssfsi+0x14>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <__fixunssfsi+0x4c>
    1352:	b1 30       	cpi	r27, 0x01	; 1
    1354:	91 f0       	breq	.+36     	; 0x137a <__fixunssfsi+0x4c>
    1356:	0e 94 4d 0a 	call	0x149a	; 0x149a <__fp_zero>
    135a:	b1 e0       	ldi	r27, 0x01	; 1
    135c:	08 95       	ret
    135e:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_zero>
    1362:	67 2f       	mov	r22, r23
    1364:	78 2f       	mov	r23, r24
    1366:	88 27       	eor	r24, r24
    1368:	b8 5f       	subi	r27, 0xF8	; 248
    136a:	39 f0       	breq	.+14     	; 0x137a <__fixunssfsi+0x4c>
    136c:	b9 3f       	cpi	r27, 0xF9	; 249
    136e:	cc f3       	brlt	.-14     	; 0x1362 <__fixunssfsi+0x34>
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b3 95       	inc	r27
    1378:	d9 f7       	brne	.-10     	; 0x1370 <__fixunssfsi+0x42>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__fixunssfsi+0x5c>
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	08 95       	ret

0000138c <__floatunsisf>:
    138c:	e8 94       	clt
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <__floatsisf+0x12>

00001390 <__floatsisf>:
    1390:	97 fb       	bst	r25, 7
    1392:	3e f4       	brtc	.+14     	; 0x13a2 <__floatsisf+0x12>
    1394:	90 95       	com	r25
    1396:	80 95       	com	r24
    1398:	70 95       	com	r23
    139a:	61 95       	neg	r22
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	8f 4f       	sbci	r24, 0xFF	; 255
    13a0:	9f 4f       	sbci	r25, 0xFF	; 255
    13a2:	99 23       	and	r25, r25
    13a4:	a9 f0       	breq	.+42     	; 0x13d0 <__floatsisf+0x40>
    13a6:	f9 2f       	mov	r31, r25
    13a8:	96 e9       	ldi	r25, 0x96	; 150
    13aa:	bb 27       	eor	r27, r27
    13ac:	93 95       	inc	r25
    13ae:	f6 95       	lsr	r31
    13b0:	87 95       	ror	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	b7 95       	ror	r27
    13b8:	f1 11       	cpse	r31, r1
    13ba:	f8 cf       	rjmp	.-16     	; 0x13ac <__floatsisf+0x1c>
    13bc:	fa f4       	brpl	.+62     	; 0x13fc <__floatsisf+0x6c>
    13be:	bb 0f       	add	r27, r27
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <__floatsisf+0x36>
    13c2:	60 ff       	sbrs	r22, 0
    13c4:	1b c0       	rjmp	.+54     	; 0x13fc <__floatsisf+0x6c>
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	16 c0       	rjmp	.+44     	; 0x13fc <__floatsisf+0x6c>
    13d0:	88 23       	and	r24, r24
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <__floatsisf+0x48>
    13d4:	96 e9       	ldi	r25, 0x96	; 150
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <__floatsisf+0x6a>
    13d8:	77 23       	and	r23, r23
    13da:	21 f0       	breq	.+8      	; 0x13e4 <__floatsisf+0x54>
    13dc:	9e e8       	ldi	r25, 0x8E	; 142
    13de:	87 2f       	mov	r24, r23
    13e0:	76 2f       	mov	r23, r22
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <__floatsisf+0x5e>
    13e4:	66 23       	and	r22, r22
    13e6:	71 f0       	breq	.+28     	; 0x1404 <__floatsisf+0x74>
    13e8:	96 e8       	ldi	r25, 0x86	; 134
    13ea:	86 2f       	mov	r24, r22
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	2a f0       	brmi	.+10     	; 0x13fc <__floatsisf+0x6c>
    13f2:	9a 95       	dec	r25
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	da f7       	brpl	.-10     	; 0x13f2 <__floatsisf+0x62>
    13fc:	88 0f       	add	r24, r24
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <__fp_inf>:
    1406:	97 f9       	bld	r25, 7
    1408:	9f 67       	ori	r25, 0x7F	; 127
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	08 95       	ret

00001412 <__fp_nan>:
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	80 ec       	ldi	r24, 0xC0	; 192
    1416:	08 95       	ret

00001418 <__fp_pscA>:
    1418:	00 24       	eor	r0, r0
    141a:	0a 94       	dec	r0
    141c:	16 16       	cp	r1, r22
    141e:	17 06       	cpc	r1, r23
    1420:	18 06       	cpc	r1, r24
    1422:	09 06       	cpc	r0, r25
    1424:	08 95       	ret

00001426 <__fp_pscB>:
    1426:	00 24       	eor	r0, r0
    1428:	0a 94       	dec	r0
    142a:	12 16       	cp	r1, r18
    142c:	13 06       	cpc	r1, r19
    142e:	14 06       	cpc	r1, r20
    1430:	05 06       	cpc	r0, r21
    1432:	08 95       	ret

00001434 <__fp_round>:
    1434:	09 2e       	mov	r0, r25
    1436:	03 94       	inc	r0
    1438:	00 0c       	add	r0, r0
    143a:	11 f4       	brne	.+4      	; 0x1440 <__fp_round+0xc>
    143c:	88 23       	and	r24, r24
    143e:	52 f0       	brmi	.+20     	; 0x1454 <__fp_round+0x20>
    1440:	bb 0f       	add	r27, r27
    1442:	40 f4       	brcc	.+16     	; 0x1454 <__fp_round+0x20>
    1444:	bf 2b       	or	r27, r31
    1446:	11 f4       	brne	.+4      	; 0x144c <__fp_round+0x18>
    1448:	60 ff       	sbrs	r22, 0
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <__fp_round+0x20>
    144c:	6f 5f       	subi	r22, 0xFF	; 255
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <__fp_split3>:
    1456:	57 fd       	sbrc	r21, 7
    1458:	90 58       	subi	r25, 0x80	; 128
    145a:	44 0f       	add	r20, r20
    145c:	55 1f       	adc	r21, r21
    145e:	59 f0       	breq	.+22     	; 0x1476 <__fp_splitA+0x10>
    1460:	5f 3f       	cpi	r21, 0xFF	; 255
    1462:	71 f0       	breq	.+28     	; 0x1480 <__fp_splitA+0x1a>
    1464:	47 95       	ror	r20

00001466 <__fp_splitA>:
    1466:	88 0f       	add	r24, r24
    1468:	97 fb       	bst	r25, 7
    146a:	99 1f       	adc	r25, r25
    146c:	61 f0       	breq	.+24     	; 0x1486 <__fp_splitA+0x20>
    146e:	9f 3f       	cpi	r25, 0xFF	; 255
    1470:	79 f0       	breq	.+30     	; 0x1490 <__fp_splitA+0x2a>
    1472:	87 95       	ror	r24
    1474:	08 95       	ret
    1476:	12 16       	cp	r1, r18
    1478:	13 06       	cpc	r1, r19
    147a:	14 06       	cpc	r1, r20
    147c:	55 1f       	adc	r21, r21
    147e:	f2 cf       	rjmp	.-28     	; 0x1464 <__fp_split3+0xe>
    1480:	46 95       	lsr	r20
    1482:	f1 df       	rcall	.-30     	; 0x1466 <__fp_splitA>
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <__fp_splitA+0x30>
    1486:	16 16       	cp	r1, r22
    1488:	17 06       	cpc	r1, r23
    148a:	18 06       	cpc	r1, r24
    148c:	99 1f       	adc	r25, r25
    148e:	f1 cf       	rjmp	.-30     	; 0x1472 <__fp_splitA+0xc>
    1490:	86 95       	lsr	r24
    1492:	71 05       	cpc	r23, r1
    1494:	61 05       	cpc	r22, r1
    1496:	08 94       	sec
    1498:	08 95       	ret

0000149a <__fp_zero>:
    149a:	e8 94       	clt

0000149c <__fp_szero>:
    149c:	bb 27       	eor	r27, r27
    149e:	66 27       	eor	r22, r22
    14a0:	77 27       	eor	r23, r23
    14a2:	cb 01       	movw	r24, r22
    14a4:	97 f9       	bld	r25, 7
    14a6:	08 95       	ret

000014a8 <__mulsf3>:
    14a8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3x>
    14ac:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_round>
    14b0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscA>
    14b4:	38 f0       	brcs	.+14     	; 0x14c4 <__mulsf3+0x1c>
    14b6:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_pscB>
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__mulsf3+0x1c>
    14bc:	95 23       	and	r25, r21
    14be:	11 f0       	breq	.+4      	; 0x14c4 <__mulsf3+0x1c>
    14c0:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_inf>
    14c4:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_nan>
    14c8:	11 24       	eor	r1, r1
    14ca:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_szero>

000014ce <__mulsf3x>:
    14ce:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_split3>
    14d2:	70 f3       	brcs	.-36     	; 0x14b0 <__mulsf3+0x8>

000014d4 <__mulsf3_pse>:
    14d4:	95 9f       	mul	r25, r21
    14d6:	c1 f3       	breq	.-16     	; 0x14c8 <__mulsf3+0x20>
    14d8:	95 0f       	add	r25, r21
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	55 1f       	adc	r21, r21
    14de:	62 9f       	mul	r22, r18
    14e0:	f0 01       	movw	r30, r0
    14e2:	72 9f       	mul	r23, r18
    14e4:	bb 27       	eor	r27, r27
    14e6:	f0 0d       	add	r31, r0
    14e8:	b1 1d       	adc	r27, r1
    14ea:	63 9f       	mul	r22, r19
    14ec:	aa 27       	eor	r26, r26
    14ee:	f0 0d       	add	r31, r0
    14f0:	b1 1d       	adc	r27, r1
    14f2:	aa 1f       	adc	r26, r26
    14f4:	64 9f       	mul	r22, r20
    14f6:	66 27       	eor	r22, r22
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	66 1f       	adc	r22, r22
    14fe:	82 9f       	mul	r24, r18
    1500:	22 27       	eor	r18, r18
    1502:	b0 0d       	add	r27, r0
    1504:	a1 1d       	adc	r26, r1
    1506:	62 1f       	adc	r22, r18
    1508:	73 9f       	mul	r23, r19
    150a:	b0 0d       	add	r27, r0
    150c:	a1 1d       	adc	r26, r1
    150e:	62 1f       	adc	r22, r18
    1510:	83 9f       	mul	r24, r19
    1512:	a0 0d       	add	r26, r0
    1514:	61 1d       	adc	r22, r1
    1516:	22 1f       	adc	r18, r18
    1518:	74 9f       	mul	r23, r20
    151a:	33 27       	eor	r19, r19
    151c:	a0 0d       	add	r26, r0
    151e:	61 1d       	adc	r22, r1
    1520:	23 1f       	adc	r18, r19
    1522:	84 9f       	mul	r24, r20
    1524:	60 0d       	add	r22, r0
    1526:	21 1d       	adc	r18, r1
    1528:	82 2f       	mov	r24, r18
    152a:	76 2f       	mov	r23, r22
    152c:	6a 2f       	mov	r22, r26
    152e:	11 24       	eor	r1, r1
    1530:	9f 57       	subi	r25, 0x7F	; 127
    1532:	50 40       	sbci	r21, 0x00	; 0
    1534:	9a f0       	brmi	.+38     	; 0x155c <__mulsf3_pse+0x88>
    1536:	f1 f0       	breq	.+60     	; 0x1574 <__mulsf3_pse+0xa0>
    1538:	88 23       	and	r24, r24
    153a:	4a f0       	brmi	.+18     	; 0x154e <__mulsf3_pse+0x7a>
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	bb 1f       	adc	r27, r27
    1542:	66 1f       	adc	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	91 50       	subi	r25, 0x01	; 1
    154a:	50 40       	sbci	r21, 0x00	; 0
    154c:	a9 f7       	brne	.-22     	; 0x1538 <__mulsf3_pse+0x64>
    154e:	9e 3f       	cpi	r25, 0xFE	; 254
    1550:	51 05       	cpc	r21, r1
    1552:	80 f0       	brcs	.+32     	; 0x1574 <__mulsf3_pse+0xa0>
    1554:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__fp_inf>
    1558:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__fp_szero>
    155c:	5f 3f       	cpi	r21, 0xFF	; 255
    155e:	e4 f3       	brlt	.-8      	; 0x1558 <__mulsf3_pse+0x84>
    1560:	98 3e       	cpi	r25, 0xE8	; 232
    1562:	d4 f3       	brlt	.-12     	; 0x1558 <__mulsf3_pse+0x84>
    1564:	86 95       	lsr	r24
    1566:	77 95       	ror	r23
    1568:	67 95       	ror	r22
    156a:	b7 95       	ror	r27
    156c:	f7 95       	ror	r31
    156e:	e7 95       	ror	r30
    1570:	9f 5f       	subi	r25, 0xFF	; 255
    1572:	c1 f7       	brne	.-16     	; 0x1564 <__mulsf3_pse+0x90>
    1574:	fe 2b       	or	r31, r30
    1576:	88 0f       	add	r24, r24
    1578:	91 1d       	adc	r25, r1
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	97 f9       	bld	r25, 7
    1580:	08 95       	ret

00001582 <do_rand>:
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
    1598:	68 81       	ld	r22, Y
    159a:	79 81       	ldd	r23, Y+1	; 0x01
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	61 15       	cp	r22, r1
    15a2:	71 05       	cpc	r23, r1
    15a4:	81 05       	cpc	r24, r1
    15a6:	91 05       	cpc	r25, r1
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <do_rand+0x30>
    15aa:	64 e2       	ldi	r22, 0x24	; 36
    15ac:	79 ed       	ldi	r23, 0xD9	; 217
    15ae:	8b e5       	ldi	r24, 0x5B	; 91
    15b0:	97 e0       	ldi	r25, 0x07	; 7
    15b2:	2d e1       	ldi	r18, 0x1D	; 29
    15b4:	33 ef       	ldi	r19, 0xF3	; 243
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	0e 94 33 0b 	call	0x1666	; 0x1666 <__divmodsi4>
    15be:	49 01       	movw	r8, r18
    15c0:	5a 01       	movw	r10, r20
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	a7 ea       	ldi	r26, 0xA7	; 167
    15c8:	b1 e4       	ldi	r27, 0x41	; 65
    15ca:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__muluhisi3>
    15ce:	6b 01       	movw	r12, r22
    15d0:	7c 01       	movw	r14, r24
    15d2:	ac ee       	ldi	r26, 0xEC	; 236
    15d4:	b4 ef       	ldi	r27, 0xF4	; 244
    15d6:	a5 01       	movw	r20, r10
    15d8:	94 01       	movw	r18, r8
    15da:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__mulohisi3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8c 0d       	add	r24, r12
    15e4:	9d 1d       	adc	r25, r13
    15e6:	ae 1d       	adc	r26, r14
    15e8:	bf 1d       	adc	r27, r15
    15ea:	b7 ff       	sbrs	r27, 7
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <do_rand+0x72>
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	a1 09       	sbc	r26, r1
    15f2:	b0 48       	sbci	r27, 0x80	; 128
    15f4:	88 83       	st	Y, r24
    15f6:	99 83       	std	Y+1, r25	; 0x01
    15f8:	aa 83       	std	Y+2, r26	; 0x02
    15fa:	bb 83       	std	Y+3, r27	; 0x03
    15fc:	9f 77       	andi	r25, 0x7F	; 127
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	08 95       	ret

00001614 <rand_r>:
    1614:	0e 94 c1 0a 	call	0x1582	; 0x1582 <do_rand>
    1618:	08 95       	ret

0000161a <rand>:
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <do_rand>
    1622:	08 95       	ret

00001624 <srand>:
    1624:	a0 e0       	ldi	r26, 0x00	; 0
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    162c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1630:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1634:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1638:	08 95       	ret

0000163a <eeprom_read_byte>:
    163a:	f9 99       	sbic	0x1f, 1	; 31
    163c:	fe cf       	rjmp	.-4      	; 0x163a <eeprom_read_byte>
    163e:	92 bd       	out	0x22, r25	; 34
    1640:	81 bd       	out	0x21, r24	; 33
    1642:	f8 9a       	sbi	0x1f, 0	; 31
    1644:	99 27       	eor	r25, r25
    1646:	80 b5       	in	r24, 0x20	; 32
    1648:	08 95       	ret

0000164a <eeprom_write_byte>:
    164a:	26 2f       	mov	r18, r22

0000164c <eeprom_write_r18>:
    164c:	f9 99       	sbic	0x1f, 1	; 31
    164e:	fe cf       	rjmp	.-4      	; 0x164c <eeprom_write_r18>
    1650:	1f ba       	out	0x1f, r1	; 31
    1652:	92 bd       	out	0x22, r25	; 34
    1654:	81 bd       	out	0x21, r24	; 33
    1656:	20 bd       	out	0x20, r18	; 32
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	fa 9a       	sbi	0x1f, 2	; 31
    165e:	f9 9a       	sbi	0x1f, 1	; 31
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	08 95       	ret

00001666 <__divmodsi4>:
    1666:	05 2e       	mov	r0, r21
    1668:	97 fb       	bst	r25, 7
    166a:	1e f4       	brtc	.+6      	; 0x1672 <__divmodsi4+0xc>
    166c:	00 94       	com	r0
    166e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__negsi2>
    1672:	57 fd       	sbrc	r21, 7
    1674:	07 d0       	rcall	.+14     	; 0x1684 <__divmodsi4_neg2>
    1676:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__udivmodsi4>
    167a:	07 fc       	sbrc	r0, 7
    167c:	03 d0       	rcall	.+6      	; 0x1684 <__divmodsi4_neg2>
    167e:	4e f4       	brtc	.+18     	; 0x1692 <__divmodsi4_exit>
    1680:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__negsi2>

00001684 <__divmodsi4_neg2>:
    1684:	50 95       	com	r21
    1686:	40 95       	com	r20
    1688:	30 95       	com	r19
    168a:	21 95       	neg	r18
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	4f 4f       	sbci	r20, 0xFF	; 255
    1690:	5f 4f       	sbci	r21, 0xFF	; 255

00001692 <__divmodsi4_exit>:
    1692:	08 95       	ret

00001694 <__negsi2>:
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__muluhisi3>:
    16a4:	0e 94 8e 08 	call	0x111c	; 0x111c <__umulhisi3>
    16a8:	a5 9f       	mul	r26, r21
    16aa:	90 0d       	add	r25, r0
    16ac:	b4 9f       	mul	r27, r20
    16ae:	90 0d       	add	r25, r0
    16b0:	a4 9f       	mul	r26, r20
    16b2:	80 0d       	add	r24, r0
    16b4:	91 1d       	adc	r25, r1
    16b6:	11 24       	eor	r1, r1
    16b8:	08 95       	ret

000016ba <__mulshisi3>:
    16ba:	b7 ff       	sbrs	r27, 7
    16bc:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__muluhisi3>

000016c0 <__mulohisi3>:
    16c0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__muluhisi3>
    16c4:	82 1b       	sub	r24, r18
    16c6:	93 0b       	sbc	r25, r19
    16c8:	08 95       	ret

000016ca <__udivmodsi4>:
    16ca:	a1 e2       	ldi	r26, 0x21	; 33
    16cc:	1a 2e       	mov	r1, r26
    16ce:	aa 1b       	sub	r26, r26
    16d0:	bb 1b       	sub	r27, r27
    16d2:	fd 01       	movw	r30, r26
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <__udivmodsi4_ep>

000016d6 <__udivmodsi4_loop>:
    16d6:	aa 1f       	adc	r26, r26
    16d8:	bb 1f       	adc	r27, r27
    16da:	ee 1f       	adc	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	a2 17       	cp	r26, r18
    16e0:	b3 07       	cpc	r27, r19
    16e2:	e4 07       	cpc	r30, r20
    16e4:	f5 07       	cpc	r31, r21
    16e6:	20 f0       	brcs	.+8      	; 0x16f0 <__udivmodsi4_ep>
    16e8:	a2 1b       	sub	r26, r18
    16ea:	b3 0b       	sbc	r27, r19
    16ec:	e4 0b       	sbc	r30, r20
    16ee:	f5 0b       	sbc	r31, r21

000016f0 <__udivmodsi4_ep>:
    16f0:	66 1f       	adc	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	88 1f       	adc	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	1a 94       	dec	r1
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <__udivmodsi4_loop>
    16fc:	60 95       	com	r22
    16fe:	70 95       	com	r23
    1700:	80 95       	com	r24
    1702:	90 95       	com	r25
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	bd 01       	movw	r22, r26
    170a:	cf 01       	movw	r24, r30
    170c:	08 95       	ret

0000170e <_exit>:
    170e:	f8 94       	cli

00001710 <__stop_program>:
    1710:	ff cf       	rjmp	.-2      	; 0x1710 <__stop_program>
