
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	91 04       	cpc	r9, r1
      6a:	e8 04       	cpc	r14, r8
      6c:	fc 04       	cpc	r15, r12
      6e:	2d 05       	cpc	r18, r13
      70:	34 05       	cpc	r19, r4
      72:	13 05       	cpc	r17, r3
      74:	37 05       	cpc	r19, r7
      76:	95 06       	cpc	r9, r21
      78:	86 07       	cpc	r24, r22
      7a:	86 07       	cpc	r24, r22
      7c:	9e 06       	cpc	r9, r30
      7e:	a1 06       	cpc	r10, r17
      80:	a4 06       	cpc	r10, r20
      82:	a6 06       	cpc	r10, r22
      84:	a8 06       	cpc	r10, r24
      86:	aa 06       	cpc	r10, r26
      88:	5b 07       	cpc	r21, r27
      8a:	bc 06       	cpc	r11, r28

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 eb       	ldi	r30, 0xB0	; 176
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 38 08 	call	0x1070	; 0x1070 <main>
      da:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include "kilolib.h"

void setup() {
      e2:	08 95       	ret

000000e4 <loop>:
    // put your setup code here, will be run once at the beginning
}

void loop() {
    // put your main code here, will be run repeatedly
    set_color(RGB(1,0,0));
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
    delay(100);
      ea:	84 e6       	ldi	r24, 0x64	; 100
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 81 01 	call	0x302	; 0x302 <delay>
    set_color(RGB(0,1,0));
      f2:	84 e0       	ldi	r24, 0x04	; 4
      f4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
    delay(100);
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0c 94 81 01 	jmp	0x302	; 0x302 <delay>

00000100 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     100:	08 95       	ret

00000102 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	08 95       	ret

00000108 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     108:	08 95       	ret

0000010a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
    cli();
     118:	f8 94       	cli

    ports_off();
     11a:	14 b8       	out	0x04, r1	; 4
     11c:	17 b8       	out	0x07, r1	; 7
     11e:	1a b8       	out	0x0a, r1	; 10
     120:	15 b8       	out	0x05, r1	; 5
     122:	18 b8       	out	0x08, r1	; 8
     124:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     126:	52 9a       	sbi	0x0a, 2	; 10
     128:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     12a:	14 bc       	out	0x24, r1	; 36
     12c:	85 e0       	ldi	r24, 0x05	; 5
     12e:	85 bd       	out	0x25, r24	; 37
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	87 bd       	out	0x27, r24	; 39
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     13a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     13e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     142:	2f e8       	ldi	r18, 0x8F	; 143
     144:	3b e0       	ldi	r19, 0x0B	; 11
     146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     14a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     14e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     152:	53 98       	cbi	0x0a, 3	; 10
     154:	23 98       	cbi	0x04, 3	; 4
     156:	91 ea       	ldi	r25, 0xA1	; 161
     158:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     15c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     160:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     164:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     168:	8b e0       	ldi	r24, 0x0B	; 11
     16a:	80 bf       	out	0x30, r24	; 48
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     178:	83 e8       	ldi	r24, 0x83	; 131
     17a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     17e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     188:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     18c:	86 fd       	sbrc	r24, 6
     18e:	fc cf       	rjmp	.-8      	; 0x188 <kilo_init+0x7e>
    adc_trigger_high_gain();
     190:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     194:	83 ea       	ldi	r24, 0xA3	; 163
     196:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
    if (osccal != 0xFF)
     1a8:	8f 3f       	cpi	r24, 0xFF	; 255
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <kilo_init+0xa6>
        OSCCAL = osccal;
     1ac:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     1b0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    rx_leadingbit = 1;
     1b4:	c1 e0       	ldi	r28, 0x01	; 1
     1b6:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     1ba:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <rx_leadingbyte>
    rx_byteindex = 0;
     1be:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
    rx_bytevalue = 0;
     1c2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1c6:	80 e9       	ldi	r24, 0x90	; 144
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     1ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     1d2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_mask>
     1d6:	88 73       	andi	r24, 0x38	; 56
     1d8:	11 f0       	breq	.+4      	; 0x1de <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1da:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <tx_mask>
    tx_clock = 0;
     1de:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     1e2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
    tx_increment = 255;
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     1ee:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    kilo_ticks = 0;
     1f2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <kilo_ticks>
     1f6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <kilo_ticks+0x1>
     1fa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks+0x2>
     1fe:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x3>
    kilo_state = IDLE;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    kilo_tx_period = 3906;
     208:	82 e4       	ldi	r24, 0x42	; 66
     20a:	9f e0       	ldi	r25, 0x0F	; 15
     20c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <kilo_tx_period+0x1>
     210:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     214:	80 eb       	ldi	r24, 0xB0	; 176
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     21c:	c8 2f       	mov	r28, r24
     21e:	81 eb       	ldi	r24, 0xB1	; 177
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     226:	2c 2f       	mov	r18, r28
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	38 2b       	or	r19, r24
     22c:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <kilo_uid+0x1>
     230:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     23c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     248:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     254:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     258:	84 e1       	ldi	r24, 0x14	; 20
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     260:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_straight_right>
     264:	08 e3       	ldi	r16, 0x38	; 56
     266:	11 e0       	ldi	r17, 0x01	; 1
     268:	51 e1       	ldi	r21, 0x11	; 17
     26a:	e5 2e       	mov	r14, r21
     26c:	51 e0       	ldi	r21, 0x01	; 1
     26e:	f5 2e       	mov	r15, r21
     270:	c0 e2       	ldi	r28, 0x20	; 32
     272:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     274:	ce 01       	movw	r24, r28
     276:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     27a:	d8 2e       	mov	r13, r24
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     284:	2d 2d       	mov	r18, r13
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	32 2f       	mov	r19, r18
     28a:	22 27       	eor	r18, r18
     28c:	28 2b       	or	r18, r24
     28e:	f8 01       	movw	r30, r16
     290:	21 93       	st	Z+, r18
     292:	31 93       	st	Z+, r19
     294:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     296:	ce 01       	movw	r24, r28
     298:	c0 96       	adiw	r24, 0x30	; 48
     29a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     29e:	d8 2e       	mov	r13, r24
     2a0:	ce 01       	movw	r24, r28
     2a2:	c1 96       	adiw	r24, 0x31	; 49
     2a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <eeprom_read_byte>
     2a8:	2d 2d       	mov	r18, r13
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	32 2f       	mov	r19, r18
     2ae:	22 27       	eor	r18, r18
     2b0:	28 2b       	or	r18, r24
     2b2:	f7 01       	movw	r30, r14
     2b4:	21 93       	st	Z+, r18
     2b6:	31 93       	st	Z+, r19
     2b8:	7f 01       	movw	r14, r30
     2ba:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2bc:	cc 33       	cpi	r28, 0x3C	; 60
     2be:	d1 05       	cpc	r29, r1
     2c0:	c9 f6       	brne	.-78     	; 0x274 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2c2:	78 94       	sei
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	08 95       	ret

000002d4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	a8 95       	wdr
     2e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2ea:	88 61       	ori	r24, 0x18	; 24
     2ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2f4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	41 f0       	breq	.+16     	; 0x316 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     306:	ef ec       	ldi	r30, 0xCF	; 207
     308:	f7 e0       	ldi	r31, 0x07	; 7
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <delay+0x8>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <delay+0xe>
     310:	00 00       	nop
        _delay_ms(1);
        ms--;
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f6 cf       	rjmp	.-20     	; 0x302 <delay>
    }
}
     316:	08 95       	ret

00000318 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     318:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     31c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     320:	08 95       	ret

00000322 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     328:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0c 94 81 01 	jmp	0x302	; 0x302 <delay>

00000334 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     334:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     338:	81 11       	cpse	r24, r1
     33a:	1e c0       	rjmp	.+60     	; 0x378 <get_ambientlight+0x44>
        cli();
     33c:	f8 94       	cli
        adc_setup_conversion(7);
     33e:	87 e0       	ldi	r24, 0x07	; 7
     340:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     344:	83 e8       	ldi	r24, 0x83	; 131
     346:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     34a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     34e:	80 64       	ori	r24, 0x40	; 64
     350:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     354:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     358:	86 fd       	sbrc	r24, 6
     35a:	fc cf       	rjmp	.-8      	; 0x354 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     35c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     360:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     364:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     368:	23 ea       	ldi	r18, 0xA3	; 163
     36a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     374:	78 94       	sei
     376:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     37c:	08 95       	ret

0000037e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     37e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     382:	81 11       	cpse	r24, r1
     384:	1e c0       	rjmp	.+60     	; 0x3c2 <get_temperature+0x44>
        cli();
     386:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     388:	88 ec       	ldi	r24, 0xC8	; 200
     38a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     38e:	87 e8       	ldi	r24, 0x87	; 135
     390:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     394:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     398:	80 64       	ori	r24, 0x40	; 64
     39a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     39e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3a2:	86 fd       	sbrc	r24, 6
     3a4:	fc cf       	rjmp	.-8      	; 0x39e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3b2:	23 ea       	ldi	r18, 0xA3	; 163
     3b4:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3be:	78 94       	sei
     3c0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     3c6:	08 95       	ret

000003c8 <rand_hard>:

uint8_t rand_hard() {
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     3d0:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     3d2:	e3 ea       	ldi	r30, 0xA3	; 163
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     3d6:	c6 e0       	ldi	r28, 0x06	; 6
     3d8:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     3da:	a1 e0       	ldi	r26, 0x01	; 1
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     3de:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     3e0:	f8 94       	cli
            adc_setup_conversion(6);
     3e2:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3e6:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     3ea:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ee:	40 64       	ori	r20, 0x40	; 64
     3f0:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     3f4:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3f8:	46 fd       	sbrc	r20, 6
     3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <rand_hard+0x2c>
            a = ADCW&0x1;
     3fc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     400:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     404:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     406:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     40a:	50 64       	ori	r21, 0x40	; 64
     40c:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     410:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     414:	56 fd       	sbrc	r21, 6
     416:	fc cf       	rjmp	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
            b = ADCW&0x1;
     418:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     41c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     420:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     424:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     428:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     42c:	78 94       	sei
            tries++;
     42e:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     430:	61 70       	andi	r22, 0x01	; 1
     432:	46 17       	cp	r20, r22
     434:	51 f0       	breq	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
        if (a)
     436:	44 23       	and	r20, r20
     438:	59 f0       	breq	.+22     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
            num |= (1<<i);
     43a:	ad 01       	movw	r20, r26
     43c:	02 2e       	mov	r0, r18
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	44 0f       	add	r20, r20
     442:	0a 94       	dec	r0
     444:	ea f7       	brpl	.-6      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     446:	84 2b       	or	r24, r20
     448:	03 c0       	rjmp	.+6      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     44a:	90 38       	cpi	r25, 0x80	; 128
     44c:	49 f6       	brne	.-110    	; 0x3e0 <rand_hard+0x18>
     44e:	f3 cf       	rjmp	.-26     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     454:	28 30       	cpi	r18, 0x08	; 8
     456:	31 05       	cpc	r19, r1
     458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	c1 cf       	rjmp	.-126    	; 0x3de <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     462:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     466:	98 e0       	ldi	r25, 0x08	; 8
     468:	89 9f       	mul	r24, r25
     46a:	90 01       	movw	r18, r0
     46c:	11 24       	eor	r1, r1
     46e:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     470:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	89 0f       	add	r24, r25
     478:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     47c:	82 2f       	mov	r24, r18
     47e:	82 95       	swap	r24
     480:	86 95       	lsr	r24
     482:	87 70       	andi	r24, 0x07	; 7
     484:	28 27       	eor	r18, r24
     486:	96 95       	lsr	r25
     488:	96 95       	lsr	r25
     48a:	82 2f       	mov	r24, r18
     48c:	89 27       	eor	r24, r25
     48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     492:	08 95       	ret

00000494 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     494:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     498:	08 95       	ret

0000049a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     49a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     49e:	81 11       	cpse	r24, r1
     4a0:	16 c0       	rjmp	.+44     	; 0x4ce <get_voltage+0x34>
        cli();                                    // disable interrupts
     4a2:	f8 94       	cli
        adc_setup_conversion(6);
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4aa:	83 e8       	ldi	r24, 0x83	; 131
     4ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b4:	80 64       	ori	r24, 0x40	; 64
     4b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4be:	86 fd       	sbrc	r24, 6
     4c0:	fc cf       	rjmp	.-8      	; 0x4ba <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     4c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     4ca:	78 94       	sei
     4cc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     4d2:	08 95       	ret

000004d4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     4d4:	2f 92       	push	r2
     4d6:	3f 92       	push	r3
     4d8:	4f 92       	push	r4
     4da:	5f 92       	push	r5
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	8f 92       	push	r8
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     4fa:	fc 01       	movw	r30, r24
     4fc:	c2 81       	ldd	r28, Z+2	; 0x02
     4fe:	d3 81       	ldd	r29, Z+3	; 0x03
     500:	c4 38       	cpi	r28, 0x84	; 132
     502:	f3 e0       	ldi	r31, 0x03	; 3
     504:	df 07       	cpc	r29, r31
     506:	0c f0       	brlt	.+2      	; 0x50a <estimate_distance+0x36>
     508:	7e c0       	rjmp	.+252    	; 0x606 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     50a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_irhigh>
     50e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <kilo_irhigh+0x1>
     512:	8c 17       	cp	r24, r28
     514:	9d 07       	cpc	r25, r29
     516:	08 f4       	brcc	.+2      	; 0x51a <estimate_distance+0x46>
     518:	6f c0       	rjmp	.+222    	; 0x5f8 <estimate_distance+0x124>
     51a:	e3 e1       	ldi	r30, 0x13	; 19
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     520:	81 91       	ld	r24, Z+
     522:	91 91       	ld	r25, Z+
     524:	8c 17       	cp	r24, r28
     526:	9d 07       	cpc	r25, r29
     528:	20 f0       	brcs	.+8      	; 0x532 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     52a:	1f 5f       	subi	r17, 0xFF	; 255
     52c:	1e 30       	cpi	r17, 0x0E	; 14
     52e:	c1 f7       	brne	.-16     	; 0x520 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     530:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     532:	81 2f       	mov	r24, r17
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	fc 01       	movw	r30, r24
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	ef 5e       	subi	r30, 0xEF	; 239
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	e0 80       	ld	r14, Z
     542:	f1 80       	ldd	r15, Z+1	; 0x01
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	fc 01       	movw	r30, r24
     54a:	e1 5f       	subi	r30, 0xF1	; 241
     54c:	fe 4f       	sbci	r31, 0xFE	; 254
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	b7 01       	movw	r22, r14
     554:	68 1b       	sub	r22, r24
     556:	79 0b       	sbc	r23, r25
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
     564:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     568:	4b 01       	movw	r8, r22
     56a:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     56c:	be 01       	movw	r22, r28
     56e:	0d 2e       	mov	r0, r29
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	0e 94 97 09 	call	0x132e	; 0x132e <__floatsisf>
     57a:	2b 01       	movw	r4, r22
     57c:	3c 01       	movw	r6, r24
     57e:	b7 01       	movw	r22, r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
     58c:	61 2f       	mov	r22, r17
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	5f e3       	ldi	r21, 0x3F	; 63
     5a0:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	a9 01       	movw	r20, r18
     5aa:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     5ae:	a5 01       	movw	r20, r10
     5b0:	94 01       	movw	r18, r8
     5b2:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     5b6:	9b 01       	movw	r18, r22
     5b8:	ac 01       	movw	r20, r24
     5ba:	c7 01       	movw	r24, r14
     5bc:	b6 01       	movw	r22, r12
     5be:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	c3 01       	movw	r24, r6
     5c8:	b2 01       	movw	r22, r4
     5ca:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e2       	ldi	r20, 0x20	; 32
     5d4:	51 e4       	ldi	r21, 0x41	; 65
     5d6:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     5da:	0e 94 5f 09 	call	0x12be	; 0x12be <__fixsfsi>
     5de:	7b 01       	movw	r14, r22
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 5f 09 	call	0x12be	; 0x12be <__fixsfsi>
     5e8:	ab 01       	movw	r20, r22
     5ea:	bc 01       	movw	r22, r24
     5ec:	c7 01       	movw	r24, r14
     5ee:	ba 01       	movw	r22, r20
     5f0:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5f4:	16 2f       	mov	r17, r22
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     5f8:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     5fa:	cd 3b       	cpi	r28, 0xBD	; 189
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	d8 07       	cpc	r29, r24
     600:	0c f4       	brge	.+2      	; 0x604 <estimate_distance+0x130>
     602:	ca c0       	rjmp	.+404    	; 0x798 <estimate_distance+0x2c4>
     604:	01 c0       	rjmp	.+2      	; 0x608 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     606:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     608:	f1 01       	movw	r30, r2
     60a:	c0 80       	ld	r12, Z
     60c:	d1 80       	ldd	r13, Z+1	; 0x01
     60e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <kilo_irlow>
     612:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <kilo_irlow+0x1>
     616:	8c 15       	cp	r24, r12
     618:	9d 05       	cpc	r25, r13
     61a:	88 f0       	brcs	.+34     	; 0x63e <estimate_distance+0x16a>
     61c:	ea e3       	ldi	r30, 0x3A	; 58
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     626:	e1 90       	ld	r14, Z+
     628:	f1 90       	ld	r15, Z+
     62a:	ec 14       	cp	r14, r12
     62c:	fd 04       	cpc	r15, r13
     62e:	08 f4       	brcc	.+2      	; 0x632 <estimate_distance+0x15e>
     630:	58 c0       	rjmp	.+176    	; 0x6e2 <estimate_distance+0x20e>
     632:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     634:	8e 30       	cpi	r24, 0x0E	; 14
     636:	91 05       	cpc	r25, r1
     638:	a9 f7       	brne	.-22     	; 0x624 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     63a:	0a e5       	ldi	r16, 0x5A	; 90
     63c:	01 c0       	rjmp	.+2      	; 0x640 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     63e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     640:	1f 3f       	cpi	r17, 0xFF	; 255
     642:	09 f4       	brne	.+2      	; 0x646 <estimate_distance+0x172>
     644:	4b c0       	rjmp	.+150    	; 0x6dc <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     646:	be 01       	movw	r22, r28
     648:	dd 0f       	add	r29, r29
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 97 09 	call	0x132e	; 0x132e <__floatsisf>
     652:	6b 01       	movw	r12, r22
     654:	7c 01       	movw	r14, r24
     656:	61 2f       	mov	r22, r17
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     662:	4b 01       	movw	r8, r22
     664:	5c 01       	movw	r10, r24
     666:	a7 01       	movw	r20, r14
     668:	96 01       	movw	r18, r12
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	81 e6       	ldi	r24, 0x61	; 97
     670:	94 e4       	ldi	r25, 0x44	; 68
     672:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     682:	4b 01       	movw	r8, r22
     684:	5c 01       	movw	r10, r24
     686:	60 2f       	mov	r22, r16
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     692:	2b 01       	movw	r4, r22
     694:	3c 01       	movw	r6, r24
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4f e2       	ldi	r20, 0x2F	; 47
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c5 01       	movw	r24, r10
     6b8:	b4 01       	movw	r22, r8
     6ba:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	48 e4       	ldi	r20, 0x48	; 72
     6c4:	53 e4       	ldi	r21, 0x43	; 67
     6c6:	0e 94 ed 08 	call	0x11da	; 0x11da <__divsf3>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	44 e0       	ldi	r20, 0x04	; 4
     6d0:	52 e4       	ldi	r21, 0x42	; 66
     6d2:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     6d6:	0e 94 66 09 	call	0x12cc	; 0x12cc <__fixunssfsi>
     6da:	60 c0       	rjmp	.+192    	; 0x79c <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     6dc:	61 e2       	ldi	r22, 0x21	; 33
     6de:	60 0f       	add	r22, r16
     6e0:	5d c0       	rjmp	.+186    	; 0x79c <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	fc 01       	movw	r30, r24
     6e8:	ea 5c       	subi	r30, 0xCA	; 202
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	b7 01       	movw	r22, r14
     6f2:	68 1b       	sub	r22, r24
     6f4:	79 0b       	sbc	r23, r25
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     706:	4b 01       	movw	r8, r22
     708:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     70a:	b6 01       	movw	r22, r12
     70c:	dd 0c       	add	r13, r13
     70e:	88 0b       	sbc	r24, r24
     710:	99 0b       	sbc	r25, r25
     712:	0e 94 97 09 	call	0x132e	; 0x132e <__floatsisf>
     716:	2b 01       	movw	r4, r22
     718:	3c 01       	movw	r6, r24
     71a:	b7 01       	movw	r22, r14
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
     728:	63 2d       	mov	r22, r3
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 95 09 	call	0x132a	; 0x132a <__floatunsisf>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	5f e3       	ldi	r21, 0x3F	; 63
     73c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	0e 94 81 08 	call	0x1102	; 0x1102 <__addsf3>
     74a:	a5 01       	movw	r20, r10
     74c:	94 01       	movw	r18, r8
     74e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	c3 01       	movw	r24, r6
     764:	b2 01       	movw	r22, r4
     766:	0e 94 80 08 	call	0x1100	; 0x1100 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulsf3>
     776:	0e 94 5f 09 	call	0x12be	; 0x12be <__fixsfsi>
     77a:	7b 01       	movw	r14, r22
     77c:	c5 01       	movw	r24, r10
     77e:	b4 01       	movw	r22, r8
     780:	0e 94 5f 09 	call	0x12be	; 0x12be <__fixsfsi>
     784:	ab 01       	movw	r20, r22
     786:	bc 01       	movw	r22, r24
     788:	c7 01       	movw	r24, r14
     78a:	ba 01       	movw	r22, r20
     78c:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     790:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     792:	6f 3f       	cpi	r22, 0xFF	; 255
     794:	09 f0       	breq	.+2      	; 0x798 <estimate_distance+0x2c4>
     796:	54 cf       	rjmp	.-344    	; 0x640 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     798:	61 e2       	ldi	r22, 0x21	; 33
     79a:	61 0f       	add	r22, r17
    }
}
     79c:	86 2f       	mov	r24, r22
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	3f 90       	pop	r3
     7c0:	2f 90       	pop	r2
     7c2:	08 95       	ret

000007c4 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
    tx_clock += tx_increment;
     7e6:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     7ea:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     7ee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_increment>
     7f2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <tx_increment+0x1>
     7f6:	82 0f       	add	r24, r18
     7f8:	93 1f       	adc	r25, r19
     7fa:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_clock+0x1>
     7fe:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_clock>
    tx_increment = 0xFF;
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     80a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    OCR0A = tx_increment;
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     812:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <kilo_ticks>
     816:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <kilo_ticks+0x1>
     81a:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <kilo_ticks+0x2>
     81e:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <kilo_ticks+0x3>
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	a1 1d       	adc	r26, r1
     826:	b1 1d       	adc	r27, r1
     828:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <kilo_ticks>
     82c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <kilo_ticks+0x1>
     830:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <kilo_ticks+0x2>
     834:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     838:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     83c:	81 11       	cpse	r24, r1
     83e:	2d c0       	rjmp	.+90     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     840:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kilo_tx_period>
     844:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_tx_period+0x1>
     848:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     84c:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     850:	82 17       	cp	r24, r18
     852:	93 07       	cpc	r25, r19
     854:	10 f5       	brcc	.+68     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     856:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	f1 f4       	brne	.+60     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
        message_t *msg = kilo_message_tx();
     85e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     862:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     866:	09 95       	icall
        if (msg) {
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	b9 f0       	breq	.+46     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
            if (message_send(msg)) {
     86c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <message_send>
     870:	88 23       	and	r24, r24
     872:	51 f0       	breq	.+20     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
                kilo_message_tx_success();
     874:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     878:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     87c:	09 95       	icall
                tx_clock = 0;
     87e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     882:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
     886:	09 c0       	rjmp	.+18     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
            } else {
                tx_increment = rand()&0xFF;
     888:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <rand>
     88c:	9c 01       	movw	r18, r24
     88e:	33 27       	eor	r19, r19
     890:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <tx_increment+0x1>
     894:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <tx_increment>
                OCR0A = tx_increment;
     898:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8bc:	80 ff       	sbrs	r24, 0
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <set_color+0x8>
        DDRD |= (1<<5);
     8c0:	55 9a       	sbi	0x0a, 5	; 10
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     8c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     8c6:	81 ff       	sbrs	r24, 1
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <set_color+0x12>
        DDRD |= (1<<4);
     8ca:	54 9a       	sbi	0x0a, 4	; 10
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     8ce:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     8d0:	82 ff       	sbrs	r24, 2
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <set_color+0x1c>
        DDRC |= (1<<3);
     8d4:	3b 9a       	sbi	0x07, 3	; 7
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     8d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     8da:	83 ff       	sbrs	r24, 3
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <set_color+0x26>
        DDRC |= (1<<2);
     8de:	3a 9a       	sbi	0x07, 2	; 7
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     8e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     8e4:	84 ff       	sbrs	r24, 4
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <set_color+0x30>
        DDRC |= (1<<5);
     8e8:	3d 9a       	sbi	0x07, 5	; 7
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     8ec:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     8ee:	85 ff       	sbrs	r24, 5
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <set_color+0x3a>
        DDRC |= (1<<4);
     8f2:	3c 9a       	sbi	0x07, 4	; 7
     8f4:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     8f6:	3c 98       	cbi	0x07, 4	; 7
     8f8:	08 95       	ret

000008fa <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     8fa:	8c 01       	movw	r16, r24
     8fc:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     900:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     902:	84 e0       	ldi	r24, 0x04	; 4
     904:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     906:	98 e1       	ldi	r25, 0x18	; 24
     908:	c9 2e       	mov	r12, r25
     90a:	29 e2       	ldi	r18, 0x29	; 41
     90c:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     90e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_state>
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	e7 30       	cpi	r30, 0x07	; 7
     916:	f1 05       	cpc	r31, r1
     918:	d0 f7       	brcc	.-12     	; 0x90e <__stack+0xf>
     91a:	ec 5c       	subi	r30, 0xCC	; 204
     91c:	ff 4f       	sbci	r31, 0xFF	; 255
     91e:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__tablejump2__>
            case SLEEPING:
                cli();
     922:	f8 94       	cli
                acomp_off();
     924:	80 b7       	in	r24, 0x30	; 48
     926:	87 7f       	andi	r24, 0xF7	; 247
     928:	80 bf       	out	0x30, r24	; 48
                adc_off();
     92a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     92e:	8f 77       	andi	r24, 0x7F	; 127
     930:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     934:	14 b8       	out	0x04, r1	; 4
     936:	17 b8       	out	0x07, r1	; 7
     938:	1a b8       	out	0x0a, r1	; 10
     93a:	15 b8       	out	0x05, r1	; 5
     93c:	18 b8       	out	0x08, r1	; 8
     93e:	1b b8       	out	0x0b, r1	; 11
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	a8 95       	wdr
     946:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     950:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     954:	80 64       	ori	r24, 0x40	; 64
     956:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     95a:	83 b7       	in	r24, 0x33	; 51
     95c:	81 7f       	andi	r24, 0xF1	; 241
     95e:	84 60       	ori	r24, 0x04	; 4
     960:	83 bf       	out	0x33, r24	; 51
                cli();
     962:	f8 94       	cli
                sleep_enable();
     964:	83 b7       	in	r24, 0x33	; 51
     966:	81 60       	ori	r24, 0x01	; 1
     968:	83 bf       	out	0x33, r24	; 51
                sei();
     96a:	78 94       	sei
                sleep_cpu();
     96c:	88 95       	sleep
                sleep_disable();
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	8e 7f       	andi	r24, 0xFE	; 254
     972:	83 bf       	out	0x33, r24	; 51
                sei();
     974:	78 94       	sei
                rx_busy = 0;
     976:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
                ports_on();
     97a:	52 9a       	sbi	0x0a, 2	; 10
     97c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     97e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     982:	80 68       	ori	r24, 0x80	; 128
     984:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     988:	87 e5       	ldi	r24, 0x57	; 87
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <__stack+0x8d>
     990:	00 c0       	rjmp	.+0      	; 0x992 <__stack+0x93>
     992:	00 00       	nop
                _delay_us(300);
                acomp_on();
     994:	80 b7       	in	r24, 0x30	; 48
     996:	88 61       	ori	r24, 0x18	; 24
     998:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     99a:	8f e3       	ldi	r24, 0x3F	; 63
     99c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a0:	ef e1       	ldi	r30, 0x1F	; 31
     9a2:	fe e4       	ldi	r31, 0x4E	; 78
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <__stack+0xa5>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__stack+0xab>
     9aa:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9ac:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     9b0:	88 23       	and	r24, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	50 c0       	rjmp	.+160    	; 0xa56 <__stack+0x157>
                    set_color(RGB(3,0,0));
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     9bc:	ff ef       	ldi	r31, 0xFF	; 255
     9be:	20 e7       	ldi	r18, 0x70	; 112
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	f1 50       	subi	r31, 0x01	; 1
     9c4:	20 40       	sbci	r18, 0x00	; 0
     9c6:	80 40       	sbci	r24, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__stack+0xc3>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__stack+0xcd>
     9cc:	00 00       	nop
     9ce:	43 c0       	rjmp	.+134    	; 0xa56 <__stack+0x157>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     9d6:	ef ec       	ldi	r30, 0xCF	; 207
     9d8:	f7 e0       	ldi	r31, 0x07	; 7
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <__stack+0xdb>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__stack+0xe1>
     9e0:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     9e8:	ff ef       	ldi	r31, 0xFF	; 255
     9ea:	21 ee       	ldi	r18, 0xE1	; 225
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	f1 50       	subi	r31, 0x01	; 1
     9f0:	20 40       	sbci	r18, 0x00	; 0
     9f2:	80 40       	sbci	r24, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <__stack+0xef>
     9f6:	2c c0       	rjmp	.+88     	; 0xa50 <__stack+0x151>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     9f8:	0e 94 4d 02 	call	0x49a	; 0x49a <get_voltage>
                if(voltage > 682)
     9fc:	8b 3a       	cpi	r24, 0xAB	; 171
     9fe:	e2 e0       	ldi	r30, 0x02	; 2
     a00:	9e 07       	cpc	r25, r30
     a02:	24 f0       	brlt	.+8      	; 0xa0c <__stack+0x10d>
                    set_color(RGB(0,3,0));
     a04:	8c e0       	ldi	r24, 0x0C	; 12
     a06:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     a0a:	81 cf       	rjmp	.-254    	; 0x90e <__stack+0xf>
                else if(voltage > 648)
     a0c:	89 38       	cpi	r24, 0x89	; 137
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	9f 07       	cpc	r25, r31
     a12:	14 f0       	brlt	.+4      	; 0xa18 <__stack+0x119>
                    set_color(RGB(0,0,3));
     a14:	80 e3       	ldi	r24, 0x30	; 48
     a16:	f7 cf       	rjmp	.-18     	; 0xa06 <__stack+0x107>
                else if(voltage > 614)
     a18:	87 36       	cpi	r24, 0x67	; 103
     a1a:	92 40       	sbci	r25, 0x02	; 2
     a1c:	14 f0       	brlt	.+4      	; 0xa22 <__stack+0x123>
                    set_color(RGB(3,3,0));
     a1e:	8f e0       	ldi	r24, 0x0F	; 15
     a20:	f2 cf       	rjmp	.-28     	; 0xa06 <__stack+0x107>
                else
                    set_color(RGB(3,0,0));
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	f0 cf       	rjmp	.-32     	; 0xa06 <__stack+0x107>
                break;
            case CHARGING:
                if (is_charging()) {
     a26:	48 99       	sbic	0x09, 0	; 9
     a28:	16 c0       	rjmp	.+44     	; 0xa56 <__stack+0x157>
                    set_color(RGB(1,0,0));
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     a30:	8f ec       	ldi	r24, 0xCF	; 207
     a32:	97 e0       	ldi	r25, 0x07	; 7
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <__stack+0x135>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x13b>
     a3a:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	e1 ee       	ldi	r30, 0xE1	; 225
     a46:	f4 e0       	ldi	r31, 0x04	; 4
     a48:	91 50       	subi	r25, 0x01	; 1
     a4a:	e0 40       	sbci	r30, 0x00	; 0
     a4c:	f0 40       	sbci	r31, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <__stack+0x149>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <__stack+0x153>
     a52:	00 00       	nop
     a54:	5c cf       	rjmp	.-328    	; 0x90e <__stack+0xf>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	d6 cf       	rjmp	.-84     	; 0xa06 <__stack+0x107>
                break;
            case SETUP:
                if (!has_setup) {
     a5a:	d1 11       	cpse	r29, r1
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <__stack+0x163>
                    setup();
     a5e:	f8 01       	movw	r30, r16
     a60:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a62:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <kilo_state>
     a66:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     a68:	f7 01       	movw	r30, r14
     a6a:	09 95       	icall
                break;
     a6c:	50 cf       	rjmp	.-352    	; 0x90e <__stack+0xf>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a6e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     a72:	81 11       	cpse	r24, r1
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <__stack+0x185>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a76:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     a7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     a7e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
     a82:	45 cf       	rjmp	.-374    	; 0x90e <__stack+0xf>
                } else {
                    if (cur_motion != prev_motion) {
     a84:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     a88:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prev_motion>
     a8c:	98 17       	cp	r25, r24
     a8e:	09 f4       	brne	.+2      	; 0xa92 <__stack+0x193>
     a90:	3e cf       	rjmp	.-388    	; 0x90e <__stack+0xf>
                        prev_motion = cur_motion;
     a92:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     a96:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     a9a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	89 f4       	brne	.+34     	; 0xac4 <__stack+0x1c5>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aa2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aa6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     aaa:	8f e2       	ldi	r24, 0x2F	; 47
     aac:	95 e7       	ldi	r25, 0x75	; 117
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <__stack+0x1af>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <__stack+0x1b5>
     ab4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ab6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     abe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ac2:	25 cf       	rjmp	.-438    	; 0x90e <__stack+0xf>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ac4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     acc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	59 f4       	brne	.+22     	; 0xaea <__stack+0x1eb>
     ad4:	ef e2       	ldi	r30, 0x2F	; 47
     ad6:	f5 e7       	ldi	r31, 0x75	; 117
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x1d9>
     adc:	00 c0       	rjmp	.+0      	; 0xade <__stack+0x1df>
     ade:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     ae0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ae4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     ae8:	10 c0       	rjmp	.+32     	; 0xb0a <__stack+0x20b>
     aea:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aee:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     af2:	8f e2       	ldi	r24, 0x2F	; 47
     af4:	95 e7       	ldi	r25, 0x75	; 117
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <__stack+0x1f7>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <__stack+0x1fd>
     afc:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     afe:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <kilo_straight_right>
     b02:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b06:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b0a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b0e:	ff ce       	rjmp	.-514    	; 0x90e <__stack+0xf>

00000b10 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
    rx_timer_off();
     b1e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     b30:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
    rx_busy = 0;
     b34:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    adc_trigger_high_gain();
     b38:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b3c:	93 ea       	ldi	r25, 0xA3	; 163
     b3e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b42:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	2f 93       	push	r18
     b64:	3f 93       	push	r19
     b66:	4f 93       	push	r20
     b68:	5f 93       	push	r21
     b6a:	6f 93       	push	r22
     b6c:	7f 93       	push	r23
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	af 93       	push	r26
     b74:	bf 93       	push	r27
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     b7a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     b7e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     b82:	41 e0       	ldi	r20, 0x01	; 1
     b84:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     b88:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_leadingbit>
     b8c:	88 23       	and	r24, r24
     b8e:	21 f1       	breq	.+72     	; 0xbd8 <__vector_23+0x84>
        rx_timer_on();
     b90:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b94:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     b98:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     b9c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
        rx_leadingbit = 0;
     ba0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_leadingbit>
        if (rx_leadingbyte) {
     ba4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     ba8:	88 23       	and	r24, r24
     baa:	09 f4       	brne	.+2      	; 0xbae <__vector_23+0x5a>
     bac:	af c1       	rjmp	.+862    	; 0xf0c <__vector_23+0x3b8>
            adc_finish_conversion();
     bae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bb2:	86 fd       	sbrc	r24, 6
     bb4:	fc cf       	rjmp	.-8      	; 0xbae <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     bb6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     bba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     bbe:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x3>
     bc2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist+0x2>
            adc_trigger_low_gain();
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bcc:	93 ea       	ldi	r25, 0xA3	; 163
     bce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bd2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     bd6:	9a c1       	rjmp	.+820    	; 0xf0c <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     bd8:	c9 01       	movw	r24, r18
     bda:	87 58       	subi	r24, 0x87	; 135
     bdc:	91 09       	sbc	r25, r1
     bde:	84 37       	cpi	r24, 0x74	; 116
     be0:	99 40       	sbci	r25, 0x09	; 9
     be2:	a0 f0       	brcs	.+40     	; 0xc0c <__vector_23+0xb8>
            rx_timer_off();
     be4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     be8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     bf0:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
            rx_leadingbyte = 1;
     bf4:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
            rx_busy = 0;
     bf8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
            adc_trigger_high_gain();
     bfc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c00:	83 ea       	ldi	r24, 0xA3	; 163
     c02:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c06:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c0a:	80 c1       	rjmp	.+768    	; 0xf0c <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c0c:	26 58       	subi	r18, 0x86	; 134
     c0e:	31 09       	sbc	r19, r1
     c10:	a4 ef       	ldi	r26, 0xF4	; 244
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
     c18:	8c 01       	movw	r16, r24
     c1a:	22 27       	eor	r18, r18
     c1c:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c1e:	08 30       	cpi	r16, 0x08	; 8
     c20:	60 f4       	brcc	.+24     	; 0xc3a <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <__vector_23+0xd6>
     c28:	88 0f       	add	r24, r24
     c2a:	0a 95       	dec	r16
     c2c:	ea f7       	brpl	.-6      	; 0xc28 <__vector_23+0xd4>
     c2e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     c32:	89 2b       	or	r24, r25
     c34:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_bytevalue>
     c38:	69 c1       	rjmp	.+722    	; 0xf0c <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c3a:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
                if (rx_leadingbyte) {
     c3e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     c42:	88 23       	and	r24, r24
     c44:	41 f1       	breq	.+80     	; 0xc96 <__vector_23+0x142>
                    adc_finish_conversion();
     c46:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c4a:	86 fd       	sbrc	r24, 6
     c4c:	fc cf       	rjmp	.-8      	; 0xc46 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c4e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c52:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c56:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <rx_dist+0x1>
     c5a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_dist>
                    adc_trigger_high_gain();
     c5e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c62:	83 ea       	ldi	r24, 0xA3	; 163
     c64:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     c6e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     c72:	99 23       	and	r25, r25
     c74:	59 f0       	breq	.+22     	; 0xc8c <__vector_23+0x138>
                        rx_timer_off();
     c76:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c7a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c7e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     c82:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
     c86:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
     c8a:	40 c1       	rjmp	.+640    	; 0xf0c <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     c8c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_leadingbyte>
                        rx_byteindex = 0;
     c90:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
     c94:	3b c1       	rjmp	.+630    	; 0xf0c <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     c96:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_byteindex>
     c9a:	e8 2f       	mov	r30, r24
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	e6 5a       	subi	r30, 0xA6	; 166
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     ca6:	90 83       	st	Z, r25
                    rx_byteindex++;
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cae:	8c 30       	cpi	r24, 0x0C	; 12
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_23+0x160>
     cb2:	2c c1       	rjmp	.+600    	; 0xf0c <__vector_23+0x3b8>
                        rx_timer_off();
     cb4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cb8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cbc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cc0:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
     cc4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     cc8:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <rx_msg+0xa>
     ccc:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <rx_msg+0xb>
     cd0:	8a e5       	ldi	r24, 0x5A	; 90
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 99 07 	call	0xf32	; 0xf32 <message_crc>
     cd8:	08 17       	cp	r16, r24
     cda:	19 07       	cpc	r17, r25
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_23+0x18c>
     cde:	16 c1       	rjmp	.+556    	; 0xf0c <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ce0:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <rx_msg+0x9>
     ce4:	e7 fd       	sbrc	r30, 7
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     ce8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     cec:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     cf0:	6f e2       	ldi	r22, 0x2F	; 47
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	8a e5       	ldi	r24, 0x5A	; 90
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	09 95       	icall
     cfa:	08 c1       	rjmp	.+528    	; 0xf0c <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     cfc:	88 e7       	ldi	r24, 0x78	; 120
     cfe:	8e 0f       	add	r24, r30
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	30 f0       	brcs	.+12     	; 0xd10 <__vector_23+0x1bc>
        motors_off();
     d04:	53 98       	cbi	0x0a, 3	; 10
     d06:	23 98       	cbi	0x04, 3	; 4
     d08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d10:	8e 2f       	mov	r24, r30
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	e0 58       	subi	r30, 0x80	; 128
     d18:	f1 09       	sbc	r31, r1
     d1a:	eb 30       	cpi	r30, 0x0B	; 11
     d1c:	f1 05       	cpc	r31, r1
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__vector_23+0x1ce>
     d20:	f5 c0       	rjmp	.+490    	; 0xf0c <__vector_23+0x3b8>
     d22:	e5 5c       	subi	r30, 0xC5	; 197
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d2a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d34:	16 bc       	out	0x26, r1	; 38
            bootload();
     d36:	e0 e0       	ldi	r30, 0x00	; 0
     d38:	f0 e7       	ldi	r31, 0x70	; 112
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d42:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <kilo_state>
     d46:	e2 c0       	rjmp	.+452    	; 0xf0c <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	b2 c0       	rjmp	.+356    	; 0xeb0 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	b0 c0       	rjmp	.+352    	; 0xeb0 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	ae c0       	rjmp	.+348    	; 0xeb0 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d54:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	09 f4       	brne	.+2      	; 0xd5e <__vector_23+0x20a>
     d5c:	d7 c0       	rjmp	.+430    	; 0xf0c <__vector_23+0x3b8>
     d5e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	09 f4       	brne	.+2      	; 0xd68 <__vector_23+0x214>
     d66:	d2 c0       	rjmp	.+420    	; 0xf0c <__vector_23+0x3b8>
                motors_on();
     d68:	53 9a       	sbi	0x0a, 3	; 10
     d6a:	23 9a       	sbi	0x04, 3	; 4
     d6c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d70:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	9c c0       	rjmp	.+312    	; 0xeb0 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     d78:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	09 f4       	brne	.+2      	; 0xd82 <__vector_23+0x22e>
     d80:	4b c0       	rjmp	.+150    	; 0xe18 <__vector_23+0x2c4>
     d82:	80 f4       	brcc	.+32     	; 0xda4 <__vector_23+0x250>
     d84:	88 23       	and	r24, r24
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <__vector_23+0x25e>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__vector_23+0x23a>
     d8c:	82 c0       	rjmp	.+260    	; 0xe92 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     d8e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_msg+0x1>
     d92:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <rx_msg+0x2>
     d96:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <kilo_uid+0x1>
     d9a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_uid>
                    cur_motion = MOVE_STOP;
     d9e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     da2:	77 c0       	rjmp	.+238    	; 0xe92 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	09 f4       	brne	.+2      	; 0xdaa <__vector_23+0x256>
     da8:	49 c0       	rjmp	.+146    	; 0xe3c <__vector_23+0x2e8>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__vector_23+0x25c>
     dae:	58 c0       	rjmp	.+176    	; 0xe60 <__vector_23+0x30c>
     db0:	70 c0       	rjmp	.+224    	; 0xe92 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     db2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     db6:	86 30       	cpi	r24, 0x06	; 6
     db8:	09 f0       	breq	.+2      	; 0xdbc <__vector_23+0x268>
     dba:	6b c0       	rjmp	.+214    	; 0xe92 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     dbc:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_uid>
     dc0:	80 eb       	ldi	r24, 0xB0	; 176
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     dc8:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <kilo_uid+0x1>
     dcc:	81 eb       	ldi	r24, 0xB1	; 177
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     dd4:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_turn_left>
     dd8:	85 e0       	ldi	r24, 0x05	; 5
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     de0:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <kilo_turn_right>
     de4:	89 e0       	ldi	r24, 0x09	; 9
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     dec:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_straight_left>
     df0:	8c e0       	ldi	r24, 0x0C	; 12
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     df8:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_straight_right>
     dfc:	84 e1       	ldi	r24, 0x14	; 20
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_write_byte>
                        motors_off();
     e04:	53 98       	cbi	0x0a, 3	; 10
     e06:	23 98       	cbi	0x04, 3	; 4
     e08:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     e16:	3d c0       	rjmp	.+122    	; 0xe92 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e18:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     e1c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x3>
     e20:	91 30       	cpi	r25, 0x01	; 1
     e22:	21 f4       	brne	.+8      	; 0xe2c <__vector_23+0x2d8>
     e24:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_turn_left>
     e28:	89 17       	cp	r24, r25
     e2a:	99 f1       	breq	.+102    	; 0xe92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e2c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_LEFT;
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e36:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
     e3a:	2b c0       	rjmp	.+86     	; 0xe92 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e3c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     e40:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg+0x4>
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	21 f4       	brne	.+8      	; 0xe50 <__vector_23+0x2fc>
     e48:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <kilo_turn_right>
     e4c:	89 17       	cp	r24, r25
     e4e:	09 f1       	breq	.+66     	; 0xe92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e50:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_RIGHT;
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     e5a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
     e5e:	19 c0       	rjmp	.+50     	; 0xe92 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     e60:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <cur_motion>
     e64:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x6>
     e68:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rx_msg+0x5>
     e6c:	23 30       	cpi	r18, 0x03	; 3
     e6e:	41 f4       	brne	.+16     	; 0xe80 <__vector_23+0x32c>
     e70:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <kilo_straight_right>
     e74:	82 13       	cpse	r24, r18
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <__vector_23+0x32c>
     e78:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_straight_left>
     e7c:	92 17       	cp	r25, r18
     e7e:	49 f0       	breq	.+18     	; 0xe92 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e80:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     e84:	23 e0       	ldi	r18, 0x03	; 3
     e86:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     e8a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     e8e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     e92:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
     e96:	88 23       	and	r24, r24
     e98:	c9 f1       	breq	.+114    	; 0xf0c <__vector_23+0x3b8>
     e9a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     e9e:	86 30       	cpi	r24, 0x06	; 6
     ea0:	a9 f1       	breq	.+106    	; 0xf0c <__vector_23+0x3b8>
                motors_on();
     ea2:	53 9a       	sbi	0x0a, 3	; 10
     ea4:	23 9a       	sbi	0x04, 3	; 4
     ea6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eaa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     eb6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     eba:	86 30       	cpi	r24, 0x06	; 6
     ebc:	81 f0       	breq	.+32     	; 0xede <__vector_23+0x38a>
                motors_on();
     ebe:	53 9a       	sbi	0x0a, 3	; 10
     ec0:	23 9a       	sbi	0x04, 3	; 4
     ec2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ec6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     ed0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     ed4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                kilo_state = MOVING;
     ed8:	86 e0       	ldi	r24, 0x06	; 6
     eda:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <rx_msg>
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <__vector_23+0x398>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <__vector_23+0x394>
     ef0:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <kilo_uid>
     ef4:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <kilo_uid+0x1>
     ef8:	82 23       	and	r24, r18
     efa:	93 23       	and	r25, r19
     efc:	89 2b       	or	r24, r25
     efe:	21 f0       	breq	.+8      	; 0xf08 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f08:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
                    }
                }
            }
        }
    }
}
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f32:	fc 01       	movw	r30, r24
     f34:	9c 01       	movw	r18, r24
     f36:	26 5f       	subi	r18, 0xF6	; 246
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f3e:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f40:	84 27       	eor	r24, r20
     f42:	08 2e       	mov	r0, r24
     f44:	82 95       	swap	r24
     f46:	80 7f       	andi	r24, 0xF0	; 240
     f48:	80 25       	eor	r24, r0
     f4a:	09 2e       	mov	r0, r25
     f4c:	98 2f       	mov	r25, r24
     f4e:	82 95       	swap	r24
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	08 26       	eor	r0, r24
     f54:	86 95       	lsr	r24
     f56:	98 27       	eor	r25, r24
     f58:	89 27       	eor	r24, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     f62:	e2 17       	cp	r30, r18
     f64:	f3 07       	cpc	r31, r19
     f66:	59 f7       	brne	.-42     	; 0xf3e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     f68:	08 95       	ret

00000f6a <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     f6a:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     f6c:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     f6e:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     f70:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <tx_mask>
    or tmpreg1, ddrreg
     f74:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     f76:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     f78:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     f7a:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
     f7e:	20 30       	cpi	r18, 0x00	; 0
     f80:	29 f0       	breq	.+10     	; 0xf8c <message_send+0x22>
     f82:	00 00       	nop
     f84:	25 b1       	in	r18, 0x05	; 5
     f86:	23 2b       	or	r18, r19
     f88:	25 b9       	out	0x05, r18	; 5
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <message_send+0x2a>
     f8c:	00 00       	nop
     f8e:	00 00       	nop
     f90:	00 00       	nop
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <message_send+0x2a>
     f94:	00 00       	nop
     f96:	00 00       	nop
     f98:	00 00       	nop
     f9a:	30 95       	com	r19
     f9c:	25 b1       	in	r18, 0x05	; 5
     f9e:	23 23       	and	r18, r19
     fa0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     fa2:	2e ea       	ldi	r18, 0xAE	; 174
     fa4:	2a 95       	dec	r18
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     fa8:	2b ee       	ldi	r18, 0xEB	; 235

00000faa <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     faa:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     fac:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     fae:	0a c0       	rjmp	.+20     	; 0xfc4 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     fb0:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     fb2:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
     fb6:	30 95       	com	r19
    in tmpreg1, IR_PORT
     fb8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     fba:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     fbc:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     fbe:	0f be       	out	0x3f, r0	; 63
    return 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	08 95       	ret

00000fc4 <nocollision>:
nocollision:
    nop
     fc4:	00 00       	nop
    dec tmpreg1
     fc6:	2a 95       	dec	r18
    brne checkcollision
     fc8:	81 f7       	brne	.-32     	; 0xfaa <checkcollision>

    ldi tmpreg1, 0x01
     fca:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fcc:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
     fd0:	20 30       	cpi	r18, 0x00	; 0
     fd2:	29 f0       	breq	.+10     	; 0xfde <nocollision+0x1a>
     fd4:	00 00       	nop
     fd6:	25 b1       	in	r18, 0x05	; 5
     fd8:	23 2b       	or	r18, r19
     fda:	25 b9       	out	0x05, r18	; 5
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <nocollision+0x22>
     fde:	00 00       	nop
     fe0:	00 00       	nop
     fe2:	00 00       	nop
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <nocollision+0x22>
     fe6:	00 00       	nop
     fe8:	00 00       	nop
     fea:	00 00       	nop
     fec:	30 95       	com	r19
     fee:	25 b1       	in	r18, 0x05	; 5
     ff0:	23 23       	and	r18, r19
     ff2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
     ff4:	00 00       	nop
     ff6:	24 e5       	ldi	r18, 0x54	; 84
     ff8:	2a 95       	dec	r18
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
     ffc:	fc 01       	movw	r30, r24
    ldi byteidx, 12
     ffe:	8c e0       	ldi	r24, 0x0C	; 12

00001000 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1000:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1002:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1004:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1006:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1008:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    100a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    100c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    100e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1010:	50 e0       	ldi	r21, 0x00	; 0

00001012 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1012:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1014:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1016:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1018:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    101a:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    101e:	20 30       	cpi	r18, 0x00	; 0
    1020:	29 f0       	breq	.+10     	; 0x102c <sendbit+0x1a>
    1022:	00 00       	nop
    1024:	25 b1       	in	r18, 0x05	; 5
    1026:	23 2b       	or	r18, r19
    1028:	25 b9       	out	0x05, r18	; 5
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <sendbit+0x22>
    102c:	00 00       	nop
    102e:	00 00       	nop
    1030:	00 00       	nop
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <sendbit+0x22>
    1034:	00 00       	nop
    1036:	00 00       	nop
    1038:	00 00       	nop
    103a:	30 95       	com	r19
    103c:	25 b1       	in	r18, 0x05	; 5
    103e:	23 23       	and	r18, r19
    1040:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1042:	00 00       	nop
    1044:	21 e5       	ldi	r18, 0x51	; 81
    1046:	2a 95       	dec	r18
    1048:	f1 f7       	brne	.-4      	; 0x1046 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    104a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    104c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    104e:	9a 95       	dec	r25
    brne sendbit
    1050:	01 f7       	brne	.-64     	; 0x1012 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1052:	8a 95       	dec	r24
    brne sendbyte
    1054:	a9 f6       	brne	.-86     	; 0x1000 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1056:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1058:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    105a:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    105c:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    105e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
    1062:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1064:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1066:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1068:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    106a:	0f be       	out	0x3f, r0	; 63
    return 1
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	08 95       	ret

00001070 <main>:
}

int main() {
    kilo_init();
    1070:	0e 94 85 00 	call	0x10a	; 0x10a <kilo_init>
    kilo_start(setup, loop);
    1074:	62 e7       	ldi	r22, 0x72	; 114
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	81 e7       	ldi	r24, 0x71	; 113
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <kilo_start>

    return 0;
}
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	08 95       	ret

00001086 <__divmodhi4>:
    1086:	97 fb       	bst	r25, 7
    1088:	07 2e       	mov	r0, r23
    108a:	16 f4       	brtc	.+4      	; 0x1090 <__divmodhi4+0xa>
    108c:	00 94       	com	r0
    108e:	07 d0       	rcall	.+14     	; 0x109e <__divmodhi4_neg1>
    1090:	77 fd       	sbrc	r23, 7
    1092:	09 d0       	rcall	.+18     	; 0x10a6 <__divmodhi4_neg2>
    1094:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__udivmodhi4>
    1098:	07 fc       	sbrc	r0, 7
    109a:	05 d0       	rcall	.+10     	; 0x10a6 <__divmodhi4_neg2>
    109c:	3e f4       	brtc	.+14     	; 0x10ac <__divmodhi4_exit>

0000109e <__divmodhi4_neg1>:
    109e:	90 95       	com	r25
    10a0:	81 95       	neg	r24
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	08 95       	ret

000010a6 <__divmodhi4_neg2>:
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255

000010ac <__divmodhi4_exit>:
    10ac:	08 95       	ret

000010ae <__tablejump2__>:
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	05 90       	lpm	r0, Z+
    10b4:	f4 91       	lpm	r31, Z
    10b6:	e0 2d       	mov	r30, r0
    10b8:	09 94       	ijmp

000010ba <__umulhisi3>:
    10ba:	a2 9f       	mul	r26, r18
    10bc:	b0 01       	movw	r22, r0
    10be:	b3 9f       	mul	r27, r19
    10c0:	c0 01       	movw	r24, r0
    10c2:	a3 9f       	mul	r26, r19
    10c4:	70 0d       	add	r23, r0
    10c6:	81 1d       	adc	r24, r1
    10c8:	11 24       	eor	r1, r1
    10ca:	91 1d       	adc	r25, r1
    10cc:	b2 9f       	mul	r27, r18
    10ce:	70 0d       	add	r23, r0
    10d0:	81 1d       	adc	r24, r1
    10d2:	11 24       	eor	r1, r1
    10d4:	91 1d       	adc	r25, r1
    10d6:	08 95       	ret

000010d8 <__udivmodhi4>:
    10d8:	aa 1b       	sub	r26, r26
    10da:	bb 1b       	sub	r27, r27
    10dc:	51 e1       	ldi	r21, 0x11	; 17
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <__udivmodhi4_ep>

000010e0 <__udivmodhi4_loop>:
    10e0:	aa 1f       	adc	r26, r26
    10e2:	bb 1f       	adc	r27, r27
    10e4:	a6 17       	cp	r26, r22
    10e6:	b7 07       	cpc	r27, r23
    10e8:	10 f0       	brcs	.+4      	; 0x10ee <__udivmodhi4_ep>
    10ea:	a6 1b       	sub	r26, r22
    10ec:	b7 0b       	sbc	r27, r23

000010ee <__udivmodhi4_ep>:
    10ee:	88 1f       	adc	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	5a 95       	dec	r21
    10f4:	a9 f7       	brne	.-22     	; 0x10e0 <__udivmodhi4_loop>
    10f6:	80 95       	com	r24
    10f8:	90 95       	com	r25
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	08 95       	ret

00001100 <__subsf3>:
    1100:	50 58       	subi	r21, 0x80	; 128

00001102 <__addsf3>:
    1102:	bb 27       	eor	r27, r27
    1104:	aa 27       	eor	r26, r26
    1106:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3x>
    110a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    110e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    1112:	38 f0       	brcs	.+14     	; 0x1122 <__addsf3+0x20>
    1114:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__addsf3+0x20>
    111a:	39 f4       	brne	.+14     	; 0x112a <__addsf3+0x28>
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	19 f4       	brne	.+6      	; 0x1126 <__addsf3+0x24>
    1120:	26 f4       	brtc	.+8      	; 0x112a <__addsf3+0x28>
    1122:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_nan>
    1126:	0e f4       	brtc	.+2      	; 0x112a <__addsf3+0x28>
    1128:	e0 95       	com	r30
    112a:	e7 fb       	bst	r30, 7
    112c:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_inf>

00001130 <__addsf3x>:
    1130:	e9 2f       	mov	r30, r25
    1132:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    1136:	58 f3       	brcs	.-42     	; 0x110e <__addsf3+0xc>
    1138:	ba 17       	cp	r27, r26
    113a:	62 07       	cpc	r22, r18
    113c:	73 07       	cpc	r23, r19
    113e:	84 07       	cpc	r24, r20
    1140:	95 07       	cpc	r25, r21
    1142:	20 f0       	brcs	.+8      	; 0x114c <__addsf3x+0x1c>
    1144:	79 f4       	brne	.+30     	; 0x1164 <__addsf3x+0x34>
    1146:	a6 f5       	brtc	.+104    	; 0x11b0 <__addsf3x+0x80>
    1148:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_zero>
    114c:	0e f4       	brtc	.+2      	; 0x1150 <__addsf3x+0x20>
    114e:	e0 95       	com	r30
    1150:	0b 2e       	mov	r0, r27
    1152:	ba 2f       	mov	r27, r26
    1154:	a0 2d       	mov	r26, r0
    1156:	0b 01       	movw	r0, r22
    1158:	b9 01       	movw	r22, r18
    115a:	90 01       	movw	r18, r0
    115c:	0c 01       	movw	r0, r24
    115e:	ca 01       	movw	r24, r20
    1160:	a0 01       	movw	r20, r0
    1162:	11 24       	eor	r1, r1
    1164:	ff 27       	eor	r31, r31
    1166:	59 1b       	sub	r21, r25
    1168:	99 f0       	breq	.+38     	; 0x1190 <__addsf3x+0x60>
    116a:	59 3f       	cpi	r21, 0xF9	; 249
    116c:	50 f4       	brcc	.+20     	; 0x1182 <__addsf3x+0x52>
    116e:	50 3e       	cpi	r21, 0xE0	; 224
    1170:	68 f1       	brcs	.+90     	; 0x11cc <__addsf3x+0x9c>
    1172:	1a 16       	cp	r1, r26
    1174:	f0 40       	sbci	r31, 0x00	; 0
    1176:	a2 2f       	mov	r26, r18
    1178:	23 2f       	mov	r18, r19
    117a:	34 2f       	mov	r19, r20
    117c:	44 27       	eor	r20, r20
    117e:	58 5f       	subi	r21, 0xF8	; 248
    1180:	f3 cf       	rjmp	.-26     	; 0x1168 <__addsf3x+0x38>
    1182:	46 95       	lsr	r20
    1184:	37 95       	ror	r19
    1186:	27 95       	ror	r18
    1188:	a7 95       	ror	r26
    118a:	f0 40       	sbci	r31, 0x00	; 0
    118c:	53 95       	inc	r21
    118e:	c9 f7       	brne	.-14     	; 0x1182 <__addsf3x+0x52>
    1190:	7e f4       	brtc	.+30     	; 0x11b0 <__addsf3x+0x80>
    1192:	1f 16       	cp	r1, r31
    1194:	ba 0b       	sbc	r27, r26
    1196:	62 0b       	sbc	r22, r18
    1198:	73 0b       	sbc	r23, r19
    119a:	84 0b       	sbc	r24, r20
    119c:	ba f0       	brmi	.+46     	; 0x11cc <__addsf3x+0x9c>
    119e:	91 50       	subi	r25, 0x01	; 1
    11a0:	a1 f0       	breq	.+40     	; 0x11ca <__addsf3x+0x9a>
    11a2:	ff 0f       	add	r31, r31
    11a4:	bb 1f       	adc	r27, r27
    11a6:	66 1f       	adc	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	c2 f7       	brpl	.-16     	; 0x119e <__addsf3x+0x6e>
    11ae:	0e c0       	rjmp	.+28     	; 0x11cc <__addsf3x+0x9c>
    11b0:	ba 0f       	add	r27, r26
    11b2:	62 1f       	adc	r22, r18
    11b4:	73 1f       	adc	r23, r19
    11b6:	84 1f       	adc	r24, r20
    11b8:	48 f4       	brcc	.+18     	; 0x11cc <__addsf3x+0x9c>
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b7 95       	ror	r27
    11c2:	f7 95       	ror	r31
    11c4:	9e 3f       	cpi	r25, 0xFE	; 254
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <__addsf3x+0x9a>
    11c8:	b0 cf       	rjmp	.-160    	; 0x112a <__addsf3+0x28>
    11ca:	93 95       	inc	r25
    11cc:	88 0f       	add	r24, r24
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <__addsf3x+0xa2>
    11d0:	99 27       	eor	r25, r25
    11d2:	ee 0f       	add	r30, r30
    11d4:	97 95       	ror	r25
    11d6:	87 95       	ror	r24
    11d8:	08 95       	ret

000011da <__divsf3>:
    11da:	0e 94 01 09 	call	0x1202	; 0x1202 <__divsf3x>
    11de:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    11e2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    11e6:	58 f0       	brcs	.+22     	; 0x11fe <__divsf3+0x24>
    11e8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    11ec:	40 f0       	brcs	.+16     	; 0x11fe <__divsf3+0x24>
    11ee:	29 f4       	brne	.+10     	; 0x11fa <__divsf3+0x20>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	29 f0       	breq	.+10     	; 0x11fe <__divsf3+0x24>
    11f4:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_inf>
    11f8:	51 11       	cpse	r21, r1
    11fa:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    11fe:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_nan>

00001202 <__divsf3x>:
    1202:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    1206:	68 f3       	brcs	.-38     	; 0x11e2 <__divsf3+0x8>

00001208 <__divsf3_pse>:
    1208:	99 23       	and	r25, r25
    120a:	b1 f3       	breq	.-20     	; 0x11f8 <__divsf3+0x1e>
    120c:	55 23       	and	r21, r21
    120e:	91 f3       	breq	.-28     	; 0x11f4 <__divsf3+0x1a>
    1210:	95 1b       	sub	r25, r21
    1212:	55 0b       	sbc	r21, r21
    1214:	bb 27       	eor	r27, r27
    1216:	aa 27       	eor	r26, r26
    1218:	62 17       	cp	r22, r18
    121a:	73 07       	cpc	r23, r19
    121c:	84 07       	cpc	r24, r20
    121e:	38 f0       	brcs	.+14     	; 0x122e <__divsf3_pse+0x26>
    1220:	9f 5f       	subi	r25, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	44 1f       	adc	r20, r20
    122a:	aa 1f       	adc	r26, r26
    122c:	a9 f3       	breq	.-22     	; 0x1218 <__divsf3_pse+0x10>
    122e:	35 d0       	rcall	.+106    	; 0x129a <__divsf3_pse+0x92>
    1230:	0e 2e       	mov	r0, r30
    1232:	3a f0       	brmi	.+14     	; 0x1242 <__divsf3_pse+0x3a>
    1234:	e0 e8       	ldi	r30, 0x80	; 128
    1236:	32 d0       	rcall	.+100    	; 0x129c <__divsf3_pse+0x94>
    1238:	91 50       	subi	r25, 0x01	; 1
    123a:	50 40       	sbci	r21, 0x00	; 0
    123c:	e6 95       	lsr	r30
    123e:	00 1c       	adc	r0, r0
    1240:	ca f7       	brpl	.-14     	; 0x1234 <__divsf3_pse+0x2c>
    1242:	2b d0       	rcall	.+86     	; 0x129a <__divsf3_pse+0x92>
    1244:	fe 2f       	mov	r31, r30
    1246:	29 d0       	rcall	.+82     	; 0x129a <__divsf3_pse+0x92>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	bb 1f       	adc	r27, r27
    1250:	26 17       	cp	r18, r22
    1252:	37 07       	cpc	r19, r23
    1254:	48 07       	cpc	r20, r24
    1256:	ab 07       	cpc	r26, r27
    1258:	b0 e8       	ldi	r27, 0x80	; 128
    125a:	09 f0       	breq	.+2      	; 0x125e <__divsf3_pse+0x56>
    125c:	bb 0b       	sbc	r27, r27
    125e:	80 2d       	mov	r24, r0
    1260:	bf 01       	movw	r22, r30
    1262:	ff 27       	eor	r31, r31
    1264:	93 58       	subi	r25, 0x83	; 131
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	3a f0       	brmi	.+14     	; 0x1278 <__divsf3_pse+0x70>
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	51 05       	cpc	r21, r1
    126e:	78 f0       	brcs	.+30     	; 0x128e <__divsf3_pse+0x86>
    1270:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_inf>
    1274:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    1278:	5f 3f       	cpi	r21, 0xFF	; 255
    127a:	e4 f3       	brlt	.-8      	; 0x1274 <__divsf3_pse+0x6c>
    127c:	98 3e       	cpi	r25, 0xE8	; 232
    127e:	d4 f3       	brlt	.-12     	; 0x1274 <__divsf3_pse+0x6c>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b7 95       	ror	r27
    1288:	f7 95       	ror	r31
    128a:	9f 5f       	subi	r25, 0xFF	; 255
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__divsf3_pse+0x78>
    128e:	88 0f       	add	r24, r24
    1290:	91 1d       	adc	r25, r1
    1292:	96 95       	lsr	r25
    1294:	87 95       	ror	r24
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret
    129a:	e1 e0       	ldi	r30, 0x01	; 1
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	bb 1f       	adc	r27, r27
    12a4:	62 17       	cp	r22, r18
    12a6:	73 07       	cpc	r23, r19
    12a8:	84 07       	cpc	r24, r20
    12aa:	ba 07       	cpc	r27, r26
    12ac:	20 f0       	brcs	.+8      	; 0x12b6 <__divsf3_pse+0xae>
    12ae:	62 1b       	sub	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	ba 0b       	sbc	r27, r26
    12b6:	ee 1f       	adc	r30, r30
    12b8:	88 f7       	brcc	.-30     	; 0x129c <__divsf3_pse+0x94>
    12ba:	e0 95       	com	r30
    12bc:	08 95       	ret

000012be <__fixsfsi>:
    12be:	0e 94 66 09 	call	0x12cc	; 0x12cc <__fixunssfsi>
    12c2:	68 94       	set
    12c4:	b1 11       	cpse	r27, r1
    12c6:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    12ca:	08 95       	ret

000012cc <__fixunssfsi>:
    12cc:	0e 94 02 0a 	call	0x1404	; 0x1404 <__fp_splitA>
    12d0:	88 f0       	brcs	.+34     	; 0x12f4 <__fixunssfsi+0x28>
    12d2:	9f 57       	subi	r25, 0x7F	; 127
    12d4:	98 f0       	brcs	.+38     	; 0x12fc <__fixunssfsi+0x30>
    12d6:	b9 2f       	mov	r27, r25
    12d8:	99 27       	eor	r25, r25
    12da:	b7 51       	subi	r27, 0x17	; 23
    12dc:	b0 f0       	brcs	.+44     	; 0x130a <__fixunssfsi+0x3e>
    12de:	e1 f0       	breq	.+56     	; 0x1318 <__fixunssfsi+0x4c>
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	1a f0       	brmi	.+6      	; 0x12f0 <__fixunssfsi+0x24>
    12ea:	ba 95       	dec	r27
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <__fixunssfsi+0x14>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <__fixunssfsi+0x4c>
    12f0:	b1 30       	cpi	r27, 0x01	; 1
    12f2:	91 f0       	breq	.+36     	; 0x1318 <__fixunssfsi+0x4c>
    12f4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__fp_zero>
    12f8:	b1 e0       	ldi	r27, 0x01	; 1
    12fa:	08 95       	ret
    12fc:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_zero>
    1300:	67 2f       	mov	r22, r23
    1302:	78 2f       	mov	r23, r24
    1304:	88 27       	eor	r24, r24
    1306:	b8 5f       	subi	r27, 0xF8	; 248
    1308:	39 f0       	breq	.+14     	; 0x1318 <__fixunssfsi+0x4c>
    130a:	b9 3f       	cpi	r27, 0xF9	; 249
    130c:	cc f3       	brlt	.-14     	; 0x1300 <__fixunssfsi+0x34>
    130e:	86 95       	lsr	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b3 95       	inc	r27
    1316:	d9 f7       	brne	.-10     	; 0x130e <__fixunssfsi+0x42>
    1318:	3e f4       	brtc	.+14     	; 0x1328 <__fixunssfsi+0x5c>
    131a:	90 95       	com	r25
    131c:	80 95       	com	r24
    131e:	70 95       	com	r23
    1320:	61 95       	neg	r22
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	08 95       	ret

0000132a <__floatunsisf>:
    132a:	e8 94       	clt
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <__floatsisf+0x12>

0000132e <__floatsisf>:
    132e:	97 fb       	bst	r25, 7
    1330:	3e f4       	brtc	.+14     	; 0x1340 <__floatsisf+0x12>
    1332:	90 95       	com	r25
    1334:	80 95       	com	r24
    1336:	70 95       	com	r23
    1338:	61 95       	neg	r22
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	99 23       	and	r25, r25
    1342:	a9 f0       	breq	.+42     	; 0x136e <__floatsisf+0x40>
    1344:	f9 2f       	mov	r31, r25
    1346:	96 e9       	ldi	r25, 0x96	; 150
    1348:	bb 27       	eor	r27, r27
    134a:	93 95       	inc	r25
    134c:	f6 95       	lsr	r31
    134e:	87 95       	ror	r24
    1350:	77 95       	ror	r23
    1352:	67 95       	ror	r22
    1354:	b7 95       	ror	r27
    1356:	f1 11       	cpse	r31, r1
    1358:	f8 cf       	rjmp	.-16     	; 0x134a <__floatsisf+0x1c>
    135a:	fa f4       	brpl	.+62     	; 0x139a <__floatsisf+0x6c>
    135c:	bb 0f       	add	r27, r27
    135e:	11 f4       	brne	.+4      	; 0x1364 <__floatsisf+0x36>
    1360:	60 ff       	sbrs	r22, 0
    1362:	1b c0       	rjmp	.+54     	; 0x139a <__floatsisf+0x6c>
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	16 c0       	rjmp	.+44     	; 0x139a <__floatsisf+0x6c>
    136e:	88 23       	and	r24, r24
    1370:	11 f0       	breq	.+4      	; 0x1376 <__floatsisf+0x48>
    1372:	96 e9       	ldi	r25, 0x96	; 150
    1374:	11 c0       	rjmp	.+34     	; 0x1398 <__floatsisf+0x6a>
    1376:	77 23       	and	r23, r23
    1378:	21 f0       	breq	.+8      	; 0x1382 <__floatsisf+0x54>
    137a:	9e e8       	ldi	r25, 0x8E	; 142
    137c:	87 2f       	mov	r24, r23
    137e:	76 2f       	mov	r23, r22
    1380:	05 c0       	rjmp	.+10     	; 0x138c <__floatsisf+0x5e>
    1382:	66 23       	and	r22, r22
    1384:	71 f0       	breq	.+28     	; 0x13a2 <__floatsisf+0x74>
    1386:	96 e8       	ldi	r25, 0x86	; 134
    1388:	86 2f       	mov	r24, r22
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	2a f0       	brmi	.+10     	; 0x139a <__floatsisf+0x6c>
    1390:	9a 95       	dec	r25
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	da f7       	brpl	.-10     	; 0x1390 <__floatsisf+0x62>
    139a:	88 0f       	add	r24, r24
    139c:	96 95       	lsr	r25
    139e:	87 95       	ror	r24
    13a0:	97 f9       	bld	r25, 7
    13a2:	08 95       	ret

000013a4 <__fp_inf>:
    13a4:	97 f9       	bld	r25, 7
    13a6:	9f 67       	ori	r25, 0x7F	; 127
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	08 95       	ret

000013b0 <__fp_nan>:
    13b0:	9f ef       	ldi	r25, 0xFF	; 255
    13b2:	80 ec       	ldi	r24, 0xC0	; 192
    13b4:	08 95       	ret

000013b6 <__fp_pscA>:
    13b6:	00 24       	eor	r0, r0
    13b8:	0a 94       	dec	r0
    13ba:	16 16       	cp	r1, r22
    13bc:	17 06       	cpc	r1, r23
    13be:	18 06       	cpc	r1, r24
    13c0:	09 06       	cpc	r0, r25
    13c2:	08 95       	ret

000013c4 <__fp_pscB>:
    13c4:	00 24       	eor	r0, r0
    13c6:	0a 94       	dec	r0
    13c8:	12 16       	cp	r1, r18
    13ca:	13 06       	cpc	r1, r19
    13cc:	14 06       	cpc	r1, r20
    13ce:	05 06       	cpc	r0, r21
    13d0:	08 95       	ret

000013d2 <__fp_round>:
    13d2:	09 2e       	mov	r0, r25
    13d4:	03 94       	inc	r0
    13d6:	00 0c       	add	r0, r0
    13d8:	11 f4       	brne	.+4      	; 0x13de <__fp_round+0xc>
    13da:	88 23       	and	r24, r24
    13dc:	52 f0       	brmi	.+20     	; 0x13f2 <__fp_round+0x20>
    13de:	bb 0f       	add	r27, r27
    13e0:	40 f4       	brcc	.+16     	; 0x13f2 <__fp_round+0x20>
    13e2:	bf 2b       	or	r27, r31
    13e4:	11 f4       	brne	.+4      	; 0x13ea <__fp_round+0x18>
    13e6:	60 ff       	sbrs	r22, 0
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__fp_round+0x20>
    13ea:	6f 5f       	subi	r22, 0xFF	; 255
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	08 95       	ret

000013f4 <__fp_split3>:
    13f4:	57 fd       	sbrc	r21, 7
    13f6:	90 58       	subi	r25, 0x80	; 128
    13f8:	44 0f       	add	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	59 f0       	breq	.+22     	; 0x1414 <__fp_splitA+0x10>
    13fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1400:	71 f0       	breq	.+28     	; 0x141e <__fp_splitA+0x1a>
    1402:	47 95       	ror	r20

00001404 <__fp_splitA>:
    1404:	88 0f       	add	r24, r24
    1406:	97 fb       	bst	r25, 7
    1408:	99 1f       	adc	r25, r25
    140a:	61 f0       	breq	.+24     	; 0x1424 <__fp_splitA+0x20>
    140c:	9f 3f       	cpi	r25, 0xFF	; 255
    140e:	79 f0       	breq	.+30     	; 0x142e <__fp_splitA+0x2a>
    1410:	87 95       	ror	r24
    1412:	08 95       	ret
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	14 06       	cpc	r1, r20
    141a:	55 1f       	adc	r21, r21
    141c:	f2 cf       	rjmp	.-28     	; 0x1402 <__fp_split3+0xe>
    141e:	46 95       	lsr	r20
    1420:	f1 df       	rcall	.-30     	; 0x1404 <__fp_splitA>
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <__fp_splitA+0x30>
    1424:	16 16       	cp	r1, r22
    1426:	17 06       	cpc	r1, r23
    1428:	18 06       	cpc	r1, r24
    142a:	99 1f       	adc	r25, r25
    142c:	f1 cf       	rjmp	.-30     	; 0x1410 <__fp_splitA+0xc>
    142e:	86 95       	lsr	r24
    1430:	71 05       	cpc	r23, r1
    1432:	61 05       	cpc	r22, r1
    1434:	08 94       	sec
    1436:	08 95       	ret

00001438 <__fp_zero>:
    1438:	e8 94       	clt

0000143a <__fp_szero>:
    143a:	bb 27       	eor	r27, r27
    143c:	66 27       	eor	r22, r22
    143e:	77 27       	eor	r23, r23
    1440:	cb 01       	movw	r24, r22
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__mulsf3>:
    1446:	0e 94 36 0a 	call	0x146c	; 0x146c <__mulsf3x>
    144a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__fp_round>
    144e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_pscA>
    1452:	38 f0       	brcs	.+14     	; 0x1462 <__mulsf3+0x1c>
    1454:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscB>
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__mulsf3+0x1c>
    145a:	95 23       	and	r25, r21
    145c:	11 f0       	breq	.+4      	; 0x1462 <__mulsf3+0x1c>
    145e:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_inf>
    1462:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_nan>
    1466:	11 24       	eor	r1, r1
    1468:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>

0000146c <__mulsf3x>:
    146c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_split3>
    1470:	70 f3       	brcs	.-36     	; 0x144e <__mulsf3+0x8>

00001472 <__mulsf3_pse>:
    1472:	95 9f       	mul	r25, r21
    1474:	c1 f3       	breq	.-16     	; 0x1466 <__mulsf3+0x20>
    1476:	95 0f       	add	r25, r21
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	55 1f       	adc	r21, r21
    147c:	62 9f       	mul	r22, r18
    147e:	f0 01       	movw	r30, r0
    1480:	72 9f       	mul	r23, r18
    1482:	bb 27       	eor	r27, r27
    1484:	f0 0d       	add	r31, r0
    1486:	b1 1d       	adc	r27, r1
    1488:	63 9f       	mul	r22, r19
    148a:	aa 27       	eor	r26, r26
    148c:	f0 0d       	add	r31, r0
    148e:	b1 1d       	adc	r27, r1
    1490:	aa 1f       	adc	r26, r26
    1492:	64 9f       	mul	r22, r20
    1494:	66 27       	eor	r22, r22
    1496:	b0 0d       	add	r27, r0
    1498:	a1 1d       	adc	r26, r1
    149a:	66 1f       	adc	r22, r22
    149c:	82 9f       	mul	r24, r18
    149e:	22 27       	eor	r18, r18
    14a0:	b0 0d       	add	r27, r0
    14a2:	a1 1d       	adc	r26, r1
    14a4:	62 1f       	adc	r22, r18
    14a6:	73 9f       	mul	r23, r19
    14a8:	b0 0d       	add	r27, r0
    14aa:	a1 1d       	adc	r26, r1
    14ac:	62 1f       	adc	r22, r18
    14ae:	83 9f       	mul	r24, r19
    14b0:	a0 0d       	add	r26, r0
    14b2:	61 1d       	adc	r22, r1
    14b4:	22 1f       	adc	r18, r18
    14b6:	74 9f       	mul	r23, r20
    14b8:	33 27       	eor	r19, r19
    14ba:	a0 0d       	add	r26, r0
    14bc:	61 1d       	adc	r22, r1
    14be:	23 1f       	adc	r18, r19
    14c0:	84 9f       	mul	r24, r20
    14c2:	60 0d       	add	r22, r0
    14c4:	21 1d       	adc	r18, r1
    14c6:	82 2f       	mov	r24, r18
    14c8:	76 2f       	mov	r23, r22
    14ca:	6a 2f       	mov	r22, r26
    14cc:	11 24       	eor	r1, r1
    14ce:	9f 57       	subi	r25, 0x7F	; 127
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	9a f0       	brmi	.+38     	; 0x14fa <__mulsf3_pse+0x88>
    14d4:	f1 f0       	breq	.+60     	; 0x1512 <__mulsf3_pse+0xa0>
    14d6:	88 23       	and	r24, r24
    14d8:	4a f0       	brmi	.+18     	; 0x14ec <__mulsf3_pse+0x7a>
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	bb 1f       	adc	r27, r27
    14e0:	66 1f       	adc	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	91 50       	subi	r25, 0x01	; 1
    14e8:	50 40       	sbci	r21, 0x00	; 0
    14ea:	a9 f7       	brne	.-22     	; 0x14d6 <__mulsf3_pse+0x64>
    14ec:	9e 3f       	cpi	r25, 0xFE	; 254
    14ee:	51 05       	cpc	r21, r1
    14f0:	80 f0       	brcs	.+32     	; 0x1512 <__mulsf3_pse+0xa0>
    14f2:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_inf>
    14f6:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_szero>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	e4 f3       	brlt	.-8      	; 0x14f6 <__mulsf3_pse+0x84>
    14fe:	98 3e       	cpi	r25, 0xE8	; 232
    1500:	d4 f3       	brlt	.-12     	; 0x14f6 <__mulsf3_pse+0x84>
    1502:	86 95       	lsr	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f7 95       	ror	r31
    150c:	e7 95       	ror	r30
    150e:	9f 5f       	subi	r25, 0xFF	; 255
    1510:	c1 f7       	brne	.-16     	; 0x1502 <__mulsf3_pse+0x90>
    1512:	fe 2b       	or	r31, r30
    1514:	88 0f       	add	r24, r24
    1516:	91 1d       	adc	r25, r1
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	97 f9       	bld	r25, 7
    151e:	08 95       	ret

00001520 <do_rand>:
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	ec 01       	movw	r28, r24
    1536:	68 81       	ld	r22, Y
    1538:	79 81       	ldd	r23, Y+1	; 0x01
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	61 15       	cp	r22, r1
    1540:	71 05       	cpc	r23, r1
    1542:	81 05       	cpc	r24, r1
    1544:	91 05       	cpc	r25, r1
    1546:	21 f4       	brne	.+8      	; 0x1550 <do_rand+0x30>
    1548:	64 e2       	ldi	r22, 0x24	; 36
    154a:	79 ed       	ldi	r23, 0xD9	; 217
    154c:	8b e5       	ldi	r24, 0x5B	; 91
    154e:	97 e0       	ldi	r25, 0x07	; 7
    1550:	2d e1       	ldi	r18, 0x1D	; 29
    1552:	33 ef       	ldi	r19, 0xF3	; 243
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	0e 94 02 0b 	call	0x1604	; 0x1604 <__divmodsi4>
    155c:	49 01       	movw	r8, r18
    155e:	5a 01       	movw	r10, r20
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	a7 ea       	ldi	r26, 0xA7	; 167
    1566:	b1 e4       	ldi	r27, 0x41	; 65
    1568:	0e 94 21 0b 	call	0x1642	; 0x1642 <__muluhisi3>
    156c:	6b 01       	movw	r12, r22
    156e:	7c 01       	movw	r14, r24
    1570:	ac ee       	ldi	r26, 0xEC	; 236
    1572:	b4 ef       	ldi	r27, 0xF4	; 244
    1574:	a5 01       	movw	r20, r10
    1576:	94 01       	movw	r18, r8
    1578:	0e 94 2f 0b 	call	0x165e	; 0x165e <__mulohisi3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8c 0d       	add	r24, r12
    1582:	9d 1d       	adc	r25, r13
    1584:	ae 1d       	adc	r26, r14
    1586:	bf 1d       	adc	r27, r15
    1588:	b7 ff       	sbrs	r27, 7
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <do_rand+0x72>
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	a1 09       	sbc	r26, r1
    1590:	b0 48       	sbci	r27, 0x80	; 128
    1592:	88 83       	st	Y, r24
    1594:	99 83       	std	Y+1, r25	; 0x01
    1596:	aa 83       	std	Y+2, r26	; 0x02
    1598:	bb 83       	std	Y+3, r27	; 0x03
    159a:	9f 77       	andi	r25, 0x7F	; 127
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	9f 90       	pop	r9
    15ae:	8f 90       	pop	r8
    15b0:	08 95       	ret

000015b2 <rand_r>:
    15b2:	0e 94 90 0a 	call	0x1520	; 0x1520 <do_rand>
    15b6:	08 95       	ret

000015b8 <rand>:
    15b8:	87 e0       	ldi	r24, 0x07	; 7
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	0e 94 90 0a 	call	0x1520	; 0x1520 <do_rand>
    15c0:	08 95       	ret

000015c2 <srand>:
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    15ca:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    15ce:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    15d2:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    15d6:	08 95       	ret

000015d8 <eeprom_read_byte>:
    15d8:	f9 99       	sbic	0x1f, 1	; 31
    15da:	fe cf       	rjmp	.-4      	; 0x15d8 <eeprom_read_byte>
    15dc:	92 bd       	out	0x22, r25	; 34
    15de:	81 bd       	out	0x21, r24	; 33
    15e0:	f8 9a       	sbi	0x1f, 0	; 31
    15e2:	99 27       	eor	r25, r25
    15e4:	80 b5       	in	r24, 0x20	; 32
    15e6:	08 95       	ret

000015e8 <eeprom_write_byte>:
    15e8:	26 2f       	mov	r18, r22

000015ea <eeprom_write_r18>:
    15ea:	f9 99       	sbic	0x1f, 1	; 31
    15ec:	fe cf       	rjmp	.-4      	; 0x15ea <eeprom_write_r18>
    15ee:	1f ba       	out	0x1f, r1	; 31
    15f0:	92 bd       	out	0x22, r25	; 34
    15f2:	81 bd       	out	0x21, r24	; 33
    15f4:	20 bd       	out	0x20, r18	; 32
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	fa 9a       	sbi	0x1f, 2	; 31
    15fc:	f9 9a       	sbi	0x1f, 1	; 31
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	08 95       	ret

00001604 <__divmodsi4>:
    1604:	05 2e       	mov	r0, r21
    1606:	97 fb       	bst	r25, 7
    1608:	1e f4       	brtc	.+6      	; 0x1610 <__divmodsi4+0xc>
    160a:	00 94       	com	r0
    160c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__negsi2>
    1610:	57 fd       	sbrc	r21, 7
    1612:	07 d0       	rcall	.+14     	; 0x1622 <__divmodsi4_neg2>
    1614:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodsi4>
    1618:	07 fc       	sbrc	r0, 7
    161a:	03 d0       	rcall	.+6      	; 0x1622 <__divmodsi4_neg2>
    161c:	4e f4       	brtc	.+18     	; 0x1630 <__divmodsi4_exit>
    161e:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__negsi2>

00001622 <__divmodsi4_neg2>:
    1622:	50 95       	com	r21
    1624:	40 95       	com	r20
    1626:	30 95       	com	r19
    1628:	21 95       	neg	r18
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	4f 4f       	sbci	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255

00001630 <__divmodsi4_exit>:
    1630:	08 95       	ret

00001632 <__negsi2>:
    1632:	90 95       	com	r25
    1634:	80 95       	com	r24
    1636:	70 95       	com	r23
    1638:	61 95       	neg	r22
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	08 95       	ret

00001642 <__muluhisi3>:
    1642:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__umulhisi3>
    1646:	a5 9f       	mul	r26, r21
    1648:	90 0d       	add	r25, r0
    164a:	b4 9f       	mul	r27, r20
    164c:	90 0d       	add	r25, r0
    164e:	a4 9f       	mul	r26, r20
    1650:	80 0d       	add	r24, r0
    1652:	91 1d       	adc	r25, r1
    1654:	11 24       	eor	r1, r1
    1656:	08 95       	ret

00001658 <__mulshisi3>:
    1658:	b7 ff       	sbrs	r27, 7
    165a:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__muluhisi3>

0000165e <__mulohisi3>:
    165e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__muluhisi3>
    1662:	82 1b       	sub	r24, r18
    1664:	93 0b       	sbc	r25, r19
    1666:	08 95       	ret

00001668 <__udivmodsi4>:
    1668:	a1 e2       	ldi	r26, 0x21	; 33
    166a:	1a 2e       	mov	r1, r26
    166c:	aa 1b       	sub	r26, r26
    166e:	bb 1b       	sub	r27, r27
    1670:	fd 01       	movw	r30, r26
    1672:	0d c0       	rjmp	.+26     	; 0x168e <__udivmodsi4_ep>

00001674 <__udivmodsi4_loop>:
    1674:	aa 1f       	adc	r26, r26
    1676:	bb 1f       	adc	r27, r27
    1678:	ee 1f       	adc	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	a2 17       	cp	r26, r18
    167e:	b3 07       	cpc	r27, r19
    1680:	e4 07       	cpc	r30, r20
    1682:	f5 07       	cpc	r31, r21
    1684:	20 f0       	brcs	.+8      	; 0x168e <__udivmodsi4_ep>
    1686:	a2 1b       	sub	r26, r18
    1688:	b3 0b       	sbc	r27, r19
    168a:	e4 0b       	sbc	r30, r20
    168c:	f5 0b       	sbc	r31, r21

0000168e <__udivmodsi4_ep>:
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	1a 94       	dec	r1
    1698:	69 f7       	brne	.-38     	; 0x1674 <__udivmodsi4_loop>
    169a:	60 95       	com	r22
    169c:	70 95       	com	r23
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	bd 01       	movw	r22, r26
    16a8:	cf 01       	movw	r24, r30
    16aa:	08 95       	ret

000016ac <_exit>:
    16ac:	f8 94       	cli

000016ae <__stop_program>:
    16ae:	ff cf       	rjmp	.-2      	; 0x16ae <__stop_program>
