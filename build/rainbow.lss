
build/rainbow.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	b9 04       	cpc	r11, r9
      6a:	10 05       	cpc	r17, r0
      6c:	24 05       	cpc	r18, r4
      6e:	55 05       	cpc	r21, r5
      70:	5c 05       	cpc	r21, r12
      72:	3b 05       	cpc	r19, r11
      74:	5f 05       	cpc	r21, r15
      76:	bd 06       	cpc	r11, r29
      78:	ae 07       	cpc	r26, r30
      7a:	ae 07       	cpc	r26, r30
      7c:	c6 06       	cpc	r12, r22
      7e:	c9 06       	cpc	r12, r25
      80:	cc 06       	cpc	r12, r28
      82:	ce 06       	cpc	r12, r30
      84:	d0 06       	cpc	r13, r16
      86:	d2 06       	cpc	r13, r18
      88:	83 07       	cpc	r24, r19
      8a:	e4 06       	cpc	r14, r20

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e0       	ldi	r30, 0x00	; 0
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <main>
      da:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
// global variables
uint16_t wait_time = 2000;

// put your setup code here, will be run once at the beginning
void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
}

// put your main code here, will be run repeatedly
void loop() 
{
  set_color(RGB(0,0,1));
      e4:	80 e1       	ldi	r24, 0x10	; 16
      e6:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
      ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
      ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
      f2:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
  set_color(RGB(0,1,1));
      f6:	84 e1       	ldi	r24, 0x14	; 20
      f8:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
      fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     104:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
  set_color(RGB(0,1,0));
     108:	84 e0       	ldi	r24, 0x04	; 4
     10a:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
     10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     116:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
  set_color(RGB(1,1,0));
     11a:	85 e0       	ldi	r24, 0x05	; 5
     11c:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
     120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     128:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
  set_color(RGB(1,0,0));
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
     132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     13a:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
  set_color(RGB(1,0,1));
     13e:	81 e1       	ldi	r24, 0x11	; 17
     140:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
  delay(wait_time);
     144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     14c:	0c 94 a9 01 	jmp	0x352	; 0x352 <delay>

00000150 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     150:	08 95       	ret

00000152 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	08 95       	ret

00000158 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     158:	08 95       	ret

0000015a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
    cli();
     168:	f8 94       	cli

    ports_off();
     16a:	14 b8       	out	0x04, r1	; 4
     16c:	17 b8       	out	0x07, r1	; 7
     16e:	1a b8       	out	0x0a, r1	; 10
     170:	15 b8       	out	0x05, r1	; 5
     172:	18 b8       	out	0x08, r1	; 8
     174:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     176:	52 9a       	sbi	0x0a, 2	; 10
     178:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     17a:	14 bc       	out	0x24, r1	; 36
     17c:	85 e0       	ldi	r24, 0x05	; 5
     17e:	85 bd       	out	0x25, r24	; 37
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	87 bd       	out	0x27, r24	; 39
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     18a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     18e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     192:	2f e8       	ldi	r18, 0x8F	; 143
     194:	3b e0       	ldi	r19, 0x0B	; 11
     196:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     19a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     19e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     1a2:	53 98       	cbi	0x0a, 3	; 10
     1a4:	23 98       	cbi	0x04, 3	; 4
     1a6:	91 ea       	ldi	r25, 0xA1	; 161
     1a8:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     1ac:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     1b0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1b4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1b8:	8b e0       	ldi	r24, 0x0B	; 11
     1ba:	80 bf       	out	0x30, r24	; 48
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1c8:	83 e8       	ldi	r24, 0x83	; 131
     1ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1dc:	86 fd       	sbrc	r24, 6
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1e0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1e4:	83 ea       	ldi	r24, 0xA3	; 163
     1e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
    if (osccal != 0xFF)
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	11 f0       	breq	.+4      	; 0x200 <kilo_init+0xa6>
        OSCCAL = osccal;
     1fc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     200:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    rx_leadingbit = 1;
     204:	c1 e0       	ldi	r28, 0x01	; 1
     206:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     20a:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <rx_leadingbyte>
    rx_byteindex = 0;
     20e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
    rx_bytevalue = 0;
     212:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     216:	80 e9       	ldi	r24, 0x90	; 144
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     21e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     222:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tx_mask>
     226:	88 73       	andi	r24, 0x38	; 56
     228:	11 f0       	breq	.+4      	; 0x22e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     22a:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <tx_mask>
    tx_clock = 0;
     22e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     232:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
    tx_increment = 255;
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     23e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    kilo_ticks = 0;
     242:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks>
     246:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x1>
     24a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks+0x2>
     24e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x3>
    kilo_state = IDLE;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     258:	82 e4       	ldi	r24, 0x42	; 66
     25a:	9f e0       	ldi	r25, 0x0F	; 15
     25c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <kilo_tx_period+0x1>
     260:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     264:	80 eb       	ldi	r24, 0xB0	; 176
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     26c:	c8 2f       	mov	r28, r24
     26e:	81 eb       	ldi	r24, 0xB1	; 177
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     276:	2c 2f       	mov	r18, r28
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	38 2b       	or	r19, r24
     27c:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <kilo_uid+0x1>
     280:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     28c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     290:	89 e0       	ldi	r24, 0x09	; 9
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     298:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     29c:	8c e0       	ldi	r24, 0x0C	; 12
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2a4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2a8:	84 e1       	ldi	r24, 0x14	; 20
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2b0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
     2b4:	0a e3       	ldi	r16, 0x3A	; 58
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	53 e1       	ldi	r21, 0x13	; 19
     2ba:	e5 2e       	mov	r14, r21
     2bc:	51 e0       	ldi	r21, 0x01	; 1
     2be:	f5 2e       	mov	r15, r21
     2c0:	c0 e2       	ldi	r28, 0x20	; 32
     2c2:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2c4:	ce 01       	movw	r24, r28
     2c6:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2ca:	d8 2e       	mov	r13, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2d4:	2d 2d       	mov	r18, r13
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	32 2f       	mov	r19, r18
     2da:	22 27       	eor	r18, r18
     2dc:	28 2b       	or	r18, r24
     2de:	f8 01       	movw	r30, r16
     2e0:	21 93       	st	Z+, r18
     2e2:	31 93       	st	Z+, r19
     2e4:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2e6:	ce 01       	movw	r24, r28
     2e8:	c0 96       	adiw	r24, 0x30	; 48
     2ea:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2ee:	d8 2e       	mov	r13, r24
     2f0:	ce 01       	movw	r24, r28
     2f2:	c1 96       	adiw	r24, 0x31	; 49
     2f4:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_read_byte>
     2f8:	2d 2d       	mov	r18, r13
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	32 2f       	mov	r19, r18
     2fe:	22 27       	eor	r18, r18
     300:	28 2b       	or	r18, r24
     302:	f7 01       	movw	r30, r14
     304:	21 93       	st	Z+, r18
     306:	31 93       	st	Z+, r19
     308:	7f 01       	movw	r14, r30
     30a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     30c:	cc 33       	cpi	r28, 0x3C	; 60
     30e:	d1 05       	cpc	r29, r1
     310:	c9 f6       	brne	.-78     	; 0x2c4 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     312:	78 94       	sei
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	08 95       	ret

00000324 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	a8 95       	wdr
     336:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     33a:	88 61       	ori	r24, 0x18	; 24
     33c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     340:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     344:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     346:	8f 91       	pop	r24
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	41 f0       	breq	.+16     	; 0x366 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     356:	ef ec       	ldi	r30, 0xCF	; 207
     358:	f7 e0       	ldi	r31, 0x07	; 7
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <delay+0x8>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <delay+0xe>
     360:	00 00       	nop
        _delay_ms(1);
        ms--;
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f6 cf       	rjmp	.-20     	; 0x352 <delay>
    }
}
     366:	08 95       	ret

00000368 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     368:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     36c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     370:	08 95       	ret

00000372 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     378:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     37c:	8f e0       	ldi	r24, 0x0F	; 15
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0c 94 a9 01 	jmp	0x352	; 0x352 <delay>

00000384 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     384:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     388:	81 11       	cpse	r24, r1
     38a:	1e c0       	rjmp	.+60     	; 0x3c8 <get_ambientlight+0x44>
        cli();
     38c:	f8 94       	cli
        adc_setup_conversion(7);
     38e:	87 e0       	ldi	r24, 0x07	; 7
     390:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     394:	83 e8       	ldi	r24, 0x83	; 131
     396:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     39a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3a8:	86 fd       	sbrc	r24, 6
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     3ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3b8:	23 ea       	ldi	r18, 0xA3	; 163
     3ba:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3c4:	78 94       	sei
     3c6:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     3cc:	08 95       	ret

000003ce <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     3ce:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     3d2:	81 11       	cpse	r24, r1
     3d4:	1e c0       	rjmp	.+60     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
        cli();
     3d6:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     3d8:	88 ec       	ldi	r24, 0xC8	; 200
     3da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     3de:	87 e8       	ldi	r24, 0x87	; 135
     3e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3f2:	86 fd       	sbrc	r24, 6
     3f4:	fc cf       	rjmp	.-8      	; 0x3ee <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3fe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     402:	23 ea       	ldi	r18, 0xA3	; 163
     404:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     40e:	78 94       	sei
     410:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     416:	08 95       	ret

00000418 <rand_hard>:

uint8_t rand_hard() {
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     420:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     422:	e3 ea       	ldi	r30, 0xA3	; 163
     424:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     426:	c6 e0       	ldi	r28, 0x06	; 6
     428:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     42a:	a1 e0       	ldi	r26, 0x01	; 1
     42c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     42e:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     430:	f8 94       	cli
            adc_setup_conversion(6);
     432:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     436:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     43a:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     43e:	40 64       	ori	r20, 0x40	; 64
     440:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     444:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     448:	46 fd       	sbrc	r20, 6
     44a:	fc cf       	rjmp	.-8      	; 0x444 <rand_hard+0x2c>
            a = ADCW&0x1;
     44c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     450:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     454:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     456:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     45a:	50 64       	ori	r21, 0x40	; 64
     45c:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     460:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     464:	56 fd       	sbrc	r21, 6
     466:	fc cf       	rjmp	.-8      	; 0x460 <rand_hard+0x48>
            b = ADCW&0x1;
     468:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     46c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     470:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     474:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     478:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     47c:	78 94       	sei
            tries++;
     47e:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     480:	61 70       	andi	r22, 0x01	; 1
     482:	46 17       	cp	r20, r22
     484:	51 f0       	breq	.+20     	; 0x49a <rand_hard+0x82>
        if (a)
     486:	44 23       	and	r20, r20
     488:	59 f0       	breq	.+22     	; 0x4a0 <rand_hard+0x88>
            num |= (1<<i);
     48a:	ad 01       	movw	r20, r26
     48c:	02 2e       	mov	r0, r18
     48e:	01 c0       	rjmp	.+2      	; 0x492 <rand_hard+0x7a>
     490:	44 0f       	add	r20, r20
     492:	0a 94       	dec	r0
     494:	ea f7       	brpl	.-6      	; 0x490 <rand_hard+0x78>
     496:	84 2b       	or	r24, r20
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     49a:	90 38       	cpi	r25, 0x80	; 128
     49c:	49 f6       	brne	.-110    	; 0x430 <rand_hard+0x18>
     49e:	f3 cf       	rjmp	.-26     	; 0x486 <rand_hard+0x6e>
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     4a4:	28 30       	cpi	r18, 0x08	; 8
     4a6:	31 05       	cpc	r19, r1
     4a8:	09 f0       	breq	.+2      	; 0x4ac <rand_hard+0x94>
     4aa:	c1 cf       	rjmp	.-126    	; 0x42e <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     4b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     4b6:	98 e0       	ldi	r25, 0x08	; 8
     4b8:	89 9f       	mul	r24, r25
     4ba:	90 01       	movw	r18, r0
     4bc:	11 24       	eor	r1, r1
     4be:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4c0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	89 0f       	add	r24, r25
     4c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     4cc:	82 2f       	mov	r24, r18
     4ce:	82 95       	swap	r24
     4d0:	86 95       	lsr	r24
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	28 27       	eor	r18, r24
     4d6:	96 95       	lsr	r25
     4d8:	96 95       	lsr	r25
     4da:	82 2f       	mov	r24, r18
     4dc:	89 27       	eor	r24, r25
     4de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     4e2:	08 95       	ret

000004e4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     4e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     4e8:	08 95       	ret

000004ea <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4ea:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     4ee:	81 11       	cpse	r24, r1
     4f0:	16 c0       	rjmp	.+44     	; 0x51e <get_voltage+0x34>
        cli();                                    // disable interrupts
     4f2:	f8 94       	cli
        adc_setup_conversion(6);
     4f4:	86 e0       	ldi	r24, 0x06	; 6
     4f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4fa:	83 e8       	ldi	r24, 0x83	; 131
     4fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     500:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     504:	80 64       	ori	r24, 0x40	; 64
     506:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     50a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     50e:	86 fd       	sbrc	r24, 6
     510:	fc cf       	rjmp	.-8      	; 0x50a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     512:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     516:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     51a:	78 94       	sei
     51c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     522:	08 95       	ret

00000524 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     54a:	fc 01       	movw	r30, r24
     54c:	c2 81       	ldd	r28, Z+2	; 0x02
     54e:	d3 81       	ldd	r29, Z+3	; 0x03
     550:	c4 38       	cpi	r28, 0x84	; 132
     552:	f3 e0       	ldi	r31, 0x03	; 3
     554:	df 07       	cpc	r29, r31
     556:	0c f0       	brlt	.+2      	; 0x55a <estimate_distance+0x36>
     558:	7e c0       	rjmp	.+252    	; 0x656 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     55a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_irhigh>
     55e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <kilo_irhigh+0x1>
     562:	8c 17       	cp	r24, r28
     564:	9d 07       	cpc	r25, r29
     566:	08 f4       	brcc	.+2      	; 0x56a <estimate_distance+0x46>
     568:	6f c0       	rjmp	.+222    	; 0x648 <estimate_distance+0x124>
     56a:	e5 e1       	ldi	r30, 0x15	; 21
     56c:	f1 e0       	ldi	r31, 0x01	; 1
     56e:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     570:	81 91       	ld	r24, Z+
     572:	91 91       	ld	r25, Z+
     574:	8c 17       	cp	r24, r28
     576:	9d 07       	cpc	r25, r29
     578:	20 f0       	brcs	.+8      	; 0x582 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     57a:	1f 5f       	subi	r17, 0xFF	; 255
     57c:	1e 30       	cpi	r17, 0x0E	; 14
     57e:	c1 f7       	brne	.-16     	; 0x570 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     580:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     582:	81 2f       	mov	r24, r17
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ed 5e       	subi	r30, 0xED	; 237
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	e0 80       	ld	r14, Z
     592:	f1 80       	ldd	r15, Z+1	; 0x01
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	fc 01       	movw	r30, r24
     59a:	ef 5e       	subi	r30, 0xEF	; 239
     59c:	fe 4f       	sbci	r31, 0xFE	; 254
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	b7 01       	movw	r22, r14
     5a4:	68 1b       	sub	r22, r24
     5a6:	79 0b       	sbc	r23, r25
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5bc:	be 01       	movw	r22, r28
     5be:	0d 2e       	mov	r0, r29
     5c0:	00 0c       	add	r0, r0
     5c2:	88 0b       	sbc	r24, r24
     5c4:	99 0b       	sbc	r25, r25
     5c6:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatsisf>
     5ca:	2b 01       	movw	r4, r22
     5cc:	3c 01       	movw	r6, r24
     5ce:	b7 01       	movw	r22, r14
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
     5dc:	61 2f       	mov	r22, r17
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	5f e3       	ldi	r21, 0x3F	; 63
     5f0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     5fe:	a5 01       	movw	r20, r10
     600:	94 01       	movw	r18, r8
     602:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c7 01       	movw	r24, r14
     60c:	b6 01       	movw	r22, r12
     60e:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	c3 01       	movw	r24, r6
     618:	b2 01       	movw	r22, r4
     61a:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e2       	ldi	r20, 0x20	; 32
     624:	51 e4       	ldi	r21, 0x41	; 65
     626:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     62a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     62e:	7b 01       	movw	r14, r22
     630:	c5 01       	movw	r24, r10
     632:	b4 01       	movw	r22, r8
     634:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     638:	ab 01       	movw	r20, r22
     63a:	bc 01       	movw	r22, r24
     63c:	c7 01       	movw	r24, r14
     63e:	ba 01       	movw	r22, r20
     640:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divmodhi4>
     644:	16 2f       	mov	r17, r22
     646:	01 c0       	rjmp	.+2      	; 0x64a <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     648:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     64a:	cd 3b       	cpi	r28, 0xBD	; 189
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	d8 07       	cpc	r29, r24
     650:	0c f4       	brge	.+2      	; 0x654 <estimate_distance+0x130>
     652:	ca c0       	rjmp	.+404    	; 0x7e8 <estimate_distance+0x2c4>
     654:	01 c0       	rjmp	.+2      	; 0x658 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     656:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     658:	f1 01       	movw	r30, r2
     65a:	c0 80       	ld	r12, Z
     65c:	d1 80       	ldd	r13, Z+1	; 0x01
     65e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     662:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>
     666:	8c 15       	cp	r24, r12
     668:	9d 05       	cpc	r25, r13
     66a:	88 f0       	brcs	.+34     	; 0x68e <estimate_distance+0x16a>
     66c:	ec e3       	ldi	r30, 0x3C	; 60
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     676:	e1 90       	ld	r14, Z+
     678:	f1 90       	ld	r15, Z+
     67a:	ec 14       	cp	r14, r12
     67c:	fd 04       	cpc	r15, r13
     67e:	08 f4       	brcc	.+2      	; 0x682 <estimate_distance+0x15e>
     680:	58 c0       	rjmp	.+176    	; 0x732 <estimate_distance+0x20e>
     682:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     684:	8e 30       	cpi	r24, 0x0E	; 14
     686:	91 05       	cpc	r25, r1
     688:	a9 f7       	brne	.-22     	; 0x674 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     68a:	0a e5       	ldi	r16, 0x5A	; 90
     68c:	01 c0       	rjmp	.+2      	; 0x690 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     68e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     690:	1f 3f       	cpi	r17, 0xFF	; 255
     692:	09 f4       	brne	.+2      	; 0x696 <estimate_distance+0x172>
     694:	4b c0       	rjmp	.+150    	; 0x72c <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     696:	be 01       	movw	r22, r28
     698:	dd 0f       	add	r29, r29
     69a:	88 0b       	sbc	r24, r24
     69c:	99 0b       	sbc	r25, r25
     69e:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatsisf>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	61 2f       	mov	r22, r17
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     6b2:	4b 01       	movw	r8, r22
     6b4:	5c 01       	movw	r10, r24
     6b6:	a7 01       	movw	r20, r14
     6b8:	96 01       	movw	r18, r12
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	81 e6       	ldi	r24, 0x61	; 97
     6c0:	94 e4       	ldi	r25, 0x44	; 68
     6c2:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c5 01       	movw	r24, r10
     6cc:	b4 01       	movw	r22, r8
     6ce:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     6d2:	4b 01       	movw	r8, r22
     6d4:	5c 01       	movw	r10, r24
     6d6:	60 2f       	mov	r22, r16
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     6e2:	2b 01       	movw	r4, r22
     6e4:	3c 01       	movw	r6, r24
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	4f e2       	ldi	r20, 0x2F	; 47
     6ec:	54 e4       	ldi	r21, 0x44	; 68
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c3 01       	movw	r24, r6
     6fc:	b2 01       	movw	r22, r4
     6fe:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	48 e4       	ldi	r20, 0x48	; 72
     714:	53 e4       	ldi	r21, 0x43	; 67
     716:	0e 94 15 09 	call	0x122a	; 0x122a <__divsf3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	44 e0       	ldi	r20, 0x04	; 4
     720:	52 e4       	ldi	r21, 0x42	; 66
     722:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     726:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
     72a:	60 c0       	rjmp	.+192    	; 0x7ec <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     72c:	61 e2       	ldi	r22, 0x21	; 33
     72e:	60 0f       	add	r22, r16
     730:	5d c0       	rjmp	.+186    	; 0x7ec <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	fc 01       	movw	r30, r24
     738:	e8 5c       	subi	r30, 0xC8	; 200
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	b7 01       	movw	r22, r14
     742:	68 1b       	sub	r22, r24
     744:	79 0b       	sbc	r23, r25
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     75a:	b6 01       	movw	r22, r12
     75c:	dd 0c       	add	r13, r13
     75e:	88 0b       	sbc	r24, r24
     760:	99 0b       	sbc	r25, r25
     762:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatsisf>
     766:	2b 01       	movw	r4, r22
     768:	3c 01       	movw	r6, r24
     76a:	b7 01       	movw	r22, r14
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
     778:	63 2d       	mov	r22, r3
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatunsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	0e 94 a9 08 	call	0x1152	; 0x1152 <__addsf3>
     79a:	a5 01       	movw	r20, r10
     79c:	94 01       	movw	r18, r8
     79e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	c3 01       	movw	r24, r6
     7b4:	b2 01       	movw	r22, r4
     7b6:	0e 94 a8 08 	call	0x1150	; 0x1150 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e2       	ldi	r20, 0x20	; 32
     7c0:	51 e4       	ldi	r21, 0x41	; 65
     7c2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     7c6:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     7ca:	7b 01       	movw	r14, r22
     7cc:	c5 01       	movw	r24, r10
     7ce:	b4 01       	movw	r22, r8
     7d0:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     7d4:	ab 01       	movw	r20, r22
     7d6:	bc 01       	movw	r22, r24
     7d8:	c7 01       	movw	r24, r14
     7da:	ba 01       	movw	r22, r20
     7dc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divmodhi4>
     7e0:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     7e2:	6f 3f       	cpi	r22, 0xFF	; 255
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <estimate_distance+0x2c4>
     7e6:	54 cf       	rjmp	.-344    	; 0x690 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7e8:	61 e2       	ldi	r22, 0x21	; 33
     7ea:	61 0f       	add	r22, r17
    }
}
     7ec:	86 2f       	mov	r24, r22
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	7f 90       	pop	r7
     808:	6f 90       	pop	r6
     80a:	5f 90       	pop	r5
     80c:	4f 90       	pop	r4
     80e:	3f 90       	pop	r3
     810:	2f 90       	pop	r2
     812:	08 95       	ret

00000814 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
    tx_clock += tx_increment;
     836:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     83a:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     83e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_increment>
     842:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tx_increment+0x1>
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_clock+0x1>
     84e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_clock>
    tx_increment = 0xFF;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     85a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    OCR0A = tx_increment;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     862:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_ticks>
     866:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_ticks+0x1>
     86a:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <kilo_ticks+0x2>
     86e:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <kilo_ticks+0x3>
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	a1 1d       	adc	r26, r1
     876:	b1 1d       	adc	r27, r1
     878:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <kilo_ticks>
     87c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <kilo_ticks+0x1>
     880:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <kilo_ticks+0x2>
     884:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     888:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     88c:	81 11       	cpse	r24, r1
     88e:	2d c0       	rjmp	.+90     	; 0x8ea <__vector_14+0xd6>
     890:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_tx_period>
     894:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_tx_period+0x1>
     898:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     89c:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     8a0:	82 17       	cp	r24, r18
     8a2:	93 07       	cpc	r25, r19
     8a4:	10 f5       	brcc	.+68     	; 0x8ea <__vector_14+0xd6>
     8a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     8aa:	84 30       	cpi	r24, 0x04	; 4
     8ac:	f1 f4       	brne	.+60     	; 0x8ea <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     8ae:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     8b2:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     8b6:	09 95       	icall
        if (msg) {
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	b9 f0       	breq	.+46     	; 0x8ea <__vector_14+0xd6>
            if (message_send(msg)) {
     8bc:	0e 94 dd 07 	call	0xfba	; 0xfba <message_send>
     8c0:	88 23       	and	r24, r24
     8c2:	51 f0       	breq	.+20     	; 0x8d8 <__vector_14+0xc4>
                kilo_message_tx_success();
     8c4:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     8c8:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     8cc:	09 95       	icall
                tx_clock = 0;
     8ce:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     8d2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     8d8:	0e 94 04 0b 	call	0x1608	; 0x1608 <rand>
     8dc:	9c 01       	movw	r18, r24
     8de:	33 27       	eor	r19, r19
     8e0:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <tx_increment+0x1>
     8e4:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <tx_increment>
                OCR0A = tx_increment;
     8e8:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     90c:	80 ff       	sbrs	r24, 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <set_color+0x8>
        DDRD |= (1<<5);
     910:	55 9a       	sbi	0x0a, 5	; 10
     912:	01 c0       	rjmp	.+2      	; 0x916 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     914:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     916:	81 ff       	sbrs	r24, 1
     918:	02 c0       	rjmp	.+4      	; 0x91e <set_color+0x12>
        DDRD |= (1<<4);
     91a:	54 9a       	sbi	0x0a, 4	; 10
     91c:	01 c0       	rjmp	.+2      	; 0x920 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     91e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     920:	82 ff       	sbrs	r24, 2
     922:	02 c0       	rjmp	.+4      	; 0x928 <set_color+0x1c>
        DDRC |= (1<<3);
     924:	3b 9a       	sbi	0x07, 3	; 7
     926:	01 c0       	rjmp	.+2      	; 0x92a <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     928:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     92a:	83 ff       	sbrs	r24, 3
     92c:	02 c0       	rjmp	.+4      	; 0x932 <set_color+0x26>
        DDRC |= (1<<2);
     92e:	3a 9a       	sbi	0x07, 2	; 7
     930:	01 c0       	rjmp	.+2      	; 0x934 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     932:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     934:	84 ff       	sbrs	r24, 4
     936:	02 c0       	rjmp	.+4      	; 0x93c <set_color+0x30>
        DDRC |= (1<<5);
     938:	3d 9a       	sbi	0x07, 5	; 7
     93a:	01 c0       	rjmp	.+2      	; 0x93e <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     93c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     93e:	85 ff       	sbrs	r24, 5
     940:	02 c0       	rjmp	.+4      	; 0x946 <set_color+0x3a>
        DDRC |= (1<<4);
     942:	3c 9a       	sbi	0x07, 4	; 7
     944:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     946:	3c 98       	cbi	0x07, 4	; 7
     948:	08 95       	ret

0000094a <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     94a:	8c 01       	movw	r16, r24
     94c:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     94e:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     950:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     956:	98 e1       	ldi	r25, 0x18	; 24
     958:	c9 2e       	mov	r12, r25
     95a:	29 e2       	ldi	r18, 0x29	; 41
     95c:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     95e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e7 30       	cpi	r30, 0x07	; 7
     966:	f1 05       	cpc	r31, r1
     968:	d0 f7       	brcc	.-12     	; 0x95e <kilo_start+0x14>
     96a:	ec 5c       	subi	r30, 0xCC	; 204
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__tablejump2__>
            case SLEEPING:
                cli();
     972:	f8 94       	cli
                acomp_off();
     974:	80 b7       	in	r24, 0x30	; 48
     976:	87 7f       	andi	r24, 0xF7	; 247
     978:	80 bf       	out	0x30, r24	; 48
                adc_off();
     97a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     97e:	8f 77       	andi	r24, 0x7F	; 127
     980:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     984:	14 b8       	out	0x04, r1	; 4
     986:	17 b8       	out	0x07, r1	; 7
     988:	1a b8       	out	0x0a, r1	; 10
     98a:	15 b8       	out	0x05, r1	; 5
     98c:	18 b8       	out	0x08, r1	; 8
     98e:	1b b8       	out	0x0b, r1	; 11
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	a8 95       	wdr
     996:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     9a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9a4:	80 64       	ori	r24, 0x40	; 64
     9a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9aa:	83 b7       	in	r24, 0x33	; 51
     9ac:	81 7f       	andi	r24, 0xF1	; 241
     9ae:	84 60       	ori	r24, 0x04	; 4
     9b0:	83 bf       	out	0x33, r24	; 51
                cli();
     9b2:	f8 94       	cli
                sleep_enable();
     9b4:	83 b7       	in	r24, 0x33	; 51
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	83 bf       	out	0x33, r24	; 51
                sei();
     9ba:	78 94       	sei
                sleep_cpu();
     9bc:	88 95       	sleep
                sleep_disable();
     9be:	83 b7       	in	r24, 0x33	; 51
     9c0:	8e 7f       	andi	r24, 0xFE	; 254
     9c2:	83 bf       	out	0x33, r24	; 51
                sei();
     9c4:	78 94       	sei
                rx_busy = 0;
     9c6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
                ports_on();
     9ca:	52 9a       	sbi	0x0a, 2	; 10
     9cc:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     9ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9d2:	80 68       	ori	r24, 0x80	; 128
     9d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d8:	87 e5       	ldi	r24, 0x57	; 87
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <kilo_start+0x92>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <kilo_start+0x98>
     9e2:	00 00       	nop
                _delay_us(300);
                acomp_on();
     9e4:	80 b7       	in	r24, 0x30	; 48
     9e6:	88 61       	ori	r24, 0x18	; 24
     9e8:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9ea:	8f e3       	ldi	r24, 0x3F	; 63
     9ec:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f0:	ef e1       	ldi	r30, 0x1F	; 31
     9f2:	fe e4       	ldi	r31, 0x4E	; 78
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <kilo_start+0xaa>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <kilo_start+0xb0>
     9fa:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9fc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     a00:	88 23       	and	r24, r24
     a02:	09 f4       	brne	.+2      	; 0xa06 <kilo_start+0xbc>
     a04:	50 c0       	rjmp	.+160    	; 0xaa6 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a0c:	ff ef       	ldi	r31, 0xFF	; 255
     a0e:	20 e7       	ldi	r18, 0x70	; 112
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	f1 50       	subi	r31, 0x01	; 1
     a14:	20 40       	sbci	r18, 0x00	; 0
     a16:	80 40       	sbci	r24, 0x00	; 0
     a18:	e1 f7       	brne	.-8      	; 0xa12 <kilo_start+0xc8>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <kilo_start+0xd2>
     a1c:	00 00       	nop
     a1e:	43 c0       	rjmp	.+134    	; 0xaa6 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a20:	8c e0       	ldi	r24, 0x0C	; 12
     a22:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a26:	ef ec       	ldi	r30, 0xCF	; 207
     a28:	f7 e0       	ldi	r31, 0x07	; 7
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <kilo_start+0xe0>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <kilo_start+0xe6>
     a30:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a38:	ff ef       	ldi	r31, 0xFF	; 255
     a3a:	21 ee       	ldi	r18, 0xE1	; 225
     a3c:	84 e0       	ldi	r24, 0x04	; 4
     a3e:	f1 50       	subi	r31, 0x01	; 1
     a40:	20 40       	sbci	r18, 0x00	; 0
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <kilo_start+0xf4>
     a46:	2c c0       	rjmp	.+88     	; 0xaa0 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a48:	0e 94 75 02 	call	0x4ea	; 0x4ea <get_voltage>
                if(voltage > 682)
     a4c:	8b 3a       	cpi	r24, 0xAB	; 171
     a4e:	e2 e0       	ldi	r30, 0x02	; 2
     a50:	9e 07       	cpc	r25, r30
     a52:	24 f0       	brlt	.+8      	; 0xa5c <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a54:	8c e0       	ldi	r24, 0x0C	; 12
     a56:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a5a:	81 cf       	rjmp	.-254    	; 0x95e <kilo_start+0x14>
                else if(voltage > 648)
     a5c:	89 38       	cpi	r24, 0x89	; 137
     a5e:	f2 e0       	ldi	r31, 0x02	; 2
     a60:	9f 07       	cpc	r25, r31
     a62:	14 f0       	brlt	.+4      	; 0xa68 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a64:	80 e3       	ldi	r24, 0x30	; 48
     a66:	f7 cf       	rjmp	.-18     	; 0xa56 <kilo_start+0x10c>
                else if(voltage > 614)
     a68:	87 36       	cpi	r24, 0x67	; 103
     a6a:	92 40       	sbci	r25, 0x02	; 2
     a6c:	14 f0       	brlt	.+4      	; 0xa72 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a6e:	8f e0       	ldi	r24, 0x0F	; 15
     a70:	f2 cf       	rjmp	.-28     	; 0xa56 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	f0 cf       	rjmp	.-32     	; 0xa56 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a76:	48 99       	sbic	0x09, 0	; 9
     a78:	16 c0       	rjmp	.+44     	; 0xaa6 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a80:	8f ec       	ldi	r24, 0xCF	; 207
     a82:	97 e0       	ldi	r25, 0x07	; 7
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <kilo_start+0x13a>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <kilo_start+0x140>
     a8a:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
     a92:	9f ef       	ldi	r25, 0xFF	; 255
     a94:	e1 ee       	ldi	r30, 0xE1	; 225
     a96:	f4 e0       	ldi	r31, 0x04	; 4
     a98:	91 50       	subi	r25, 0x01	; 1
     a9a:	e0 40       	sbci	r30, 0x00	; 0
     a9c:	f0 40       	sbci	r31, 0x00	; 0
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <kilo_start+0x14e>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <kilo_start+0x158>
     aa2:	00 00       	nop
     aa4:	5c cf       	rjmp	.-328    	; 0x95e <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	d6 cf       	rjmp	.-84     	; 0xa56 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     aaa:	d1 11       	cpse	r29, r1
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <kilo_start+0x168>
                    setup();
     aae:	f8 01       	movw	r30, r16
     ab0:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ab2:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <kilo_state>
     ab6:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     ab8:	f7 01       	movw	r30, r14
     aba:	09 95       	icall
                break;
     abc:	50 cf       	rjmp	.-352    	; 0x95e <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     abe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     ac2:	81 11       	cpse	r24, r1
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     ace:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     ad2:	45 cf       	rjmp	.-374    	; 0x95e <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     ad4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     ad8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     adc:	98 17       	cp	r25, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <kilo_start+0x198>
     ae0:	3e cf       	rjmp	.-388    	; 0x95e <kilo_start+0x14>
                        prev_motion = cur_motion;
     ae2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     ae6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     aea:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	89 f4       	brne	.+34     	; 0xb14 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     af2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     af6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     afa:	8f e2       	ldi	r24, 0x2F	; 47
     afc:	95 e7       	ldi	r25, 0x75	; 117
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <kilo_start+0x1b4>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <kilo_start+0x1ba>
     b04:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b06:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b0a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b0e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b12:	25 cf       	rjmp	.-438    	; 0x95e <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b14:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b18:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b1c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	59 f4       	brne	.+22     	; 0xb3a <kilo_start+0x1f0>
     b24:	ef e2       	ldi	r30, 0x2F	; 47
     b26:	f5 e7       	ldi	r31, 0x75	; 117
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <kilo_start+0x1de>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <kilo_start+0x1e4>
     b2e:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b30:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b34:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b38:	10 c0       	rjmp	.+32     	; 0xb5a <kilo_start+0x210>
     b3a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b3e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b42:	8f e2       	ldi	r24, 0x2F	; 47
     b44:	95 e7       	ldi	r25, 0x75	; 117
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <kilo_start+0x1fc>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <kilo_start+0x202>
     b4c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b4e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_straight_right>
     b52:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b56:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b5a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b5e:	ff ce       	rjmp	.-514    	; 0x95e <kilo_start+0x14>

00000b60 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
    rx_timer_off();
     b6e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     b80:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
    rx_busy = 0;
     b84:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    adc_trigger_high_gain();
     b88:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b8c:	93 ea       	ldi	r25, 0xA3	; 163
     b8e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b92:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	4f 93       	push	r20
     bb8:	5f 93       	push	r21
     bba:	6f 93       	push	r22
     bbc:	7f 93       	push	r23
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     bca:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bce:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bd8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_leadingbit>
     bdc:	88 23       	and	r24, r24
     bde:	21 f1       	breq	.+72     	; 0xc28 <__vector_23+0x84>
        rx_timer_on();
     be0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     be4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     be8:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     bec:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
        rx_leadingbit = 0;
     bf0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_leadingbit>
        if (rx_leadingbyte) {
     bf4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <__vector_23+0x5a>
     bfc:	af c1       	rjmp	.+862    	; 0xf5c <__vector_23+0x3b8>
            adc_finish_conversion();
     bfe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c02:	86 fd       	sbrc	r24, 6
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c0a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c0e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x3>
     c12:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist+0x2>
            adc_trigger_low_gain();
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c1c:	93 ea       	ldi	r25, 0xA3	; 163
     c1e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c22:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c26:	9a c1       	rjmp	.+820    	; 0xf5c <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c28:	c9 01       	movw	r24, r18
     c2a:	87 58       	subi	r24, 0x87	; 135
     c2c:	91 09       	sbc	r25, r1
     c2e:	84 37       	cpi	r24, 0x74	; 116
     c30:	99 40       	sbci	r25, 0x09	; 9
     c32:	a0 f0       	brcs	.+40     	; 0xc5c <__vector_23+0xb8>
            rx_timer_off();
     c34:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c38:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c3c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c40:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
            rx_leadingbyte = 1;
     c44:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
            rx_busy = 0;
     c48:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
            adc_trigger_high_gain();
     c4c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c50:	83 ea       	ldi	r24, 0xA3	; 163
     c52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c56:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c5a:	80 c1       	rjmp	.+768    	; 0xf5c <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c5c:	26 58       	subi	r18, 0x86	; 134
     c5e:	31 09       	sbc	r19, r1
     c60:	a4 ef       	ldi	r26, 0xF4	; 244
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	0e 94 85 08 	call	0x110a	; 0x110a <__umulhisi3>
     c68:	8c 01       	movw	r16, r24
     c6a:	22 27       	eor	r18, r18
     c6c:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c6e:	08 30       	cpi	r16, 0x08	; 8
     c70:	60 f4       	brcc	.+24     	; 0xc8a <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <__vector_23+0xd6>
     c78:	88 0f       	add	r24, r24
     c7a:	0a 95       	dec	r16
     c7c:	ea f7       	brpl	.-6      	; 0xc78 <__vector_23+0xd4>
     c7e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     c82:	89 2b       	or	r24, r25
     c84:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <rx_bytevalue>
     c88:	69 c1       	rjmp	.+722    	; 0xf5c <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c8a:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
                if (rx_leadingbyte) {
     c8e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     c92:	88 23       	and	r24, r24
     c94:	41 f1       	breq	.+80     	; 0xce6 <__vector_23+0x142>
                    adc_finish_conversion();
     c96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c9a:	86 fd       	sbrc	r24, 6
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ca2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ca6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x1>
     caa:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist>
                    adc_trigger_high_gain();
     cae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cb2:	83 ea       	ldi	r24, 0xA3	; 163
     cb4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     cbe:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     cc2:	99 23       	and	r25, r25
     cc4:	59 f0       	breq	.+22     	; 0xcdc <__vector_23+0x138>
                        rx_timer_off();
     cc6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cd2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     cd6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
     cda:	40 c1       	rjmp	.+640    	; 0xf5c <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cdc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_leadingbyte>
                        rx_byteindex = 0;
     ce0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
     ce4:	3b c1       	rjmp	.+630    	; 0xf5c <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     ce6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_byteindex>
     cea:	e8 2f       	mov	r30, r24
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	e4 5a       	subi	r30, 0xA4	; 164
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
     cf2:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     cf6:	90 83       	st	Z, r25
                    rx_byteindex++;
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cfe:	8c 30       	cpi	r24, 0x0C	; 12
     d00:	09 f0       	breq	.+2      	; 0xd04 <__vector_23+0x160>
     d02:	2c c1       	rjmp	.+600    	; 0xf5c <__vector_23+0x3b8>
                        rx_timer_off();
     d04:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d08:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d0c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d10:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     d14:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d18:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rx_msg+0xa>
     d1c:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <rx_msg+0xb>
     d20:	8c e5       	ldi	r24, 0x5C	; 92
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 c1 07 	call	0xf82	; 0xf82 <message_crc>
     d28:	08 17       	cp	r16, r24
     d2a:	19 07       	cpc	r17, r25
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_23+0x18c>
     d2e:	16 c1       	rjmp	.+556    	; 0xf5c <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d30:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_msg+0x9>
     d34:	e7 fd       	sbrc	r30, 7
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d38:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     d3c:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     d40:	61 e3       	ldi	r22, 0x31	; 49
     d42:	71 e0       	ldi	r23, 0x01	; 1
     d44:	8c e5       	ldi	r24, 0x5C	; 92
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	09 95       	icall
     d4a:	08 c1       	rjmp	.+528    	; 0xf5c <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d4c:	88 e7       	ldi	r24, 0x78	; 120
     d4e:	8e 0f       	add	r24, r30
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	30 f0       	brcs	.+12     	; 0xd60 <__vector_23+0x1bc>
        motors_off();
     d54:	53 98       	cbi	0x0a, 3	; 10
     d56:	23 98       	cbi	0x04, 3	; 4
     d58:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d5c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d60:	8e 2f       	mov	r24, r30
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fc 01       	movw	r30, r24
     d66:	e0 58       	subi	r30, 0x80	; 128
     d68:	f1 09       	sbc	r31, r1
     d6a:	eb 30       	cpi	r30, 0x0B	; 11
     d6c:	f1 05       	cpc	r31, r1
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <__vector_23+0x1ce>
     d70:	f5 c0       	rjmp	.+490    	; 0xf5c <__vector_23+0x3b8>
     d72:	e5 5c       	subi	r30, 0xC5	; 197
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d7a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d7e:	8d 7f       	andi	r24, 0xFD	; 253
     d80:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d84:	16 bc       	out	0x26, r1	; 38
            bootload();
     d86:	e0 e0       	ldi	r30, 0x00	; 0
     d88:	f0 e7       	ldi	r31, 0x70	; 112
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d8c:	e0 e0       	ldi	r30, 0x00	; 0
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d92:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
     d96:	e2 c0       	rjmp	.+452    	; 0xf5c <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	b2 c0       	rjmp	.+356    	; 0xf00 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	b0 c0       	rjmp	.+352    	; 0xf00 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	ae c0       	rjmp	.+348    	; 0xf00 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     da4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	09 f4       	brne	.+2      	; 0xdae <__vector_23+0x20a>
     dac:	d7 c0       	rjmp	.+430    	; 0xf5c <__vector_23+0x3b8>
     dae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	09 f4       	brne	.+2      	; 0xdb8 <__vector_23+0x214>
     db6:	d2 c0       	rjmp	.+420    	; 0xf5c <__vector_23+0x3b8>
                motors_on();
     db8:	53 9a       	sbi	0x0a, 3	; 10
     dba:	23 9a       	sbi	0x04, 3	; 4
     dbc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dc0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	9c c0       	rjmp	.+312    	; 0xf00 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dc8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	09 f4       	brne	.+2      	; 0xdd2 <__vector_23+0x22e>
     dd0:	4b c0       	rjmp	.+150    	; 0xe68 <__vector_23+0x2c4>
     dd2:	80 f4       	brcc	.+32     	; 0xdf4 <__vector_23+0x250>
     dd4:	88 23       	and	r24, r24
     dd6:	a9 f0       	breq	.+42     	; 0xe02 <__vector_23+0x25e>
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	09 f0       	breq	.+2      	; 0xdde <__vector_23+0x23a>
     ddc:	82 c0       	rjmp	.+260    	; 0xee2 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     dde:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x1>
     de2:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rx_msg+0x2>
     de6:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_uid+0x1>
     dea:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_uid>
                    cur_motion = MOVE_STOP;
     dee:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     df2:	77 c0       	rjmp	.+238    	; 0xee2 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	09 f4       	brne	.+2      	; 0xdfa <__vector_23+0x256>
     df8:	49 c0       	rjmp	.+146    	; 0xe8c <__vector_23+0x2e8>
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	09 f4       	brne	.+2      	; 0xe00 <__vector_23+0x25c>
     dfe:	58 c0       	rjmp	.+176    	; 0xeb0 <__vector_23+0x30c>
     e00:	70 c0       	rjmp	.+224    	; 0xee2 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e02:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     e06:	86 30       	cpi	r24, 0x06	; 6
     e08:	09 f0       	breq	.+2      	; 0xe0c <__vector_23+0x268>
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e0c:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_uid>
     e10:	80 eb       	ldi	r24, 0xB0	; 176
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e18:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_uid+0x1>
     e1c:	81 eb       	ldi	r24, 0xB1	; 177
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e24:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_turn_left>
     e28:	85 e0       	ldi	r24, 0x05	; 5
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e30:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
     e34:	89 e0       	ldi	r24, 0x09	; 9
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e3c:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_straight_left>
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e48:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
     e4c:	84 e1       	ldi	r24, 0x14	; 20
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
                        motors_off();
     e54:	53 98       	cbi	0x0a, 3	; 10
     e56:	23 98       	cbi	0x04, 3	; 4
     e58:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e5c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     e66:	3d c0       	rjmp	.+122    	; 0xee2 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e68:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e6c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x3>
     e70:	91 30       	cpi	r25, 0x01	; 1
     e72:	21 f4       	brne	.+8      	; 0xe7c <__vector_23+0x2d8>
     e74:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_turn_left>
     e78:	89 17       	cp	r24, r25
     e7a:	99 f1       	breq	.+102    	; 0xee2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e7c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e86:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e8c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e90:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x4>
     e94:	92 30       	cpi	r25, 0x02	; 2
     e96:	21 f4       	brne	.+8      	; 0xea0 <__vector_23+0x2fc>
     e98:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_turn_right>
     e9c:	89 17       	cp	r24, r25
     e9e:	09 f1       	breq	.+66     	; 0xee2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ea0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     eaa:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
     eae:	19 c0       	rjmp	.+50     	; 0xee2 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     eb0:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
     eb4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x6>
     eb8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rx_msg+0x5>
     ebc:	23 30       	cpi	r18, 0x03	; 3
     ebe:	41 f4       	brne	.+16     	; 0xed0 <__vector_23+0x32c>
     ec0:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <kilo_straight_right>
     ec4:	82 13       	cpse	r24, r18
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <__vector_23+0x32c>
     ec8:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_straight_left>
     ecc:	92 17       	cp	r25, r18
     ece:	49 f0       	breq	.+18     	; 0xee2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ed0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     ed4:	23 e0       	ldi	r18, 0x03	; 3
     ed6:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     eda:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     ede:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ee2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     ee6:	88 23       	and	r24, r24
     ee8:	c9 f1       	breq	.+114    	; 0xf5c <__vector_23+0x3b8>
     eea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     eee:	86 30       	cpi	r24, 0x06	; 6
     ef0:	a9 f1       	breq	.+106    	; 0xf5c <__vector_23+0x3b8>
                motors_on();
     ef2:	53 9a       	sbi	0x0a, 3	; 10
     ef4:	23 9a       	sbi	0x04, 3	; 4
     ef6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     efa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     f04:	2b c0       	rjmp	.+86     	; 0xf5c <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f06:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     f0a:	86 30       	cpi	r24, 0x06	; 6
     f0c:	81 f0       	breq	.+32     	; 0xf2e <__vector_23+0x38a>
                motors_on();
     f0e:	53 9a       	sbi	0x0a, 3	; 10
     f10:	23 9a       	sbi	0x04, 3	; 4
     f12:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f16:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 86 04 	call	0x90c	; 0x90c <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f20:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     f24:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <rx_msg>
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <__vector_23+0x398>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <__vector_23+0x394>
     f40:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_uid>
     f44:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <kilo_uid+0x1>
     f48:	82 23       	and	r24, r18
     f4a:	93 23       	and	r25, r19
     f4c:	89 2b       	or	r24, r25
     f4e:	21 f0       	breq	.+8      	; 0xf58 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f58:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f82:	fc 01       	movw	r30, r24
     f84:	9c 01       	movw	r18, r24
     f86:	26 5f       	subi	r18, 0xF6	; 246
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f8e:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f90:	84 27       	eor	r24, r20
     f92:	08 2e       	mov	r0, r24
     f94:	82 95       	swap	r24
     f96:	80 7f       	andi	r24, 0xF0	; 240
     f98:	80 25       	eor	r24, r0
     f9a:	09 2e       	mov	r0, r25
     f9c:	98 2f       	mov	r25, r24
     f9e:	82 95       	swap	r24
     fa0:	8f 70       	andi	r24, 0x0F	; 15
     fa2:	08 26       	eor	r0, r24
     fa4:	86 95       	lsr	r24
     fa6:	98 27       	eor	r25, r24
     fa8:	89 27       	eor	r24, r25
     faa:	88 0f       	add	r24, r24
     fac:	88 0f       	add	r24, r24
     fae:	88 0f       	add	r24, r24
     fb0:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fb2:	e2 17       	cp	r30, r18
     fb4:	f3 07       	cpc	r31, r19
     fb6:	59 f7       	brne	.-42     	; 0xf8e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fb8:	08 95       	ret

00000fba <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     fba:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     fbc:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     fbe:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     fc0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <tx_mask>
    or tmpreg1, ddrreg
     fc4:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     fc6:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     fc8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fca:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	29 f0       	breq	.+10     	; 0xfdc <message_send+0x22>
     fd2:	00 00       	nop
     fd4:	25 b1       	in	r18, 0x05	; 5
     fd6:	23 2b       	or	r18, r19
     fd8:	25 b9       	out	0x05, r18	; 5
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <message_send+0x2a>
     fdc:	00 00       	nop
     fde:	00 00       	nop
     fe0:	00 00       	nop
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <message_send+0x2a>
     fe4:	00 00       	nop
     fe6:	00 00       	nop
     fe8:	00 00       	nop
     fea:	30 95       	com	r19
     fec:	25 b1       	in	r18, 0x05	; 5
     fee:	23 23       	and	r18, r19
     ff0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     ff2:	2e ea       	ldi	r18, 0xAE	; 174
     ff4:	2a 95       	dec	r18
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     ff8:	2b ee       	ldi	r18, 0xEB	; 235

00000ffa <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     ffa:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     ffc:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1000:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1002:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    1006:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1008:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    100a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    100c:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    100e:	0f be       	out	0x3f, r0	; 63
    return 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret

00001014 <nocollision>:
nocollision:
    nop
    1014:	00 00       	nop
    dec tmpreg1
    1016:	2a 95       	dec	r18
    brne checkcollision
    1018:	81 f7       	brne	.-32     	; 0xffa <checkcollision>

    ldi tmpreg1, 0x01
    101a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    101c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    1020:	20 30       	cpi	r18, 0x00	; 0
    1022:	29 f0       	breq	.+10     	; 0x102e <nocollision+0x1a>
    1024:	00 00       	nop
    1026:	25 b1       	in	r18, 0x05	; 5
    1028:	23 2b       	or	r18, r19
    102a:	25 b9       	out	0x05, r18	; 5
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <nocollision+0x22>
    102e:	00 00       	nop
    1030:	00 00       	nop
    1032:	00 00       	nop
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <nocollision+0x22>
    1036:	00 00       	nop
    1038:	00 00       	nop
    103a:	00 00       	nop
    103c:	30 95       	com	r19
    103e:	25 b1       	in	r18, 0x05	; 5
    1040:	23 23       	and	r18, r19
    1042:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1044:	00 00       	nop
    1046:	24 e5       	ldi	r18, 0x54	; 84
    1048:	2a 95       	dec	r18
    104a:	f1 f7       	brne	.-4      	; 0x1048 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    104c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    104e:	8c e0       	ldi	r24, 0x0C	; 12

00001050 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1050:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1052:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1054:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1056:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1058:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    105a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    105e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1060:	50 e0       	ldi	r21, 0x00	; 0

00001062 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1062:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1064:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1066:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1068:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    106a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    106e:	20 30       	cpi	r18, 0x00	; 0
    1070:	29 f0       	breq	.+10     	; 0x107c <sendbit+0x1a>
    1072:	00 00       	nop
    1074:	25 b1       	in	r18, 0x05	; 5
    1076:	23 2b       	or	r18, r19
    1078:	25 b9       	out	0x05, r18	; 5
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <sendbit+0x22>
    107c:	00 00       	nop
    107e:	00 00       	nop
    1080:	00 00       	nop
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <sendbit+0x22>
    1084:	00 00       	nop
    1086:	00 00       	nop
    1088:	00 00       	nop
    108a:	30 95       	com	r19
    108c:	25 b1       	in	r18, 0x05	; 5
    108e:	23 23       	and	r18, r19
    1090:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1092:	00 00       	nop
    1094:	21 e5       	ldi	r18, 0x51	; 81
    1096:	2a 95       	dec	r18
    1098:	f1 f7       	brne	.-4      	; 0x1096 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    109a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    109c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    109e:	9a 95       	dec	r25
    brne sendbit
    10a0:	01 f7       	brne	.-64     	; 0x1062 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    10a2:	8a 95       	dec	r24
    brne sendbyte
    10a4:	a9 f6       	brne	.-86     	; 0x1050 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    10a6:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    10a8:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    10aa:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10ac:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10ae:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    10b2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10b4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10b6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10b8:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10ba:	0f be       	out	0x3f, r0	; 63
    return 1
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	08 95       	ret

000010c0 <main>:
}

int main() 
{
  kilo_init();
    10c0:	0e 94 ad 00 	call	0x15a	; 0x15a <kilo_init>
  kilo_start(setup, loop);
    10c4:	62 e7       	ldi	r22, 0x72	; 114
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	81 e7       	ldi	r24, 0x71	; 113
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 a5 04 	call	0x94a	; 0x94a <kilo_start>

  return 0;
}
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	08 95       	ret

000010d6 <__divmodhi4>:
    10d6:	97 fb       	bst	r25, 7
    10d8:	07 2e       	mov	r0, r23
    10da:	16 f4       	brtc	.+4      	; 0x10e0 <__divmodhi4+0xa>
    10dc:	00 94       	com	r0
    10de:	07 d0       	rcall	.+14     	; 0x10ee <__divmodhi4_neg1>
    10e0:	77 fd       	sbrc	r23, 7
    10e2:	09 d0       	rcall	.+18     	; 0x10f6 <__divmodhi4_neg2>
    10e4:	0e 94 94 08 	call	0x1128	; 0x1128 <__udivmodhi4>
    10e8:	07 fc       	sbrc	r0, 7
    10ea:	05 d0       	rcall	.+10     	; 0x10f6 <__divmodhi4_neg2>
    10ec:	3e f4       	brtc	.+14     	; 0x10fc <__divmodhi4_exit>

000010ee <__divmodhi4_neg1>:
    10ee:	90 95       	com	r25
    10f0:	81 95       	neg	r24
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__divmodhi4_neg2>:
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255

000010fc <__divmodhi4_exit>:
    10fc:	08 95       	ret

000010fe <__tablejump2__>:
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	05 90       	lpm	r0, Z+
    1104:	f4 91       	lpm	r31, Z
    1106:	e0 2d       	mov	r30, r0
    1108:	09 94       	ijmp

0000110a <__umulhisi3>:
    110a:	a2 9f       	mul	r26, r18
    110c:	b0 01       	movw	r22, r0
    110e:	b3 9f       	mul	r27, r19
    1110:	c0 01       	movw	r24, r0
    1112:	a3 9f       	mul	r26, r19
    1114:	70 0d       	add	r23, r0
    1116:	81 1d       	adc	r24, r1
    1118:	11 24       	eor	r1, r1
    111a:	91 1d       	adc	r25, r1
    111c:	b2 9f       	mul	r27, r18
    111e:	70 0d       	add	r23, r0
    1120:	81 1d       	adc	r24, r1
    1122:	11 24       	eor	r1, r1
    1124:	91 1d       	adc	r25, r1
    1126:	08 95       	ret

00001128 <__udivmodhi4>:
    1128:	aa 1b       	sub	r26, r26
    112a:	bb 1b       	sub	r27, r27
    112c:	51 e1       	ldi	r21, 0x11	; 17
    112e:	07 c0       	rjmp	.+14     	; 0x113e <__udivmodhi4_ep>

00001130 <__udivmodhi4_loop>:
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	a6 17       	cp	r26, r22
    1136:	b7 07       	cpc	r27, r23
    1138:	10 f0       	brcs	.+4      	; 0x113e <__udivmodhi4_ep>
    113a:	a6 1b       	sub	r26, r22
    113c:	b7 0b       	sbc	r27, r23

0000113e <__udivmodhi4_ep>:
    113e:	88 1f       	adc	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	5a 95       	dec	r21
    1144:	a9 f7       	brne	.-22     	; 0x1130 <__udivmodhi4_loop>
    1146:	80 95       	com	r24
    1148:	90 95       	com	r25
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	08 95       	ret

00001150 <__subsf3>:
    1150:	50 58       	subi	r21, 0x80	; 128

00001152 <__addsf3>:
    1152:	bb 27       	eor	r27, r27
    1154:	aa 27       	eor	r26, r26
    1156:	0e 94 c0 08 	call	0x1180	; 0x1180 <__addsf3x>
    115a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    115e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    1162:	38 f0       	brcs	.+14     	; 0x1172 <__addsf3+0x20>
    1164:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    1168:	20 f0       	brcs	.+8      	; 0x1172 <__addsf3+0x20>
    116a:	39 f4       	brne	.+14     	; 0x117a <__addsf3+0x28>
    116c:	9f 3f       	cpi	r25, 0xFF	; 255
    116e:	19 f4       	brne	.+6      	; 0x1176 <__addsf3+0x24>
    1170:	26 f4       	brtc	.+8      	; 0x117a <__addsf3+0x28>
    1172:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_nan>
    1176:	0e f4       	brtc	.+2      	; 0x117a <__addsf3+0x28>
    1178:	e0 95       	com	r30
    117a:	e7 fb       	bst	r30, 7
    117c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_inf>

00001180 <__addsf3x>:
    1180:	e9 2f       	mov	r30, r25
    1182:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    1186:	58 f3       	brcs	.-42     	; 0x115e <__addsf3+0xc>
    1188:	ba 17       	cp	r27, r26
    118a:	62 07       	cpc	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	95 07       	cpc	r25, r21
    1192:	20 f0       	brcs	.+8      	; 0x119c <__addsf3x+0x1c>
    1194:	79 f4       	brne	.+30     	; 0x11b4 <__addsf3x+0x34>
    1196:	a6 f5       	brtc	.+104    	; 0x1200 <__addsf3x+0x80>
    1198:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_zero>
    119c:	0e f4       	brtc	.+2      	; 0x11a0 <__addsf3x+0x20>
    119e:	e0 95       	com	r30
    11a0:	0b 2e       	mov	r0, r27
    11a2:	ba 2f       	mov	r27, r26
    11a4:	a0 2d       	mov	r26, r0
    11a6:	0b 01       	movw	r0, r22
    11a8:	b9 01       	movw	r22, r18
    11aa:	90 01       	movw	r18, r0
    11ac:	0c 01       	movw	r0, r24
    11ae:	ca 01       	movw	r24, r20
    11b0:	a0 01       	movw	r20, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	ff 27       	eor	r31, r31
    11b6:	59 1b       	sub	r21, r25
    11b8:	99 f0       	breq	.+38     	; 0x11e0 <__addsf3x+0x60>
    11ba:	59 3f       	cpi	r21, 0xF9	; 249
    11bc:	50 f4       	brcc	.+20     	; 0x11d2 <__addsf3x+0x52>
    11be:	50 3e       	cpi	r21, 0xE0	; 224
    11c0:	68 f1       	brcs	.+90     	; 0x121c <__addsf3x+0x9c>
    11c2:	1a 16       	cp	r1, r26
    11c4:	f0 40       	sbci	r31, 0x00	; 0
    11c6:	a2 2f       	mov	r26, r18
    11c8:	23 2f       	mov	r18, r19
    11ca:	34 2f       	mov	r19, r20
    11cc:	44 27       	eor	r20, r20
    11ce:	58 5f       	subi	r21, 0xF8	; 248
    11d0:	f3 cf       	rjmp	.-26     	; 0x11b8 <__addsf3x+0x38>
    11d2:	46 95       	lsr	r20
    11d4:	37 95       	ror	r19
    11d6:	27 95       	ror	r18
    11d8:	a7 95       	ror	r26
    11da:	f0 40       	sbci	r31, 0x00	; 0
    11dc:	53 95       	inc	r21
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__addsf3x+0x52>
    11e0:	7e f4       	brtc	.+30     	; 0x1200 <__addsf3x+0x80>
    11e2:	1f 16       	cp	r1, r31
    11e4:	ba 0b       	sbc	r27, r26
    11e6:	62 0b       	sbc	r22, r18
    11e8:	73 0b       	sbc	r23, r19
    11ea:	84 0b       	sbc	r24, r20
    11ec:	ba f0       	brmi	.+46     	; 0x121c <__addsf3x+0x9c>
    11ee:	91 50       	subi	r25, 0x01	; 1
    11f0:	a1 f0       	breq	.+40     	; 0x121a <__addsf3x+0x9a>
    11f2:	ff 0f       	add	r31, r31
    11f4:	bb 1f       	adc	r27, r27
    11f6:	66 1f       	adc	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	c2 f7       	brpl	.-16     	; 0x11ee <__addsf3x+0x6e>
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <__addsf3x+0x9c>
    1200:	ba 0f       	add	r27, r26
    1202:	62 1f       	adc	r22, r18
    1204:	73 1f       	adc	r23, r19
    1206:	84 1f       	adc	r24, r20
    1208:	48 f4       	brcc	.+18     	; 0x121c <__addsf3x+0x9c>
    120a:	87 95       	ror	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b7 95       	ror	r27
    1212:	f7 95       	ror	r31
    1214:	9e 3f       	cpi	r25, 0xFE	; 254
    1216:	08 f0       	brcs	.+2      	; 0x121a <__addsf3x+0x9a>
    1218:	b0 cf       	rjmp	.-160    	; 0x117a <__addsf3+0x28>
    121a:	93 95       	inc	r25
    121c:	88 0f       	add	r24, r24
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__addsf3x+0xa2>
    1220:	99 27       	eor	r25, r25
    1222:	ee 0f       	add	r30, r30
    1224:	97 95       	ror	r25
    1226:	87 95       	ror	r24
    1228:	08 95       	ret

0000122a <__divsf3>:
    122a:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3x>
    122e:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    1232:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    1236:	58 f0       	brcs	.+22     	; 0x124e <__divsf3+0x24>
    1238:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    123c:	40 f0       	brcs	.+16     	; 0x124e <__divsf3+0x24>
    123e:	29 f4       	brne	.+10     	; 0x124a <__divsf3+0x20>
    1240:	5f 3f       	cpi	r21, 0xFF	; 255
    1242:	29 f0       	breq	.+10     	; 0x124e <__divsf3+0x24>
    1244:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_inf>
    1248:	51 11       	cpse	r21, r1
    124a:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    124e:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_nan>

00001252 <__divsf3x>:
    1252:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    1256:	68 f3       	brcs	.-38     	; 0x1232 <__divsf3+0x8>

00001258 <__divsf3_pse>:
    1258:	99 23       	and	r25, r25
    125a:	b1 f3       	breq	.-20     	; 0x1248 <__divsf3+0x1e>
    125c:	55 23       	and	r21, r21
    125e:	91 f3       	breq	.-28     	; 0x1244 <__divsf3+0x1a>
    1260:	95 1b       	sub	r25, r21
    1262:	55 0b       	sbc	r21, r21
    1264:	bb 27       	eor	r27, r27
    1266:	aa 27       	eor	r26, r26
    1268:	62 17       	cp	r22, r18
    126a:	73 07       	cpc	r23, r19
    126c:	84 07       	cpc	r24, r20
    126e:	38 f0       	brcs	.+14     	; 0x127e <__divsf3_pse+0x26>
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	44 1f       	adc	r20, r20
    127a:	aa 1f       	adc	r26, r26
    127c:	a9 f3       	breq	.-22     	; 0x1268 <__divsf3_pse+0x10>
    127e:	35 d0       	rcall	.+106    	; 0x12ea <__divsf3_pse+0x92>
    1280:	0e 2e       	mov	r0, r30
    1282:	3a f0       	brmi	.+14     	; 0x1292 <__divsf3_pse+0x3a>
    1284:	e0 e8       	ldi	r30, 0x80	; 128
    1286:	32 d0       	rcall	.+100    	; 0x12ec <__divsf3_pse+0x94>
    1288:	91 50       	subi	r25, 0x01	; 1
    128a:	50 40       	sbci	r21, 0x00	; 0
    128c:	e6 95       	lsr	r30
    128e:	00 1c       	adc	r0, r0
    1290:	ca f7       	brpl	.-14     	; 0x1284 <__divsf3_pse+0x2c>
    1292:	2b d0       	rcall	.+86     	; 0x12ea <__divsf3_pse+0x92>
    1294:	fe 2f       	mov	r31, r30
    1296:	29 d0       	rcall	.+82     	; 0x12ea <__divsf3_pse+0x92>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	bb 1f       	adc	r27, r27
    12a0:	26 17       	cp	r18, r22
    12a2:	37 07       	cpc	r19, r23
    12a4:	48 07       	cpc	r20, r24
    12a6:	ab 07       	cpc	r26, r27
    12a8:	b0 e8       	ldi	r27, 0x80	; 128
    12aa:	09 f0       	breq	.+2      	; 0x12ae <__divsf3_pse+0x56>
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	80 2d       	mov	r24, r0
    12b0:	bf 01       	movw	r22, r30
    12b2:	ff 27       	eor	r31, r31
    12b4:	93 58       	subi	r25, 0x83	; 131
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	3a f0       	brmi	.+14     	; 0x12c8 <__divsf3_pse+0x70>
    12ba:	9e 3f       	cpi	r25, 0xFE	; 254
    12bc:	51 05       	cpc	r21, r1
    12be:	78 f0       	brcs	.+30     	; 0x12de <__divsf3_pse+0x86>
    12c0:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_inf>
    12c4:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	e4 f3       	brlt	.-8      	; 0x12c4 <__divsf3_pse+0x6c>
    12cc:	98 3e       	cpi	r25, 0xE8	; 232
    12ce:	d4 f3       	brlt	.-12     	; 0x12c4 <__divsf3_pse+0x6c>
    12d0:	86 95       	lsr	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f7 95       	ror	r31
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	c9 f7       	brne	.-14     	; 0x12d0 <__divsf3_pse+0x78>
    12de:	88 0f       	add	r24, r24
    12e0:	91 1d       	adc	r25, r1
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	97 f9       	bld	r25, 7
    12e8:	08 95       	ret
    12ea:	e1 e0       	ldi	r30, 0x01	; 1
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	bb 1f       	adc	r27, r27
    12f4:	62 17       	cp	r22, r18
    12f6:	73 07       	cpc	r23, r19
    12f8:	84 07       	cpc	r24, r20
    12fa:	ba 07       	cpc	r27, r26
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__divsf3_pse+0xae>
    12fe:	62 1b       	sub	r22, r18
    1300:	73 0b       	sbc	r23, r19
    1302:	84 0b       	sbc	r24, r20
    1304:	ba 0b       	sbc	r27, r26
    1306:	ee 1f       	adc	r30, r30
    1308:	88 f7       	brcc	.-30     	; 0x12ec <__divsf3_pse+0x94>
    130a:	e0 95       	com	r30
    130c:	08 95       	ret

0000130e <__fixsfsi>:
    130e:	0e 94 8e 09 	call	0x131c	; 0x131c <__fixunssfsi>
    1312:	68 94       	set
    1314:	b1 11       	cpse	r27, r1
    1316:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    131a:	08 95       	ret

0000131c <__fixunssfsi>:
    131c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__fp_splitA>
    1320:	88 f0       	brcs	.+34     	; 0x1344 <__fixunssfsi+0x28>
    1322:	9f 57       	subi	r25, 0x7F	; 127
    1324:	98 f0       	brcs	.+38     	; 0x134c <__fixunssfsi+0x30>
    1326:	b9 2f       	mov	r27, r25
    1328:	99 27       	eor	r25, r25
    132a:	b7 51       	subi	r27, 0x17	; 23
    132c:	b0 f0       	brcs	.+44     	; 0x135a <__fixunssfsi+0x3e>
    132e:	e1 f0       	breq	.+56     	; 0x1368 <__fixunssfsi+0x4c>
    1330:	66 0f       	add	r22, r22
    1332:	77 1f       	adc	r23, r23
    1334:	88 1f       	adc	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	1a f0       	brmi	.+6      	; 0x1340 <__fixunssfsi+0x24>
    133a:	ba 95       	dec	r27
    133c:	c9 f7       	brne	.-14     	; 0x1330 <__fixunssfsi+0x14>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <__fixunssfsi+0x4c>
    1340:	b1 30       	cpi	r27, 0x01	; 1
    1342:	91 f0       	breq	.+36     	; 0x1368 <__fixunssfsi+0x4c>
    1344:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_zero>
    1348:	b1 e0       	ldi	r27, 0x01	; 1
    134a:	08 95       	ret
    134c:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__fp_zero>
    1350:	67 2f       	mov	r22, r23
    1352:	78 2f       	mov	r23, r24
    1354:	88 27       	eor	r24, r24
    1356:	b8 5f       	subi	r27, 0xF8	; 248
    1358:	39 f0       	breq	.+14     	; 0x1368 <__fixunssfsi+0x4c>
    135a:	b9 3f       	cpi	r27, 0xF9	; 249
    135c:	cc f3       	brlt	.-14     	; 0x1350 <__fixunssfsi+0x34>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b3 95       	inc	r27
    1366:	d9 f7       	brne	.-10     	; 0x135e <__fixunssfsi+0x42>
    1368:	3e f4       	brtc	.+14     	; 0x1378 <__fixunssfsi+0x5c>
    136a:	90 95       	com	r25
    136c:	80 95       	com	r24
    136e:	70 95       	com	r23
    1370:	61 95       	neg	r22
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__floatunsisf>:
    137a:	e8 94       	clt
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <__floatsisf+0x12>

0000137e <__floatsisf>:
    137e:	97 fb       	bst	r25, 7
    1380:	3e f4       	brtc	.+14     	; 0x1390 <__floatsisf+0x12>
    1382:	90 95       	com	r25
    1384:	80 95       	com	r24
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	99 23       	and	r25, r25
    1392:	a9 f0       	breq	.+42     	; 0x13be <__floatsisf+0x40>
    1394:	f9 2f       	mov	r31, r25
    1396:	96 e9       	ldi	r25, 0x96	; 150
    1398:	bb 27       	eor	r27, r27
    139a:	93 95       	inc	r25
    139c:	f6 95       	lsr	r31
    139e:	87 95       	ror	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f1 11       	cpse	r31, r1
    13a8:	f8 cf       	rjmp	.-16     	; 0x139a <__floatsisf+0x1c>
    13aa:	fa f4       	brpl	.+62     	; 0x13ea <__floatsisf+0x6c>
    13ac:	bb 0f       	add	r27, r27
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <__floatsisf+0x36>
    13b0:	60 ff       	sbrs	r22, 0
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <__floatsisf+0x6c>
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <__floatsisf+0x6c>
    13be:	88 23       	and	r24, r24
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <__floatsisf+0x48>
    13c2:	96 e9       	ldi	r25, 0x96	; 150
    13c4:	11 c0       	rjmp	.+34     	; 0x13e8 <__floatsisf+0x6a>
    13c6:	77 23       	and	r23, r23
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <__floatsisf+0x54>
    13ca:	9e e8       	ldi	r25, 0x8E	; 142
    13cc:	87 2f       	mov	r24, r23
    13ce:	76 2f       	mov	r23, r22
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <__floatsisf+0x5e>
    13d2:	66 23       	and	r22, r22
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <__floatsisf+0x74>
    13d6:	96 e8       	ldi	r25, 0x86	; 134
    13d8:	86 2f       	mov	r24, r22
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	2a f0       	brmi	.+10     	; 0x13ea <__floatsisf+0x6c>
    13e0:	9a 95       	dec	r25
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	da f7       	brpl	.-10     	; 0x13e0 <__floatsisf+0x62>
    13ea:	88 0f       	add	r24, r24
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	97 f9       	bld	r25, 7
    13f2:	08 95       	ret

000013f4 <__fp_inf>:
    13f4:	97 f9       	bld	r25, 7
    13f6:	9f 67       	ori	r25, 0x7F	; 127
    13f8:	80 e8       	ldi	r24, 0x80	; 128
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	08 95       	ret

00001400 <__fp_nan>:
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	80 ec       	ldi	r24, 0xC0	; 192
    1404:	08 95       	ret

00001406 <__fp_pscA>:
    1406:	00 24       	eor	r0, r0
    1408:	0a 94       	dec	r0
    140a:	16 16       	cp	r1, r22
    140c:	17 06       	cpc	r1, r23
    140e:	18 06       	cpc	r1, r24
    1410:	09 06       	cpc	r0, r25
    1412:	08 95       	ret

00001414 <__fp_pscB>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	12 16       	cp	r1, r18
    141a:	13 06       	cpc	r1, r19
    141c:	14 06       	cpc	r1, r20
    141e:	05 06       	cpc	r0, r21
    1420:	08 95       	ret

00001422 <__fp_round>:
    1422:	09 2e       	mov	r0, r25
    1424:	03 94       	inc	r0
    1426:	00 0c       	add	r0, r0
    1428:	11 f4       	brne	.+4      	; 0x142e <__fp_round+0xc>
    142a:	88 23       	and	r24, r24
    142c:	52 f0       	brmi	.+20     	; 0x1442 <__fp_round+0x20>
    142e:	bb 0f       	add	r27, r27
    1430:	40 f4       	brcc	.+16     	; 0x1442 <__fp_round+0x20>
    1432:	bf 2b       	or	r27, r31
    1434:	11 f4       	brne	.+4      	; 0x143a <__fp_round+0x18>
    1436:	60 ff       	sbrs	r22, 0
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <__fp_round+0x20>
    143a:	6f 5f       	subi	r22, 0xFF	; 255
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	08 95       	ret

00001444 <__fp_split3>:
    1444:	57 fd       	sbrc	r21, 7
    1446:	90 58       	subi	r25, 0x80	; 128
    1448:	44 0f       	add	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	59 f0       	breq	.+22     	; 0x1464 <__fp_splitA+0x10>
    144e:	5f 3f       	cpi	r21, 0xFF	; 255
    1450:	71 f0       	breq	.+28     	; 0x146e <__fp_splitA+0x1a>
    1452:	47 95       	ror	r20

00001454 <__fp_splitA>:
    1454:	88 0f       	add	r24, r24
    1456:	97 fb       	bst	r25, 7
    1458:	99 1f       	adc	r25, r25
    145a:	61 f0       	breq	.+24     	; 0x1474 <__fp_splitA+0x20>
    145c:	9f 3f       	cpi	r25, 0xFF	; 255
    145e:	79 f0       	breq	.+30     	; 0x147e <__fp_splitA+0x2a>
    1460:	87 95       	ror	r24
    1462:	08 95       	ret
    1464:	12 16       	cp	r1, r18
    1466:	13 06       	cpc	r1, r19
    1468:	14 06       	cpc	r1, r20
    146a:	55 1f       	adc	r21, r21
    146c:	f2 cf       	rjmp	.-28     	; 0x1452 <__fp_split3+0xe>
    146e:	46 95       	lsr	r20
    1470:	f1 df       	rcall	.-30     	; 0x1454 <__fp_splitA>
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <__fp_splitA+0x30>
    1474:	16 16       	cp	r1, r22
    1476:	17 06       	cpc	r1, r23
    1478:	18 06       	cpc	r1, r24
    147a:	99 1f       	adc	r25, r25
    147c:	f1 cf       	rjmp	.-30     	; 0x1460 <__fp_splitA+0xc>
    147e:	86 95       	lsr	r24
    1480:	71 05       	cpc	r23, r1
    1482:	61 05       	cpc	r22, r1
    1484:	08 94       	sec
    1486:	08 95       	ret

00001488 <__fp_zero>:
    1488:	e8 94       	clt

0000148a <__fp_szero>:
    148a:	bb 27       	eor	r27, r27
    148c:	66 27       	eor	r22, r22
    148e:	77 27       	eor	r23, r23
    1490:	cb 01       	movw	r24, r22
    1492:	97 f9       	bld	r25, 7
    1494:	08 95       	ret

00001496 <__mulsf3>:
    1496:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__mulsf3x>
    149a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_round>
    149e:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_pscA>
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <__mulsf3+0x1c>
    14a4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscB>
    14a8:	20 f0       	brcs	.+8      	; 0x14b2 <__mulsf3+0x1c>
    14aa:	95 23       	and	r25, r21
    14ac:	11 f0       	breq	.+4      	; 0x14b2 <__mulsf3+0x1c>
    14ae:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_inf>
    14b2:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_nan>
    14b6:	11 24       	eor	r1, r1
    14b8:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>

000014bc <__mulsf3x>:
    14bc:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_split3>
    14c0:	70 f3       	brcs	.-36     	; 0x149e <__mulsf3+0x8>

000014c2 <__mulsf3_pse>:
    14c2:	95 9f       	mul	r25, r21
    14c4:	c1 f3       	breq	.-16     	; 0x14b6 <__mulsf3+0x20>
    14c6:	95 0f       	add	r25, r21
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	55 1f       	adc	r21, r21
    14cc:	62 9f       	mul	r22, r18
    14ce:	f0 01       	movw	r30, r0
    14d0:	72 9f       	mul	r23, r18
    14d2:	bb 27       	eor	r27, r27
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	63 9f       	mul	r22, r19
    14da:	aa 27       	eor	r26, r26
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	aa 1f       	adc	r26, r26
    14e2:	64 9f       	mul	r22, r20
    14e4:	66 27       	eor	r22, r22
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	66 1f       	adc	r22, r22
    14ec:	82 9f       	mul	r24, r18
    14ee:	22 27       	eor	r18, r18
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	73 9f       	mul	r23, r19
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	83 9f       	mul	r24, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	22 1f       	adc	r18, r18
    1506:	74 9f       	mul	r23, r20
    1508:	33 27       	eor	r19, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	23 1f       	adc	r18, r19
    1510:	84 9f       	mul	r24, r20
    1512:	60 0d       	add	r22, r0
    1514:	21 1d       	adc	r18, r1
    1516:	82 2f       	mov	r24, r18
    1518:	76 2f       	mov	r23, r22
    151a:	6a 2f       	mov	r22, r26
    151c:	11 24       	eor	r1, r1
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	9a f0       	brmi	.+38     	; 0x154a <__mulsf3_pse+0x88>
    1524:	f1 f0       	breq	.+60     	; 0x1562 <__mulsf3_pse+0xa0>
    1526:	88 23       	and	r24, r24
    1528:	4a f0       	brmi	.+18     	; 0x153c <__mulsf3_pse+0x7a>
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__mulsf3_pse+0x64>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	80 f0       	brcs	.+32     	; 0x1562 <__mulsf3_pse+0xa0>
    1542:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_inf>
    1546:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__fp_szero>
    154a:	5f 3f       	cpi	r21, 0xFF	; 255
    154c:	e4 f3       	brlt	.-8      	; 0x1546 <__mulsf3_pse+0x84>
    154e:	98 3e       	cpi	r25, 0xE8	; 232
    1550:	d4 f3       	brlt	.-12     	; 0x1546 <__mulsf3_pse+0x84>
    1552:	86 95       	lsr	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f7 95       	ror	r31
    155c:	e7 95       	ror	r30
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	c1 f7       	brne	.-16     	; 0x1552 <__mulsf3_pse+0x90>
    1562:	fe 2b       	or	r31, r30
    1564:	88 0f       	add	r24, r24
    1566:	91 1d       	adc	r25, r1
    1568:	96 95       	lsr	r25
    156a:	87 95       	ror	r24
    156c:	97 f9       	bld	r25, 7
    156e:	08 95       	ret

00001570 <do_rand>:
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
    1586:	68 81       	ld	r22, Y
    1588:	79 81       	ldd	r23, Y+1	; 0x01
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	61 15       	cp	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	81 05       	cpc	r24, r1
    1594:	91 05       	cpc	r25, r1
    1596:	21 f4       	brne	.+8      	; 0x15a0 <do_rand+0x30>
    1598:	64 e2       	ldi	r22, 0x24	; 36
    159a:	79 ed       	ldi	r23, 0xD9	; 217
    159c:	8b e5       	ldi	r24, 0x5B	; 91
    159e:	97 e0       	ldi	r25, 0x07	; 7
    15a0:	2d e1       	ldi	r18, 0x1D	; 29
    15a2:	33 ef       	ldi	r19, 0xF3	; 243
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__divmodsi4>
    15ac:	49 01       	movw	r8, r18
    15ae:	5a 01       	movw	r10, r20
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	a7 ea       	ldi	r26, 0xA7	; 167
    15b6:	b1 e4       	ldi	r27, 0x41	; 65
    15b8:	0e 94 49 0b 	call	0x1692	; 0x1692 <__muluhisi3>
    15bc:	6b 01       	movw	r12, r22
    15be:	7c 01       	movw	r14, r24
    15c0:	ac ee       	ldi	r26, 0xEC	; 236
    15c2:	b4 ef       	ldi	r27, 0xF4	; 244
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__mulohisi3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8c 0d       	add	r24, r12
    15d2:	9d 1d       	adc	r25, r13
    15d4:	ae 1d       	adc	r26, r14
    15d6:	bf 1d       	adc	r27, r15
    15d8:	b7 ff       	sbrs	r27, 7
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <do_rand+0x72>
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	a1 09       	sbc	r26, r1
    15e0:	b0 48       	sbci	r27, 0x80	; 128
    15e2:	88 83       	st	Y, r24
    15e4:	99 83       	std	Y+1, r25	; 0x01
    15e6:	aa 83       	std	Y+2, r26	; 0x02
    15e8:	bb 83       	std	Y+3, r27	; 0x03
    15ea:	9f 77       	andi	r25, 0x7F	; 127
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	08 95       	ret

00001602 <rand_r>:
    1602:	0e 94 b8 0a 	call	0x1570	; 0x1570 <do_rand>
    1606:	08 95       	ret

00001608 <rand>:
    1608:	89 e0       	ldi	r24, 0x09	; 9
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <do_rand>
    1610:	08 95       	ret

00001612 <srand>:
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <next>
    161a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <next+0x1>
    161e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <next+0x2>
    1622:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <next+0x3>
    1626:	08 95       	ret

00001628 <eeprom_read_byte>:
    1628:	f9 99       	sbic	0x1f, 1	; 31
    162a:	fe cf       	rjmp	.-4      	; 0x1628 <eeprom_read_byte>
    162c:	92 bd       	out	0x22, r25	; 34
    162e:	81 bd       	out	0x21, r24	; 33
    1630:	f8 9a       	sbi	0x1f, 0	; 31
    1632:	99 27       	eor	r25, r25
    1634:	80 b5       	in	r24, 0x20	; 32
    1636:	08 95       	ret

00001638 <eeprom_write_byte>:
    1638:	26 2f       	mov	r18, r22

0000163a <eeprom_write_r18>:
    163a:	f9 99       	sbic	0x1f, 1	; 31
    163c:	fe cf       	rjmp	.-4      	; 0x163a <eeprom_write_r18>
    163e:	1f ba       	out	0x1f, r1	; 31
    1640:	92 bd       	out	0x22, r25	; 34
    1642:	81 bd       	out	0x21, r24	; 33
    1644:	20 bd       	out	0x20, r18	; 32
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	fa 9a       	sbi	0x1f, 2	; 31
    164c:	f9 9a       	sbi	0x1f, 1	; 31
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	08 95       	ret

00001654 <__divmodsi4>:
    1654:	05 2e       	mov	r0, r21
    1656:	97 fb       	bst	r25, 7
    1658:	1e f4       	brtc	.+6      	; 0x1660 <__divmodsi4+0xc>
    165a:	00 94       	com	r0
    165c:	0e 94 41 0b 	call	0x1682	; 0x1682 <__negsi2>
    1660:	57 fd       	sbrc	r21, 7
    1662:	07 d0       	rcall	.+14     	; 0x1672 <__divmodsi4_neg2>
    1664:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__udivmodsi4>
    1668:	07 fc       	sbrc	r0, 7
    166a:	03 d0       	rcall	.+6      	; 0x1672 <__divmodsi4_neg2>
    166c:	4e f4       	brtc	.+18     	; 0x1680 <__divmodsi4_exit>
    166e:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__negsi2>

00001672 <__divmodsi4_neg2>:
    1672:	50 95       	com	r21
    1674:	40 95       	com	r20
    1676:	30 95       	com	r19
    1678:	21 95       	neg	r18
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	4f 4f       	sbci	r20, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255

00001680 <__divmodsi4_exit>:
    1680:	08 95       	ret

00001682 <__negsi2>:
    1682:	90 95       	com	r25
    1684:	80 95       	com	r24
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	8f 4f       	sbci	r24, 0xFF	; 255
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	08 95       	ret

00001692 <__muluhisi3>:
    1692:	0e 94 85 08 	call	0x110a	; 0x110a <__umulhisi3>
    1696:	a5 9f       	mul	r26, r21
    1698:	90 0d       	add	r25, r0
    169a:	b4 9f       	mul	r27, r20
    169c:	90 0d       	add	r25, r0
    169e:	a4 9f       	mul	r26, r20
    16a0:	80 0d       	add	r24, r0
    16a2:	91 1d       	adc	r25, r1
    16a4:	11 24       	eor	r1, r1
    16a6:	08 95       	ret

000016a8 <__mulshisi3>:
    16a8:	b7 ff       	sbrs	r27, 7
    16aa:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__muluhisi3>

000016ae <__mulohisi3>:
    16ae:	0e 94 49 0b 	call	0x1692	; 0x1692 <__muluhisi3>
    16b2:	82 1b       	sub	r24, r18
    16b4:	93 0b       	sbc	r25, r19
    16b6:	08 95       	ret

000016b8 <__udivmodsi4>:
    16b8:	a1 e2       	ldi	r26, 0x21	; 33
    16ba:	1a 2e       	mov	r1, r26
    16bc:	aa 1b       	sub	r26, r26
    16be:	bb 1b       	sub	r27, r27
    16c0:	fd 01       	movw	r30, r26
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <__udivmodsi4_ep>

000016c4 <__udivmodsi4_loop>:
    16c4:	aa 1f       	adc	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	ee 1f       	adc	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	a2 17       	cp	r26, r18
    16ce:	b3 07       	cpc	r27, r19
    16d0:	e4 07       	cpc	r30, r20
    16d2:	f5 07       	cpc	r31, r21
    16d4:	20 f0       	brcs	.+8      	; 0x16de <__udivmodsi4_ep>
    16d6:	a2 1b       	sub	r26, r18
    16d8:	b3 0b       	sbc	r27, r19
    16da:	e4 0b       	sbc	r30, r20
    16dc:	f5 0b       	sbc	r31, r21

000016de <__udivmodsi4_ep>:
    16de:	66 1f       	adc	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	88 1f       	adc	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	1a 94       	dec	r1
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <__udivmodsi4_loop>
    16ea:	60 95       	com	r22
    16ec:	70 95       	com	r23
    16ee:	80 95       	com	r24
    16f0:	90 95       	com	r25
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	bd 01       	movw	r22, r26
    16f8:	cf 01       	movw	r24, r30
    16fa:	08 95       	ret

000016fc <_exit>:
    16fc:	f8 94       	cli

000016fe <__stop_program>:
    16fe:	ff cf       	rjmp	.-2      	; 0x16fe <__stop_program>
