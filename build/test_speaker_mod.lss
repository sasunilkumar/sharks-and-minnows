
build/test_speaker_mod.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	08 05       	cpc	r16, r8
      6a:	5f 05       	cpc	r21, r15
      6c:	73 05       	cpc	r23, r3
      6e:	a4 05       	cpc	r26, r4
      70:	ab 05       	cpc	r26, r11
      72:	8a 05       	cpc	r24, r10
      74:	ae 05       	cpc	r26, r14
      76:	0c 07       	cpc	r16, r28
      78:	fd 07       	cpc	r31, r29
      7a:	fd 07       	cpc	r31, r29
      7c:	15 07       	cpc	r17, r21
      7e:	18 07       	cpc	r17, r24
      80:	1b 07       	cpc	r17, r27
      82:	1d 07       	cpc	r17, r29
      84:	1f 07       	cpc	r17, r31
      86:	21 07       	cpc	r18, r17
      88:	d2 07       	cpc	r29, r18
      8a:	33 07       	cpc	r19, r19

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 eb       	ldi	r30, 0xB6	; 182
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 af 08 	call	0x115e	; 0x115e <main>
      da:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
int sendone = 0, message_sent = 0;
uint32_t last_changed = 0;
message_t message;
message_t *message_tx() {
  return &message;
}
      e2:	88 e1       	ldi	r24, 0x18	; 24
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <message_sent+0x1>
      f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <message_sent>
      f4:	08 95       	ret

000000f6 <setup>:
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  message.type = NORMAL;
      fa:	c8 e1       	ldi	r28, 0x18	; 24
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  message.data[0] = 0;
     100:	18 82       	st	Y, r1
  message.crc = message_crc(&message);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 10 08 	call	0x1020	; 0x1020 <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <loop>:

void loop() {
  if (kilo_ticks > (last_changed + 64)) {
     112:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <kilo_ticks>
     116:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <kilo_ticks+0x1>
     11a:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <kilo_ticks+0x2>
     11e:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <kilo_ticks+0x3>
     122:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     126:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     12a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
     12e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
     132:	80 5c       	subi	r24, 0xC0	; 192
     134:	9f 4f       	sbci	r25, 0xFF	; 255
     136:	af 4f       	sbci	r26, 0xFF	; 255
     138:	bf 4f       	sbci	r27, 0xFF	; 255
     13a:	84 17       	cp	r24, r20
     13c:	95 07       	cpc	r25, r21
     13e:	a6 07       	cpc	r26, r22
     140:	b7 07       	cpc	r27, r23
     142:	c0 f5       	brcc	.+112    	; 0x1b4 <loop+0xa2>
        last_changed = kilo_ticks;
     144:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <kilo_ticks>
     148:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <kilo_ticks+0x1>
     14c:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <kilo_ticks+0x2>
     150:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <kilo_ticks+0x3>
     154:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     158:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     15c:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
     160:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	  message.type = NORMAL;
     164:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <message+0x9>
        if (sendone == 0) {
     168:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sendone>
     16c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sendone+0x1>
     170:	89 2b       	or	r24, r25
     172:	89 f4       	brne	.+34     	; 0x196 <loop+0x84>
	  message.data[0] = 0;
     174:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <message>
	  message.crc = message_crc(&message);
     178:	88 e1       	ldi	r24, 0x18	; 24
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 10 08 	call	0x1020	; 0x1020 <message_crc>
     180:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <message+0xb>
     184:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <message+0xa>
	  sendone = 1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <sendone+0x1>
     190:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sendone>
     194:	0f c0       	rjmp	.+30     	; 0x1b4 <loop+0xa2>
        } else {
	  message.data[0] = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <message>
	  message.crc = message_crc(&message);
     19c:	88 e1       	ldi	r24, 0x18	; 24
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 10 08 	call	0x1020	; 0x1020 <message_crc>
     1a4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <message+0xb>
     1a8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <message+0xa>
	  sendone = 0;
     1ac:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sendone+0x1>
     1b0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <sendone>
        }
  }
  if (message_sent == 1) {
     1b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <message_sent>
     1b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <message_sent+0x1>
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	b1 f4       	brne	.+44     	; 0x1ec <loop+0xda>
	message_sent = 0;
     1c0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <message_sent+0x1>
     1c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <message_sent>
	if (sendone == 0) {
     1c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sendone>
     1cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sendone+0x1>
     1d0:	89 2b       	or	r24, r25
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <loop+0xc6>
	  set_color(RGB(1,0,1));
     1d4:	81 e1       	ldi	r24, 0x11	; 17
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <loop+0xc8>
	} else {
	  set_color(RGB(0,1,1));
     1d8:	84 e1       	ldi	r24, 0x14	; 20
     1da:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
	}
	delay(100);
     1de:	84 e6       	ldi	r24, 0x64	; 100
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <delay>
	set_color(RGB(0,0,0));
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <set_color>
     1ec:	08 95       	ret

000001ee <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     1ee:	08 95       	ret

000001f0 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	08 95       	ret

000001f6 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     1f6:	08 95       	ret

000001f8 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
    cli();
     206:	f8 94       	cli

    ports_off();
     208:	14 b8       	out	0x04, r1	; 4
     20a:	17 b8       	out	0x07, r1	; 7
     20c:	1a b8       	out	0x0a, r1	; 10
     20e:	15 b8       	out	0x05, r1	; 5
     210:	18 b8       	out	0x08, r1	; 8
     212:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     214:	52 9a       	sbi	0x0a, 2	; 10
     216:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     218:	14 bc       	out	0x24, r1	; 36
     21a:	85 e0       	ldi	r24, 0x05	; 5
     21c:	85 bd       	out	0x25, r24	; 37
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	87 bd       	out	0x27, r24	; 39
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     228:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     22c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     230:	2f e8       	ldi	r18, 0x8F	; 143
     232:	3b e0       	ldi	r19, 0x0B	; 11
     234:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     238:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     23c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     240:	53 98       	cbi	0x0a, 3	; 10
     242:	23 98       	cbi	0x04, 3	; 4
     244:	91 ea       	ldi	r25, 0xA1	; 161
     246:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     24a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     24e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     252:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     256:	8b e0       	ldi	r24, 0x0B	; 11
     258:	80 bf       	out	0x30, r24	; 48
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     260:	86 e0       	ldi	r24, 0x06	; 6
     262:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     266:	83 e8       	ldi	r24, 0x83	; 131
     268:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     26c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     270:	80 64       	ori	r24, 0x40	; 64
     272:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     276:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     27a:	86 fd       	sbrc	r24, 6
     27c:	fc cf       	rjmp	.-8      	; 0x276 <kilo_init+0x7e>
    adc_trigger_high_gain();
     27e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     282:	83 ea       	ldi	r24, 0xA3	; 163
     284:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
    if (osccal != 0xFF)
     296:	8f 3f       	cpi	r24, 0xFF	; 255
     298:	11 f0       	breq	.+4      	; 0x29e <kilo_init+0xa6>
        OSCCAL = osccal;
     29a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     29e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>
    rx_leadingbit = 1;
     2a2:	c1 e0       	ldi	r28, 0x01	; 1
     2a4:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <rx_leadingbit>
    rx_leadingbyte = 1;
     2a8:	c0 93 68 01 	sts	0x0168, r28	; 0x800168 <rx_leadingbyte>
    rx_byteindex = 0;
     2ac:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rx_byteindex>
    rx_bytevalue = 0;
     2b0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2b4:	80 e9       	ldi	r24, 0x90	; 144
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     2bc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     2c0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tx_mask>
     2c4:	88 73       	andi	r24, 0x38	; 56
     2c6:	11 f0       	breq	.+4      	; 0x2cc <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2c8:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <tx_mask>
    tx_clock = 0;
     2cc:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tx_clock+0x1>
     2d0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <tx_clock>
    tx_increment = 255;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_increment+0x1>
     2dc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_increment>
    kilo_ticks = 0;
     2e0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <kilo_ticks>
     2e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks+0x1>
     2e8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <kilo_ticks+0x2>
     2ec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <kilo_ticks+0x3>
    kilo_state = IDLE;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
    kilo_tx_period = 3906;
     2f6:	82 e4       	ldi	r24, 0x42	; 66
     2f8:	9f e0       	ldi	r25, 0x0F	; 15
     2fa:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <kilo_tx_period+0x1>
     2fe:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     302:	80 eb       	ldi	r24, 0xB0	; 176
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     30a:	c8 2f       	mov	r28, r24
     30c:	81 eb       	ldi	r24, 0xB1	; 177
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     314:	2c 2f       	mov	r18, r28
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	38 2b       	or	r19, r24
     31a:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <kilo_uid+0x1>
     31e:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     322:	85 e0       	ldi	r24, 0x05	; 5
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     32a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     32e:	89 e0       	ldi	r24, 0x09	; 9
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     336:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     33a:	8c e0       	ldi	r24, 0x0C	; 12
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     342:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     346:	84 e1       	ldi	r24, 0x14	; 20
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     34e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <kilo_straight_right>
     352:	0c e4       	ldi	r16, 0x4C	; 76
     354:	11 e0       	ldi	r17, 0x01	; 1
     356:	55 e2       	ldi	r21, 0x25	; 37
     358:	e5 2e       	mov	r14, r21
     35a:	51 e0       	ldi	r21, 0x01	; 1
     35c:	f5 2e       	mov	r15, r21
     35e:	c0 e2       	ldi	r28, 0x20	; 32
     360:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     362:	ce 01       	movw	r24, r28
     364:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     368:	d8 2e       	mov	r13, r24
     36a:	ce 01       	movw	r24, r28
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     372:	2d 2d       	mov	r18, r13
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	32 2f       	mov	r19, r18
     378:	22 27       	eor	r18, r18
     37a:	28 2b       	or	r18, r24
     37c:	f8 01       	movw	r30, r16
     37e:	21 93       	st	Z+, r18
     380:	31 93       	st	Z+, r19
     382:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     384:	ce 01       	movw	r24, r28
     386:	c0 96       	adiw	r24, 0x30	; 48
     388:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     38c:	d8 2e       	mov	r13, r24
     38e:	ce 01       	movw	r24, r28
     390:	c1 96       	adiw	r24, 0x31	; 49
     392:	0e 94 6f 0b 	call	0x16de	; 0x16de <eeprom_read_byte>
     396:	2d 2d       	mov	r18, r13
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	32 2f       	mov	r19, r18
     39c:	22 27       	eor	r18, r18
     39e:	28 2b       	or	r18, r24
     3a0:	f7 01       	movw	r30, r14
     3a2:	21 93       	st	Z+, r18
     3a4:	31 93       	st	Z+, r19
     3a6:	7f 01       	movw	r14, r30
     3a8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3aa:	cc 33       	cpi	r28, 0x3C	; 60
     3ac:	d1 05       	cpc	r29, r1
     3ae:	c9 f6       	brne	.-78     	; 0x362 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3b0:	78 94       	sei
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	08 95       	ret

000003c2 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	8f 93       	push	r24
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	a8 95       	wdr
     3d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3d8:	88 61       	ori	r24, 0x18	; 24
     3da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     3e2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3e4:	8f 91       	pop	r24
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	41 f0       	breq	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	ef ec       	ldi	r30, 0xCF	; 207
     3f6:	f7 e0       	ldi	r31, 0x07	; 7
     3f8:	31 97       	sbiw	r30, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <delay+0x8>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <delay+0xe>
     3fe:	00 00       	nop
        _delay_ms(1);
        ms--;
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f6 cf       	rjmp	.-20     	; 0x3f0 <delay>
    }
}
     404:	08 95       	ret

00000406 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     406:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     40a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     40e:	08 95       	ret

00000410 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     416:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     41a:	8f e0       	ldi	r24, 0x0F	; 15
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <delay>

00000422 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     422:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_busy>
     426:	81 11       	cpse	r24, r1
     428:	1e c0       	rjmp	.+60     	; 0x466 <get_ambientlight+0x44>
        cli();
     42a:	f8 94       	cli
        adc_setup_conversion(7);
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     432:	83 e8       	ldi	r24, 0x83	; 131
     434:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     438:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     442:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     446:	86 fd       	sbrc	r24, 6
     448:	fc cf       	rjmp	.-8      	; 0x442 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     44a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     44e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     452:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     456:	23 ea       	ldi	r18, 0xA3	; 163
     458:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     462:	78 94       	sei
     464:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     46a:	08 95       	ret

0000046c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     46c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_busy>
     470:	81 11       	cpse	r24, r1
     472:	1e c0       	rjmp	.+60     	; 0x4b0 <get_temperature+0x44>
        cli();
     474:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     476:	88 ec       	ldi	r24, 0xC8	; 200
     478:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     47c:	87 e8       	ldi	r24, 0x87	; 135
     47e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     482:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     486:	80 64       	ori	r24, 0x40	; 64
     488:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     48c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     490:	86 fd       	sbrc	r24, 6
     492:	fc cf       	rjmp	.-8      	; 0x48c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     494:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     498:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     49c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4a0:	23 ea       	ldi	r18, 0xA3	; 163
     4a2:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4ac:	78 94       	sei
     4ae:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     4b4:	08 95       	ret

000004b6 <rand_hard>:

uint8_t rand_hard() {
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     4be:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     4c0:	e3 ea       	ldi	r30, 0xA3	; 163
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     4c4:	c6 e0       	ldi	r28, 0x06	; 6
     4c6:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     4c8:	a1 e0       	ldi	r26, 0x01	; 1
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     4cc:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     4ce:	f8 94       	cli
            adc_setup_conversion(6);
     4d0:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4d4:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     4d8:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4dc:	40 64       	ori	r20, 0x40	; 64
     4de:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4e2:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e6:	46 fd       	sbrc	r20, 6
     4e8:	fc cf       	rjmp	.-8      	; 0x4e2 <rand_hard+0x2c>
            a = ADCW&0x1;
     4ea:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4ee:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     4f2:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     4f4:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f8:	50 64       	ori	r21, 0x40	; 64
     4fa:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     4fe:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     502:	56 fd       	sbrc	r21, 6
     504:	fc cf       	rjmp	.-8      	; 0x4fe <rand_hard+0x48>
            b = ADCW&0x1;
     506:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     50a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     50e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     512:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     516:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     51a:	78 94       	sei
            tries++;
     51c:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     51e:	61 70       	andi	r22, 0x01	; 1
     520:	46 17       	cp	r20, r22
     522:	51 f0       	breq	.+20     	; 0x538 <rand_hard+0x82>
        if (a)
     524:	44 23       	and	r20, r20
     526:	59 f0       	breq	.+22     	; 0x53e <rand_hard+0x88>
            num |= (1<<i);
     528:	ad 01       	movw	r20, r26
     52a:	02 2e       	mov	r0, r18
     52c:	01 c0       	rjmp	.+2      	; 0x530 <rand_hard+0x7a>
     52e:	44 0f       	add	r20, r20
     530:	0a 94       	dec	r0
     532:	ea f7       	brpl	.-6      	; 0x52e <rand_hard+0x78>
     534:	84 2b       	or	r24, r20
     536:	03 c0       	rjmp	.+6      	; 0x53e <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     538:	90 38       	cpi	r25, 0x80	; 128
     53a:	49 f6       	brne	.-110    	; 0x4ce <rand_hard+0x18>
     53c:	f3 cf       	rjmp	.-26     	; 0x524 <rand_hard+0x6e>
     53e:	2f 5f       	subi	r18, 0xFF	; 255
     540:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     542:	28 30       	cpi	r18, 0x08	; 8
     544:	31 05       	cpc	r19, r1
     546:	09 f0       	breq	.+2      	; 0x54a <rand_hard+0x94>
     548:	c1 cf       	rjmp	.-126    	; 0x4cc <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     550:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     554:	98 e0       	ldi	r25, 0x08	; 8
     556:	89 9f       	mul	r24, r25
     558:	90 01       	movw	r18, r0
     55a:	11 24       	eor	r1, r1
     55c:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     55e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <accumulator>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	89 0f       	add	r24, r25
     566:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <accumulator>
     56a:	82 2f       	mov	r24, r18
     56c:	82 95       	swap	r24
     56e:	86 95       	lsr	r24
     570:	87 70       	andi	r24, 0x07	; 7
     572:	28 27       	eor	r18, r24
     574:	96 95       	lsr	r25
     576:	96 95       	lsr	r25
     578:	82 2f       	mov	r24, r18
     57a:	89 27       	eor	r24, r25
     57c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     580:	08 95       	ret

00000582 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     582:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     586:	08 95       	ret

00000588 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     588:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_busy>
     58c:	81 11       	cpse	r24, r1
     58e:	16 c0       	rjmp	.+44     	; 0x5bc <get_voltage+0x34>
        cli();                                    // disable interrupts
     590:	f8 94       	cli
        adc_setup_conversion(6);
     592:	86 e0       	ldi	r24, 0x06	; 6
     594:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     598:	83 e8       	ldi	r24, 0x83	; 131
     59a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     59e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a2:	80 64       	ori	r24, 0x40	; 64
     5a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5ac:	86 fd       	sbrc	r24, 6
     5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     5b8:	78 94       	sei
     5ba:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     5c0:	08 95       	ret

000005c2 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     5c2:	2f 92       	push	r2
     5c4:	3f 92       	push	r3
     5c6:	4f 92       	push	r4
     5c8:	5f 92       	push	r5
     5ca:	6f 92       	push	r6
     5cc:	7f 92       	push	r7
     5ce:	8f 92       	push	r8
     5d0:	9f 92       	push	r9
     5d2:	af 92       	push	r10
     5d4:	bf 92       	push	r11
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     5e8:	fc 01       	movw	r30, r24
     5ea:	c2 81       	ldd	r28, Z+2	; 0x02
     5ec:	d3 81       	ldd	r29, Z+3	; 0x03
     5ee:	c4 38       	cpi	r28, 0x84	; 132
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	df 07       	cpc	r29, r31
     5f4:	0c f0       	brlt	.+2      	; 0x5f8 <estimate_distance+0x36>
     5f6:	7e c0       	rjmp	.+252    	; 0x6f4 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     5f8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_irhigh>
     5fc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <kilo_irhigh+0x1>
     600:	8c 17       	cp	r24, r28
     602:	9d 07       	cpc	r25, r29
     604:	08 f4       	brcc	.+2      	; 0x608 <estimate_distance+0x46>
     606:	6f c0       	rjmp	.+222    	; 0x6e6 <estimate_distance+0x124>
     608:	e7 e2       	ldi	r30, 0x27	; 39
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     60e:	81 91       	ld	r24, Z+
     610:	91 91       	ld	r25, Z+
     612:	8c 17       	cp	r24, r28
     614:	9d 07       	cpc	r25, r29
     616:	20 f0       	brcs	.+8      	; 0x620 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     618:	1f 5f       	subi	r17, 0xFF	; 255
     61a:	1e 30       	cpi	r17, 0x0E	; 14
     61c:	c1 f7       	brne	.-16     	; 0x60e <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     61e:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     620:	81 2f       	mov	r24, r17
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	eb 5d       	subi	r30, 0xDB	; 219
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	e0 80       	ld	r14, Z
     630:	f1 80       	ldd	r15, Z+1	; 0x01
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	fc 01       	movw	r30, r24
     638:	ed 5d       	subi	r30, 0xDD	; 221
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	b7 01       	movw	r22, r14
     642:	68 1b       	sub	r22, r24
     644:	79 0b       	sbc	r23, r25
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     656:	4b 01       	movw	r8, r22
     658:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     65a:	be 01       	movw	r22, r28
     65c:	0d 2e       	mov	r0, r29
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__floatsisf>
     668:	2b 01       	movw	r4, r22
     66a:	3c 01       	movw	r6, r24
     66c:	b7 01       	movw	r22, r14
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
     67a:	61 2f       	mov	r22, r17
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     69c:	a5 01       	movw	r20, r10
     69e:	94 01       	movw	r18, r8
     6a0:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c3 01       	movw	r24, r6
     6b6:	b2 01       	movw	r22, r4
     6b8:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e2       	ldi	r20, 0x20	; 32
     6c2:	51 e4       	ldi	r21, 0x41	; 65
     6c4:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     6c8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fixsfsi>
     6cc:	7b 01       	movw	r14, r22
     6ce:	c5 01       	movw	r24, r10
     6d0:	b4 01       	movw	r22, r8
     6d2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fixsfsi>
     6d6:	ab 01       	movw	r20, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	c7 01       	movw	r24, r14
     6dc:	ba 01       	movw	r22, r20
     6de:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodhi4>
     6e2:	16 2f       	mov	r17, r22
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     6e6:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     6e8:	cd 3b       	cpi	r28, 0xBD	; 189
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	d8 07       	cpc	r29, r24
     6ee:	0c f4       	brge	.+2      	; 0x6f2 <estimate_distance+0x130>
     6f0:	ca c0       	rjmp	.+404    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     6f4:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     6f6:	f1 01       	movw	r30, r2
     6f8:	c0 80       	ld	r12, Z
     6fa:	d1 80       	ldd	r13, Z+1	; 0x01
     6fc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <kilo_irlow>
     700:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <kilo_irlow+0x1>
     704:	8c 15       	cp	r24, r12
     706:	9d 05       	cpc	r25, r13
     708:	88 f0       	brcs	.+34     	; 0x72c <estimate_distance+0x16a>
     70a:	ee e4       	ldi	r30, 0x4E	; 78
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     714:	e1 90       	ld	r14, Z+
     716:	f1 90       	ld	r15, Z+
     718:	ec 14       	cp	r14, r12
     71a:	fd 04       	cpc	r15, r13
     71c:	08 f4       	brcc	.+2      	; 0x720 <estimate_distance+0x15e>
     71e:	58 c0       	rjmp	.+176    	; 0x7d0 <estimate_distance+0x20e>
     720:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     722:	8e 30       	cpi	r24, 0x0E	; 14
     724:	91 05       	cpc	r25, r1
     726:	a9 f7       	brne	.-22     	; 0x712 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     728:	0a e5       	ldi	r16, 0x5A	; 90
     72a:	01 c0       	rjmp	.+2      	; 0x72e <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     72c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     72e:	1f 3f       	cpi	r17, 0xFF	; 255
     730:	09 f4       	brne	.+2      	; 0x734 <estimate_distance+0x172>
     732:	4b c0       	rjmp	.+150    	; 0x7ca <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     734:	be 01       	movw	r22, r28
     736:	dd 0f       	add	r29, r29
     738:	88 0b       	sbc	r24, r24
     73a:	99 0b       	sbc	r25, r25
     73c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__floatsisf>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
     744:	61 2f       	mov	r22, r17
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     750:	4b 01       	movw	r8, r22
     752:	5c 01       	movw	r10, r24
     754:	a7 01       	movw	r20, r14
     756:	96 01       	movw	r18, r12
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	81 e6       	ldi	r24, 0x61	; 97
     75e:	94 e4       	ldi	r25, 0x44	; 68
     760:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	c5 01       	movw	r24, r10
     76a:	b4 01       	movw	r22, r8
     76c:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     770:	4b 01       	movw	r8, r22
     772:	5c 01       	movw	r10, r24
     774:	60 2f       	mov	r22, r16
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     780:	2b 01       	movw	r4, r22
     782:	3c 01       	movw	r6, r24
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	4f e2       	ldi	r20, 0x2F	; 47
     78a:	54 e4       	ldi	r21, 0x44	; 68
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c3 01       	movw	r24, r6
     79a:	b2 01       	movw	r22, r4
     79c:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	c5 01       	movw	r24, r10
     7a6:	b4 01       	movw	r22, r8
     7a8:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	48 e4       	ldi	r20, 0x48	; 72
     7b2:	53 e4       	ldi	r21, 0x43	; 67
     7b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__divsf3>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	44 e0       	ldi	r20, 0x04	; 4
     7be:	52 e4       	ldi	r21, 0x42	; 66
     7c0:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     7c4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixunssfsi>
     7c8:	60 c0       	rjmp	.+192    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
        } else {
            return 33 + dist_low;
     7ca:	61 e2       	ldi	r22, 0x21	; 33
     7cc:	60 0f       	add	r22, r16
     7ce:	5d c0       	rjmp	.+186    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	fc 01       	movw	r30, r24
     7d6:	e6 5b       	subi	r30, 0xB6	; 182
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01
     7de:	b7 01       	movw	r22, r14
     7e0:	68 1b       	sub	r22, r24
     7e2:	79 0b       	sbc	r23, r25
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     7f4:	4b 01       	movw	r8, r22
     7f6:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     7f8:	b6 01       	movw	r22, r12
     7fa:	dd 0c       	add	r13, r13
     7fc:	88 0b       	sbc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__floatsisf>
     804:	2b 01       	movw	r4, r22
     806:	3c 01       	movw	r6, r24
     808:	b7 01       	movw	r22, r14
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     812:	6b 01       	movw	r12, r22
     814:	7c 01       	movw	r14, r24
     816:	63 2d       	mov	r22, r3
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 18 0a 	call	0x1430	; 0x1430 <__floatunsisf>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	a9 01       	movw	r20, r18
     834:	0e 94 04 09 	call	0x1208	; 0x1208 <__addsf3>
     838:	a5 01       	movw	r20, r10
     83a:	94 01       	movw	r18, r8
     83c:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c3 01       	movw	r24, r6
     852:	b2 01       	movw	r22, r4
     854:	0e 94 03 09 	call	0x1206	; 0x1206 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e2       	ldi	r20, 0x20	; 32
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	0e 94 a6 0a 	call	0x154c	; 0x154c <__mulsf3>
     864:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fixsfsi>
     868:	7b 01       	movw	r14, r22
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fixsfsi>
     872:	ab 01       	movw	r20, r22
     874:	bc 01       	movw	r22, r24
     876:	c7 01       	movw	r24, r14
     878:	ba 01       	movw	r22, r20
     87a:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodhi4>
     87e:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     880:	6f 3f       	cpi	r22, 0xFF	; 255
     882:	09 f0       	breq	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     884:	54 cf       	rjmp	.-344    	; 0x72e <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     886:	61 e2       	ldi	r22, 0x21	; 33
     888:	61 0f       	add	r22, r17
    }
}
     88a:	86 2f       	mov	r24, r22
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	9f 90       	pop	r9
     8a2:	8f 90       	pop	r8
     8a4:	7f 90       	pop	r7
     8a6:	6f 90       	pop	r6
     8a8:	5f 90       	pop	r5
     8aa:	4f 90       	pop	r4
     8ac:	3f 90       	pop	r3
     8ae:	2f 90       	pop	r2
     8b0:	08 95       	ret

000008b2 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
    tx_clock += tx_increment;
     8d4:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <tx_clock>
     8d8:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <tx_clock+0x1>
     8dc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <tx_increment>
     8e0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <tx_increment+0x1>
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <tx_clock+0x1>
     8ec:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <tx_clock>
    tx_increment = 0xFF;
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_increment+0x1>
     8f8:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tx_increment>
    OCR0A = tx_increment;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     900:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <kilo_ticks>
     904:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <kilo_ticks+0x1>
     908:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <kilo_ticks+0x2>
     90c:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <kilo_ticks+0x3>
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	a1 1d       	adc	r26, r1
     914:	b1 1d       	adc	r27, r1
     916:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <kilo_ticks>
     91a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <kilo_ticks+0x1>
     91e:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <kilo_ticks+0x2>
     922:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     926:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_busy>
     92a:	81 11       	cpse	r24, r1
     92c:	2d c0       	rjmp	.+90     	; 0x988 <__stack+0x89>
     92e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_tx_period>
     932:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_tx_period+0x1>
     936:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <tx_clock>
     93a:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <tx_clock+0x1>
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	10 f5       	brcc	.+68     	; 0x988 <__stack+0x89>
     944:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	f1 f4       	brne	.+60     	; 0x988 <__stack+0x89>
        message_t *msg = kilo_message_tx();
     94c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     950:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     954:	09 95       	icall
        if (msg) {
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	b9 f0       	breq	.+46     	; 0x988 <__stack+0x89>
            if (message_send(msg)) {
     95a:	0e 94 2c 08 	call	0x1058	; 0x1058 <message_send>
     95e:	88 23       	and	r24, r24
     960:	51 f0       	breq	.+20     	; 0x976 <__stack+0x77>
                kilo_message_tx_success();
     962:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     966:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     96a:	09 95       	icall
                tx_clock = 0;
     96c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tx_clock+0x1>
     970:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <tx_clock>
     974:	09 c0       	rjmp	.+18     	; 0x988 <__stack+0x89>
            } else {
                tx_increment = rand()&0xFF;
     976:	0e 94 5f 0b 	call	0x16be	; 0x16be <rand>
     97a:	9c 01       	movw	r18, r24
     97c:	33 27       	eor	r19, r19
     97e:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <tx_increment+0x1>
     982:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <tx_increment>
                OCR0A = tx_increment;
     986:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9aa:	80 ff       	sbrs	r24, 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <set_color+0x8>
        DDRD |= (1<<5);
     9ae:	55 9a       	sbi	0x0a, 5	; 10
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     9b2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     9b4:	81 ff       	sbrs	r24, 1
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <set_color+0x12>
        DDRD |= (1<<4);
     9b8:	54 9a       	sbi	0x0a, 4	; 10
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     9bc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     9be:	82 ff       	sbrs	r24, 2
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <set_color+0x1c>
        DDRC |= (1<<3);
     9c2:	3b 9a       	sbi	0x07, 3	; 7
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     9c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     9c8:	83 ff       	sbrs	r24, 3
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <set_color+0x26>
        DDRC |= (1<<2);
     9cc:	3a 9a       	sbi	0x07, 2	; 7
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     9d0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     9d2:	84 ff       	sbrs	r24, 4
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <set_color+0x30>
        DDRC |= (1<<5);
     9d6:	3d 9a       	sbi	0x07, 5	; 7
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     9da:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     9dc:	85 ff       	sbrs	r24, 5
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <set_color+0x3a>
        DDRC |= (1<<4);
     9e0:	3c 9a       	sbi	0x07, 4	; 7
     9e2:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     9e4:	3c 98       	cbi	0x07, 4	; 7
     9e6:	08 95       	ret

000009e8 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     9e8:	8c 01       	movw	r16, r24
     9ea:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     9ee:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     9f4:	98 e1       	ldi	r25, 0x18	; 24
     9f6:	c9 2e       	mov	r12, r25
     9f8:	29 e2       	ldi	r18, 0x29	; 41
     9fa:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     9fc:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <kilo_state>
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	e7 30       	cpi	r30, 0x07	; 7
     a04:	f1 05       	cpc	r31, r1
     a06:	d0 f7       	brcc	.-12     	; 0x9fc <kilo_start+0x14>
     a08:	ec 5c       	subi	r30, 0xCC	; 204
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__tablejump2__>
            case SLEEPING:
                cli();
     a10:	f8 94       	cli
                acomp_off();
     a12:	80 b7       	in	r24, 0x30	; 48
     a14:	87 7f       	andi	r24, 0xF7	; 247
     a16:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a18:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a1c:	8f 77       	andi	r24, 0x7F	; 127
     a1e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a22:	14 b8       	out	0x04, r1	; 4
     a24:	17 b8       	out	0x07, r1	; 7
     a26:	1a b8       	out	0x0a, r1	; 10
     a28:	15 b8       	out	0x05, r1	; 5
     a2a:	18 b8       	out	0x08, r1	; 8
     a2c:	1b b8       	out	0x0b, r1	; 11
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	a8 95       	wdr
     a34:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a3e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a42:	80 64       	ori	r24, 0x40	; 64
     a44:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a48:	83 b7       	in	r24, 0x33	; 51
     a4a:	81 7f       	andi	r24, 0xF1	; 241
     a4c:	84 60       	ori	r24, 0x04	; 4
     a4e:	83 bf       	out	0x33, r24	; 51
                cli();
     a50:	f8 94       	cli
                sleep_enable();
     a52:	83 b7       	in	r24, 0x33	; 51
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	83 bf       	out	0x33, r24	; 51
                sei();
     a58:	78 94       	sei
                sleep_cpu();
     a5a:	88 95       	sleep
                sleep_disable();
     a5c:	83 b7       	in	r24, 0x33	; 51
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	83 bf       	out	0x33, r24	; 51
                sei();
     a62:	78 94       	sei
                rx_busy = 0;
     a64:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>
                ports_on();
     a68:	52 9a       	sbi	0x0a, 2	; 10
     a6a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a6c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a70:	80 68       	ori	r24, 0x80	; 128
     a72:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a76:	87 e5       	ldi	r24, 0x57	; 87
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <kilo_start+0x92>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <kilo_start+0x98>
     a80:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a82:	80 b7       	in	r24, 0x30	; 48
     a84:	88 61       	ori	r24, 0x18	; 24
     a86:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8e:	ef e1       	ldi	r30, 0x1F	; 31
     a90:	fe e4       	ldi	r31, 0x4E	; 78
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <kilo_start+0xaa>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <kilo_start+0xb0>
     a98:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a9a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rx_busy>
     a9e:	88 23       	and	r24, r24
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <kilo_start+0xbc>
     aa2:	50 c0       	rjmp	.+160    	; 0xb44 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     aaa:	ff ef       	ldi	r31, 0xFF	; 255
     aac:	20 e7       	ldi	r18, 0x70	; 112
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	f1 50       	subi	r31, 0x01	; 1
     ab2:	20 40       	sbci	r18, 0x00	; 0
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <kilo_start+0xc8>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <kilo_start+0xd2>
     aba:	00 00       	nop
     abc:	43 c0       	rjmp	.+134    	; 0xb44 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     abe:	8c e0       	ldi	r24, 0x0C	; 12
     ac0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     ac4:	ef ec       	ldi	r30, 0xCF	; 207
     ac6:	f7 e0       	ldi	r31, 0x07	; 7
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <kilo_start+0xe0>
     acc:	00 c0       	rjmp	.+0      	; 0xace <kilo_start+0xe6>
     ace:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     ad6:	ff ef       	ldi	r31, 0xFF	; 255
     ad8:	21 ee       	ldi	r18, 0xE1	; 225
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	f1 50       	subi	r31, 0x01	; 1
     ade:	20 40       	sbci	r18, 0x00	; 0
     ae0:	80 40       	sbci	r24, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <kilo_start+0xf4>
     ae4:	2c c0       	rjmp	.+88     	; 0xb3e <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     ae6:	0e 94 c4 02 	call	0x588	; 0x588 <get_voltage>
                if(voltage > 682)
     aea:	8b 3a       	cpi	r24, 0xAB	; 171
     aec:	e2 e0       	ldi	r30, 0x02	; 2
     aee:	9e 07       	cpc	r25, r30
     af0:	24 f0       	brlt	.+8      	; 0xafa <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     af2:	8c e0       	ldi	r24, 0x0C	; 12
     af4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     af8:	81 cf       	rjmp	.-254    	; 0x9fc <kilo_start+0x14>
                else if(voltage > 648)
     afa:	89 38       	cpi	r24, 0x89	; 137
     afc:	f2 e0       	ldi	r31, 0x02	; 2
     afe:	9f 07       	cpc	r25, r31
     b00:	14 f0       	brlt	.+4      	; 0xb06 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	f7 cf       	rjmp	.-18     	; 0xaf4 <kilo_start+0x10c>
                else if(voltage > 614)
     b06:	87 36       	cpi	r24, 0x67	; 103
     b08:	92 40       	sbci	r25, 0x02	; 2
     b0a:	14 f0       	brlt	.+4      	; 0xb10 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b0c:	8f e0       	ldi	r24, 0x0F	; 15
     b0e:	f2 cf       	rjmp	.-28     	; 0xaf4 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	f0 cf       	rjmp	.-32     	; 0xaf4 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b14:	48 99       	sbic	0x09, 0	; 9
     b16:	16 c0       	rjmp	.+44     	; 0xb44 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     b1e:	8f ec       	ldi	r24, 0xCF	; 207
     b20:	97 e0       	ldi	r25, 0x07	; 7
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <kilo_start+0x13a>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <kilo_start+0x140>
     b28:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	e1 ee       	ldi	r30, 0xE1	; 225
     b34:	f4 e0       	ldi	r31, 0x04	; 4
     b36:	91 50       	subi	r25, 0x01	; 1
     b38:	e0 40       	sbci	r30, 0x00	; 0
     b3a:	f0 40       	sbci	r31, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <kilo_start+0x14e>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <kilo_start+0x158>
     b40:	00 00       	nop
     b42:	5c cf       	rjmp	.-328    	; 0x9fc <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	d6 cf       	rjmp	.-84     	; 0xaf4 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b48:	d1 11       	cpse	r29, r1
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <kilo_start+0x168>
                    setup();
     b4c:	f8 01       	movw	r30, r16
     b4e:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b50:	d0 92 17 01 	sts	0x0117, r13	; 0x800117 <kilo_state>
     b54:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     b56:	f7 01       	movw	r30, r14
     b58:	09 95       	icall
                break;
     b5a:	50 cf       	rjmp	.-352    	; 0x9fc <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b5c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     b60:	81 11       	cpse	r24, r1
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b64:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b68:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b6c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
     b70:	45 cf       	rjmp	.-374    	; 0x9fc <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b72:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
     b76:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <prev_motion>
     b7a:	98 17       	cp	r25, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <kilo_start+0x198>
     b7e:	3e cf       	rjmp	.-388    	; 0x9fc <kilo_start+0x14>
                        prev_motion = cur_motion;
     b80:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     b84:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b88:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	89 f4       	brne	.+34     	; 0xbb2 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b90:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b94:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b98:	8f e2       	ldi	r24, 0x2F	; 47
     b9a:	95 e7       	ldi	r25, 0x75	; 117
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <kilo_start+0x1b4>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <kilo_start+0x1ba>
     ba2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ba4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bb0:	25 cf       	rjmp	.-438    	; 0x9fc <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bb2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bba:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	59 f4       	brne	.+22     	; 0xbd8 <kilo_start+0x1f0>
     bc2:	ef e2       	ldi	r30, 0x2F	; 47
     bc4:	f5 e7       	ldi	r31, 0x75	; 117
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <kilo_start+0x1de>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <kilo_start+0x1e4>
     bcc:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     bce:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bd2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bd6:	10 c0       	rjmp	.+32     	; 0xbf8 <kilo_start+0x210>
     bd8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bdc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     be0:	8f e2       	ldi	r24, 0x2F	; 47
     be2:	95 e7       	ldi	r25, 0x75	; 117
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <kilo_start+0x1fc>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <kilo_start+0x202>
     bea:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     bec:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <kilo_straight_right>
     bf0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bf4:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bf8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bfc:	ff ce       	rjmp	.-514    	; 0x9fc <kilo_start+0x14>

00000bfe <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
    rx_timer_off();
     c0c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c10:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c14:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rx_leadingbit>
    rx_leadingbyte = 1;
     c1e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_leadingbyte>
    rx_busy = 0;
     c22:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>
    adc_trigger_high_gain();
     c26:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c2a:	93 ea       	ldi	r25, 0xA3	; 163
     c2c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c30:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c34:	9f 91       	pop	r25
     c36:	8f 91       	pop	r24
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c68:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c6c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c76:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx_leadingbit>
     c7a:	88 23       	and	r24, r24
     c7c:	21 f1       	breq	.+72     	; 0xcc6 <__vector_23+0x84>
        rx_timer_on();
     c7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c86:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c8a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <rx_bytevalue>
        rx_leadingbit = 0;
     c8e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rx_leadingbit>
        if (rx_leadingbyte) {
     c92:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_leadingbyte>
     c96:	88 23       	and	r24, r24
     c98:	09 f4       	brne	.+2      	; 0xc9c <__vector_23+0x5a>
     c9a:	af c1       	rjmp	.+862    	; 0xffa <__vector_23+0x3b8>
            adc_finish_conversion();
     c9c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ca0:	86 fd       	sbrc	r24, 6
     ca2:	fc cf       	rjmp	.-8      	; 0xc9c <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     ca4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ca8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cac:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <rx_dist+0x3>
     cb0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <rx_dist+0x2>
            adc_trigger_low_gain();
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cba:	93 ea       	ldi	r25, 0xA3	; 163
     cbc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cc0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cc4:	9a c1       	rjmp	.+820    	; 0xffa <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     cc6:	c9 01       	movw	r24, r18
     cc8:	87 58       	subi	r24, 0x87	; 135
     cca:	91 09       	sbc	r25, r1
     ccc:	84 37       	cpi	r24, 0x74	; 116
     cce:	99 40       	sbci	r25, 0x09	; 9
     cd0:	a0 f0       	brcs	.+40     	; 0xcfa <__vector_23+0xb8>
            rx_timer_off();
     cd2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cd6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cda:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     cde:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <rx_leadingbit>
            rx_leadingbyte = 1;
     ce2:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <rx_leadingbyte>
            rx_busy = 0;
     ce6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>
            adc_trigger_high_gain();
     cea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cee:	83 ea       	ldi	r24, 0xA3	; 163
     cf0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cf4:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     cf8:	80 c1       	rjmp	.+768    	; 0xffa <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     cfa:	26 58       	subi	r18, 0x86	; 134
     cfc:	31 09       	sbc	r19, r1
     cfe:	a4 ef       	ldi	r26, 0xF4	; 244
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
     d06:	8c 01       	movw	r16, r24
     d08:	22 27       	eor	r18, r18
     d0a:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d0c:	08 30       	cpi	r16, 0x08	; 8
     d0e:	60 f4       	brcc	.+24     	; 0xd28 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <__vector_23+0xd6>
     d16:	88 0f       	add	r24, r24
     d18:	0a 95       	dec	r16
     d1a:	ea f7       	brpl	.-6      	; 0xd16 <__vector_23+0xd4>
     d1c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <rx_bytevalue>
     d20:	89 2b       	or	r24, r25
     d22:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_bytevalue>
     d26:	69 c1       	rjmp	.+722    	; 0xffa <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d28:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <rx_leadingbit>
                if (rx_leadingbyte) {
     d2c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_leadingbyte>
     d30:	88 23       	and	r24, r24
     d32:	41 f1       	breq	.+80     	; 0xd84 <__vector_23+0x142>
                    adc_finish_conversion();
     d34:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d38:	86 fd       	sbrc	r24, 6
     d3a:	fc cf       	rjmp	.-8      	; 0xd34 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d3c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d40:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d44:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rx_dist+0x1>
     d48:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_dist>
                    adc_trigger_high_gain();
     d4c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d50:	83 ea       	ldi	r24, 0xA3	; 163
     d52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     d5c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <rx_bytevalue>
     d60:	99 23       	and	r25, r25
     d62:	59 f0       	breq	.+22     	; 0xd7a <__vector_23+0x138>
                        rx_timer_off();
     d64:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d68:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d6c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d70:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_leadingbyte>
                        rx_busy = 0;
     d74:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>
     d78:	40 c1       	rjmp	.+640    	; 0xffa <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d7a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_leadingbyte>
                        rx_byteindex = 0;
     d7e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <rx_byteindex>
     d82:	3b c1       	rjmp	.+630    	; 0xffa <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d84:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <rx_byteindex>
     d88:	e8 2f       	mov	r30, r24
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e2 59       	subi	r30, 0x92	; 146
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <rx_bytevalue>
     d94:	90 83       	st	Z, r25
                    rx_byteindex++;
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d9c:	8c 30       	cpi	r24, 0x0C	; 12
     d9e:	09 f0       	breq	.+2      	; 0xda2 <__vector_23+0x160>
     da0:	2c c1       	rjmp	.+600    	; 0xffa <__vector_23+0x3b8>
                        rx_timer_off();
     da2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     da6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     daa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dae:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <rx_leadingbyte>
                        rx_busy = 0;
     db2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     db6:	00 91 78 01 	lds	r16, 0x0178	; 0x800178 <rx_msg+0xa>
     dba:	10 91 79 01 	lds	r17, 0x0179	; 0x800179 <rx_msg+0xb>
     dbe:	8e e6       	ldi	r24, 0x6E	; 110
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 10 08 	call	0x1020	; 0x1020 <message_crc>
     dc6:	08 17       	cp	r16, r24
     dc8:	19 07       	cpc	r17, r25
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_23+0x18c>
     dcc:	16 c1       	rjmp	.+556    	; 0xffa <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     dce:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <rx_msg+0x9>
     dd2:	e7 fd       	sbrc	r30, 7
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     dd6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     dda:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     dde:	63 e4       	ldi	r22, 0x43	; 67
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	8e e6       	ldi	r24, 0x6E	; 110
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	09 95       	icall
     de8:	08 c1       	rjmp	.+528    	; 0xffa <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     dea:	88 e7       	ldi	r24, 0x78	; 120
     dec:	8e 0f       	add	r24, r30
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	30 f0       	brcs	.+12     	; 0xdfe <__vector_23+0x1bc>
        motors_off();
     df2:	53 98       	cbi	0x0a, 3	; 10
     df4:	23 98       	cbi	0x04, 3	; 4
     df6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dfa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     dfe:	8e 2f       	mov	r24, r30
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	fc 01       	movw	r30, r24
     e04:	e0 58       	subi	r30, 0x80	; 128
     e06:	f1 09       	sbc	r31, r1
     e08:	eb 30       	cpi	r30, 0x0B	; 11
     e0a:	f1 05       	cpc	r31, r1
     e0c:	08 f0       	brcs	.+2      	; 0xe10 <__vector_23+0x1ce>
     e0e:	f5 c0       	rjmp	.+490    	; 0xffa <__vector_23+0x3b8>
     e10:	e5 5c       	subi	r30, 0xC5	; 197
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e18:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e1c:	8d 7f       	andi	r24, 0xFD	; 253
     e1e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e22:	16 bc       	out	0x26, r1	; 38
            bootload();
     e24:	e0 e0       	ldi	r30, 0x00	; 0
     e26:	f0 e7       	ldi	r31, 0x70	; 112
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e2a:	e0 e0       	ldi	r30, 0x00	; 0
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e30:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <kilo_state>
     e34:	e2 c0       	rjmp	.+452    	; 0xffa <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	b2 c0       	rjmp	.+356    	; 0xf9e <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	b0 c0       	rjmp	.+352    	; 0xf9e <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	ae c0       	rjmp	.+348    	; 0xf9e <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e42:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	09 f4       	brne	.+2      	; 0xe4c <__vector_23+0x20a>
     e4a:	d7 c0       	rjmp	.+430    	; 0xffa <__vector_23+0x3b8>
     e4c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	09 f4       	brne	.+2      	; 0xe56 <__vector_23+0x214>
     e54:	d2 c0       	rjmp	.+420    	; 0xffa <__vector_23+0x3b8>
                motors_on();
     e56:	53 9a       	sbi	0x0a, 3	; 10
     e58:	23 9a       	sbi	0x04, 3	; 4
     e5a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e5e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	9c c0       	rjmp	.+312    	; 0xf9e <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e66:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__vector_23+0x22e>
     e6e:	4b c0       	rjmp	.+150    	; 0xf06 <__vector_23+0x2c4>
     e70:	80 f4       	brcc	.+32     	; 0xe92 <__vector_23+0x250>
     e72:	88 23       	and	r24, r24
     e74:	a9 f0       	breq	.+42     	; 0xea0 <__vector_23+0x25e>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_23+0x23a>
     e7a:	82 c0       	rjmp	.+260    	; 0xf80 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e7c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg+0x1>
     e80:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_msg+0x2>
     e84:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <kilo_uid+0x1>
     e88:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <kilo_uid>
                    cur_motion = MOVE_STOP;
     e8c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
     e90:	77 c0       	rjmp	.+238    	; 0xf80 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	09 f4       	brne	.+2      	; 0xe98 <__vector_23+0x256>
     e96:	49 c0       	rjmp	.+146    	; 0xf2a <__vector_23+0x2e8>
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	09 f4       	brne	.+2      	; 0xe9e <__vector_23+0x25c>
     e9c:	58 c0       	rjmp	.+176    	; 0xf4e <__vector_23+0x30c>
     e9e:	70 c0       	rjmp	.+224    	; 0xf80 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     ea0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     ea4:	86 30       	cpi	r24, 0x06	; 6
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_23+0x268>
     ea8:	6b c0       	rjmp	.+214    	; 0xf80 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     eaa:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <kilo_uid>
     eae:	80 eb       	ldi	r24, 0xB0	; 176
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     eb6:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_uid+0x1>
     eba:	81 eb       	ldi	r24, 0xB1	; 177
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ec2:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <kilo_turn_left>
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ece:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_turn_right>
     ed2:	89 e0       	ldi	r24, 0x09	; 9
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     eda:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_straight_left>
     ede:	8c e0       	ldi	r24, 0x0C	; 12
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     ee6:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <kilo_straight_right>
     eea:	84 e1       	ldi	r24, 0x14	; 20
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 77 0b 	call	0x16ee	; 0x16ee <eeprom_write_byte>
                        motors_off();
     ef2:	53 98       	cbi	0x0a, 3	; 10
     ef4:	23 98       	cbi	0x04, 3	; 4
     ef6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     efa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
     f04:	3d c0       	rjmp	.+122    	; 0xf80 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f06:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
     f0a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <rx_msg+0x3>
     f0e:	91 30       	cpi	r25, 0x01	; 1
     f10:	21 f4       	brne	.+8      	; 0xf1a <__vector_23+0x2d8>
     f12:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <kilo_turn_left>
     f16:	89 17       	cp	r24, r25
     f18:	99 f1       	breq	.+102    	; 0xf80 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f1a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f24:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_turn_left>
     f28:	2b c0       	rjmp	.+86     	; 0xf80 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f2a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
     f2e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x4>
     f32:	92 30       	cpi	r25, 0x02	; 2
     f34:	21 f4       	brne	.+8      	; 0xf3e <__vector_23+0x2fc>
     f36:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_turn_right>
     f3a:	89 17       	cp	r24, r25
     f3c:	09 f1       	breq	.+66     	; 0xf80 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f3e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f48:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_right>
     f4c:	19 c0       	rjmp	.+50     	; 0xf80 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f4e:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <cur_motion>
     f52:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_msg+0x6>
     f56:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_msg+0x5>
     f5a:	23 30       	cpi	r18, 0x03	; 3
     f5c:	41 f4       	brne	.+16     	; 0xf6e <__vector_23+0x32c>
     f5e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <kilo_straight_right>
     f62:	82 13       	cpse	r24, r18
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <__vector_23+0x32c>
     f66:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <kilo_straight_left>
     f6a:	92 17       	cp	r25, r18
     f6c:	49 f0       	breq	.+18     	; 0xf80 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f6e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f72:	23 e0       	ldi	r18, 0x03	; 3
     f74:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f78:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f7c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f80:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg>
     f84:	88 23       	and	r24, r24
     f86:	c9 f1       	breq	.+114    	; 0xffa <__vector_23+0x3b8>
     f88:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	a9 f1       	breq	.+106    	; 0xffa <__vector_23+0x3b8>
                motors_on();
     f90:	53 9a       	sbi	0x0a, 3	; 10
     f92:	23 9a       	sbi	0x04, 3	; 4
     f94:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f98:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f9c:	86 e0       	ldi	r24, 0x06	; 6
     f9e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
     fa2:	2b c0       	rjmp	.+86     	; 0xffa <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     fa4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     fa8:	86 30       	cpi	r24, 0x06	; 6
     faa:	81 f0       	breq	.+32     	; 0xfcc <__vector_23+0x38a>
                motors_on();
     fac:	53 9a       	sbi	0x0a, 3	; 10
     fae:	23 9a       	sbi	0x04, 3	; 4
     fb0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fb4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 d5 04 	call	0x9aa	; 0x9aa <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     fbe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
     fc2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                kilo_state = MOVING;
     fc6:	86 e0       	ldi	r24, 0x06	; 6
     fc8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	00 90 6e 01 	lds	r0, 0x016E	; 0x80016e <rx_msg>
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <__vector_23+0x398>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <__vector_23+0x394>
     fde:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <kilo_uid>
     fe2:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <kilo_uid+0x1>
     fe6:	82 23       	and	r24, r18
     fe8:	93 23       	and	r25, r19
     fea:	89 2b       	or	r24, r25
     fec:	21 f0       	breq	.+8      	; 0xff6 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cur_motion>
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     ff6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
                    }
                }
            }
        }
    }
}
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1020:	fc 01       	movw	r30, r24
    1022:	9c 01       	movw	r18, r24
    1024:	26 5f       	subi	r18, 0xF6	; 246
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    102c:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    102e:	84 27       	eor	r24, r20
    1030:	08 2e       	mov	r0, r24
    1032:	82 95       	swap	r24
    1034:	80 7f       	andi	r24, 0xF0	; 240
    1036:	80 25       	eor	r24, r0
    1038:	09 2e       	mov	r0, r25
    103a:	98 2f       	mov	r25, r24
    103c:	82 95       	swap	r24
    103e:	8f 70       	andi	r24, 0x0F	; 15
    1040:	08 26       	eor	r0, r24
    1042:	86 95       	lsr	r24
    1044:	98 27       	eor	r25, r24
    1046:	89 27       	eor	r24, r25
    1048:	88 0f       	add	r24, r24
    104a:	88 0f       	add	r24, r24
    104c:	88 0f       	add	r24, r24
    104e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1050:	e2 17       	cp	r30, r18
    1052:	f3 07       	cpc	r31, r19
    1054:	59 f7       	brne	.-42     	; 0x102c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1056:	08 95       	ret

00001058 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1058:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    105a:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    105c:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    105e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <tx_mask>
    or tmpreg1, ddrreg
    1062:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1064:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1066:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1068:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <tx_mask>
    106c:	20 30       	cpi	r18, 0x00	; 0
    106e:	29 f0       	breq	.+10     	; 0x107a <message_send+0x22>
    1070:	00 00       	nop
    1072:	25 b1       	in	r18, 0x05	; 5
    1074:	23 2b       	or	r18, r19
    1076:	25 b9       	out	0x05, r18	; 5
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <message_send+0x2a>
    107a:	00 00       	nop
    107c:	00 00       	nop
    107e:	00 00       	nop
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <message_send+0x2a>
    1082:	00 00       	nop
    1084:	00 00       	nop
    1086:	00 00       	nop
    1088:	30 95       	com	r19
    108a:	25 b1       	in	r18, 0x05	; 5
    108c:	23 23       	and	r18, r19
    108e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1090:	2e ea       	ldi	r18, 0xAE	; 174
    1092:	2a 95       	dec	r18
    1094:	f1 f7       	brne	.-4      	; 0x1092 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1096:	2b ee       	ldi	r18, 0xEB	; 235

00001098 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1098:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    109a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    109e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10a0:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <tx_mask>
    com tmpreg2
    10a4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10a6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10a8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10aa:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10ac:	0f be       	out	0x3f, r0	; 63
    return 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <nocollision>:
nocollision:
    nop
    10b2:	00 00       	nop
    dec tmpreg1
    10b4:	2a 95       	dec	r18
    brne checkcollision
    10b6:	81 f7       	brne	.-32     	; 0x1098 <checkcollision>

    ldi tmpreg1, 0x01
    10b8:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10ba:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <tx_mask>
    10be:	20 30       	cpi	r18, 0x00	; 0
    10c0:	29 f0       	breq	.+10     	; 0x10cc <nocollision+0x1a>
    10c2:	00 00       	nop
    10c4:	25 b1       	in	r18, 0x05	; 5
    10c6:	23 2b       	or	r18, r19
    10c8:	25 b9       	out	0x05, r18	; 5
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <nocollision+0x22>
    10cc:	00 00       	nop
    10ce:	00 00       	nop
    10d0:	00 00       	nop
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <nocollision+0x22>
    10d4:	00 00       	nop
    10d6:	00 00       	nop
    10d8:	00 00       	nop
    10da:	30 95       	com	r19
    10dc:	25 b1       	in	r18, 0x05	; 5
    10de:	23 23       	and	r18, r19
    10e0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    10e2:	00 00       	nop
    10e4:	24 e5       	ldi	r18, 0x54	; 84
    10e6:	2a 95       	dec	r18
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    10ea:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    10ec:	8c e0       	ldi	r24, 0x0C	; 12

000010ee <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    10ee:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    10f2:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    10f4:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    10f6:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    10f8:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    10fa:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    10fe:	50 e0       	ldi	r21, 0x00	; 0

00001100 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1100:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1102:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1104:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1106:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1108:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <tx_mask>
    110c:	20 30       	cpi	r18, 0x00	; 0
    110e:	29 f0       	breq	.+10     	; 0x111a <sendbit+0x1a>
    1110:	00 00       	nop
    1112:	25 b1       	in	r18, 0x05	; 5
    1114:	23 2b       	or	r18, r19
    1116:	25 b9       	out	0x05, r18	; 5
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <sendbit+0x22>
    111a:	00 00       	nop
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <sendbit+0x22>
    1122:	00 00       	nop
    1124:	00 00       	nop
    1126:	00 00       	nop
    1128:	30 95       	com	r19
    112a:	25 b1       	in	r18, 0x05	; 5
    112c:	23 23       	and	r18, r19
    112e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1130:	00 00       	nop
    1132:	21 e5       	ldi	r18, 0x51	; 81
    1134:	2a 95       	dec	r18
    1136:	f1 f7       	brne	.-4      	; 0x1134 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1138:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    113a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    113c:	9a 95       	dec	r25
    brne sendbit
    113e:	01 f7       	brne	.-64     	; 0x1100 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1140:	8a 95       	dec	r24
    brne sendbyte
    1142:	a9 f6       	brne	.-86     	; 0x10ee <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1144:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1146:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1148:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    114a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    114c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <tx_mask>
    com tmpreg2
    1150:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1152:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1154:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1156:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1158:	0f be       	out	0x3f, r0	; 63
    return 1
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	08 95       	ret

0000115e <main>:
  }
}

int main() {
  kilo_init();
    115e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <kilo_init>
  kilo_message_tx = message_tx;
    1162:	81 e7       	ldi	r24, 0x71	; 113
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    116a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    116e:	84 e7       	ldi	r24, 0x74	; 116
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    1176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
  kilo_start(setup, loop);
    117a:	69 e8       	ldi	r22, 0x89	; 137
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	8b e7       	ldi	r24, 0x7B	; 123
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <kilo_start>

  return 0;
}
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	08 95       	ret

0000118c <__divmodhi4>:
    118c:	97 fb       	bst	r25, 7
    118e:	07 2e       	mov	r0, r23
    1190:	16 f4       	brtc	.+4      	; 0x1196 <__divmodhi4+0xa>
    1192:	00 94       	com	r0
    1194:	07 d0       	rcall	.+14     	; 0x11a4 <__divmodhi4_neg1>
    1196:	77 fd       	sbrc	r23, 7
    1198:	09 d0       	rcall	.+18     	; 0x11ac <__divmodhi4_neg2>
    119a:	0e 94 ef 08 	call	0x11de	; 0x11de <__udivmodhi4>
    119e:	07 fc       	sbrc	r0, 7
    11a0:	05 d0       	rcall	.+10     	; 0x11ac <__divmodhi4_neg2>
    11a2:	3e f4       	brtc	.+14     	; 0x11b2 <__divmodhi4_exit>

000011a4 <__divmodhi4_neg1>:
    11a4:	90 95       	com	r25
    11a6:	81 95       	neg	r24
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	08 95       	ret

000011ac <__divmodhi4_neg2>:
    11ac:	70 95       	com	r23
    11ae:	61 95       	neg	r22
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255

000011b2 <__divmodhi4_exit>:
    11b2:	08 95       	ret

000011b4 <__tablejump2__>:
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	05 90       	lpm	r0, Z+
    11ba:	f4 91       	lpm	r31, Z
    11bc:	e0 2d       	mov	r30, r0
    11be:	09 94       	ijmp

000011c0 <__umulhisi3>:
    11c0:	a2 9f       	mul	r26, r18
    11c2:	b0 01       	movw	r22, r0
    11c4:	b3 9f       	mul	r27, r19
    11c6:	c0 01       	movw	r24, r0
    11c8:	a3 9f       	mul	r26, r19
    11ca:	70 0d       	add	r23, r0
    11cc:	81 1d       	adc	r24, r1
    11ce:	11 24       	eor	r1, r1
    11d0:	91 1d       	adc	r25, r1
    11d2:	b2 9f       	mul	r27, r18
    11d4:	70 0d       	add	r23, r0
    11d6:	81 1d       	adc	r24, r1
    11d8:	11 24       	eor	r1, r1
    11da:	91 1d       	adc	r25, r1
    11dc:	08 95       	ret

000011de <__udivmodhi4>:
    11de:	aa 1b       	sub	r26, r26
    11e0:	bb 1b       	sub	r27, r27
    11e2:	51 e1       	ldi	r21, 0x11	; 17
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <__udivmodhi4_ep>

000011e6 <__udivmodhi4_loop>:
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	a6 17       	cp	r26, r22
    11ec:	b7 07       	cpc	r27, r23
    11ee:	10 f0       	brcs	.+4      	; 0x11f4 <__udivmodhi4_ep>
    11f0:	a6 1b       	sub	r26, r22
    11f2:	b7 0b       	sbc	r27, r23

000011f4 <__udivmodhi4_ep>:
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	5a 95       	dec	r21
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__udivmodhi4_loop>
    11fc:	80 95       	com	r24
    11fe:	90 95       	com	r25
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	08 95       	ret

00001206 <__subsf3>:
    1206:	50 58       	subi	r21, 0x80	; 128

00001208 <__addsf3>:
    1208:	bb 27       	eor	r27, r27
    120a:	aa 27       	eor	r26, r26
    120c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3x>
    1210:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_round>
    1214:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_pscA>
    1218:	38 f0       	brcs	.+14     	; 0x1228 <__addsf3+0x20>
    121a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscB>
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__addsf3+0x20>
    1220:	39 f4       	brne	.+14     	; 0x1230 <__addsf3+0x28>
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	19 f4       	brne	.+6      	; 0x122c <__addsf3+0x24>
    1226:	26 f4       	brtc	.+8      	; 0x1230 <__addsf3+0x28>
    1228:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__fp_nan>
    122c:	0e f4       	brtc	.+2      	; 0x1230 <__addsf3+0x28>
    122e:	e0 95       	com	r30
    1230:	e7 fb       	bst	r30, 7
    1232:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__fp_inf>

00001236 <__addsf3x>:
    1236:	e9 2f       	mov	r30, r25
    1238:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_split3>
    123c:	58 f3       	brcs	.-42     	; 0x1214 <__addsf3+0xc>
    123e:	ba 17       	cp	r27, r26
    1240:	62 07       	cpc	r22, r18
    1242:	73 07       	cpc	r23, r19
    1244:	84 07       	cpc	r24, r20
    1246:	95 07       	cpc	r25, r21
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__addsf3x+0x1c>
    124a:	79 f4       	brne	.+30     	; 0x126a <__addsf3x+0x34>
    124c:	a6 f5       	brtc	.+104    	; 0x12b6 <__addsf3x+0x80>
    124e:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__fp_zero>
    1252:	0e f4       	brtc	.+2      	; 0x1256 <__addsf3x+0x20>
    1254:	e0 95       	com	r30
    1256:	0b 2e       	mov	r0, r27
    1258:	ba 2f       	mov	r27, r26
    125a:	a0 2d       	mov	r26, r0
    125c:	0b 01       	movw	r0, r22
    125e:	b9 01       	movw	r22, r18
    1260:	90 01       	movw	r18, r0
    1262:	0c 01       	movw	r0, r24
    1264:	ca 01       	movw	r24, r20
    1266:	a0 01       	movw	r20, r0
    1268:	11 24       	eor	r1, r1
    126a:	ff 27       	eor	r31, r31
    126c:	59 1b       	sub	r21, r25
    126e:	99 f0       	breq	.+38     	; 0x1296 <__addsf3x+0x60>
    1270:	59 3f       	cpi	r21, 0xF9	; 249
    1272:	50 f4       	brcc	.+20     	; 0x1288 <__addsf3x+0x52>
    1274:	50 3e       	cpi	r21, 0xE0	; 224
    1276:	68 f1       	brcs	.+90     	; 0x12d2 <__addsf3x+0x9c>
    1278:	1a 16       	cp	r1, r26
    127a:	f0 40       	sbci	r31, 0x00	; 0
    127c:	a2 2f       	mov	r26, r18
    127e:	23 2f       	mov	r18, r19
    1280:	34 2f       	mov	r19, r20
    1282:	44 27       	eor	r20, r20
    1284:	58 5f       	subi	r21, 0xF8	; 248
    1286:	f3 cf       	rjmp	.-26     	; 0x126e <__addsf3x+0x38>
    1288:	46 95       	lsr	r20
    128a:	37 95       	ror	r19
    128c:	27 95       	ror	r18
    128e:	a7 95       	ror	r26
    1290:	f0 40       	sbci	r31, 0x00	; 0
    1292:	53 95       	inc	r21
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__addsf3x+0x52>
    1296:	7e f4       	brtc	.+30     	; 0x12b6 <__addsf3x+0x80>
    1298:	1f 16       	cp	r1, r31
    129a:	ba 0b       	sbc	r27, r26
    129c:	62 0b       	sbc	r22, r18
    129e:	73 0b       	sbc	r23, r19
    12a0:	84 0b       	sbc	r24, r20
    12a2:	ba f0       	brmi	.+46     	; 0x12d2 <__addsf3x+0x9c>
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	a1 f0       	breq	.+40     	; 0x12d0 <__addsf3x+0x9a>
    12a8:	ff 0f       	add	r31, r31
    12aa:	bb 1f       	adc	r27, r27
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	c2 f7       	brpl	.-16     	; 0x12a4 <__addsf3x+0x6e>
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <__addsf3x+0x9c>
    12b6:	ba 0f       	add	r27, r26
    12b8:	62 1f       	adc	r22, r18
    12ba:	73 1f       	adc	r23, r19
    12bc:	84 1f       	adc	r24, r20
    12be:	48 f4       	brcc	.+18     	; 0x12d2 <__addsf3x+0x9c>
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__addsf3x+0x9a>
    12ce:	b0 cf       	rjmp	.-160    	; 0x1230 <__addsf3+0x28>
    12d0:	93 95       	inc	r25
    12d2:	88 0f       	add	r24, r24
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__addsf3x+0xa2>
    12d6:	99 27       	eor	r25, r25
    12d8:	ee 0f       	add	r30, r30
    12da:	97 95       	ror	r25
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret

000012e0 <__divsf3>:
    12e0:	0e 94 84 09 	call	0x1308	; 0x1308 <__divsf3x>
    12e4:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_round>
    12e8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscB>
    12ec:	58 f0       	brcs	.+22     	; 0x1304 <__divsf3+0x24>
    12ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_pscA>
    12f2:	40 f0       	brcs	.+16     	; 0x1304 <__divsf3+0x24>
    12f4:	29 f4       	brne	.+10     	; 0x1300 <__divsf3+0x20>
    12f6:	5f 3f       	cpi	r21, 0xFF	; 255
    12f8:	29 f0       	breq	.+10     	; 0x1304 <__divsf3+0x24>
    12fa:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__fp_inf>
    12fe:	51 11       	cpse	r21, r1
    1300:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_szero>
    1304:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__fp_nan>

00001308 <__divsf3x>:
    1308:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_split3>
    130c:	68 f3       	brcs	.-38     	; 0x12e8 <__divsf3+0x8>

0000130e <__divsf3_pse>:
    130e:	99 23       	and	r25, r25
    1310:	b1 f3       	breq	.-20     	; 0x12fe <__divsf3+0x1e>
    1312:	55 23       	and	r21, r21
    1314:	91 f3       	breq	.-28     	; 0x12fa <__divsf3+0x1a>
    1316:	95 1b       	sub	r25, r21
    1318:	55 0b       	sbc	r21, r21
    131a:	bb 27       	eor	r27, r27
    131c:	aa 27       	eor	r26, r26
    131e:	62 17       	cp	r22, r18
    1320:	73 07       	cpc	r23, r19
    1322:	84 07       	cpc	r24, r20
    1324:	38 f0       	brcs	.+14     	; 0x1334 <__divsf3_pse+0x26>
    1326:	9f 5f       	subi	r25, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	44 1f       	adc	r20, r20
    1330:	aa 1f       	adc	r26, r26
    1332:	a9 f3       	breq	.-22     	; 0x131e <__divsf3_pse+0x10>
    1334:	35 d0       	rcall	.+106    	; 0x13a0 <__divsf3_pse+0x92>
    1336:	0e 2e       	mov	r0, r30
    1338:	3a f0       	brmi	.+14     	; 0x1348 <__divsf3_pse+0x3a>
    133a:	e0 e8       	ldi	r30, 0x80	; 128
    133c:	32 d0       	rcall	.+100    	; 0x13a2 <__divsf3_pse+0x94>
    133e:	91 50       	subi	r25, 0x01	; 1
    1340:	50 40       	sbci	r21, 0x00	; 0
    1342:	e6 95       	lsr	r30
    1344:	00 1c       	adc	r0, r0
    1346:	ca f7       	brpl	.-14     	; 0x133a <__divsf3_pse+0x2c>
    1348:	2b d0       	rcall	.+86     	; 0x13a0 <__divsf3_pse+0x92>
    134a:	fe 2f       	mov	r31, r30
    134c:	29 d0       	rcall	.+82     	; 0x13a0 <__divsf3_pse+0x92>
    134e:	66 0f       	add	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	88 1f       	adc	r24, r24
    1354:	bb 1f       	adc	r27, r27
    1356:	26 17       	cp	r18, r22
    1358:	37 07       	cpc	r19, r23
    135a:	48 07       	cpc	r20, r24
    135c:	ab 07       	cpc	r26, r27
    135e:	b0 e8       	ldi	r27, 0x80	; 128
    1360:	09 f0       	breq	.+2      	; 0x1364 <__divsf3_pse+0x56>
    1362:	bb 0b       	sbc	r27, r27
    1364:	80 2d       	mov	r24, r0
    1366:	bf 01       	movw	r22, r30
    1368:	ff 27       	eor	r31, r31
    136a:	93 58       	subi	r25, 0x83	; 131
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	3a f0       	brmi	.+14     	; 0x137e <__divsf3_pse+0x70>
    1370:	9e 3f       	cpi	r25, 0xFE	; 254
    1372:	51 05       	cpc	r21, r1
    1374:	78 f0       	brcs	.+30     	; 0x1394 <__divsf3_pse+0x86>
    1376:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__fp_inf>
    137a:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_szero>
    137e:	5f 3f       	cpi	r21, 0xFF	; 255
    1380:	e4 f3       	brlt	.-8      	; 0x137a <__divsf3_pse+0x6c>
    1382:	98 3e       	cpi	r25, 0xE8	; 232
    1384:	d4 f3       	brlt	.-12     	; 0x137a <__divsf3_pse+0x6c>
    1386:	86 95       	lsr	r24
    1388:	77 95       	ror	r23
    138a:	67 95       	ror	r22
    138c:	b7 95       	ror	r27
    138e:	f7 95       	ror	r31
    1390:	9f 5f       	subi	r25, 0xFF	; 255
    1392:	c9 f7       	brne	.-14     	; 0x1386 <__divsf3_pse+0x78>
    1394:	88 0f       	add	r24, r24
    1396:	91 1d       	adc	r25, r1
    1398:	96 95       	lsr	r25
    139a:	87 95       	ror	r24
    139c:	97 f9       	bld	r25, 7
    139e:	08 95       	ret
    13a0:	e1 e0       	ldi	r30, 0x01	; 1
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	bb 1f       	adc	r27, r27
    13aa:	62 17       	cp	r22, r18
    13ac:	73 07       	cpc	r23, r19
    13ae:	84 07       	cpc	r24, r20
    13b0:	ba 07       	cpc	r27, r26
    13b2:	20 f0       	brcs	.+8      	; 0x13bc <__divsf3_pse+0xae>
    13b4:	62 1b       	sub	r22, r18
    13b6:	73 0b       	sbc	r23, r19
    13b8:	84 0b       	sbc	r24, r20
    13ba:	ba 0b       	sbc	r27, r26
    13bc:	ee 1f       	adc	r30, r30
    13be:	88 f7       	brcc	.-30     	; 0x13a2 <__divsf3_pse+0x94>
    13c0:	e0 95       	com	r30
    13c2:	08 95       	ret

000013c4 <__fixsfsi>:
    13c4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixunssfsi>
    13c8:	68 94       	set
    13ca:	b1 11       	cpse	r27, r1
    13cc:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_szero>
    13d0:	08 95       	ret

000013d2 <__fixunssfsi>:
    13d2:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_splitA>
    13d6:	88 f0       	brcs	.+34     	; 0x13fa <__fixunssfsi+0x28>
    13d8:	9f 57       	subi	r25, 0x7F	; 127
    13da:	98 f0       	brcs	.+38     	; 0x1402 <__fixunssfsi+0x30>
    13dc:	b9 2f       	mov	r27, r25
    13de:	99 27       	eor	r25, r25
    13e0:	b7 51       	subi	r27, 0x17	; 23
    13e2:	b0 f0       	brcs	.+44     	; 0x1410 <__fixunssfsi+0x3e>
    13e4:	e1 f0       	breq	.+56     	; 0x141e <__fixunssfsi+0x4c>
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	1a f0       	brmi	.+6      	; 0x13f6 <__fixunssfsi+0x24>
    13f0:	ba 95       	dec	r27
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__fixunssfsi+0x14>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <__fixunssfsi+0x4c>
    13f6:	b1 30       	cpi	r27, 0x01	; 1
    13f8:	91 f0       	breq	.+36     	; 0x141e <__fixunssfsi+0x4c>
    13fa:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fp_zero>
    13fe:	b1 e0       	ldi	r27, 0x01	; 1
    1400:	08 95       	ret
    1402:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__fp_zero>
    1406:	67 2f       	mov	r22, r23
    1408:	78 2f       	mov	r23, r24
    140a:	88 27       	eor	r24, r24
    140c:	b8 5f       	subi	r27, 0xF8	; 248
    140e:	39 f0       	breq	.+14     	; 0x141e <__fixunssfsi+0x4c>
    1410:	b9 3f       	cpi	r27, 0xF9	; 249
    1412:	cc f3       	brlt	.-14     	; 0x1406 <__fixunssfsi+0x34>
    1414:	86 95       	lsr	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b3 95       	inc	r27
    141c:	d9 f7       	brne	.-10     	; 0x1414 <__fixunssfsi+0x42>
    141e:	3e f4       	brtc	.+14     	; 0x142e <__fixunssfsi+0x5c>
    1420:	90 95       	com	r25
    1422:	80 95       	com	r24
    1424:	70 95       	com	r23
    1426:	61 95       	neg	r22
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	8f 4f       	sbci	r24, 0xFF	; 255
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	08 95       	ret

00001430 <__floatunsisf>:
    1430:	e8 94       	clt
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <__floatsisf+0x12>

00001434 <__floatsisf>:
    1434:	97 fb       	bst	r25, 7
    1436:	3e f4       	brtc	.+14     	; 0x1446 <__floatsisf+0x12>
    1438:	90 95       	com	r25
    143a:	80 95       	com	r24
    143c:	70 95       	com	r23
    143e:	61 95       	neg	r22
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	99 23       	and	r25, r25
    1448:	a9 f0       	breq	.+42     	; 0x1474 <__floatsisf+0x40>
    144a:	f9 2f       	mov	r31, r25
    144c:	96 e9       	ldi	r25, 0x96	; 150
    144e:	bb 27       	eor	r27, r27
    1450:	93 95       	inc	r25
    1452:	f6 95       	lsr	r31
    1454:	87 95       	ror	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f1 11       	cpse	r31, r1
    145e:	f8 cf       	rjmp	.-16     	; 0x1450 <__floatsisf+0x1c>
    1460:	fa f4       	brpl	.+62     	; 0x14a0 <__floatsisf+0x6c>
    1462:	bb 0f       	add	r27, r27
    1464:	11 f4       	brne	.+4      	; 0x146a <__floatsisf+0x36>
    1466:	60 ff       	sbrs	r22, 0
    1468:	1b c0       	rjmp	.+54     	; 0x14a0 <__floatsisf+0x6c>
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	16 c0       	rjmp	.+44     	; 0x14a0 <__floatsisf+0x6c>
    1474:	88 23       	and	r24, r24
    1476:	11 f0       	breq	.+4      	; 0x147c <__floatsisf+0x48>
    1478:	96 e9       	ldi	r25, 0x96	; 150
    147a:	11 c0       	rjmp	.+34     	; 0x149e <__floatsisf+0x6a>
    147c:	77 23       	and	r23, r23
    147e:	21 f0       	breq	.+8      	; 0x1488 <__floatsisf+0x54>
    1480:	9e e8       	ldi	r25, 0x8E	; 142
    1482:	87 2f       	mov	r24, r23
    1484:	76 2f       	mov	r23, r22
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <__floatsisf+0x5e>
    1488:	66 23       	and	r22, r22
    148a:	71 f0       	breq	.+28     	; 0x14a8 <__floatsisf+0x74>
    148c:	96 e8       	ldi	r25, 0x86	; 134
    148e:	86 2f       	mov	r24, r22
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	2a f0       	brmi	.+10     	; 0x14a0 <__floatsisf+0x6c>
    1496:	9a 95       	dec	r25
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	da f7       	brpl	.-10     	; 0x1496 <__floatsisf+0x62>
    14a0:	88 0f       	add	r24, r24
    14a2:	96 95       	lsr	r25
    14a4:	87 95       	ror	r24
    14a6:	97 f9       	bld	r25, 7
    14a8:	08 95       	ret

000014aa <__fp_inf>:
    14aa:	97 f9       	bld	r25, 7
    14ac:	9f 67       	ori	r25, 0x7F	; 127
    14ae:	80 e8       	ldi	r24, 0x80	; 128
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	08 95       	ret

000014b6 <__fp_nan>:
    14b6:	9f ef       	ldi	r25, 0xFF	; 255
    14b8:	80 ec       	ldi	r24, 0xC0	; 192
    14ba:	08 95       	ret

000014bc <__fp_pscA>:
    14bc:	00 24       	eor	r0, r0
    14be:	0a 94       	dec	r0
    14c0:	16 16       	cp	r1, r22
    14c2:	17 06       	cpc	r1, r23
    14c4:	18 06       	cpc	r1, r24
    14c6:	09 06       	cpc	r0, r25
    14c8:	08 95       	ret

000014ca <__fp_pscB>:
    14ca:	00 24       	eor	r0, r0
    14cc:	0a 94       	dec	r0
    14ce:	12 16       	cp	r1, r18
    14d0:	13 06       	cpc	r1, r19
    14d2:	14 06       	cpc	r1, r20
    14d4:	05 06       	cpc	r0, r21
    14d6:	08 95       	ret

000014d8 <__fp_round>:
    14d8:	09 2e       	mov	r0, r25
    14da:	03 94       	inc	r0
    14dc:	00 0c       	add	r0, r0
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__fp_round+0xc>
    14e0:	88 23       	and	r24, r24
    14e2:	52 f0       	brmi	.+20     	; 0x14f8 <__fp_round+0x20>
    14e4:	bb 0f       	add	r27, r27
    14e6:	40 f4       	brcc	.+16     	; 0x14f8 <__fp_round+0x20>
    14e8:	bf 2b       	or	r27, r31
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <__fp_round+0x18>
    14ec:	60 ff       	sbrs	r22, 0
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <__fp_round+0x20>
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	8f 4f       	sbci	r24, 0xFF	; 255
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	08 95       	ret

000014fa <__fp_split3>:
    14fa:	57 fd       	sbrc	r21, 7
    14fc:	90 58       	subi	r25, 0x80	; 128
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	59 f0       	breq	.+22     	; 0x151a <__fp_splitA+0x10>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	71 f0       	breq	.+28     	; 0x1524 <__fp_splitA+0x1a>
    1508:	47 95       	ror	r20

0000150a <__fp_splitA>:
    150a:	88 0f       	add	r24, r24
    150c:	97 fb       	bst	r25, 7
    150e:	99 1f       	adc	r25, r25
    1510:	61 f0       	breq	.+24     	; 0x152a <__fp_splitA+0x20>
    1512:	9f 3f       	cpi	r25, 0xFF	; 255
    1514:	79 f0       	breq	.+30     	; 0x1534 <__fp_splitA+0x2a>
    1516:	87 95       	ror	r24
    1518:	08 95       	ret
    151a:	12 16       	cp	r1, r18
    151c:	13 06       	cpc	r1, r19
    151e:	14 06       	cpc	r1, r20
    1520:	55 1f       	adc	r21, r21
    1522:	f2 cf       	rjmp	.-28     	; 0x1508 <__fp_split3+0xe>
    1524:	46 95       	lsr	r20
    1526:	f1 df       	rcall	.-30     	; 0x150a <__fp_splitA>
    1528:	08 c0       	rjmp	.+16     	; 0x153a <__fp_splitA+0x30>
    152a:	16 16       	cp	r1, r22
    152c:	17 06       	cpc	r1, r23
    152e:	18 06       	cpc	r1, r24
    1530:	99 1f       	adc	r25, r25
    1532:	f1 cf       	rjmp	.-30     	; 0x1516 <__fp_splitA+0xc>
    1534:	86 95       	lsr	r24
    1536:	71 05       	cpc	r23, r1
    1538:	61 05       	cpc	r22, r1
    153a:	08 94       	sec
    153c:	08 95       	ret

0000153e <__fp_zero>:
    153e:	e8 94       	clt

00001540 <__fp_szero>:
    1540:	bb 27       	eor	r27, r27
    1542:	66 27       	eor	r22, r22
    1544:	77 27       	eor	r23, r23
    1546:	cb 01       	movw	r24, r22
    1548:	97 f9       	bld	r25, 7
    154a:	08 95       	ret

0000154c <__mulsf3>:
    154c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__mulsf3x>
    1550:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_round>
    1554:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_pscA>
    1558:	38 f0       	brcs	.+14     	; 0x1568 <__mulsf3+0x1c>
    155a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fp_pscB>
    155e:	20 f0       	brcs	.+8      	; 0x1568 <__mulsf3+0x1c>
    1560:	95 23       	and	r25, r21
    1562:	11 f0       	breq	.+4      	; 0x1568 <__mulsf3+0x1c>
    1564:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__fp_inf>
    1568:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__fp_nan>
    156c:	11 24       	eor	r1, r1
    156e:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_szero>

00001572 <__mulsf3x>:
    1572:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_split3>
    1576:	70 f3       	brcs	.-36     	; 0x1554 <__mulsf3+0x8>

00001578 <__mulsf3_pse>:
    1578:	95 9f       	mul	r25, r21
    157a:	c1 f3       	breq	.-16     	; 0x156c <__mulsf3+0x20>
    157c:	95 0f       	add	r25, r21
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	55 1f       	adc	r21, r21
    1582:	62 9f       	mul	r22, r18
    1584:	f0 01       	movw	r30, r0
    1586:	72 9f       	mul	r23, r18
    1588:	bb 27       	eor	r27, r27
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	63 9f       	mul	r22, r19
    1590:	aa 27       	eor	r26, r26
    1592:	f0 0d       	add	r31, r0
    1594:	b1 1d       	adc	r27, r1
    1596:	aa 1f       	adc	r26, r26
    1598:	64 9f       	mul	r22, r20
    159a:	66 27       	eor	r22, r22
    159c:	b0 0d       	add	r27, r0
    159e:	a1 1d       	adc	r26, r1
    15a0:	66 1f       	adc	r22, r22
    15a2:	82 9f       	mul	r24, r18
    15a4:	22 27       	eor	r18, r18
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	73 9f       	mul	r23, r19
    15ae:	b0 0d       	add	r27, r0
    15b0:	a1 1d       	adc	r26, r1
    15b2:	62 1f       	adc	r22, r18
    15b4:	83 9f       	mul	r24, r19
    15b6:	a0 0d       	add	r26, r0
    15b8:	61 1d       	adc	r22, r1
    15ba:	22 1f       	adc	r18, r18
    15bc:	74 9f       	mul	r23, r20
    15be:	33 27       	eor	r19, r19
    15c0:	a0 0d       	add	r26, r0
    15c2:	61 1d       	adc	r22, r1
    15c4:	23 1f       	adc	r18, r19
    15c6:	84 9f       	mul	r24, r20
    15c8:	60 0d       	add	r22, r0
    15ca:	21 1d       	adc	r18, r1
    15cc:	82 2f       	mov	r24, r18
    15ce:	76 2f       	mov	r23, r22
    15d0:	6a 2f       	mov	r22, r26
    15d2:	11 24       	eor	r1, r1
    15d4:	9f 57       	subi	r25, 0x7F	; 127
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	9a f0       	brmi	.+38     	; 0x1600 <__mulsf3_pse+0x88>
    15da:	f1 f0       	breq	.+60     	; 0x1618 <__mulsf3_pse+0xa0>
    15dc:	88 23       	and	r24, r24
    15de:	4a f0       	brmi	.+18     	; 0x15f2 <__mulsf3_pse+0x7a>
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	91 50       	subi	r25, 0x01	; 1
    15ee:	50 40       	sbci	r21, 0x00	; 0
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__mulsf3_pse+0x64>
    15f2:	9e 3f       	cpi	r25, 0xFE	; 254
    15f4:	51 05       	cpc	r21, r1
    15f6:	80 f0       	brcs	.+32     	; 0x1618 <__mulsf3_pse+0xa0>
    15f8:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__fp_inf>
    15fc:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__fp_szero>
    1600:	5f 3f       	cpi	r21, 0xFF	; 255
    1602:	e4 f3       	brlt	.-8      	; 0x15fc <__mulsf3_pse+0x84>
    1604:	98 3e       	cpi	r25, 0xE8	; 232
    1606:	d4 f3       	brlt	.-12     	; 0x15fc <__mulsf3_pse+0x84>
    1608:	86 95       	lsr	r24
    160a:	77 95       	ror	r23
    160c:	67 95       	ror	r22
    160e:	b7 95       	ror	r27
    1610:	f7 95       	ror	r31
    1612:	e7 95       	ror	r30
    1614:	9f 5f       	subi	r25, 0xFF	; 255
    1616:	c1 f7       	brne	.-16     	; 0x1608 <__mulsf3_pse+0x90>
    1618:	fe 2b       	or	r31, r30
    161a:	88 0f       	add	r24, r24
    161c:	91 1d       	adc	r25, r1
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	97 f9       	bld	r25, 7
    1624:	08 95       	ret

00001626 <do_rand>:
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	ec 01       	movw	r28, r24
    163c:	68 81       	ld	r22, Y
    163e:	79 81       	ldd	r23, Y+1	; 0x01
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	61 15       	cp	r22, r1
    1646:	71 05       	cpc	r23, r1
    1648:	81 05       	cpc	r24, r1
    164a:	91 05       	cpc	r25, r1
    164c:	21 f4       	brne	.+8      	; 0x1656 <do_rand+0x30>
    164e:	64 e2       	ldi	r22, 0x24	; 36
    1650:	79 ed       	ldi	r23, 0xD9	; 217
    1652:	8b e5       	ldi	r24, 0x5B	; 91
    1654:	97 e0       	ldi	r25, 0x07	; 7
    1656:	2d e1       	ldi	r18, 0x1D	; 29
    1658:	33 ef       	ldi	r19, 0xF3	; 243
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	0e 94 85 0b 	call	0x170a	; 0x170a <__divmodsi4>
    1662:	49 01       	movw	r8, r18
    1664:	5a 01       	movw	r10, r20
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	a7 ea       	ldi	r26, 0xA7	; 167
    166c:	b1 e4       	ldi	r27, 0x41	; 65
    166e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__muluhisi3>
    1672:	6b 01       	movw	r12, r22
    1674:	7c 01       	movw	r14, r24
    1676:	ac ee       	ldi	r26, 0xEC	; 236
    1678:	b4 ef       	ldi	r27, 0xF4	; 244
    167a:	a5 01       	movw	r20, r10
    167c:	94 01       	movw	r18, r8
    167e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__mulohisi3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8c 0d       	add	r24, r12
    1688:	9d 1d       	adc	r25, r13
    168a:	ae 1d       	adc	r26, r14
    168c:	bf 1d       	adc	r27, r15
    168e:	b7 ff       	sbrs	r27, 7
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <do_rand+0x72>
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	a1 09       	sbc	r26, r1
    1696:	b0 48       	sbci	r27, 0x80	; 128
    1698:	88 83       	st	Y, r24
    169a:	99 83       	std	Y+1, r25	; 0x01
    169c:	aa 83       	std	Y+2, r26	; 0x02
    169e:	bb 83       	std	Y+3, r27	; 0x03
    16a0:	9f 77       	andi	r25, 0x7F	; 127
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	08 95       	ret

000016b8 <rand_r>:
    16b8:	0e 94 13 0b 	call	0x1626	; 0x1626 <do_rand>
    16bc:	08 95       	ret

000016be <rand>:
    16be:	87 e0       	ldi	r24, 0x07	; 7
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 13 0b 	call	0x1626	; 0x1626 <do_rand>
    16c6:	08 95       	ret

000016c8 <srand>:
    16c8:	a0 e0       	ldi	r26, 0x00	; 0
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    16d0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    16d4:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    16d8:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    16dc:	08 95       	ret

000016de <eeprom_read_byte>:
    16de:	f9 99       	sbic	0x1f, 1	; 31
    16e0:	fe cf       	rjmp	.-4      	; 0x16de <eeprom_read_byte>
    16e2:	92 bd       	out	0x22, r25	; 34
    16e4:	81 bd       	out	0x21, r24	; 33
    16e6:	f8 9a       	sbi	0x1f, 0	; 31
    16e8:	99 27       	eor	r25, r25
    16ea:	80 b5       	in	r24, 0x20	; 32
    16ec:	08 95       	ret

000016ee <eeprom_write_byte>:
    16ee:	26 2f       	mov	r18, r22

000016f0 <eeprom_write_r18>:
    16f0:	f9 99       	sbic	0x1f, 1	; 31
    16f2:	fe cf       	rjmp	.-4      	; 0x16f0 <eeprom_write_r18>
    16f4:	1f ba       	out	0x1f, r1	; 31
    16f6:	92 bd       	out	0x22, r25	; 34
    16f8:	81 bd       	out	0x21, r24	; 33
    16fa:	20 bd       	out	0x20, r18	; 32
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	fa 9a       	sbi	0x1f, 2	; 31
    1702:	f9 9a       	sbi	0x1f, 1	; 31
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	08 95       	ret

0000170a <__divmodsi4>:
    170a:	05 2e       	mov	r0, r21
    170c:	97 fb       	bst	r25, 7
    170e:	1e f4       	brtc	.+6      	; 0x1716 <__divmodsi4+0xc>
    1710:	00 94       	com	r0
    1712:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__negsi2>
    1716:	57 fd       	sbrc	r21, 7
    1718:	07 d0       	rcall	.+14     	; 0x1728 <__divmodsi4_neg2>
    171a:	0e 94 b7 0b 	call	0x176e	; 0x176e <__udivmodsi4>
    171e:	07 fc       	sbrc	r0, 7
    1720:	03 d0       	rcall	.+6      	; 0x1728 <__divmodsi4_neg2>
    1722:	4e f4       	brtc	.+18     	; 0x1736 <__divmodsi4_exit>
    1724:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__negsi2>

00001728 <__divmodsi4_neg2>:
    1728:	50 95       	com	r21
    172a:	40 95       	com	r20
    172c:	30 95       	com	r19
    172e:	21 95       	neg	r18
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	4f 4f       	sbci	r20, 0xFF	; 255
    1734:	5f 4f       	sbci	r21, 0xFF	; 255

00001736 <__divmodsi4_exit>:
    1736:	08 95       	ret

00001738 <__negsi2>:
    1738:	90 95       	com	r25
    173a:	80 95       	com	r24
    173c:	70 95       	com	r23
    173e:	61 95       	neg	r22
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	08 95       	ret

00001748 <__muluhisi3>:
    1748:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__umulhisi3>
    174c:	a5 9f       	mul	r26, r21
    174e:	90 0d       	add	r25, r0
    1750:	b4 9f       	mul	r27, r20
    1752:	90 0d       	add	r25, r0
    1754:	a4 9f       	mul	r26, r20
    1756:	80 0d       	add	r24, r0
    1758:	91 1d       	adc	r25, r1
    175a:	11 24       	eor	r1, r1
    175c:	08 95       	ret

0000175e <__mulshisi3>:
    175e:	b7 ff       	sbrs	r27, 7
    1760:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__muluhisi3>

00001764 <__mulohisi3>:
    1764:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__muluhisi3>
    1768:	82 1b       	sub	r24, r18
    176a:	93 0b       	sbc	r25, r19
    176c:	08 95       	ret

0000176e <__udivmodsi4>:
    176e:	a1 e2       	ldi	r26, 0x21	; 33
    1770:	1a 2e       	mov	r1, r26
    1772:	aa 1b       	sub	r26, r26
    1774:	bb 1b       	sub	r27, r27
    1776:	fd 01       	movw	r30, r26
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <__udivmodsi4_ep>

0000177a <__udivmodsi4_loop>:
    177a:	aa 1f       	adc	r26, r26
    177c:	bb 1f       	adc	r27, r27
    177e:	ee 1f       	adc	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	a2 17       	cp	r26, r18
    1784:	b3 07       	cpc	r27, r19
    1786:	e4 07       	cpc	r30, r20
    1788:	f5 07       	cpc	r31, r21
    178a:	20 f0       	brcs	.+8      	; 0x1794 <__udivmodsi4_ep>
    178c:	a2 1b       	sub	r26, r18
    178e:	b3 0b       	sbc	r27, r19
    1790:	e4 0b       	sbc	r30, r20
    1792:	f5 0b       	sbc	r31, r21

00001794 <__udivmodsi4_ep>:
    1794:	66 1f       	adc	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	1a 94       	dec	r1
    179e:	69 f7       	brne	.-38     	; 0x177a <__udivmodsi4_loop>
    17a0:	60 95       	com	r22
    17a2:	70 95       	com	r23
    17a4:	80 95       	com	r24
    17a6:	90 95       	com	r25
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	bd 01       	movw	r22, r26
    17ae:	cf 01       	movw	r24, r30
    17b0:	08 95       	ret

000017b2 <_exit>:
    17b2:	f8 94       	cli

000017b4 <__stop_program>:
    17b4:	ff cf       	rjmp	.-2      	; 0x17b4 <__stop_program>
