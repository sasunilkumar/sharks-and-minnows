
build/ohc.elf:     file format elf32-avr


Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7008:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    700c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7010:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7014:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7018:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    701c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7020:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7024:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7028:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    702c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7030:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7034:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7038:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    703c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7040:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7044:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7048:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_18>
    704c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7050:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7054:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7058:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    705c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7060:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7064:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_clear_bss>:
    7074:	22 e0       	ldi	r18, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	01 c0       	rjmp	.+2      	; 0x707e <.do_clear_bss_start>

0000707c <.do_clear_bss_loop>:
    707c:	1d 92       	st	X+, r1

0000707e <.do_clear_bss_start>:
    707e:	a0 32       	cpi	r26, 0x20	; 32
    7080:	b2 07       	cpc	r27, r18
    7082:	e1 f7       	brne	.-8      	; 0x707c <.do_clear_bss_loop>
    7084:	0e 94 49 39 	call	0x7292	; 0x7292 <main>
    7088:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <_exit>

0000708c <__bad_interrupt>:
    708c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
    7090:	1f 92       	push	r1
    7092:	0f 92       	push	r0
    7094:	0f b6       	in	r0, 0x3f	; 63
    7096:	0f 92       	push	r0
    7098:	11 24       	eor	r1, r1
    709a:	2f 93       	push	r18
    709c:	3f 93       	push	r19
    709e:	8f 93       	push	r24
    70a0:	9f 93       	push	r25
    70a2:	af 93       	push	r26
    70a4:	bf 93       	push	r27
    70a6:	ef 93       	push	r30
    70a8:	ff 93       	push	r31
    uint8_t rx = UDR0;
    70aa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    packet_checksum ^= packet_buffer[packet_head];
    70ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <packet_head>
    70b2:	e9 2f       	mov	r30, r25
    70b4:	f0 e0       	ldi	r31, 0x00	; 0
    70b6:	eb 5f       	subi	r30, 0xFB	; 251
    70b8:	fe 4f       	sbci	r31, 0xFE	; 254
    70ba:	30 81       	ld	r19, Z
    70bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <packet_checksum>
    70c0:	82 27       	eor	r24, r18
    packet_buffer[packet_head] = rx;
    70c2:	20 83       	st	Z, r18
    packet_checksum ^= rx;
    70c4:	83 27       	eor	r24, r19
    70c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <packet_checksum>
    packet_head++;
    70ca:	9f 5f       	subi	r25, 0xFF	; 255
    if (packet_head >= PACKET_SIZE)
    70cc:	94 38       	cpi	r25, 0x84	; 132
    70ce:	18 f4       	brcc	.+6      	; 0x70d6 <__vector_18+0x46>
    uint8_t rx = UDR0;

    packet_checksum ^= packet_buffer[packet_head];
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
    packet_head++;
    70d0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <packet_head>
    70d4:	02 c0       	rjmp	.+4      	; 0x70da <__vector_18+0x4a>
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;
    70d6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <packet_head>

    if (packet_buffer[packet_head] == PACKET_HEADER) {
    70da:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <packet_head>
    70de:	30 e0       	ldi	r19, 0x00	; 0
    70e0:	f9 01       	movw	r30, r18
    70e2:	eb 5f       	subi	r30, 0xFB	; 251
    70e4:	fe 4f       	sbci	r31, 0xFE	; 254
    70e6:	90 81       	ld	r25, Z
    70e8:	95 35       	cpi	r25, 0x55	; 85
    70ea:	41 f5       	brne	.+80     	; 0x713c <__vector_18+0xac>
        if (packet_checksum == 0) {
    70ec:	81 11       	cpse	r24, r1
    70ee:	26 c0       	rjmp	.+76     	; 0x713c <__vector_18+0xac>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
    70f0:	84 e8       	ldi	r24, 0x84	; 132
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	82 1b       	sub	r24, r18
    70f6:	93 0b       	sbc	r25, r19
            for (i = 0; i < num; i++)
    70f8:	a8 e9       	ldi	r26, 0x98	; 152
    70fa:	b1 e0       	ldi	r27, 0x01	; 1
    70fc:	9d 01       	movw	r18, r26
    70fe:	28 59       	subi	r18, 0x98	; 152
    7100:	31 40       	sbci	r19, 0x01	; 1
    7102:	28 17       	cp	r18, r24
    7104:	39 07       	cpc	r19, r25
    7106:	18 f4       	brcc	.+6      	; 0x710e <__vector_18+0x7e>
                new_packet[i] = packet_buffer[i+packet_head];
    7108:	21 91       	ld	r18, Z+
    710a:	2d 93       	st	X+, r18
    710c:	f7 cf       	rjmp	.-18     	; 0x70fc <__vector_18+0x6c>
    710e:	dc 01       	movw	r26, r24
    7110:	a8 56       	subi	r26, 0x68	; 104
    7112:	be 4f       	sbci	r27, 0xFE	; 254

    if (packet_buffer[packet_head] == PACKET_HEADER) {
        if (packet_checksum == 0) {
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
            for (i = 0; i < num; i++)
    7114:	e5 e0       	ldi	r30, 0x05	; 5
    7116:	f1 e0       	ldi	r31, 0x01	; 1
    7118:	85 50       	subi	r24, 0x05	; 5
    711a:	91 40       	sbci	r25, 0x01	; 1
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
    711c:	9f 01       	movw	r18, r30
    711e:	28 0f       	add	r18, r24
    7120:	39 1f       	adc	r19, r25
    7122:	24 38       	cpi	r18, 0x84	; 132
    7124:	31 05       	cpc	r19, r1
    7126:	18 f4       	brcc	.+6      	; 0x712e <__vector_18+0x9e>
                new_packet[i] = packet_buffer[i-num];
    7128:	21 91       	ld	r18, Z+
    712a:	2d 93       	st	X+, r18
    712c:	f7 cf       	rjmp	.-18     	; 0x711c <__vector_18+0x8c>
            has_new_packet = 1;
    712e:	81 e0       	ldi	r24, 0x01	; 1
    7130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <has_new_packet>
            packet_type = new_packet[1];
    7134:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <new_packet+0x1>
    7138:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <packet_type>
        }
    }
}
    713c:	ff 91       	pop	r31
    713e:	ef 91       	pop	r30
    7140:	bf 91       	pop	r27
    7142:	af 91       	pop	r26
    7144:	9f 91       	pop	r25
    7146:	8f 91       	pop	r24
    7148:	3f 91       	pop	r19
    714a:	2f 91       	pop	r18
    714c:	0f 90       	pop	r0
    714e:	0f be       	out	0x3f, r0	; 63
    7150:	0f 90       	pop	r0
    7152:	1f 90       	pop	r1
    7154:	18 95       	reti

00007156 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    7156:	fc 01       	movw	r30, r24
    7158:	9c 01       	movw	r18, r24
    715a:	26 5f       	subi	r18, 0xF6	; 246
    715c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    715e:	8f ef       	ldi	r24, 0xFF	; 255
    7160:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    7162:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    7164:	84 27       	eor	r24, r20
    7166:	08 2e       	mov	r0, r24
    7168:	82 95       	swap	r24
    716a:	80 7f       	andi	r24, 0xF0	; 240
    716c:	80 25       	eor	r24, r0
    716e:	09 2e       	mov	r0, r25
    7170:	98 2f       	mov	r25, r24
    7172:	82 95       	swap	r24
    7174:	8f 70       	andi	r24, 0x0F	; 15
    7176:	08 26       	eor	r0, r24
    7178:	86 95       	lsr	r24
    717a:	98 27       	eor	r25, r24
    717c:	89 27       	eor	r24, r25
    717e:	88 0f       	add	r24, r24
    7180:	88 0f       	add	r24, r24
    7182:	88 0f       	add	r24, r24
    7184:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    7186:	e2 17       	cp	r30, r18
    7188:	f3 07       	cpc	r31, r19
    718a:	59 f7       	brne	.-42     	; 0x7162 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    718c:	08 95       	ret

0000718e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    718e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    7190:	aa b1       	in	r26, 0x0a	; 10

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    7192:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tx_mask>
    or tmpreg1, ddrreg
    7196:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    7198:	2a b9       	out	0x0a, r18	; 10

    ldi tmpreg1, 0x01
    719a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    719c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    71a0:	20 30       	cpi	r18, 0x00	; 0
    71a2:	29 f0       	breq	.+10     	; 0x71ae <message_send+0x20>
    71a4:	00 00       	nop
    71a6:	2b b1       	in	r18, 0x0b	; 11
    71a8:	23 2b       	or	r18, r19
    71aa:	2b b9       	out	0x0b, r18	; 11
    71ac:	04 c0       	rjmp	.+8      	; 0x71b6 <message_send+0x28>
    71ae:	00 00       	nop
    71b0:	00 00       	nop
    71b2:	00 00       	nop
    71b4:	00 c0       	rjmp	.+0      	; 0x71b6 <message_send+0x28>
    71b6:	00 00       	nop
    71b8:	00 00       	nop
    71ba:	00 00       	nop
    71bc:	30 95       	com	r19
    71be:	2b b1       	in	r18, 0x0b	; 11
    71c0:	23 23       	and	r18, r19
    71c2:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    71c4:	2e ea       	ldi	r18, 0xAE	; 174
    71c6:	2a 95       	dec	r18
    71c8:	f1 f7       	brne	.-4      	; 0x71c6 <message_send+0x38>

    ldi tmpreg1, rx_bitcycles*7/8
    71ca:	2b ee       	ldi	r18, 0xEB	; 235

000071cc <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    71cc:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    71ce:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    71d0:	0a c0       	rjmp	.+20     	; 0x71e6 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    71d2:	aa b9       	out	0x0a, r26	; 10
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    71d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
    71d8:	30 95       	com	r19
    in tmpreg1, IR_PORT
    71da:	2b b1       	in	r18, 0x0b	; 11
    and tmpreg1, tmpreg2
    71dc:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    71de:	2b b9       	out	0x0b, r18	; 11
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    71e0:	0f be       	out	0x3f, r0	; 63
    return 0
    71e2:	80 e0       	ldi	r24, 0x00	; 0
    71e4:	08 95       	ret

000071e6 <nocollision>:
nocollision:
    nop
    71e6:	00 00       	nop
    dec tmpreg1
    71e8:	2a 95       	dec	r18
    brne checkcollision
    71ea:	81 f7       	brne	.-32     	; 0x71cc <checkcollision>

    ldi tmpreg1, 0x01
    71ec:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    71ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    71f2:	20 30       	cpi	r18, 0x00	; 0
    71f4:	29 f0       	breq	.+10     	; 0x7200 <nocollision+0x1a>
    71f6:	00 00       	nop
    71f8:	2b b1       	in	r18, 0x0b	; 11
    71fa:	23 2b       	or	r18, r19
    71fc:	2b b9       	out	0x0b, r18	; 11
    71fe:	04 c0       	rjmp	.+8      	; 0x7208 <nocollision+0x22>
    7200:	00 00       	nop
    7202:	00 00       	nop
    7204:	00 00       	nop
    7206:	00 c0       	rjmp	.+0      	; 0x7208 <nocollision+0x22>
    7208:	00 00       	nop
    720a:	00 00       	nop
    720c:	00 00       	nop
    720e:	30 95       	com	r19
    7210:	2b b1       	in	r18, 0x0b	; 11
    7212:	23 23       	and	r18, r19
    7214:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (rx_bitcycles-irsend_cycles)
    7216:	00 00       	nop
    7218:	24 e5       	ldi	r18, 0x54	; 84
    721a:	2a 95       	dec	r18
    721c:	f1 f7       	brne	.-4      	; 0x721a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    721e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    7220:	8c e0       	ldi	r24, 0x0C	; 12

00007222 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    7222:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    7224:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    7226:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    7228:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    722a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    722c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    722e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    7230:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    7232:	50 e0       	ldi	r21, 0x00	; 0

00007234 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    7234:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    7236:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    7238:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    723a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    723c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    7240:	20 30       	cpi	r18, 0x00	; 0
    7242:	29 f0       	breq	.+10     	; 0x724e <sendbit+0x1a>
    7244:	00 00       	nop
    7246:	2b b1       	in	r18, 0x0b	; 11
    7248:	23 2b       	or	r18, r19
    724a:	2b b9       	out	0x0b, r18	; 11
    724c:	04 c0       	rjmp	.+8      	; 0x7256 <sendbit+0x22>
    724e:	00 00       	nop
    7250:	00 00       	nop
    7252:	00 00       	nop
    7254:	00 c0       	rjmp	.+0      	; 0x7256 <sendbit+0x22>
    7256:	00 00       	nop
    7258:	00 00       	nop
    725a:	00 00       	nop
    725c:	30 95       	com	r19
    725e:	2b b1       	in	r18, 0x0b	; 11
    7260:	23 23       	and	r18, r19
    7262:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    7264:	00 00       	nop
    7266:	21 e5       	ldi	r18, 0x51	; 81
    7268:	2a 95       	dec	r18
    726a:	f1 f7       	brne	.-4      	; 0x7268 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    726c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    726e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    7270:	9a 95       	dec	r25
    brne sendbit
    7272:	01 f7       	brne	.-64     	; 0x7234 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    7274:	8a 95       	dec	r24
    brne sendbyte
    7276:	a9 f6       	brne	.-86     	; 0x7222 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    7278:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    727a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    727c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    727e:	aa b9       	out	0x0a, r26	; 10

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    7280:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
    7284:	30 95       	com	r19
    in tmpreg1, IR_PORT
    7286:	2b b1       	in	r18, 0x0b	; 11
    and tmpreg1, tmpreg2
    7288:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    728a:	2b b9       	out	0x0b, r18	; 11

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    728c:	0f be       	out	0x3f, r0	; 63
    return 1
    728e:	81 e0       	ldi	r24, 0x01	; 1
    7290:	08 95       	ret

00007292 <main>:
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
    cli();
    7292:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
    7294:	53 9a       	sbi	0x0a, 3	; 10
    led_ddr |= led_mask;
    7296:	21 9a       	sbi	0x04, 1	; 4
    // Turn off all leds
    led_port &= ~led_mask;
    7298:	29 98       	cbi	0x05, 1	; 5
    ir_port &= ~ir_mask;
    729a:	5b 98       	cbi	0x0b, 3	; 11
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
    729c:	80 b7       	in	r24, 0x30	; 48
    729e:	80 68       	ori	r24, 0x80	; 128
    72a0:	80 bf       	out	0x30, r24	; 48

#ifndef ARDUINO
    //move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    72a2:	81 e0       	ldi	r24, 0x01	; 1
    72a4:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    72a6:	82 e0       	ldi	r24, 0x02	; 2
    72a8:	85 bf       	out	0x35, r24	; 53
    CLKPR = 1;
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
    72aa:	8c e0       	ldi	r24, 0x0C	; 12
    72ac:	90 e0       	ldi	r25, 0x00	; 0
    72ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    72b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
    72b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    72ba:	8d 7f       	andi	r24, 0xFD	; 253
    72bc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
    72c0:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    72c4:	86 60       	ori	r24, 0x06	; 6
    72c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
    72ca:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    72ce:	88 69       	ori	r24, 0x98	; 152
    72d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    sei();
    72d4:	78 94       	sei

    tx_mask = ir_mask;
    72d6:	88 e0       	ldi	r24, 0x08	; 8
    72d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx_mask>
    bootmsg = (bootmsg_t*)msg.data;
    72dc:	8b e8       	ldi	r24, 0x8B	; 139
    72de:	91 e0       	ldi	r25, 0x01	; 1
    72e0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <bootmsg+0x1>
    72e4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <bootmsg>
    gpsmsg = (gpsmsg_t*)msg.data;
    72e8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <gpsmsg+0x1>
    72ec:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <gpsmsg>
    rawmsg = (uint8_t*)&msg;
    72f0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <rawmsg+0x1>
    72f4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <rawmsg>
    72f8:	85 e0       	ldi	r24, 0x05	; 5

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
    72fa:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    72fc:	2f ef       	ldi	r18, 0xFF	; 255
    72fe:	31 ee       	ldi	r19, 0xE1	; 225
    7300:	94 e0       	ldi	r25, 0x04	; 4
    7302:	21 50       	subi	r18, 0x01	; 1
    7304:	30 40       	sbci	r19, 0x00	; 0
    7306:	90 40       	sbci	r25, 0x00	; 0
    7308:	e1 f7       	brne	.-8      	; 0x7302 <main+0x70>
    730a:	00 c0       	rjmp	.+0      	; 0x730c <main+0x7a>
    730c:	00 00       	nop
        _delay_ms(200);
        led_port &= ~led_mask;
    730e:	29 98       	cbi	0x05, 1	; 5
    7310:	af ef       	ldi	r26, 0xFF	; 255
    7312:	b1 ee       	ldi	r27, 0xE1	; 225
    7314:	24 e0       	ldi	r18, 0x04	; 4
    7316:	a1 50       	subi	r26, 0x01	; 1
    7318:	b0 40       	sbci	r27, 0x00	; 0
    731a:	20 40       	sbci	r18, 0x00	; 0
    731c:	e1 f7       	brne	.-8      	; 0x7316 <main+0x84>
    731e:	00 c0       	rjmp	.+0      	; 0x7320 <main+0x8e>
    7320:	00 00       	nop
    7322:	81 50       	subi	r24, 0x01	; 1
    gpsmsg = (gpsmsg_t*)msg.data;
    rawmsg = (uint8_t*)&msg;

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
    7324:	51 f7       	brne	.-44     	; 0x72fa <main+0x68>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    7326:	1a e0       	ldi	r17, 0x0A	; 10
                msg.type = GPS;
    7328:	01 e0       	ldi	r16, 0x01	; 1
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
    732a:	81 e8       	ldi	r24, 0x81	; 129
    732c:	f8 2e       	mov	r15, r24
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    732e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    7332:	88 23       	and	r24, r24
    7334:	e1 f3       	breq	.-8      	; 0x732e <main+0x9c>
            has_new_packet = 0;
    7336:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <has_new_packet>
            switch(packet_type) {
    733a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <packet_type>
    733e:	83 30       	cpi	r24, 0x03	; 3
    7340:	09 f4       	brne	.+2      	; 0x7344 <main+0xb2>
    7342:	73 c0       	rjmp	.+230    	; 0x742a <main+0x198>
    7344:	48 f4       	brcc	.+18     	; 0x7358 <main+0xc6>
    7346:	81 30       	cpi	r24, 0x01	; 1
    7348:	99 f0       	breq	.+38     	; 0x7370 <main+0xde>
    734a:	82 30       	cpi	r24, 0x02	; 2
    734c:	81 f7       	brne	.-32     	; 0x732e <main+0x9c>
    734e:	aa e9       	ldi	r26, 0x9A	; 154
    7350:	b1 e0       	ldi	r27, 0x01	; 1
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	90 e0       	ldi	r25, 0x00	; 0
    7356:	19 c0       	rjmp	.+50     	; 0x738a <main+0xf8>
    7358:	85 30       	cpi	r24, 0x05	; 5
    735a:	09 f4       	brne	.+2      	; 0x735e <main+0xcc>
    735c:	c3 c0       	rjmp	.+390    	; 0x74e4 <main+0x252>
    735e:	08 f4       	brcc	.+2      	; 0x7362 <main+0xd0>
    7360:	8b c0       	rjmp	.+278    	; 0x7478 <main+0x1e6>
    7362:	86 30       	cpi	r24, 0x06	; 6
    7364:	21 f7       	brne	.-56     	; 0x732e <main+0x9c>
    7366:	aa e9       	ldi	r26, 0x9A	; 154
    7368:	b1 e0       	ldi	r27, 0x01	; 1
    736a:	80 e0       	ldi	r24, 0x00	; 0
    736c:	90 e0       	ldi	r25, 0x00	; 0
    736e:	38 c0       	rjmp	.+112    	; 0x73e0 <main+0x14e>
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
    7370:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7374:	91 e0       	ldi	r25, 0x01	; 1
    7376:	81 11       	cpse	r24, r1
    7378:	90 e0       	ldi	r25, 0x00	; 0
    737a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
                if (leds_toggle) {
    737e:	81 11       	cpse	r24, r1
    7380:	02 c0       	rjmp	.+4      	; 0x7386 <main+0xf4>
                    led_port |= led_mask;
    7382:	29 9a       	sbi	0x05, 1	; 5
    7384:	d4 cf       	rjmp	.-88     	; 0x732e <main+0x9c>
                } else {
                    led_port &= ~led_mask;
    7386:	29 98       	cbi	0x05, 1	; 5
    7388:	d2 cf       	rjmp	.-92     	; 0x732e <main+0x9c>
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    738a:	2d 91       	ld	r18, X+
    738c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7390:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    7394:	e8 0f       	add	r30, r24
    7396:	f9 1f       	adc	r31, r25
    7398:	20 83       	st	Z, r18
    739a:	01 96       	adiw	r24, 0x01	; 1
                } else {
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
    739c:	8a 30       	cpi	r24, 0x0A	; 10
    739e:	91 05       	cpc	r25, r1
    73a0:	a1 f7       	brne	.-24     	; 0x738a <main+0xf8>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
    73a2:	8b e8       	ldi	r24, 0x8B	; 139
    73a4:	91 e0       	ldi	r25, 0x01	; 1
    73a6:	0e 94 ab 38 	call	0x7156	; 0x7156 <message_crc>
    73aa:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    73ae:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                while(!has_new_packet) {
    73b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    73b6:	81 11       	cpse	r24, r1
    73b8:	ba cf       	rjmp	.-140    	; 0x732e <main+0x9c>
                    message_send(&msg);
    73ba:	8b e8       	ldi	r24, 0x8B	; 139
    73bc:	91 e0       	ldi	r25, 0x01	; 1
    73be:	0e 94 c7 38 	call	0x718e	; 0x718e <message_send>
                    led_port |= led_mask;
    73c2:	29 9a       	sbi	0x05, 1	; 5
    73c4:	8f e6       	ldi	r24, 0x6F	; 111
    73c6:	97 e1       	ldi	r25, 0x17	; 23
    73c8:	01 97       	sbiw	r24, 0x01	; 1
    73ca:	f1 f7       	brne	.-4      	; 0x73c8 <main+0x136>
    73cc:	00 c0       	rjmp	.+0      	; 0x73ce <main+0x13c>
    73ce:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
    73d0:	29 98       	cbi	0x05, 1	; 5
    73d2:	af e6       	ldi	r26, 0x6F	; 111
    73d4:	b7 e1       	ldi	r27, 0x17	; 23
    73d6:	11 97       	sbiw	r26, 0x01	; 1
    73d8:	f1 f7       	brne	.-4      	; 0x73d6 <main+0x144>
    73da:	00 c0       	rjmp	.+0      	; 0x73dc <main+0x14a>
    73dc:	00 00       	nop
    73de:	e9 cf       	rjmp	.-46     	; 0x73b2 <main+0x120>
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    73e0:	2d 91       	ld	r18, X+
    73e2:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    73e6:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    73ea:	e8 0f       	add	r30, r24
    73ec:	f9 1f       	adc	r31, r25
    73ee:	20 83       	st	Z, r18
    73f0:	01 96       	adiw	r24, 0x01	; 1
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
    73f2:	8a 30       	cpi	r24, 0x0A	; 10
    73f4:	91 05       	cpc	r25, r1
    73f6:	a1 f7       	brne	.-24     	; 0x73e0 <main+0x14e>
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
    73f8:	8b e8       	ldi	r24, 0x8B	; 139
    73fa:	91 e0       	ldi	r25, 0x01	; 1
    73fc:	0e 94 ab 38 	call	0x7156	; 0x7156 <message_crc>
    7400:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    7404:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                message_send(&msg);
    7408:	8b e8       	ldi	r24, 0x8B	; 139
    740a:	91 e0       	ldi	r25, 0x01	; 1
    740c:	0e 94 c7 38 	call	0x718e	; 0x718e <message_send>
                led_port |= led_mask;
    7410:	29 9a       	sbi	0x05, 1	; 5
    7412:	8f e6       	ldi	r24, 0x6F	; 111
    7414:	97 e1       	ldi	r25, 0x17	; 23
    7416:	01 97       	sbiw	r24, 0x01	; 1
    7418:	f1 f7       	brne	.-4      	; 0x7416 <main+0x184>
    741a:	00 c0       	rjmp	.+0      	; 0x741c <main+0x18a>
    741c:	00 00       	nop
                _delay_ms(3);
                led_port &= ~led_mask;
    741e:	29 98       	cbi	0x05, 1	; 5
    7420:	af e6       	ldi	r26, 0x6F	; 111
    7422:	b7 e1       	ldi	r27, 0x17	; 23
    7424:	11 97       	sbiw	r26, 0x01	; 1
    7426:	f1 f7       	brne	.-4      	; 0x7424 <main+0x192>
    7428:	99 c0       	rjmp	.+306    	; 0x755c <main+0x2ca>
    742a:	aa e9       	ldi	r26, 0x9A	; 154
    742c:	b1 e0       	ldi	r27, 0x01	; 1
    }

    while(1) {
        if (has_new_packet) {
            has_new_packet = 0;
            switch(packet_type) {
    742e:	80 e0       	ldi	r24, 0x00	; 0
    7430:	90 e0       	ldi	r25, 0x00	; 0
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
    7432:	2d 91       	ld	r18, X+
    7434:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7438:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    743c:	e8 0f       	add	r30, r24
    743e:	f9 1f       	adc	r31, r25
    7440:	20 83       	st	Z, r18
    7442:	01 96       	adiw	r24, 0x01	; 1
                _delay_ms(3);
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
    7444:	8c 30       	cpi	r24, 0x0C	; 12
    7446:	91 05       	cpc	r25, r1
    7448:	a1 f7       	brne	.-24     	; 0x7432 <main+0x1a0>
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
    744a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    744e:	81 11       	cpse	r24, r1
    7450:	6e cf       	rjmp	.-292    	; 0x732e <main+0x9c>
                    message_send(&msg);
    7452:	8b e8       	ldi	r24, 0x8B	; 139
    7454:	91 e0       	ldi	r25, 0x01	; 1
    7456:	0e 94 c7 38 	call	0x718e	; 0x718e <message_send>
                    led_port |= led_mask;
    745a:	29 9a       	sbi	0x05, 1	; 5
    745c:	8f e6       	ldi	r24, 0x6F	; 111
    745e:	97 e1       	ldi	r25, 0x17	; 23
    7460:	01 97       	sbiw	r24, 0x01	; 1
    7462:	f1 f7       	brne	.-4      	; 0x7460 <main+0x1ce>
    7464:	00 c0       	rjmp	.+0      	; 0x7466 <main+0x1d4>
    7466:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
    7468:	29 98       	cbi	0x05, 1	; 5
    746a:	af e6       	ldi	r26, 0x6F	; 111
    746c:	b7 e1       	ldi	r27, 0x17	; 23
    746e:	11 97       	sbiw	r26, 0x01	; 1
    7470:	f1 f7       	brne	.-4      	; 0x746e <main+0x1dc>
    7472:	00 c0       	rjmp	.+0      	; 0x7474 <main+0x1e2>
    7474:	00 00       	nop
    7476:	e9 cf       	rjmp	.-46     	; 0x744a <main+0x1b8>
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
    7478:	f0 92 94 01 	sts	0x0194, r15	; 0x800194 <msg+0x9>
                bootmsg->page_address = new_packet[2];
    747c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <bootmsg>
    7480:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <bootmsg+0x1>
    7484:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
    7488:	80 83       	st	Z, r24
                bootmsg->unused = 0;
    748a:	10 86       	std	Z+8, r1	; 0x08
                cli();
    748c:	f8 94       	cli
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    748e:	e0 e0       	ldi	r30, 0x00	; 0
    7490:	f0 e0       	ldi	r31, 0x00	; 0
    7492:	8e 2f       	mov	r24, r30
    7494:	e4 38       	cpi	r30, 0x84	; 132
    7496:	f1 05       	cpc	r31, r1
    7498:	09 f4       	brne	.+2      	; 0x749c <main+0x20a>
    749a:	53 c0       	rjmp	.+166    	; 0x7542 <main+0x2b0>
    749c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <has_new_packet>
    74a0:	ef 01       	movw	r28, r30
    74a2:	26 96       	adiw	r28, 0x06	; 6
    74a4:	91 11       	cpse	r25, r1
    74a6:	4d c0       	rjmp	.+154    	; 0x7542 <main+0x2b0>
                    bootmsg->page_offset = i/2;
    74a8:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
    74ac:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>
    74b0:	86 95       	lsr	r24
    74b2:	11 96       	adiw	r26, 0x01	; 1
    74b4:	8c 93       	st	X, r24
    74b6:	11 97       	sbiw	r26, 0x01	; 1
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
    74b8:	12 96       	adiw	r26, 0x02	; 2
    74ba:	e5 56       	subi	r30, 0x65	; 101
    74bc:	fe 4f       	sbci	r31, 0xFE	; 254
    74be:	86 e0       	ldi	r24, 0x06	; 6
    74c0:	01 90       	ld	r0, Z+
    74c2:	0d 92       	st	X+, r0
    74c4:	8a 95       	dec	r24
    74c6:	e1 f7       	brne	.-8      	; 0x74c0 <main+0x22e>
                    msg.crc = message_crc(&msg);
    74c8:	8b e8       	ldi	r24, 0x8B	; 139
    74ca:	91 e0       	ldi	r25, 0x01	; 1
    74cc:	0e 94 ab 38 	call	0x7156	; 0x7156 <message_crc>
    74d0:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    74d4:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
    74d8:	8b e8       	ldi	r24, 0x8B	; 139
    74da:	91 e0       	ldi	r25, 0x01	; 1
    74dc:	0e 94 c7 38 	call	0x718e	; 0x718e <message_send>
    74e0:	fe 01       	movw	r30, r28
    74e2:	d7 cf       	rjmp	.-82     	; 0x7492 <main+0x200>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    74e4:	eb e8       	ldi	r30, 0x8B	; 139
    74e6:	f1 e0       	ldi	r31, 0x01	; 1
    74e8:	df 01       	movw	r26, r30
    74ea:	21 2f       	mov	r18, r17
    74ec:	1d 92       	st	X+, r1
    74ee:	2a 95       	dec	r18
    74f0:	e9 f7       	brne	.-6      	; 0x74ec <main+0x25a>
                msg.type = GPS;
    74f2:	00 93 94 01 	sts	0x0194, r16	; 0x800194 <msg+0x9>
                cli();
    74f6:	f8 94       	cli
    74f8:	c0 e0       	ldi	r28, 0x00	; 0
    74fa:	d0 e0       	ldi	r29, 0x00	; 0
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    74fc:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <gpsmsg>
    7500:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <gpsmsg+0x1>
    7504:	88 e0       	ldi	r24, 0x08	; 8
    7506:	fe 01       	movw	r30, r28
    7508:	e6 56       	subi	r30, 0x66	; 102
    750a:	fe 4f       	sbci	r31, 0xFE	; 254
    750c:	01 90       	ld	r0, Z+
    750e:	0d 92       	st	X+, r0
    7510:	8a 95       	dec	r24
    7512:	e1 f7       	brne	.-8      	; 0x750c <main+0x27a>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    7514:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <gpsmsg>
    7518:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <gpsmsg+0x1>
    751c:	80 81       	ld	r24, Z
    751e:	91 81       	ldd	r25, Z+1	; 0x01
    7520:	89 2b       	or	r24, r25
    7522:	f9 f4       	brne	.+62     	; 0x7562 <main+0x2d0>
    7524:	82 81       	ldd	r24, Z+2	; 0x02
    7526:	93 81       	ldd	r25, Z+3	; 0x03
    7528:	89 2b       	or	r24, r25
    752a:	d9 f4       	brne	.+54     	; 0x7562 <main+0x2d0>
    752c:	84 81       	ldd	r24, Z+4	; 0x04
    752e:	95 81       	ldd	r25, Z+5	; 0x05
    7530:	89 2b       	or	r24, r25
    7532:	b9 f4       	brne	.+46     	; 0x7562 <main+0x2d0>
    7534:	86 81       	ldd	r24, Z+6	; 0x06
    7536:	81 11       	cpse	r24, r1
    7538:	14 c0       	rjmp	.+40     	; 0x7562 <main+0x2d0>
    753a:	87 81       	ldd	r24, Z+7	; 0x07
    753c:	90 85       	ldd	r25, Z+8	; 0x08
    753e:	89 2b       	or	r24, r25
    7540:	81 f4       	brne	.+32     	; 0x7562 <main+0x2d0>
                        break;
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
    7542:	78 94       	sei
                led_port |= led_mask;
    7544:	29 9a       	sbi	0x05, 1	; 5
    7546:	8f e1       	ldi	r24, 0x1F	; 31
    7548:	9e e4       	ldi	r25, 0x4E	; 78
    754a:	01 97       	sbiw	r24, 0x01	; 1
    754c:	f1 f7       	brne	.-4      	; 0x754a <main+0x2b8>
    754e:	00 c0       	rjmp	.+0      	; 0x7550 <main+0x2be>
    7550:	00 00       	nop
                _delay_ms(10);
                led_port &= ~led_mask;
    7552:	29 98       	cbi	0x05, 1	; 5
    7554:	af e1       	ldi	r26, 0x1F	; 31
    7556:	be e4       	ldi	r27, 0x4E	; 78
    7558:	11 97       	sbiw	r26, 0x01	; 1
    755a:	f1 f7       	brne	.-4      	; 0x7558 <main+0x2c6>
    755c:	00 c0       	rjmp	.+0      	; 0x755e <main+0x2cc>
    755e:	00 00       	nop
    7560:	e6 ce       	rjmp	.-564    	; 0x732e <main+0x9c>
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
                        break;
                    msg.crc = message_crc(&msg);
    7562:	8b e8       	ldi	r24, 0x8B	; 139
    7564:	91 e0       	ldi	r25, 0x01	; 1
    7566:	0e 94 ab 38 	call	0x7156	; 0x7156 <message_crc>
    756a:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    756e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
    7572:	8b e8       	ldi	r24, 0x8B	; 139
    7574:	91 e0       	ldi	r25, 0x01	; 1
    7576:	0e 94 c7 38 	call	0x718e	; 0x718e <message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    757a:	b5 e8       	ldi	r27, 0x85	; 133
    757c:	ba 95       	dec	r27
    757e:	f1 f7       	brne	.-4      	; 0x757c <main+0x2ea>
    7580:	00 00       	nop
    7582:	28 96       	adiw	r28, 0x08	; 8
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
    7584:	c0 38       	cpi	r28, 0x80	; 128
    7586:	d1 05       	cpc	r29, r1
    7588:	09 f0       	breq	.+2      	; 0x758c <main+0x2fa>
    758a:	b8 cf       	rjmp	.-144    	; 0x74fc <main+0x26a>
    758c:	da cf       	rjmp	.-76     	; 0x7542 <main+0x2b0>

0000758e <_exit>:
    758e:	f8 94       	cli

00007590 <__stop_program>:
    7590:	ff cf       	rjmp	.-2      	; 0x7590 <__stop_program>
