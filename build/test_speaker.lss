
build/test_speaker.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	af 04       	cpc	r10, r15
      6a:	06 05       	cpc	r16, r6
      6c:	1a 05       	cpc	r17, r10
      6e:	4b 05       	cpc	r20, r11
      70:	52 05       	cpc	r21, r2
      72:	31 05       	cpc	r19, r1
      74:	55 05       	cpc	r21, r5
      76:	b3 06       	cpc	r11, r19
      78:	a4 07       	cpc	r26, r20
      7a:	a4 07       	cpc	r26, r20
      7c:	bc 06       	cpc	r11, r28
      7e:	bf 06       	cpc	r11, r31
      80:	c2 06       	cpc	r12, r18
      82:	c4 06       	cpc	r12, r20
      84:	c6 06       	cpc	r12, r22
      86:	c8 06       	cpc	r12, r24
      88:	79 07       	cpc	r23, r25
      8a:	da 06       	cpc	r13, r26

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e0       	ldi	r30, 0x04	; 4
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <main>
      da:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

int message_sent = 0;
message_t transmit_msg;
message_t *message_tx() {
  return &transmit_msg;
}
      e2:	82 e1       	ldi	r24, 0x12	; 18
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
      f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
      f4:	08 95       	ret

000000f6 <setup>:
}

void setup() {
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
  transmit_msg.type = NORMAL;
      fa:	c2 e1       	ldi	r28, 0x12	; 18
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	19 86       	std	Y+9, r1	; 0x09
  transmit_msg.data[0] = 0;
     100:	18 82       	st	Y, r1
  transmit_msg.crc = message_crc(&transmit_msg);
     102:	ce 01       	movw	r24, r28
     104:	0e 94 b7 07 	call	0xf6e	; 0xf6e <message_crc>
     108:	9b 87       	std	Y+11, r25	; 0x0b
     10a:	8a 87       	std	Y+10, r24	; 0x0a
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <loop>:

void loop() {
  if (message_sent == 1) {
     112:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     116:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     11a:	01 97       	sbiw	r24, 0x01	; 1
     11c:	71 f4       	brne	.+28     	; 0x13a <loop+0x28>
	message_sent = 0;
     11e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     122:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	set_color(RGB(0,1,0));
     126:	84 e0       	ldi	r24, 0x04	; 4
     128:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
	delay(100);
     12c:	84 e6       	ldi	r24, 0x64	; 100
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 9f 01 	call	0x33e	; 0x33e <delay>
	set_color(RGB(0,0,0));
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <set_color>
     13a:	08 95       	ret

0000013c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     13c:	08 95       	ret

0000013e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	08 95       	ret

00000144 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     144:	08 95       	ret

00000146 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
    cli();
     154:	f8 94       	cli

    ports_off();
     156:	14 b8       	out	0x04, r1	; 4
     158:	17 b8       	out	0x07, r1	; 7
     15a:	1a b8       	out	0x0a, r1	; 10
     15c:	15 b8       	out	0x05, r1	; 5
     15e:	18 b8       	out	0x08, r1	; 8
     160:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     162:	52 9a       	sbi	0x0a, 2	; 10
     164:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     166:	14 bc       	out	0x24, r1	; 36
     168:	85 e0       	ldi	r24, 0x05	; 5
     16a:	85 bd       	out	0x25, r24	; 37
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	87 bd       	out	0x27, r24	; 39
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     176:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     17a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     17e:	2f e8       	ldi	r18, 0x8F	; 143
     180:	3b e0       	ldi	r19, 0x0B	; 11
     182:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     186:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     18a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     18e:	53 98       	cbi	0x0a, 3	; 10
     190:	23 98       	cbi	0x04, 3	; 4
     192:	91 ea       	ldi	r25, 0xA1	; 161
     194:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     198:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     19c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1a0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1a4:	8b e0       	ldi	r24, 0x0B	; 11
     1a6:	80 bf       	out	0x30, r24	; 48
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1b4:	83 e8       	ldi	r24, 0x83	; 131
     1b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1be:	80 64       	ori	r24, 0x40	; 64
     1c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1c8:	86 fd       	sbrc	r24, 6
     1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1cc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1d0:	83 ea       	ldi	r24, 0xA3	; 163
     1d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
    if (osccal != 0xFF)
     1e4:	8f 3f       	cpi	r24, 0xFF	; 255
     1e6:	11 f0       	breq	.+4      	; 0x1ec <kilo_init+0xa6>
        OSCCAL = osccal;
     1e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     1ec:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    rx_leadingbit = 1;
     1f0:	c1 e0       	ldi	r28, 0x01	; 1
     1f2:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     1f6:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <rx_leadingbyte>
    rx_byteindex = 0;
     1fa:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
    rx_bytevalue = 0;
     1fe:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     20a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     20e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tx_mask>
     212:	88 73       	andi	r24, 0x38	; 56
     214:	11 f0       	breq	.+4      	; 0x21a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     216:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <tx_mask>
    tx_clock = 0;
     21a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     21e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
    tx_increment = 255;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     22a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    kilo_ticks = 0;
     22e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <kilo_ticks>
     232:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <kilo_ticks+0x1>
     236:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks+0x2>
     23a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x3>
    kilo_state = IDLE;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     244:	82 e4       	ldi	r24, 0x42	; 66
     246:	9f e0       	ldi	r25, 0x0F	; 15
     248:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <kilo_tx_period+0x1>
     24c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     250:	80 eb       	ldi	r24, 0xB0	; 176
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     258:	c8 2f       	mov	r28, r24
     25a:	81 eb       	ldi	r24, 0xB1	; 177
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     262:	2c 2f       	mov	r18, r28
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	38 2b       	or	r19, r24
     268:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <kilo_uid+0x1>
     26c:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     278:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     27c:	89 e0       	ldi	r24, 0x09	; 9
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     284:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     288:	8c e0       	ldi	r24, 0x0C	; 12
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     290:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     294:	84 e1       	ldi	r24, 0x14	; 20
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     29c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
     2a0:	06 e4       	ldi	r16, 0x46	; 70
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	5f e1       	ldi	r21, 0x1F	; 31
     2a6:	e5 2e       	mov	r14, r21
     2a8:	51 e0       	ldi	r21, 0x01	; 1
     2aa:	f5 2e       	mov	r15, r21
     2ac:	c0 e2       	ldi	r28, 0x20	; 32
     2ae:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     2b6:	d8 2e       	mov	r13, r24
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     2c0:	2d 2d       	mov	r18, r13
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	32 2f       	mov	r19, r18
     2c6:	22 27       	eor	r18, r18
     2c8:	28 2b       	or	r18, r24
     2ca:	f8 01       	movw	r30, r16
     2cc:	21 93       	st	Z+, r18
     2ce:	31 93       	st	Z+, r19
     2d0:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2d2:	ce 01       	movw	r24, r28
     2d4:	c0 96       	adiw	r24, 0x30	; 48
     2d6:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     2da:	d8 2e       	mov	r13, r24
     2dc:	ce 01       	movw	r24, r28
     2de:	c1 96       	adiw	r24, 0x31	; 49
     2e0:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_read_byte>
     2e4:	2d 2d       	mov	r18, r13
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	32 2f       	mov	r19, r18
     2ea:	22 27       	eor	r18, r18
     2ec:	28 2b       	or	r18, r24
     2ee:	f7 01       	movw	r30, r14
     2f0:	21 93       	st	Z+, r18
     2f2:	31 93       	st	Z+, r19
     2f4:	7f 01       	movw	r14, r30
     2f6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2f8:	cc 33       	cpi	r28, 0x3C	; 60
     2fa:	d1 05       	cpc	r29, r1
     2fc:	c9 f6       	brne	.-78     	; 0x2b0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2fe:	78 94       	sei
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	08 95       	ret

00000310 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	a8 95       	wdr
     322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     326:	88 61       	ori	r24, 0x18	; 24
     328:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     32c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     330:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     33e:	00 97       	sbiw	r24, 0x00	; 0
     340:	41 f0       	breq	.+16     	; 0x352 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     342:	ef ec       	ldi	r30, 0xCF	; 207
     344:	f7 e0       	ldi	r31, 0x07	; 7
     346:	31 97       	sbiw	r30, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <delay+0x8>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <delay+0xe>
     34c:	00 00       	nop
        _delay_ms(1);
        ms--;
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f6 cf       	rjmp	.-20     	; 0x33e <delay>
    }
}
     352:	08 95       	ret

00000354 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     354:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     358:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     35c:	08 95       	ret

0000035e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     364:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     368:	8f e0       	ldi	r24, 0x0F	; 15
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <delay>

00000370 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     370:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     374:	81 11       	cpse	r24, r1
     376:	1e c0       	rjmp	.+60     	; 0x3b4 <get_ambientlight+0x44>
        cli();
     378:	f8 94       	cli
        adc_setup_conversion(7);
     37a:	87 e0       	ldi	r24, 0x07	; 7
     37c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     380:	83 e8       	ldi	r24, 0x83	; 131
     382:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     386:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     38a:	80 64       	ori	r24, 0x40	; 64
     38c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     394:	86 fd       	sbrc	r24, 6
     396:	fc cf       	rjmp	.-8      	; 0x390 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     398:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     39c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3a0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3a4:	23 ea       	ldi	r18, 0xA3	; 163
     3a6:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3aa:	21 e0       	ldi	r18, 0x01	; 1
     3ac:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3b0:	78 94       	sei
     3b2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     3b8:	08 95       	ret

000003ba <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     3ba:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     3be:	81 11       	cpse	r24, r1
     3c0:	1e c0       	rjmp	.+60     	; 0x3fe <get_temperature+0x44>
        cli();
     3c2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     3c4:	88 ec       	ldi	r24, 0xC8	; 200
     3c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     3ca:	87 e8       	ldi	r24, 0x87	; 135
     3cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3d4:	80 64       	ori	r24, 0x40	; 64
     3d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3de:	86 fd       	sbrc	r24, 6
     3e0:	fc cf       	rjmp	.-8      	; 0x3da <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3ea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3ee:	23 ea       	ldi	r18, 0xA3	; 163
     3f0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3fa:	78 94       	sei
     3fc:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     402:	08 95       	ret

00000404 <rand_hard>:

uint8_t rand_hard() {
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     40c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     40e:	e3 ea       	ldi	r30, 0xA3	; 163
     410:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     412:	c6 e0       	ldi	r28, 0x06	; 6
     414:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     416:	a1 e0       	ldi	r26, 0x01	; 1
     418:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     41a:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     41c:	f8 94       	cli
            adc_setup_conversion(6);
     41e:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     422:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     426:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42a:	40 64       	ori	r20, 0x40	; 64
     42c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     430:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     434:	46 fd       	sbrc	r20, 6
     436:	fc cf       	rjmp	.-8      	; 0x430 <rand_hard+0x2c>
            a = ADCW&0x1;
     438:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     43c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     440:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     442:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     446:	50 64       	ori	r21, 0x40	; 64
     448:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     44c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     450:	56 fd       	sbrc	r21, 6
     452:	fc cf       	rjmp	.-8      	; 0x44c <rand_hard+0x48>
            b = ADCW&0x1;
     454:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     458:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     45c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     460:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     464:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     468:	78 94       	sei
            tries++;
     46a:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     46c:	61 70       	andi	r22, 0x01	; 1
     46e:	46 17       	cp	r20, r22
     470:	51 f0       	breq	.+20     	; 0x486 <rand_hard+0x82>
        if (a)
     472:	44 23       	and	r20, r20
     474:	59 f0       	breq	.+22     	; 0x48c <rand_hard+0x88>
            num |= (1<<i);
     476:	ad 01       	movw	r20, r26
     478:	02 2e       	mov	r0, r18
     47a:	01 c0       	rjmp	.+2      	; 0x47e <rand_hard+0x7a>
     47c:	44 0f       	add	r20, r20
     47e:	0a 94       	dec	r0
     480:	ea f7       	brpl	.-6      	; 0x47c <rand_hard+0x78>
     482:	84 2b       	or	r24, r20
     484:	03 c0       	rjmp	.+6      	; 0x48c <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     486:	90 38       	cpi	r25, 0x80	; 128
     488:	49 f6       	brne	.-110    	; 0x41c <rand_hard+0x18>
     48a:	f3 cf       	rjmp	.-26     	; 0x472 <rand_hard+0x6e>
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     490:	28 30       	cpi	r18, 0x08	; 8
     492:	31 05       	cpc	r19, r1
     494:	09 f0       	breq	.+2      	; 0x498 <rand_hard+0x94>
     496:	c1 cf       	rjmp	.-126    	; 0x41a <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     49e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4a2:	98 e0       	ldi	r25, 0x08	; 8
     4a4:	89 9f       	mul	r24, r25
     4a6:	90 01       	movw	r18, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4ac:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <accumulator>
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	89 0f       	add	r24, r25
     4b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <accumulator>
     4b8:	82 2f       	mov	r24, r18
     4ba:	82 95       	swap	r24
     4bc:	86 95       	lsr	r24
     4be:	87 70       	andi	r24, 0x07	; 7
     4c0:	28 27       	eor	r18, r24
     4c2:	96 95       	lsr	r25
     4c4:	96 95       	lsr	r25
     4c6:	82 2f       	mov	r24, r18
     4c8:	89 27       	eor	r24, r25
     4ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     4ce:	08 95       	ret

000004d0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     4d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4d4:	08 95       	ret

000004d6 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4d6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     4da:	81 11       	cpse	r24, r1
     4dc:	16 c0       	rjmp	.+44     	; 0x50a <get_voltage+0x34>
        cli();                                    // disable interrupts
     4de:	f8 94       	cli
        adc_setup_conversion(6);
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4e6:	83 e8       	ldi	r24, 0x83	; 131
     4e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f0:	80 64       	ori	r24, 0x40	; 64
     4f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fa:	86 fd       	sbrc	r24, 6
     4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     4fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     502:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     506:	78 94       	sei
     508:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     50e:	08 95       	ret

00000510 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     510:	2f 92       	push	r2
     512:	3f 92       	push	r3
     514:	4f 92       	push	r4
     516:	5f 92       	push	r5
     518:	6f 92       	push	r6
     51a:	7f 92       	push	r7
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     536:	fc 01       	movw	r30, r24
     538:	c2 81       	ldd	r28, Z+2	; 0x02
     53a:	d3 81       	ldd	r29, Z+3	; 0x03
     53c:	c4 38       	cpi	r28, 0x84	; 132
     53e:	f3 e0       	ldi	r31, 0x03	; 3
     540:	df 07       	cpc	r29, r31
     542:	0c f0       	brlt	.+2      	; 0x546 <estimate_distance+0x36>
     544:	7e c0       	rjmp	.+252    	; 0x642 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     546:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_irhigh>
     54a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <kilo_irhigh+0x1>
     54e:	8c 17       	cp	r24, r28
     550:	9d 07       	cpc	r25, r29
     552:	08 f4       	brcc	.+2      	; 0x556 <estimate_distance+0x46>
     554:	6f c0       	rjmp	.+222    	; 0x634 <estimate_distance+0x124>
     556:	e1 e2       	ldi	r30, 0x21	; 33
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     55c:	81 91       	ld	r24, Z+
     55e:	91 91       	ld	r25, Z+
     560:	8c 17       	cp	r24, r28
     562:	9d 07       	cpc	r25, r29
     564:	20 f0       	brcs	.+8      	; 0x56e <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     566:	1f 5f       	subi	r17, 0xFF	; 255
     568:	1e 30       	cpi	r17, 0x0E	; 14
     56a:	c1 f7       	brne	.-16     	; 0x55c <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     56c:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     56e:	81 2f       	mov	r24, r17
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fc 01       	movw	r30, r24
     574:	ee 0f       	add	r30, r30
     576:	ff 1f       	adc	r31, r31
     578:	e1 5e       	subi	r30, 0xE1	; 225
     57a:	fe 4f       	sbci	r31, 0xFE	; 254
     57c:	e0 80       	ld	r14, Z
     57e:	f1 80       	ldd	r15, Z+1	; 0x01
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	fc 01       	movw	r30, r24
     586:	e3 5e       	subi	r30, 0xE3	; 227
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	b7 01       	movw	r22, r14
     590:	68 1b       	sub	r22, r24
     592:	79 0b       	sbc	r23, r25
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     5a4:	4b 01       	movw	r8, r22
     5a6:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5a8:	be 01       	movw	r22, r28
     5aa:	0d 2e       	mov	r0, r29
     5ac:	00 0c       	add	r0, r0
     5ae:	88 0b       	sbc	r24, r24
     5b0:	99 0b       	sbc	r25, r25
     5b2:	0e 94 c1 09 	call	0x1382	; 0x1382 <__floatsisf>
     5b6:	2b 01       	movw	r4, r22
     5b8:	3c 01       	movw	r6, r24
     5ba:	b7 01       	movw	r22, r14
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     5c4:	6b 01       	movw	r12, r22
     5c6:	7c 01       	movw	r14, r24
     5c8:	61 2f       	mov	r22, r17
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	5f e3       	ldi	r21, 0x3F	; 63
     5dc:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	a9 01       	movw	r20, r18
     5e6:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     5f2:	9b 01       	movw	r18, r22
     5f4:	ac 01       	movw	r20, r24
     5f6:	c7 01       	movw	r24, r14
     5f8:	b6 01       	movw	r22, r12
     5fa:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 e2       	ldi	r20, 0x20	; 32
     610:	51 e4       	ldi	r21, 0x41	; 65
     612:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     616:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     61a:	7b 01       	movw	r14, r22
     61c:	c5 01       	movw	r24, r10
     61e:	b4 01       	movw	r22, r8
     620:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     624:	ab 01       	movw	r20, r22
     626:	bc 01       	movw	r22, r24
     628:	c7 01       	movw	r24, r14
     62a:	ba 01       	movw	r22, r20
     62c:	0e 94 6d 08 	call	0x10da	; 0x10da <__divmodhi4>
     630:	16 2f       	mov	r17, r22
     632:	01 c0       	rjmp	.+2      	; 0x636 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     634:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     636:	cd 3b       	cpi	r28, 0xBD	; 189
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	d8 07       	cpc	r29, r24
     63c:	0c f4       	brge	.+2      	; 0x640 <estimate_distance+0x130>
     63e:	ca c0       	rjmp	.+404    	; 0x7d4 <estimate_distance+0x2c4>
     640:	01 c0       	rjmp	.+2      	; 0x644 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     642:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     644:	f1 01       	movw	r30, r2
     646:	c0 80       	ld	r12, Z
     648:	d1 80       	ldd	r13, Z+1	; 0x01
     64a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_irlow>
     64e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_irlow+0x1>
     652:	8c 15       	cp	r24, r12
     654:	9d 05       	cpc	r25, r13
     656:	88 f0       	brcs	.+34     	; 0x67a <estimate_distance+0x16a>
     658:	e8 e4       	ldi	r30, 0x48	; 72
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     662:	e1 90       	ld	r14, Z+
     664:	f1 90       	ld	r15, Z+
     666:	ec 14       	cp	r14, r12
     668:	fd 04       	cpc	r15, r13
     66a:	08 f4       	brcc	.+2      	; 0x66e <estimate_distance+0x15e>
     66c:	58 c0       	rjmp	.+176    	; 0x71e <estimate_distance+0x20e>
     66e:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     670:	8e 30       	cpi	r24, 0x0E	; 14
     672:	91 05       	cpc	r25, r1
     674:	a9 f7       	brne	.-22     	; 0x660 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     676:	0a e5       	ldi	r16, 0x5A	; 90
     678:	01 c0       	rjmp	.+2      	; 0x67c <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     67a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     67c:	1f 3f       	cpi	r17, 0xFF	; 255
     67e:	09 f4       	brne	.+2      	; 0x682 <estimate_distance+0x172>
     680:	4b c0       	rjmp	.+150    	; 0x718 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     682:	be 01       	movw	r22, r28
     684:	dd 0f       	add	r29, r29
     686:	88 0b       	sbc	r24, r24
     688:	99 0b       	sbc	r25, r25
     68a:	0e 94 c1 09 	call	0x1382	; 0x1382 <__floatsisf>
     68e:	6b 01       	movw	r12, r22
     690:	7c 01       	movw	r14, r24
     692:	61 2f       	mov	r22, r17
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     69e:	4b 01       	movw	r8, r22
     6a0:	5c 01       	movw	r10, r24
     6a2:	a7 01       	movw	r20, r14
     6a4:	96 01       	movw	r18, r12
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	81 e6       	ldi	r24, 0x61	; 97
     6ac:	94 e4       	ldi	r25, 0x44	; 68
     6ae:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c5 01       	movw	r24, r10
     6b8:	b4 01       	movw	r22, r8
     6ba:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     6be:	4b 01       	movw	r8, r22
     6c0:	5c 01       	movw	r10, r24
     6c2:	60 2f       	mov	r22, r16
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     6ce:	2b 01       	movw	r4, r22
     6d0:	3c 01       	movw	r6, r24
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	4f e2       	ldi	r20, 0x2F	; 47
     6d8:	54 e4       	ldi	r21, 0x44	; 68
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c3 01       	movw	r24, r6
     6e8:	b2 01       	movw	r22, r4
     6ea:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	c5 01       	movw	r24, r10
     6f4:	b4 01       	movw	r22, r8
     6f6:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	48 e4       	ldi	r20, 0x48	; 72
     700:	53 e4       	ldi	r21, 0x43	; 67
     702:	0e 94 17 09 	call	0x122e	; 0x122e <__divsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	44 e0       	ldi	r20, 0x04	; 4
     70c:	52 e4       	ldi	r21, 0x42	; 66
     70e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     712:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixunssfsi>
     716:	60 c0       	rjmp	.+192    	; 0x7d8 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     718:	61 e2       	ldi	r22, 0x21	; 33
     71a:	60 0f       	add	r22, r16
     71c:	5d c0       	rjmp	.+186    	; 0x7d8 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	fc 01       	movw	r30, r24
     724:	ec 5b       	subi	r30, 0xBC	; 188
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	b7 01       	movw	r22, r14
     72e:	68 1b       	sub	r22, r24
     730:	79 0b       	sbc	r23, r25
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     742:	4b 01       	movw	r8, r22
     744:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     746:	b6 01       	movw	r22, r12
     748:	dd 0c       	add	r13, r13
     74a:	88 0b       	sbc	r24, r24
     74c:	99 0b       	sbc	r25, r25
     74e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__floatsisf>
     752:	2b 01       	movw	r4, r22
     754:	3c 01       	movw	r6, r24
     756:	b7 01       	movw	r22, r14
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     760:	6b 01       	movw	r12, r22
     762:	7c 01       	movw	r14, r24
     764:	63 2d       	mov	r22, r3
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 bf 09 	call	0x137e	; 0x137e <__floatunsisf>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	a9 01       	movw	r20, r18
     782:	0e 94 ab 08 	call	0x1156	; 0x1156 <__addsf3>
     786:	a5 01       	movw	r20, r10
     788:	94 01       	movw	r18, r8
     78a:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
     792:	c7 01       	movw	r24, r14
     794:	b6 01       	movw	r22, r12
     796:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
     79a:	9b 01       	movw	r18, r22
     79c:	ac 01       	movw	r20, r24
     79e:	c3 01       	movw	r24, r6
     7a0:	b2 01       	movw	r22, r4
     7a2:	0e 94 aa 08 	call	0x1154	; 0x1154 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e2       	ldi	r20, 0x20	; 32
     7ac:	51 e4       	ldi	r21, 0x41	; 65
     7ae:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulsf3>
     7b2:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     7b6:	7b 01       	movw	r14, r22
     7b8:	c5 01       	movw	r24, r10
     7ba:	b4 01       	movw	r22, r8
     7bc:	0e 94 89 09 	call	0x1312	; 0x1312 <__fixsfsi>
     7c0:	ab 01       	movw	r20, r22
     7c2:	bc 01       	movw	r22, r24
     7c4:	c7 01       	movw	r24, r14
     7c6:	ba 01       	movw	r22, r20
     7c8:	0e 94 6d 08 	call	0x10da	; 0x10da <__divmodhi4>
     7cc:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     7ce:	6f 3f       	cpi	r22, 0xFF	; 255
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <estimate_distance+0x2c4>
     7d2:	54 cf       	rjmp	.-344    	; 0x67c <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7d4:	61 e2       	ldi	r22, 0x21	; 33
     7d6:	61 0f       	add	r22, r17
    }
}
     7d8:	86 2f       	mov	r24, r22
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
    tx_clock += tx_increment;
     822:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     826:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     82a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tx_increment>
     82e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <tx_increment+0x1>
     832:	82 0f       	add	r24, r18
     834:	93 1f       	adc	r25, r19
     836:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_clock+0x1>
     83a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_clock>
    tx_increment = 0xFF;
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     846:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    OCR0A = tx_increment;
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     84e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_ticks>
     852:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_ticks+0x1>
     856:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <kilo_ticks+0x2>
     85a:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <kilo_ticks+0x3>
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	a1 1d       	adc	r26, r1
     862:	b1 1d       	adc	r27, r1
     864:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kilo_ticks>
     868:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <kilo_ticks+0x1>
     86c:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <kilo_ticks+0x2>
     870:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     874:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     878:	81 11       	cpse	r24, r1
     87a:	2d c0       	rjmp	.+90     	; 0x8d6 <__vector_14+0xd6>
     87c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <kilo_tx_period>
     880:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_tx_period+0x1>
     884:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     888:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	10 f5       	brcc	.+68     	; 0x8d6 <__vector_14+0xd6>
     892:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     896:	84 30       	cpi	r24, 0x04	; 4
     898:	f1 f4       	brne	.+60     	; 0x8d6 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     89a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     89e:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     8a2:	09 95       	icall
        if (msg) {
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	b9 f0       	breq	.+46     	; 0x8d6 <__vector_14+0xd6>
            if (message_send(msg)) {
     8a8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <message_send>
     8ac:	88 23       	and	r24, r24
     8ae:	51 f0       	breq	.+20     	; 0x8c4 <__vector_14+0xc4>
                kilo_message_tx_success();
     8b0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     8b4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     8b8:	09 95       	icall
                tx_clock = 0;
     8ba:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     8be:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     8c4:	0e 94 06 0b 	call	0x160c	; 0x160c <rand>
     8c8:	9c 01       	movw	r18, r24
     8ca:	33 27       	eor	r19, r19
     8cc:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <tx_increment+0x1>
     8d0:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <tx_increment>
                OCR0A = tx_increment;
     8d4:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8f8:	80 ff       	sbrs	r24, 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
        DDRD |= (1<<5);
     8fc:	55 9a       	sbi	0x0a, 5	; 10
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
    else
        DDRD &= ~(1<<5);
     900:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     902:	81 ff       	sbrs	r24, 1
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
        DDRD |= (1<<4);
     906:	54 9a       	sbi	0x0a, 4	; 10
     908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xd>
    else
        DDRD &= ~(1<<4);
     90a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     90c:	82 ff       	sbrs	r24, 2
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
        DDRC |= (1<<3);
     910:	3b 9a       	sbi	0x07, 3	; 7
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
    else
        DDRC &= ~(1<<3);
     914:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     916:	83 ff       	sbrs	r24, 3
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
        DDRC |= (1<<2);
     91a:	3a 9a       	sbi	0x07, 2	; 7
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
    else
        DDRC &= ~(1<<2);
     91e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     920:	84 ff       	sbrs	r24, 4
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
        DDRC |= (1<<5);
     924:	3d 9a       	sbi	0x07, 5	; 7
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
    else
        DDRC &= ~(1<<5);
     928:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     92a:	85 ff       	sbrs	r24, 5
     92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
        DDRC |= (1<<4);
     92e:	3c 9a       	sbi	0x07, 4	; 7
     930:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     932:	3c 98       	cbi	0x07, 4	; 7
     934:	08 95       	ret

00000936 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     936:	8c 01       	movw	r16, r24
     938:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     93a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     93c:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     942:	98 e1       	ldi	r25, 0x18	; 24
     944:	c9 2e       	mov	r12, r25
     946:	29 e2       	ldi	r18, 0x29	; 41
     948:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     94a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	e7 30       	cpi	r30, 0x07	; 7
     952:	f1 05       	cpc	r31, r1
     954:	d0 f7       	brcc	.-12     	; 0x94a <kilo_start+0x14>
     956:	ec 5c       	subi	r30, 0xCC	; 204
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__tablejump2__>
            case SLEEPING:
                cli();
     95e:	f8 94       	cli
                acomp_off();
     960:	80 b7       	in	r24, 0x30	; 48
     962:	87 7f       	andi	r24, 0xF7	; 247
     964:	80 bf       	out	0x30, r24	; 48
                adc_off();
     966:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     96a:	8f 77       	andi	r24, 0x7F	; 127
     96c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     970:	14 b8       	out	0x04, r1	; 4
     972:	17 b8       	out	0x07, r1	; 7
     974:	1a b8       	out	0x0a, r1	; 10
     976:	15 b8       	out	0x05, r1	; 5
     978:	18 b8       	out	0x08, r1	; 8
     97a:	1b b8       	out	0x0b, r1	; 11
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	a8 95       	wdr
     982:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     986:	0f be       	out	0x3f, r0	; 63
     988:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     98c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     990:	80 64       	ori	r24, 0x40	; 64
     992:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     996:	83 b7       	in	r24, 0x33	; 51
     998:	81 7f       	andi	r24, 0xF1	; 241
     99a:	84 60       	ori	r24, 0x04	; 4
     99c:	83 bf       	out	0x33, r24	; 51
                cli();
     99e:	f8 94       	cli
                sleep_enable();
     9a0:	83 b7       	in	r24, 0x33	; 51
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	83 bf       	out	0x33, r24	; 51
                sei();
     9a6:	78 94       	sei
                sleep_cpu();
     9a8:	88 95       	sleep
                sleep_disable();
     9aa:	83 b7       	in	r24, 0x33	; 51
     9ac:	8e 7f       	andi	r24, 0xFE	; 254
     9ae:	83 bf       	out	0x33, r24	; 51
                sei();
     9b0:	78 94       	sei
                rx_busy = 0;
     9b2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
                ports_on();
     9b6:	52 9a       	sbi	0x0a, 2	; 10
     9b8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     9ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9be:	80 68       	ori	r24, 0x80	; 128
     9c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	87 e5       	ldi	r24, 0x57	; 87
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <kilo_start+0x92>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <kilo_start+0x98>
     9ce:	00 00       	nop
                _delay_us(300);
                acomp_on();
     9d0:	80 b7       	in	r24, 0x30	; 48
     9d2:	88 61       	ori	r24, 0x18	; 24
     9d4:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9d6:	8f e3       	ldi	r24, 0x3F	; 63
     9d8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9dc:	ef e1       	ldi	r30, 0x1F	; 31
     9de:	fe e4       	ldi	r31, 0x4E	; 78
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <kilo_start+0xaa>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <kilo_start+0xb0>
     9e6:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9e8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <kilo_start+0xbc>
     9f0:	50 c0       	rjmp	.+160    	; 0xa92 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     9f2:	83 e0       	ldi	r24, 0x03	; 3
     9f4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     9f8:	ff ef       	ldi	r31, 0xFF	; 255
     9fa:	20 e7       	ldi	r18, 0x70	; 112
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	f1 50       	subi	r31, 0x01	; 1
     a00:	20 40       	sbci	r18, 0x00	; 0
     a02:	80 40       	sbci	r24, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <kilo_start+0xc8>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <kilo_start+0xd2>
     a08:	00 00       	nop
     a0a:	43 c0       	rjmp	.+134    	; 0xa92 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a0c:	8c e0       	ldi	r24, 0x0C	; 12
     a0e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     a12:	ef ec       	ldi	r30, 0xCF	; 207
     a14:	f7 e0       	ldi	r31, 0x07	; 7
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <kilo_start+0xe0>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <kilo_start+0xe6>
     a1c:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     a24:	ff ef       	ldi	r31, 0xFF	; 255
     a26:	21 ee       	ldi	r18, 0xE1	; 225
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	f1 50       	subi	r31, 0x01	; 1
     a2c:	20 40       	sbci	r18, 0x00	; 0
     a2e:	80 40       	sbci	r24, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <kilo_start+0xf4>
     a32:	2c c0       	rjmp	.+88     	; 0xa8c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a34:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <get_voltage>
                if(voltage > 682)
     a38:	8b 3a       	cpi	r24, 0xAB	; 171
     a3a:	e2 e0       	ldi	r30, 0x02	; 2
     a3c:	9e 07       	cpc	r25, r30
     a3e:	24 f0       	brlt	.+8      	; 0xa48 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     a46:	81 cf       	rjmp	.-254    	; 0x94a <kilo_start+0x14>
                else if(voltage > 648)
     a48:	89 38       	cpi	r24, 0x89	; 137
     a4a:	f2 e0       	ldi	r31, 0x02	; 2
     a4c:	9f 07       	cpc	r25, r31
     a4e:	14 f0       	brlt	.+4      	; 0xa54 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a50:	80 e3       	ldi	r24, 0x30	; 48
     a52:	f7 cf       	rjmp	.-18     	; 0xa42 <kilo_start+0x10c>
                else if(voltage > 614)
     a54:	87 36       	cpi	r24, 0x67	; 103
     a56:	92 40       	sbci	r25, 0x02	; 2
     a58:	14 f0       	brlt	.+4      	; 0xa5e <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a5a:	8f e0       	ldi	r24, 0x0F	; 15
     a5c:	f2 cf       	rjmp	.-28     	; 0xa42 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	f0 cf       	rjmp	.-32     	; 0xa42 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a62:	48 99       	sbic	0x09, 0	; 9
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     a6c:	8f ec       	ldi	r24, 0xCF	; 207
     a6e:	97 e0       	ldi	r25, 0x07	; 7
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <kilo_start+0x13a>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <kilo_start+0x140>
     a76:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	e1 ee       	ldi	r30, 0xE1	; 225
     a82:	f4 e0       	ldi	r31, 0x04	; 4
     a84:	91 50       	subi	r25, 0x01	; 1
     a86:	e0 40       	sbci	r30, 0x00	; 0
     a88:	f0 40       	sbci	r31, 0x00	; 0
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <kilo_start+0x14e>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <kilo_start+0x158>
     a8e:	00 00       	nop
     a90:	5c cf       	rjmp	.-328    	; 0x94a <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	d6 cf       	rjmp	.-84     	; 0xa42 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     a96:	d1 11       	cpse	r29, r1
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <kilo_start+0x168>
                    setup();
     a9a:	f8 01       	movw	r30, r16
     a9c:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a9e:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <kilo_state>
     aa2:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     aa4:	f7 01       	movw	r30, r14
     aa6:	09 95       	icall
                break;
     aa8:	50 cf       	rjmp	.-352    	; 0x94a <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     aaa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     aae:	81 11       	cpse	r24, r1
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ab2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ab6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     aba:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     abe:	45 cf       	rjmp	.-374    	; 0x94a <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     ac0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     ac4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     ac8:	98 17       	cp	r25, r24
     aca:	09 f4       	brne	.+2      	; 0xace <kilo_start+0x198>
     acc:	3e cf       	rjmp	.-388    	; 0x94a <kilo_start+0x14>
                        prev_motion = cur_motion;
     ace:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     ad2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ad6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	89 f4       	brne	.+34     	; 0xb00 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ade:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ae2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ae6:	8f e2       	ldi	r24, 0x2F	; 47
     ae8:	95 e7       	ldi	r25, 0x75	; 117
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <kilo_start+0x1b4>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <kilo_start+0x1ba>
     af0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     af2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     af6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     afa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     afe:	25 cf       	rjmp	.-438    	; 0x94a <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b00:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b04:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b08:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	59 f4       	brne	.+22     	; 0xb26 <kilo_start+0x1f0>
     b10:	ef e2       	ldi	r30, 0x2F	; 47
     b12:	f5 e7       	ldi	r31, 0x75	; 117
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <kilo_start+0x1de>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <kilo_start+0x1e4>
     b1a:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b1c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b20:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <kilo_start+0x210>
     b26:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b2a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b2e:	8f e2       	ldi	r24, 0x2F	; 47
     b30:	95 e7       	ldi	r25, 0x75	; 117
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <kilo_start+0x1fc>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <kilo_start+0x202>
     b38:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b3a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
     b3e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b42:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b46:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b4a:	ff ce       	rjmp	.-514    	; 0x94a <kilo_start+0x14>

00000b4c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
    rx_timer_off();
     b5a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b5e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b62:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     b6c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
    rx_busy = 0;
     b70:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    adc_trigger_high_gain();
     b74:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b78:	93 ea       	ldi	r25, 0xA3	; 163
     b7a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b7e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	2f 93       	push	r18
     ba0:	3f 93       	push	r19
     ba2:	4f 93       	push	r20
     ba4:	5f 93       	push	r21
     ba6:	6f 93       	push	r22
     ba8:	7f 93       	push	r23
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     bb6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bba:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bc4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_leadingbit>
     bc8:	88 23       	and	r24, r24
     bca:	21 f1       	breq	.+72     	; 0xc14 <__vector_23+0x84>
        rx_timer_on();
     bcc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bd0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bd4:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     bd8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
        rx_leadingbit = 0;
     bdc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <rx_leadingbit>
        if (rx_leadingbyte) {
     be0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <__vector_23+0x5a>
     be8:	af c1       	rjmp	.+862    	; 0xf48 <__vector_23+0x3b8>
            adc_finish_conversion();
     bea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bee:	86 fd       	sbrc	r24, 6
     bf0:	fc cf       	rjmp	.-8      	; 0xbea <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     bf2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     bf6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     bfa:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x3>
     bfe:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist+0x2>
            adc_trigger_low_gain();
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c08:	93 ea       	ldi	r25, 0xA3	; 163
     c0a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c0e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c12:	9a c1       	rjmp	.+820    	; 0xf48 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c14:	c9 01       	movw	r24, r18
     c16:	87 58       	subi	r24, 0x87	; 135
     c18:	91 09       	sbc	r25, r1
     c1a:	84 37       	cpi	r24, 0x74	; 116
     c1c:	99 40       	sbci	r25, 0x09	; 9
     c1e:	a0 f0       	brcs	.+40     	; 0xc48 <__vector_23+0xb8>
            rx_timer_off();
     c20:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c24:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c28:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c2c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
            rx_leadingbyte = 1;
     c30:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
            rx_busy = 0;
     c34:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
            adc_trigger_high_gain();
     c38:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c3c:	83 ea       	ldi	r24, 0xA3	; 163
     c3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c42:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c46:	80 c1       	rjmp	.+768    	; 0xf48 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c48:	26 58       	subi	r18, 0x86	; 134
     c4a:	31 09       	sbc	r19, r1
     c4c:	a4 ef       	ldi	r26, 0xF4	; 244
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	0e 94 87 08 	call	0x110e	; 0x110e <__umulhisi3>
     c54:	8c 01       	movw	r16, r24
     c56:	22 27       	eor	r18, r18
     c58:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c5a:	08 30       	cpi	r16, 0x08	; 8
     c5c:	60 f4       	brcc	.+24     	; 0xc76 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <__vector_23+0xd6>
     c64:	88 0f       	add	r24, r24
     c66:	0a 95       	dec	r16
     c68:	ea f7       	brpl	.-6      	; 0xc64 <__vector_23+0xd4>
     c6a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     c6e:	89 2b       	or	r24, r25
     c70:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_bytevalue>
     c74:	69 c1       	rjmp	.+722    	; 0xf48 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c76:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
                if (rx_leadingbyte) {
     c7a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     c7e:	88 23       	and	r24, r24
     c80:	41 f1       	breq	.+80     	; 0xcd2 <__vector_23+0x142>
                    adc_finish_conversion();
     c82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c86:	86 fd       	sbrc	r24, 6
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c92:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <rx_dist+0x1>
     c96:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_dist>
                    adc_trigger_high_gain();
     c9a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c9e:	83 ea       	ldi	r24, 0xA3	; 163
     ca0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     caa:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     cae:	99 23       	and	r25, r25
     cb0:	59 f0       	breq	.+22     	; 0xcc8 <__vector_23+0x138>
                        rx_timer_off();
     cb2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cb6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cbe:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     cc2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
     cc6:	40 c1       	rjmp	.+640    	; 0xf48 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cc8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <rx_leadingbyte>
                        rx_byteindex = 0;
     ccc:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
     cd0:	3b c1       	rjmp	.+630    	; 0xf48 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     cd2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rx_byteindex>
     cd6:	e8 2f       	mov	r30, r24
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	e8 59       	subi	r30, 0x98	; 152
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     ce2:	90 83       	st	Z, r25
                    rx_byteindex++;
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cea:	8c 30       	cpi	r24, 0x0C	; 12
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__vector_23+0x160>
     cee:	2c c1       	rjmp	.+600    	; 0xf48 <__vector_23+0x3b8>
                        rx_timer_off();
     cf0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cf4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cf8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cfc:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     d00:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d04:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <rx_msg+0xa>
     d08:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <rx_msg+0xb>
     d0c:	88 e6       	ldi	r24, 0x68	; 104
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 b7 07 	call	0xf6e	; 0xf6e <message_crc>
     d14:	08 17       	cp	r16, r24
     d16:	19 07       	cpc	r17, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_23+0x18c>
     d1a:	16 c1       	rjmp	.+556    	; 0xf48 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d1c:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <rx_msg+0x9>
     d20:	e7 fd       	sbrc	r30, 7
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d24:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     d28:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     d2c:	6d e3       	ldi	r22, 0x3D	; 61
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	88 e6       	ldi	r24, 0x68	; 104
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	09 95       	icall
     d36:	08 c1       	rjmp	.+528    	; 0xf48 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d38:	88 e7       	ldi	r24, 0x78	; 120
     d3a:	8e 0f       	add	r24, r30
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	30 f0       	brcs	.+12     	; 0xd4c <__vector_23+0x1bc>
        motors_off();
     d40:	53 98       	cbi	0x0a, 3	; 10
     d42:	23 98       	cbi	0x04, 3	; 4
     d44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d48:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d4c:	8e 2f       	mov	r24, r30
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	e0 58       	subi	r30, 0x80	; 128
     d54:	f1 09       	sbc	r31, r1
     d56:	eb 30       	cpi	r30, 0x0B	; 11
     d58:	f1 05       	cpc	r31, r1
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <__vector_23+0x1ce>
     d5c:	f5 c0       	rjmp	.+490    	; 0xf48 <__vector_23+0x3b8>
     d5e:	e5 5c       	subi	r30, 0xC5	; 197
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d66:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d6a:	8d 7f       	andi	r24, 0xFD	; 253
     d6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d70:	16 bc       	out	0x26, r1	; 38
            bootload();
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f0 e7       	ldi	r31, 0x70	; 112
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d78:	e0 e0       	ldi	r30, 0x00	; 0
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d7e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
     d82:	e2 c0       	rjmp	.+452    	; 0xf48 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	b2 c0       	rjmp	.+356    	; 0xeec <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	b0 c0       	rjmp	.+352    	; 0xeec <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	ae c0       	rjmp	.+348    	; 0xeec <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d90:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	09 f4       	brne	.+2      	; 0xd9a <__vector_23+0x20a>
     d98:	d7 c0       	rjmp	.+430    	; 0xf48 <__vector_23+0x3b8>
     d9a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	09 f4       	brne	.+2      	; 0xda4 <__vector_23+0x214>
     da2:	d2 c0       	rjmp	.+420    	; 0xf48 <__vector_23+0x3b8>
                motors_on();
     da4:	53 9a       	sbi	0x0a, 3	; 10
     da6:	23 9a       	sbi	0x04, 3	; 4
     da8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	9c c0       	rjmp	.+312    	; 0xeec <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     db4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	09 f4       	brne	.+2      	; 0xdbe <__vector_23+0x22e>
     dbc:	4b c0       	rjmp	.+150    	; 0xe54 <__vector_23+0x2c4>
     dbe:	80 f4       	brcc	.+32     	; 0xde0 <__vector_23+0x250>
     dc0:	88 23       	and	r24, r24
     dc2:	a9 f0       	breq	.+42     	; 0xdee <__vector_23+0x25e>
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <__vector_23+0x23a>
     dc8:	82 c0       	rjmp	.+260    	; 0xece <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     dca:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x1>
     dce:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_msg+0x2>
     dd2:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <kilo_uid+0x1>
     dd6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_uid>
                    cur_motion = MOVE_STOP;
     dda:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     dde:	77 c0       	rjmp	.+238    	; 0xece <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	09 f4       	brne	.+2      	; 0xde6 <__vector_23+0x256>
     de4:	49 c0       	rjmp	.+146    	; 0xe78 <__vector_23+0x2e8>
     de6:	84 30       	cpi	r24, 0x04	; 4
     de8:	09 f4       	brne	.+2      	; 0xdec <__vector_23+0x25c>
     dea:	58 c0       	rjmp	.+176    	; 0xe9c <__vector_23+0x30c>
     dec:	70 c0       	rjmp	.+224    	; 0xece <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     dee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     df2:	86 30       	cpi	r24, 0x06	; 6
     df4:	09 f0       	breq	.+2      	; 0xdf8 <__vector_23+0x268>
     df6:	6b c0       	rjmp	.+214    	; 0xece <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     df8:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_uid>
     dfc:	80 eb       	ldi	r24, 0xB0	; 176
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e04:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <kilo_uid+0x1>
     e08:	81 eb       	ldi	r24, 0xB1	; 177
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e10:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_turn_left>
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e1c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
     e20:	89 e0       	ldi	r24, 0x09	; 9
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e28:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_straight_left>
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e34:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
     e38:	84 e1       	ldi	r24, 0x14	; 20
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 1e 0b 	call	0x163c	; 0x163c <eeprom_write_byte>
                        motors_off();
     e40:	53 98       	cbi	0x0a, 3	; 10
     e42:	23 98       	cbi	0x04, 3	; 4
     e44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e48:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     e52:	3d c0       	rjmp	.+122    	; 0xece <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e54:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e58:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x3>
     e5c:	91 30       	cpi	r25, 0x01	; 1
     e5e:	21 f4       	brne	.+8      	; 0xe68 <__vector_23+0x2d8>
     e60:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_turn_left>
     e64:	89 17       	cp	r24, r25
     e66:	99 f1       	breq	.+102    	; 0xece <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e68:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e72:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
     e76:	2b c0       	rjmp	.+86     	; 0xece <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e78:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e7c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x4>
     e80:	92 30       	cpi	r25, 0x02	; 2
     e82:	21 f4       	brne	.+8      	; 0xe8c <__vector_23+0x2fc>
     e84:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_turn_right>
     e88:	89 17       	cp	r24, r25
     e8a:	09 f1       	breq	.+66     	; 0xece <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e8c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     e96:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
     e9a:	19 c0       	rjmp	.+50     	; 0xece <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     e9c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
     ea0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg+0x6>
     ea4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <rx_msg+0x5>
     ea8:	23 30       	cpi	r18, 0x03	; 3
     eaa:	41 f4       	brne	.+16     	; 0xebc <__vector_23+0x32c>
     eac:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <kilo_straight_right>
     eb0:	82 13       	cpse	r24, r18
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <__vector_23+0x32c>
     eb4:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <kilo_straight_left>
     eb8:	92 17       	cp	r25, r18
     eba:	49 f0       	breq	.+18     	; 0xece <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ebc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     ec0:	23 e0       	ldi	r18, 0x03	; 3
     ec2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     ec6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     eca:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ece:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     ed2:	88 23       	and	r24, r24
     ed4:	c9 f1       	breq	.+114    	; 0xf48 <__vector_23+0x3b8>
     ed6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     eda:	86 30       	cpi	r24, 0x06	; 6
     edc:	a9 f1       	breq	.+106    	; 0xf48 <__vector_23+0x3b8>
                motors_on();
     ede:	53 9a       	sbi	0x0a, 3	; 10
     ee0:	23 9a       	sbi	0x04, 3	; 4
     ee2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ee6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     eea:	86 e0       	ldi	r24, 0x06	; 6
     eec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     ef0:	2b c0       	rjmp	.+86     	; 0xf48 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     ef2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     ef6:	86 30       	cpi	r24, 0x06	; 6
     ef8:	81 f0       	breq	.+32     	; 0xf1a <__vector_23+0x38a>
                motors_on();
     efa:	53 9a       	sbi	0x0a, 3	; 10
     efc:	23 9a       	sbi	0x04, 3	; 4
     efe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f02:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f0c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     f10:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <rx_msg>
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <__vector_23+0x398>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <__vector_23+0x394>
     f2c:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <kilo_uid>
     f30:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <kilo_uid+0x1>
     f34:	82 23       	and	r24, r18
     f36:	93 23       	and	r25, r19
     f38:	89 2b       	or	r24, r25
     f3a:	21 f0       	breq	.+8      	; 0xf44 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f44:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f6e:	fc 01       	movw	r30, r24
     f70:	9c 01       	movw	r18, r24
     f72:	26 5f       	subi	r18, 0xF6	; 246
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f7a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f7c:	84 27       	eor	r24, r20
     f7e:	08 2e       	mov	r0, r24
     f80:	82 95       	swap	r24
     f82:	80 7f       	andi	r24, 0xF0	; 240
     f84:	80 25       	eor	r24, r0
     f86:	09 2e       	mov	r0, r25
     f88:	98 2f       	mov	r25, r24
     f8a:	82 95       	swap	r24
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	08 26       	eor	r0, r24
     f90:	86 95       	lsr	r24
     f92:	98 27       	eor	r25, r24
     f94:	89 27       	eor	r24, r25
     f96:	88 0f       	add	r24, r24
     f98:	88 0f       	add	r24, r24
     f9a:	88 0f       	add	r24, r24
     f9c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     f9e:	e2 17       	cp	r30, r18
     fa0:	f3 07       	cpc	r31, r19
     fa2:	59 f7       	brne	.-42     	; 0xf7a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fa4:	08 95       	ret

00000fa6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     fa6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     fa8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     faa:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     fac:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <tx_mask>
    or tmpreg1, ddrreg
     fb0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     fb2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     fb4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fb6:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
     fba:	20 30       	cpi	r18, 0x00	; 0
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <message_send+0x22>
     fbe:	00 00       	nop
     fc0:	25 b1       	in	r18, 0x05	; 5
     fc2:	23 2b       	or	r18, r19
     fc4:	25 b9       	out	0x05, r18	; 5
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <message_send+0x2a>
     fc8:	00 00       	nop
     fca:	00 00       	nop
     fcc:	00 00       	nop
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <message_send+0x2a>
     fd0:	00 00       	nop
     fd2:	00 00       	nop
     fd4:	00 00       	nop
     fd6:	30 95       	com	r19
     fd8:	25 b1       	in	r18, 0x05	; 5
     fda:	23 23       	and	r18, r19
     fdc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     fde:	2e ea       	ldi	r18, 0xAE	; 174
     fe0:	2a 95       	dec	r18
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     fe4:	2b ee       	ldi	r18, 0xEB	; 235

00000fe6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     fe6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     fe8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     fec:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     fee:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
     ff2:	30 95       	com	r19
    in tmpreg1, IR_PORT
     ff4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     ff6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     ff8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     ffa:	0f be       	out	0x3f, r0	; 63
    return 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <nocollision>:
nocollision:
    nop
    1000:	00 00       	nop
    dec tmpreg1
    1002:	2a 95       	dec	r18
    brne checkcollision
    1004:	81 f7       	brne	.-32     	; 0xfe6 <checkcollision>

    ldi tmpreg1, 0x01
    1006:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1008:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    100c:	20 30       	cpi	r18, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <nocollision+0x1a>
    1010:	00 00       	nop
    1012:	25 b1       	in	r18, 0x05	; 5
    1014:	23 2b       	or	r18, r19
    1016:	25 b9       	out	0x05, r18	; 5
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <nocollision+0x22>
    101a:	00 00       	nop
    101c:	00 00       	nop
    101e:	00 00       	nop
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <nocollision+0x22>
    1022:	00 00       	nop
    1024:	00 00       	nop
    1026:	00 00       	nop
    1028:	30 95       	com	r19
    102a:	25 b1       	in	r18, 0x05	; 5
    102c:	23 23       	and	r18, r19
    102e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1030:	00 00       	nop
    1032:	24 e5       	ldi	r18, 0x54	; 84
    1034:	2a 95       	dec	r18
    1036:	f1 f7       	brne	.-4      	; 0x1034 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1038:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    103a:	8c e0       	ldi	r24, 0x0C	; 12

0000103c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    103c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    103e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1040:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1042:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1044:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1046:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1048:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    104a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    104c:	50 e0       	ldi	r21, 0x00	; 0

0000104e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    104e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1050:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1052:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1054:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1056:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    105a:	20 30       	cpi	r18, 0x00	; 0
    105c:	29 f0       	breq	.+10     	; 0x1068 <sendbit+0x1a>
    105e:	00 00       	nop
    1060:	25 b1       	in	r18, 0x05	; 5
    1062:	23 2b       	or	r18, r19
    1064:	25 b9       	out	0x05, r18	; 5
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <sendbit+0x22>
    1068:	00 00       	nop
    106a:	00 00       	nop
    106c:	00 00       	nop
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <sendbit+0x22>
    1070:	00 00       	nop
    1072:	00 00       	nop
    1074:	00 00       	nop
    1076:	30 95       	com	r19
    1078:	25 b1       	in	r18, 0x05	; 5
    107a:	23 23       	and	r18, r19
    107c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    107e:	00 00       	nop
    1080:	21 e5       	ldi	r18, 0x51	; 81
    1082:	2a 95       	dec	r18
    1084:	f1 f7       	brne	.-4      	; 0x1082 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1086:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1088:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    108a:	9a 95       	dec	r25
    brne sendbit
    108c:	01 f7       	brne	.-64     	; 0x104e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    108e:	8a 95       	dec	r24
    brne sendbyte
    1090:	a9 f6       	brne	.-86     	; 0x103c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1092:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1094:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1096:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1098:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    109a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
    109e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10a0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10a2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10a4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10a6:	0f be       	out	0x3f, r0	; 63
    return 1
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	08 95       	ret

000010ac <main>:
  }
}

int main() {
  kilo_init();
    10ac:	0e 94 a3 00 	call	0x146	; 0x146 <kilo_init>
  kilo_message_tx = message_tx;
    10b0:	81 e7       	ldi	r24, 0x71	; 113
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    10b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    10bc:	84 e7       	ldi	r24, 0x74	; 116
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    10c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
  kilo_start(setup, loop);
    10c8:	69 e8       	ldi	r22, 0x89	; 137
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	8b e7       	ldi	r24, 0x7B	; 123
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 9b 04 	call	0x936	; 0x936 <kilo_start>

  return 0;
}
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	08 95       	ret

000010da <__divmodhi4>:
    10da:	97 fb       	bst	r25, 7
    10dc:	07 2e       	mov	r0, r23
    10de:	16 f4       	brtc	.+4      	; 0x10e4 <__divmodhi4+0xa>
    10e0:	00 94       	com	r0
    10e2:	07 d0       	rcall	.+14     	; 0x10f2 <__divmodhi4_neg1>
    10e4:	77 fd       	sbrc	r23, 7
    10e6:	09 d0       	rcall	.+18     	; 0x10fa <__divmodhi4_neg2>
    10e8:	0e 94 96 08 	call	0x112c	; 0x112c <__udivmodhi4>
    10ec:	07 fc       	sbrc	r0, 7
    10ee:	05 d0       	rcall	.+10     	; 0x10fa <__divmodhi4_neg2>
    10f0:	3e f4       	brtc	.+14     	; 0x1100 <__divmodhi4_exit>

000010f2 <__divmodhi4_neg1>:
    10f2:	90 95       	com	r25
    10f4:	81 95       	neg	r24
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	08 95       	ret

000010fa <__divmodhi4_neg2>:
    10fa:	70 95       	com	r23
    10fc:	61 95       	neg	r22
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001100 <__divmodhi4_exit>:
    1100:	08 95       	ret

00001102 <__tablejump2__>:
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	05 90       	lpm	r0, Z+
    1108:	f4 91       	lpm	r31, Z
    110a:	e0 2d       	mov	r30, r0
    110c:	09 94       	ijmp

0000110e <__umulhisi3>:
    110e:	a2 9f       	mul	r26, r18
    1110:	b0 01       	movw	r22, r0
    1112:	b3 9f       	mul	r27, r19
    1114:	c0 01       	movw	r24, r0
    1116:	a3 9f       	mul	r26, r19
    1118:	70 0d       	add	r23, r0
    111a:	81 1d       	adc	r24, r1
    111c:	11 24       	eor	r1, r1
    111e:	91 1d       	adc	r25, r1
    1120:	b2 9f       	mul	r27, r18
    1122:	70 0d       	add	r23, r0
    1124:	81 1d       	adc	r24, r1
    1126:	11 24       	eor	r1, r1
    1128:	91 1d       	adc	r25, r1
    112a:	08 95       	ret

0000112c <__udivmodhi4>:
    112c:	aa 1b       	sub	r26, r26
    112e:	bb 1b       	sub	r27, r27
    1130:	51 e1       	ldi	r21, 0x11	; 17
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <__udivmodhi4_ep>

00001134 <__udivmodhi4_loop>:
    1134:	aa 1f       	adc	r26, r26
    1136:	bb 1f       	adc	r27, r27
    1138:	a6 17       	cp	r26, r22
    113a:	b7 07       	cpc	r27, r23
    113c:	10 f0       	brcs	.+4      	; 0x1142 <__udivmodhi4_ep>
    113e:	a6 1b       	sub	r26, r22
    1140:	b7 0b       	sbc	r27, r23

00001142 <__udivmodhi4_ep>:
    1142:	88 1f       	adc	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	5a 95       	dec	r21
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__udivmodhi4_loop>
    114a:	80 95       	com	r24
    114c:	90 95       	com	r25
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	08 95       	ret

00001154 <__subsf3>:
    1154:	50 58       	subi	r21, 0x80	; 128

00001156 <__addsf3>:
    1156:	bb 27       	eor	r27, r27
    1158:	aa 27       	eor	r26, r26
    115a:	0e 94 c2 08 	call	0x1184	; 0x1184 <__addsf3x>
    115e:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_round>
    1162:	0e 94 05 0a 	call	0x140a	; 0x140a <__fp_pscA>
    1166:	38 f0       	brcs	.+14     	; 0x1176 <__addsf3+0x20>
    1168:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscB>
    116c:	20 f0       	brcs	.+8      	; 0x1176 <__addsf3+0x20>
    116e:	39 f4       	brne	.+14     	; 0x117e <__addsf3+0x28>
    1170:	9f 3f       	cpi	r25, 0xFF	; 255
    1172:	19 f4       	brne	.+6      	; 0x117a <__addsf3+0x24>
    1174:	26 f4       	brtc	.+8      	; 0x117e <__addsf3+0x28>
    1176:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_nan>
    117a:	0e f4       	brtc	.+2      	; 0x117e <__addsf3+0x28>
    117c:	e0 95       	com	r30
    117e:	e7 fb       	bst	r30, 7
    1180:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_inf>

00001184 <__addsf3x>:
    1184:	e9 2f       	mov	r30, r25
    1186:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_split3>
    118a:	58 f3       	brcs	.-42     	; 0x1162 <__addsf3+0xc>
    118c:	ba 17       	cp	r27, r26
    118e:	62 07       	cpc	r22, r18
    1190:	73 07       	cpc	r23, r19
    1192:	84 07       	cpc	r24, r20
    1194:	95 07       	cpc	r25, r21
    1196:	20 f0       	brcs	.+8      	; 0x11a0 <__addsf3x+0x1c>
    1198:	79 f4       	brne	.+30     	; 0x11b8 <__addsf3x+0x34>
    119a:	a6 f5       	brtc	.+104    	; 0x1204 <__addsf3x+0x80>
    119c:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__fp_zero>
    11a0:	0e f4       	brtc	.+2      	; 0x11a4 <__addsf3x+0x20>
    11a2:	e0 95       	com	r30
    11a4:	0b 2e       	mov	r0, r27
    11a6:	ba 2f       	mov	r27, r26
    11a8:	a0 2d       	mov	r26, r0
    11aa:	0b 01       	movw	r0, r22
    11ac:	b9 01       	movw	r22, r18
    11ae:	90 01       	movw	r18, r0
    11b0:	0c 01       	movw	r0, r24
    11b2:	ca 01       	movw	r24, r20
    11b4:	a0 01       	movw	r20, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	ff 27       	eor	r31, r31
    11ba:	59 1b       	sub	r21, r25
    11bc:	99 f0       	breq	.+38     	; 0x11e4 <__addsf3x+0x60>
    11be:	59 3f       	cpi	r21, 0xF9	; 249
    11c0:	50 f4       	brcc	.+20     	; 0x11d6 <__addsf3x+0x52>
    11c2:	50 3e       	cpi	r21, 0xE0	; 224
    11c4:	68 f1       	brcs	.+90     	; 0x1220 <__addsf3x+0x9c>
    11c6:	1a 16       	cp	r1, r26
    11c8:	f0 40       	sbci	r31, 0x00	; 0
    11ca:	a2 2f       	mov	r26, r18
    11cc:	23 2f       	mov	r18, r19
    11ce:	34 2f       	mov	r19, r20
    11d0:	44 27       	eor	r20, r20
    11d2:	58 5f       	subi	r21, 0xF8	; 248
    11d4:	f3 cf       	rjmp	.-26     	; 0x11bc <__addsf3x+0x38>
    11d6:	46 95       	lsr	r20
    11d8:	37 95       	ror	r19
    11da:	27 95       	ror	r18
    11dc:	a7 95       	ror	r26
    11de:	f0 40       	sbci	r31, 0x00	; 0
    11e0:	53 95       	inc	r21
    11e2:	c9 f7       	brne	.-14     	; 0x11d6 <__addsf3x+0x52>
    11e4:	7e f4       	brtc	.+30     	; 0x1204 <__addsf3x+0x80>
    11e6:	1f 16       	cp	r1, r31
    11e8:	ba 0b       	sbc	r27, r26
    11ea:	62 0b       	sbc	r22, r18
    11ec:	73 0b       	sbc	r23, r19
    11ee:	84 0b       	sbc	r24, r20
    11f0:	ba f0       	brmi	.+46     	; 0x1220 <__addsf3x+0x9c>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	a1 f0       	breq	.+40     	; 0x121e <__addsf3x+0x9a>
    11f6:	ff 0f       	add	r31, r31
    11f8:	bb 1f       	adc	r27, r27
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	c2 f7       	brpl	.-16     	; 0x11f2 <__addsf3x+0x6e>
    1202:	0e c0       	rjmp	.+28     	; 0x1220 <__addsf3x+0x9c>
    1204:	ba 0f       	add	r27, r26
    1206:	62 1f       	adc	r22, r18
    1208:	73 1f       	adc	r23, r19
    120a:	84 1f       	adc	r24, r20
    120c:	48 f4       	brcc	.+18     	; 0x1220 <__addsf3x+0x9c>
    120e:	87 95       	ror	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b7 95       	ror	r27
    1216:	f7 95       	ror	r31
    1218:	9e 3f       	cpi	r25, 0xFE	; 254
    121a:	08 f0       	brcs	.+2      	; 0x121e <__addsf3x+0x9a>
    121c:	b0 cf       	rjmp	.-160    	; 0x117e <__addsf3+0x28>
    121e:	93 95       	inc	r25
    1220:	88 0f       	add	r24, r24
    1222:	08 f0       	brcs	.+2      	; 0x1226 <__addsf3x+0xa2>
    1224:	99 27       	eor	r25, r25
    1226:	ee 0f       	add	r30, r30
    1228:	97 95       	ror	r25
    122a:	87 95       	ror	r24
    122c:	08 95       	ret

0000122e <__divsf3>:
    122e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divsf3x>
    1232:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_round>
    1236:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscB>
    123a:	58 f0       	brcs	.+22     	; 0x1252 <__divsf3+0x24>
    123c:	0e 94 05 0a 	call	0x140a	; 0x140a <__fp_pscA>
    1240:	40 f0       	brcs	.+16     	; 0x1252 <__divsf3+0x24>
    1242:	29 f4       	brne	.+10     	; 0x124e <__divsf3+0x20>
    1244:	5f 3f       	cpi	r21, 0xFF	; 255
    1246:	29 f0       	breq	.+10     	; 0x1252 <__divsf3+0x24>
    1248:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_inf>
    124c:	51 11       	cpse	r21, r1
    124e:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_szero>
    1252:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_nan>

00001256 <__divsf3x>:
    1256:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_split3>
    125a:	68 f3       	brcs	.-38     	; 0x1236 <__divsf3+0x8>

0000125c <__divsf3_pse>:
    125c:	99 23       	and	r25, r25
    125e:	b1 f3       	breq	.-20     	; 0x124c <__divsf3+0x1e>
    1260:	55 23       	and	r21, r21
    1262:	91 f3       	breq	.-28     	; 0x1248 <__divsf3+0x1a>
    1264:	95 1b       	sub	r25, r21
    1266:	55 0b       	sbc	r21, r21
    1268:	bb 27       	eor	r27, r27
    126a:	aa 27       	eor	r26, r26
    126c:	62 17       	cp	r22, r18
    126e:	73 07       	cpc	r23, r19
    1270:	84 07       	cpc	r24, r20
    1272:	38 f0       	brcs	.+14     	; 0x1282 <__divsf3_pse+0x26>
    1274:	9f 5f       	subi	r25, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	44 1f       	adc	r20, r20
    127e:	aa 1f       	adc	r26, r26
    1280:	a9 f3       	breq	.-22     	; 0x126c <__divsf3_pse+0x10>
    1282:	35 d0       	rcall	.+106    	; 0x12ee <__divsf3_pse+0x92>
    1284:	0e 2e       	mov	r0, r30
    1286:	3a f0       	brmi	.+14     	; 0x1296 <__divsf3_pse+0x3a>
    1288:	e0 e8       	ldi	r30, 0x80	; 128
    128a:	32 d0       	rcall	.+100    	; 0x12f0 <__divsf3_pse+0x94>
    128c:	91 50       	subi	r25, 0x01	; 1
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	e6 95       	lsr	r30
    1292:	00 1c       	adc	r0, r0
    1294:	ca f7       	brpl	.-14     	; 0x1288 <__divsf3_pse+0x2c>
    1296:	2b d0       	rcall	.+86     	; 0x12ee <__divsf3_pse+0x92>
    1298:	fe 2f       	mov	r31, r30
    129a:	29 d0       	rcall	.+82     	; 0x12ee <__divsf3_pse+0x92>
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	bb 1f       	adc	r27, r27
    12a4:	26 17       	cp	r18, r22
    12a6:	37 07       	cpc	r19, r23
    12a8:	48 07       	cpc	r20, r24
    12aa:	ab 07       	cpc	r26, r27
    12ac:	b0 e8       	ldi	r27, 0x80	; 128
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__divsf3_pse+0x56>
    12b0:	bb 0b       	sbc	r27, r27
    12b2:	80 2d       	mov	r24, r0
    12b4:	bf 01       	movw	r22, r30
    12b6:	ff 27       	eor	r31, r31
    12b8:	93 58       	subi	r25, 0x83	; 131
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	3a f0       	brmi	.+14     	; 0x12cc <__divsf3_pse+0x70>
    12be:	9e 3f       	cpi	r25, 0xFE	; 254
    12c0:	51 05       	cpc	r21, r1
    12c2:	78 f0       	brcs	.+30     	; 0x12e2 <__divsf3_pse+0x86>
    12c4:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_inf>
    12c8:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_szero>
    12cc:	5f 3f       	cpi	r21, 0xFF	; 255
    12ce:	e4 f3       	brlt	.-8      	; 0x12c8 <__divsf3_pse+0x6c>
    12d0:	98 3e       	cpi	r25, 0xE8	; 232
    12d2:	d4 f3       	brlt	.-12     	; 0x12c8 <__divsf3_pse+0x6c>
    12d4:	86 95       	lsr	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b7 95       	ror	r27
    12dc:	f7 95       	ror	r31
    12de:	9f 5f       	subi	r25, 0xFF	; 255
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__divsf3_pse+0x78>
    12e2:	88 0f       	add	r24, r24
    12e4:	91 1d       	adc	r25, r1
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	97 f9       	bld	r25, 7
    12ec:	08 95       	ret
    12ee:	e1 e0       	ldi	r30, 0x01	; 1
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	bb 1f       	adc	r27, r27
    12f8:	62 17       	cp	r22, r18
    12fa:	73 07       	cpc	r23, r19
    12fc:	84 07       	cpc	r24, r20
    12fe:	ba 07       	cpc	r27, r26
    1300:	20 f0       	brcs	.+8      	; 0x130a <__divsf3_pse+0xae>
    1302:	62 1b       	sub	r22, r18
    1304:	73 0b       	sbc	r23, r19
    1306:	84 0b       	sbc	r24, r20
    1308:	ba 0b       	sbc	r27, r26
    130a:	ee 1f       	adc	r30, r30
    130c:	88 f7       	brcc	.-30     	; 0x12f0 <__divsf3_pse+0x94>
    130e:	e0 95       	com	r30
    1310:	08 95       	ret

00001312 <__fixsfsi>:
    1312:	0e 94 90 09 	call	0x1320	; 0x1320 <__fixunssfsi>
    1316:	68 94       	set
    1318:	b1 11       	cpse	r27, r1
    131a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_szero>
    131e:	08 95       	ret

00001320 <__fixunssfsi>:
    1320:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__fp_splitA>
    1324:	88 f0       	brcs	.+34     	; 0x1348 <__fixunssfsi+0x28>
    1326:	9f 57       	subi	r25, 0x7F	; 127
    1328:	98 f0       	brcs	.+38     	; 0x1350 <__fixunssfsi+0x30>
    132a:	b9 2f       	mov	r27, r25
    132c:	99 27       	eor	r25, r25
    132e:	b7 51       	subi	r27, 0x17	; 23
    1330:	b0 f0       	brcs	.+44     	; 0x135e <__fixunssfsi+0x3e>
    1332:	e1 f0       	breq	.+56     	; 0x136c <__fixunssfsi+0x4c>
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	1a f0       	brmi	.+6      	; 0x1344 <__fixunssfsi+0x24>
    133e:	ba 95       	dec	r27
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__fixunssfsi+0x14>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <__fixunssfsi+0x4c>
    1344:	b1 30       	cpi	r27, 0x01	; 1
    1346:	91 f0       	breq	.+36     	; 0x136c <__fixunssfsi+0x4c>
    1348:	0e 94 46 0a 	call	0x148c	; 0x148c <__fp_zero>
    134c:	b1 e0       	ldi	r27, 0x01	; 1
    134e:	08 95       	ret
    1350:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__fp_zero>
    1354:	67 2f       	mov	r22, r23
    1356:	78 2f       	mov	r23, r24
    1358:	88 27       	eor	r24, r24
    135a:	b8 5f       	subi	r27, 0xF8	; 248
    135c:	39 f0       	breq	.+14     	; 0x136c <__fixunssfsi+0x4c>
    135e:	b9 3f       	cpi	r27, 0xF9	; 249
    1360:	cc f3       	brlt	.-14     	; 0x1354 <__fixunssfsi+0x34>
    1362:	86 95       	lsr	r24
    1364:	77 95       	ror	r23
    1366:	67 95       	ror	r22
    1368:	b3 95       	inc	r27
    136a:	d9 f7       	brne	.-10     	; 0x1362 <__fixunssfsi+0x42>
    136c:	3e f4       	brtc	.+14     	; 0x137c <__fixunssfsi+0x5c>
    136e:	90 95       	com	r25
    1370:	80 95       	com	r24
    1372:	70 95       	com	r23
    1374:	61 95       	neg	r22
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__floatunsisf>:
    137e:	e8 94       	clt
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <__floatsisf+0x12>

00001382 <__floatsisf>:
    1382:	97 fb       	bst	r25, 7
    1384:	3e f4       	brtc	.+14     	; 0x1394 <__floatsisf+0x12>
    1386:	90 95       	com	r25
    1388:	80 95       	com	r24
    138a:	70 95       	com	r23
    138c:	61 95       	neg	r22
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	99 23       	and	r25, r25
    1396:	a9 f0       	breq	.+42     	; 0x13c2 <__floatsisf+0x40>
    1398:	f9 2f       	mov	r31, r25
    139a:	96 e9       	ldi	r25, 0x96	; 150
    139c:	bb 27       	eor	r27, r27
    139e:	93 95       	inc	r25
    13a0:	f6 95       	lsr	r31
    13a2:	87 95       	ror	r24
    13a4:	77 95       	ror	r23
    13a6:	67 95       	ror	r22
    13a8:	b7 95       	ror	r27
    13aa:	f1 11       	cpse	r31, r1
    13ac:	f8 cf       	rjmp	.-16     	; 0x139e <__floatsisf+0x1c>
    13ae:	fa f4       	brpl	.+62     	; 0x13ee <__floatsisf+0x6c>
    13b0:	bb 0f       	add	r27, r27
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <__floatsisf+0x36>
    13b4:	60 ff       	sbrs	r22, 0
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <__floatsisf+0x6c>
    13b8:	6f 5f       	subi	r22, 0xFF	; 255
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	16 c0       	rjmp	.+44     	; 0x13ee <__floatsisf+0x6c>
    13c2:	88 23       	and	r24, r24
    13c4:	11 f0       	breq	.+4      	; 0x13ca <__floatsisf+0x48>
    13c6:	96 e9       	ldi	r25, 0x96	; 150
    13c8:	11 c0       	rjmp	.+34     	; 0x13ec <__floatsisf+0x6a>
    13ca:	77 23       	and	r23, r23
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <__floatsisf+0x54>
    13ce:	9e e8       	ldi	r25, 0x8E	; 142
    13d0:	87 2f       	mov	r24, r23
    13d2:	76 2f       	mov	r23, r22
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <__floatsisf+0x5e>
    13d6:	66 23       	and	r22, r22
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <__floatsisf+0x74>
    13da:	96 e8       	ldi	r25, 0x86	; 134
    13dc:	86 2f       	mov	r24, r22
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	2a f0       	brmi	.+10     	; 0x13ee <__floatsisf+0x6c>
    13e4:	9a 95       	dec	r25
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	da f7       	brpl	.-10     	; 0x13e4 <__floatsisf+0x62>
    13ee:	88 0f       	add	r24, r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	97 f9       	bld	r25, 7
    13f6:	08 95       	ret

000013f8 <__fp_inf>:
    13f8:	97 f9       	bld	r25, 7
    13fa:	9f 67       	ori	r25, 0x7F	; 127
    13fc:	80 e8       	ldi	r24, 0x80	; 128
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	08 95       	ret

00001404 <__fp_nan>:
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	80 ec       	ldi	r24, 0xC0	; 192
    1408:	08 95       	ret

0000140a <__fp_pscA>:
    140a:	00 24       	eor	r0, r0
    140c:	0a 94       	dec	r0
    140e:	16 16       	cp	r1, r22
    1410:	17 06       	cpc	r1, r23
    1412:	18 06       	cpc	r1, r24
    1414:	09 06       	cpc	r0, r25
    1416:	08 95       	ret

00001418 <__fp_pscB>:
    1418:	00 24       	eor	r0, r0
    141a:	0a 94       	dec	r0
    141c:	12 16       	cp	r1, r18
    141e:	13 06       	cpc	r1, r19
    1420:	14 06       	cpc	r1, r20
    1422:	05 06       	cpc	r0, r21
    1424:	08 95       	ret

00001426 <__fp_round>:
    1426:	09 2e       	mov	r0, r25
    1428:	03 94       	inc	r0
    142a:	00 0c       	add	r0, r0
    142c:	11 f4       	brne	.+4      	; 0x1432 <__fp_round+0xc>
    142e:	88 23       	and	r24, r24
    1430:	52 f0       	brmi	.+20     	; 0x1446 <__fp_round+0x20>
    1432:	bb 0f       	add	r27, r27
    1434:	40 f4       	brcc	.+16     	; 0x1446 <__fp_round+0x20>
    1436:	bf 2b       	or	r27, r31
    1438:	11 f4       	brne	.+4      	; 0x143e <__fp_round+0x18>
    143a:	60 ff       	sbrs	r22, 0
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <__fp_round+0x20>
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	08 95       	ret

00001448 <__fp_split3>:
    1448:	57 fd       	sbrc	r21, 7
    144a:	90 58       	subi	r25, 0x80	; 128
    144c:	44 0f       	add	r20, r20
    144e:	55 1f       	adc	r21, r21
    1450:	59 f0       	breq	.+22     	; 0x1468 <__fp_splitA+0x10>
    1452:	5f 3f       	cpi	r21, 0xFF	; 255
    1454:	71 f0       	breq	.+28     	; 0x1472 <__fp_splitA+0x1a>
    1456:	47 95       	ror	r20

00001458 <__fp_splitA>:
    1458:	88 0f       	add	r24, r24
    145a:	97 fb       	bst	r25, 7
    145c:	99 1f       	adc	r25, r25
    145e:	61 f0       	breq	.+24     	; 0x1478 <__fp_splitA+0x20>
    1460:	9f 3f       	cpi	r25, 0xFF	; 255
    1462:	79 f0       	breq	.+30     	; 0x1482 <__fp_splitA+0x2a>
    1464:	87 95       	ror	r24
    1466:	08 95       	ret
    1468:	12 16       	cp	r1, r18
    146a:	13 06       	cpc	r1, r19
    146c:	14 06       	cpc	r1, r20
    146e:	55 1f       	adc	r21, r21
    1470:	f2 cf       	rjmp	.-28     	; 0x1456 <__fp_split3+0xe>
    1472:	46 95       	lsr	r20
    1474:	f1 df       	rcall	.-30     	; 0x1458 <__fp_splitA>
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <__fp_splitA+0x30>
    1478:	16 16       	cp	r1, r22
    147a:	17 06       	cpc	r1, r23
    147c:	18 06       	cpc	r1, r24
    147e:	99 1f       	adc	r25, r25
    1480:	f1 cf       	rjmp	.-30     	; 0x1464 <__fp_splitA+0xc>
    1482:	86 95       	lsr	r24
    1484:	71 05       	cpc	r23, r1
    1486:	61 05       	cpc	r22, r1
    1488:	08 94       	sec
    148a:	08 95       	ret

0000148c <__fp_zero>:
    148c:	e8 94       	clt

0000148e <__fp_szero>:
    148e:	bb 27       	eor	r27, r27
    1490:	66 27       	eor	r22, r22
    1492:	77 27       	eor	r23, r23
    1494:	cb 01       	movw	r24, r22
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret

0000149a <__mulsf3>:
    149a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__mulsf3x>
    149e:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_round>
    14a2:	0e 94 05 0a 	call	0x140a	; 0x140a <__fp_pscA>
    14a6:	38 f0       	brcs	.+14     	; 0x14b6 <__mulsf3+0x1c>
    14a8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_pscB>
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__mulsf3+0x1c>
    14ae:	95 23       	and	r25, r21
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <__mulsf3+0x1c>
    14b2:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_inf>
    14b6:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_nan>
    14ba:	11 24       	eor	r1, r1
    14bc:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_szero>

000014c0 <__mulsf3x>:
    14c0:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_split3>
    14c4:	70 f3       	brcs	.-36     	; 0x14a2 <__mulsf3+0x8>

000014c6 <__mulsf3_pse>:
    14c6:	95 9f       	mul	r25, r21
    14c8:	c1 f3       	breq	.-16     	; 0x14ba <__mulsf3+0x20>
    14ca:	95 0f       	add	r25, r21
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	55 1f       	adc	r21, r21
    14d0:	62 9f       	mul	r22, r18
    14d2:	f0 01       	movw	r30, r0
    14d4:	72 9f       	mul	r23, r18
    14d6:	bb 27       	eor	r27, r27
    14d8:	f0 0d       	add	r31, r0
    14da:	b1 1d       	adc	r27, r1
    14dc:	63 9f       	mul	r22, r19
    14de:	aa 27       	eor	r26, r26
    14e0:	f0 0d       	add	r31, r0
    14e2:	b1 1d       	adc	r27, r1
    14e4:	aa 1f       	adc	r26, r26
    14e6:	64 9f       	mul	r22, r20
    14e8:	66 27       	eor	r22, r22
    14ea:	b0 0d       	add	r27, r0
    14ec:	a1 1d       	adc	r26, r1
    14ee:	66 1f       	adc	r22, r22
    14f0:	82 9f       	mul	r24, r18
    14f2:	22 27       	eor	r18, r18
    14f4:	b0 0d       	add	r27, r0
    14f6:	a1 1d       	adc	r26, r1
    14f8:	62 1f       	adc	r22, r18
    14fa:	73 9f       	mul	r23, r19
    14fc:	b0 0d       	add	r27, r0
    14fe:	a1 1d       	adc	r26, r1
    1500:	62 1f       	adc	r22, r18
    1502:	83 9f       	mul	r24, r19
    1504:	a0 0d       	add	r26, r0
    1506:	61 1d       	adc	r22, r1
    1508:	22 1f       	adc	r18, r18
    150a:	74 9f       	mul	r23, r20
    150c:	33 27       	eor	r19, r19
    150e:	a0 0d       	add	r26, r0
    1510:	61 1d       	adc	r22, r1
    1512:	23 1f       	adc	r18, r19
    1514:	84 9f       	mul	r24, r20
    1516:	60 0d       	add	r22, r0
    1518:	21 1d       	adc	r18, r1
    151a:	82 2f       	mov	r24, r18
    151c:	76 2f       	mov	r23, r22
    151e:	6a 2f       	mov	r22, r26
    1520:	11 24       	eor	r1, r1
    1522:	9f 57       	subi	r25, 0x7F	; 127
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	9a f0       	brmi	.+38     	; 0x154e <__mulsf3_pse+0x88>
    1528:	f1 f0       	breq	.+60     	; 0x1566 <__mulsf3_pse+0xa0>
    152a:	88 23       	and	r24, r24
    152c:	4a f0       	brmi	.+18     	; 0x1540 <__mulsf3_pse+0x7a>
    152e:	ee 0f       	add	r30, r30
    1530:	ff 1f       	adc	r31, r31
    1532:	bb 1f       	adc	r27, r27
    1534:	66 1f       	adc	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	91 50       	subi	r25, 0x01	; 1
    153c:	50 40       	sbci	r21, 0x00	; 0
    153e:	a9 f7       	brne	.-22     	; 0x152a <__mulsf3_pse+0x64>
    1540:	9e 3f       	cpi	r25, 0xFE	; 254
    1542:	51 05       	cpc	r21, r1
    1544:	80 f0       	brcs	.+32     	; 0x1566 <__mulsf3_pse+0xa0>
    1546:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_inf>
    154a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__fp_szero>
    154e:	5f 3f       	cpi	r21, 0xFF	; 255
    1550:	e4 f3       	brlt	.-8      	; 0x154a <__mulsf3_pse+0x84>
    1552:	98 3e       	cpi	r25, 0xE8	; 232
    1554:	d4 f3       	brlt	.-12     	; 0x154a <__mulsf3_pse+0x84>
    1556:	86 95       	lsr	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	b7 95       	ror	r27
    155e:	f7 95       	ror	r31
    1560:	e7 95       	ror	r30
    1562:	9f 5f       	subi	r25, 0xFF	; 255
    1564:	c1 f7       	brne	.-16     	; 0x1556 <__mulsf3_pse+0x90>
    1566:	fe 2b       	or	r31, r30
    1568:	88 0f       	add	r24, r24
    156a:	91 1d       	adc	r25, r1
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <do_rand>:
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	68 81       	ld	r22, Y
    158c:	79 81       	ldd	r23, Y+1	; 0x01
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	9b 81       	ldd	r25, Y+3	; 0x03
    1592:	61 15       	cp	r22, r1
    1594:	71 05       	cpc	r23, r1
    1596:	81 05       	cpc	r24, r1
    1598:	91 05       	cpc	r25, r1
    159a:	21 f4       	brne	.+8      	; 0x15a4 <do_rand+0x30>
    159c:	64 e2       	ldi	r22, 0x24	; 36
    159e:	79 ed       	ldi	r23, 0xD9	; 217
    15a0:	8b e5       	ldi	r24, 0x5B	; 91
    15a2:	97 e0       	ldi	r25, 0x07	; 7
    15a4:	2d e1       	ldi	r18, 0x1D	; 29
    15a6:	33 ef       	ldi	r19, 0xF3	; 243
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__divmodsi4>
    15b0:	49 01       	movw	r8, r18
    15b2:	5a 01       	movw	r10, r20
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	a7 ea       	ldi	r26, 0xA7	; 167
    15ba:	b1 e4       	ldi	r27, 0x41	; 65
    15bc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__muluhisi3>
    15c0:	6b 01       	movw	r12, r22
    15c2:	7c 01       	movw	r14, r24
    15c4:	ac ee       	ldi	r26, 0xEC	; 236
    15c6:	b4 ef       	ldi	r27, 0xF4	; 244
    15c8:	a5 01       	movw	r20, r10
    15ca:	94 01       	movw	r18, r8
    15cc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__mulohisi3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8c 0d       	add	r24, r12
    15d6:	9d 1d       	adc	r25, r13
    15d8:	ae 1d       	adc	r26, r14
    15da:	bf 1d       	adc	r27, r15
    15dc:	b7 ff       	sbrs	r27, 7
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <do_rand+0x72>
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	a1 09       	sbc	r26, r1
    15e4:	b0 48       	sbci	r27, 0x80	; 128
    15e6:	88 83       	st	Y, r24
    15e8:	99 83       	std	Y+1, r25	; 0x01
    15ea:	aa 83       	std	Y+2, r26	; 0x02
    15ec:	bb 83       	std	Y+3, r27	; 0x03
    15ee:	9f 77       	andi	r25, 0x7F	; 127
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	bf 90       	pop	r11
    15fe:	af 90       	pop	r10
    1600:	9f 90       	pop	r9
    1602:	8f 90       	pop	r8
    1604:	08 95       	ret

00001606 <rand_r>:
    1606:	0e 94 ba 0a 	call	0x1574	; 0x1574 <do_rand>
    160a:	08 95       	ret

0000160c <rand>:
    160c:	87 e0       	ldi	r24, 0x07	; 7
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 ba 0a 	call	0x1574	; 0x1574 <do_rand>
    1614:	08 95       	ret

00001616 <srand>:
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    161e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1622:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1626:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    162a:	08 95       	ret

0000162c <eeprom_read_byte>:
    162c:	f9 99       	sbic	0x1f, 1	; 31
    162e:	fe cf       	rjmp	.-4      	; 0x162c <eeprom_read_byte>
    1630:	92 bd       	out	0x22, r25	; 34
    1632:	81 bd       	out	0x21, r24	; 33
    1634:	f8 9a       	sbi	0x1f, 0	; 31
    1636:	99 27       	eor	r25, r25
    1638:	80 b5       	in	r24, 0x20	; 32
    163a:	08 95       	ret

0000163c <eeprom_write_byte>:
    163c:	26 2f       	mov	r18, r22

0000163e <eeprom_write_r18>:
    163e:	f9 99       	sbic	0x1f, 1	; 31
    1640:	fe cf       	rjmp	.-4      	; 0x163e <eeprom_write_r18>
    1642:	1f ba       	out	0x1f, r1	; 31
    1644:	92 bd       	out	0x22, r25	; 34
    1646:	81 bd       	out	0x21, r24	; 33
    1648:	20 bd       	out	0x20, r18	; 32
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	fa 9a       	sbi	0x1f, 2	; 31
    1650:	f9 9a       	sbi	0x1f, 1	; 31
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	08 95       	ret

00001658 <__divmodsi4>:
    1658:	05 2e       	mov	r0, r21
    165a:	97 fb       	bst	r25, 7
    165c:	1e f4       	brtc	.+6      	; 0x1664 <__divmodsi4+0xc>
    165e:	00 94       	com	r0
    1660:	0e 94 43 0b 	call	0x1686	; 0x1686 <__negsi2>
    1664:	57 fd       	sbrc	r21, 7
    1666:	07 d0       	rcall	.+14     	; 0x1676 <__divmodsi4_neg2>
    1668:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>
    166c:	07 fc       	sbrc	r0, 7
    166e:	03 d0       	rcall	.+6      	; 0x1676 <__divmodsi4_neg2>
    1670:	4e f4       	brtc	.+18     	; 0x1684 <__divmodsi4_exit>
    1672:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__negsi2>

00001676 <__divmodsi4_neg2>:
    1676:	50 95       	com	r21
    1678:	40 95       	com	r20
    167a:	30 95       	com	r19
    167c:	21 95       	neg	r18
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	4f 4f       	sbci	r20, 0xFF	; 255
    1682:	5f 4f       	sbci	r21, 0xFF	; 255

00001684 <__divmodsi4_exit>:
    1684:	08 95       	ret

00001686 <__negsi2>:
    1686:	90 95       	com	r25
    1688:	80 95       	com	r24
    168a:	70 95       	com	r23
    168c:	61 95       	neg	r22
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	8f 4f       	sbci	r24, 0xFF	; 255
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	08 95       	ret

00001696 <__muluhisi3>:
    1696:	0e 94 87 08 	call	0x110e	; 0x110e <__umulhisi3>
    169a:	a5 9f       	mul	r26, r21
    169c:	90 0d       	add	r25, r0
    169e:	b4 9f       	mul	r27, r20
    16a0:	90 0d       	add	r25, r0
    16a2:	a4 9f       	mul	r26, r20
    16a4:	80 0d       	add	r24, r0
    16a6:	91 1d       	adc	r25, r1
    16a8:	11 24       	eor	r1, r1
    16aa:	08 95       	ret

000016ac <__mulshisi3>:
    16ac:	b7 ff       	sbrs	r27, 7
    16ae:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__muluhisi3>

000016b2 <__mulohisi3>:
    16b2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__muluhisi3>
    16b6:	82 1b       	sub	r24, r18
    16b8:	93 0b       	sbc	r25, r19
    16ba:	08 95       	ret

000016bc <__udivmodsi4>:
    16bc:	a1 e2       	ldi	r26, 0x21	; 33
    16be:	1a 2e       	mov	r1, r26
    16c0:	aa 1b       	sub	r26, r26
    16c2:	bb 1b       	sub	r27, r27
    16c4:	fd 01       	movw	r30, r26
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <__udivmodsi4_ep>

000016c8 <__udivmodsi4_loop>:
    16c8:	aa 1f       	adc	r26, r26
    16ca:	bb 1f       	adc	r27, r27
    16cc:	ee 1f       	adc	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	a2 17       	cp	r26, r18
    16d2:	b3 07       	cpc	r27, r19
    16d4:	e4 07       	cpc	r30, r20
    16d6:	f5 07       	cpc	r31, r21
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <__udivmodsi4_ep>
    16da:	a2 1b       	sub	r26, r18
    16dc:	b3 0b       	sbc	r27, r19
    16de:	e4 0b       	sbc	r30, r20
    16e0:	f5 0b       	sbc	r31, r21

000016e2 <__udivmodsi4_ep>:
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	1a 94       	dec	r1
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <__udivmodsi4_loop>
    16ee:	60 95       	com	r22
    16f0:	70 95       	com	r23
    16f2:	80 95       	com	r24
    16f4:	90 95       	com	r25
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	bd 01       	movw	r22, r26
    16fc:	cf 01       	movw	r24, r30
    16fe:	08 95       	ret

00001700 <_exit>:
    1700:	f8 94       	cli

00001702 <__stop_program>:
    1702:	ff cf       	rjmp	.-2      	; 0x1702 <__stop_program>
