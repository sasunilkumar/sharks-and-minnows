
build/blink_led_2.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	95 04       	cpc	r9, r5
      6a:	ec 04       	cpc	r14, r12
      6c:	00 05       	cpc	r16, r0
      6e:	31 05       	cpc	r19, r1
      70:	38 05       	cpc	r19, r8
      72:	17 05       	cpc	r17, r7
      74:	3b 05       	cpc	r19, r11
      76:	99 06       	cpc	r9, r25
      78:	8a 07       	cpc	r24, r26
      7a:	8a 07       	cpc	r24, r26
      7c:	a2 06       	cpc	r10, r18
      7e:	a5 06       	cpc	r10, r21
      80:	a8 06       	cpc	r10, r24
      82:	aa 06       	cpc	r10, r26
      84:	ac 06       	cpc	r10, r28
      86:	ae 06       	cpc	r10, r30
      88:	5f 07       	cpc	r21, r31
      8a:	c0 06       	cpc	r12, r16

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 eb       	ldi	r30, 0xB8	; 184
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 3c 08 	call	0x1078	; 0x1078 <main>
      da:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
// global variables
uint16_t wait_time = 500;

// put your setup code here, will be run once at the beginning
void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
}

// put your main code here, will be run repeatedly
void loop() 
{
  set_color(RGB(1,0,0));
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
  delay(wait_time);
      ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
      ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
      f2:	0e 94 85 01 	call	0x30a	; 0x30a <delay>
  set_color(RGB(1,1,0));
      f6:	85 e0       	ldi	r24, 0x05	; 5
      f8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
  delay(wait_time);
      fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     104:	0c 94 85 01 	jmp	0x30a	; 0x30a <delay>

00000108 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     108:	08 95       	ret

0000010a <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	08 95       	ret

00000110 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     110:	08 95       	ret

00000112 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
    cli();
     120:	f8 94       	cli

    ports_off();
     122:	14 b8       	out	0x04, r1	; 4
     124:	17 b8       	out	0x07, r1	; 7
     126:	1a b8       	out	0x0a, r1	; 10
     128:	15 b8       	out	0x05, r1	; 5
     12a:	18 b8       	out	0x08, r1	; 8
     12c:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     12e:	52 9a       	sbi	0x0a, 2	; 10
     130:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     132:	14 bc       	out	0x24, r1	; 36
     134:	85 e0       	ldi	r24, 0x05	; 5
     136:	85 bd       	out	0x25, r24	; 37
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	87 bd       	out	0x27, r24	; 39
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     142:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     146:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     14a:	2f e8       	ldi	r18, 0x8F	; 143
     14c:	3b e0       	ldi	r19, 0x0B	; 11
     14e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     152:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     156:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     15a:	53 98       	cbi	0x0a, 3	; 10
     15c:	23 98       	cbi	0x04, 3	; 4
     15e:	91 ea       	ldi	r25, 0xA1	; 161
     160:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     164:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     168:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     16c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     170:	8b e0       	ldi	r24, 0x0B	; 11
     172:	80 bf       	out	0x30, r24	; 48
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     17a:	86 e0       	ldi	r24, 0x06	; 6
     17c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     180:	83 e8       	ldi	r24, 0x83	; 131
     182:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     186:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     18a:	80 64       	ori	r24, 0x40	; 64
     18c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     190:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     194:	86 fd       	sbrc	r24, 6
     196:	fc cf       	rjmp	.-8      	; 0x190 <kilo_init+0x7e>
    adc_trigger_high_gain();
     198:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     19c:	83 ea       	ldi	r24, 0xA3	; 163
     19e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
    if (osccal != 0xFF)
     1b0:	8f 3f       	cpi	r24, 0xFF	; 255
     1b2:	11 f0       	breq	.+4      	; 0x1b8 <kilo_init+0xa6>
        OSCCAL = osccal;
     1b4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     1b8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    rx_leadingbit = 1;
     1bc:	c1 e0       	ldi	r28, 0x01	; 1
     1be:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     1c2:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <rx_leadingbyte>
    rx_byteindex = 0;
     1c6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
    rx_bytevalue = 0;
     1ca:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1ce:	80 e9       	ldi	r24, 0x90	; 144
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     1d6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     1da:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tx_mask>
     1de:	88 73       	andi	r24, 0x38	; 56
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1e2:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <tx_mask>
    tx_clock = 0;
     1e6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     1ea:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
    tx_increment = 255;
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     1f6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    kilo_ticks = 0;
     1fa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks>
     1fe:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x1>
     202:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks+0x2>
     206:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x3>
    kilo_state = IDLE;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     210:	82 e4       	ldi	r24, 0x42	; 66
     212:	9f e0       	ldi	r25, 0x0F	; 15
     214:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <kilo_tx_period+0x1>
     218:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     21c:	80 eb       	ldi	r24, 0xB0	; 176
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     224:	c8 2f       	mov	r28, r24
     226:	81 eb       	ldi	r24, 0xB1	; 177
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     22e:	2c 2f       	mov	r18, r28
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	38 2b       	or	r19, r24
     234:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <kilo_uid+0x1>
     238:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     244:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     248:	89 e0       	ldi	r24, 0x09	; 9
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     250:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     254:	8c e0       	ldi	r24, 0x0C	; 12
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     25c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     260:	84 e1       	ldi	r24, 0x14	; 20
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     268:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
     26c:	0a e3       	ldi	r16, 0x3A	; 58
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	53 e1       	ldi	r21, 0x13	; 19
     272:	e5 2e       	mov	r14, r21
     274:	51 e0       	ldi	r21, 0x01	; 1
     276:	f5 2e       	mov	r15, r21
     278:	c0 e2       	ldi	r28, 0x20	; 32
     27a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     27c:	ce 01       	movw	r24, r28
     27e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     282:	d8 2e       	mov	r13, r24
     284:	ce 01       	movw	r24, r28
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     28c:	2d 2d       	mov	r18, r13
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	32 2f       	mov	r19, r18
     292:	22 27       	eor	r18, r18
     294:	28 2b       	or	r18, r24
     296:	f8 01       	movw	r30, r16
     298:	21 93       	st	Z+, r18
     29a:	31 93       	st	Z+, r19
     29c:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     29e:	ce 01       	movw	r24, r28
     2a0:	c0 96       	adiw	r24, 0x30	; 48
     2a2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     2a6:	d8 2e       	mov	r13, r24
     2a8:	ce 01       	movw	r24, r28
     2aa:	c1 96       	adiw	r24, 0x31	; 49
     2ac:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <eeprom_read_byte>
     2b0:	2d 2d       	mov	r18, r13
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	32 2f       	mov	r19, r18
     2b6:	22 27       	eor	r18, r18
     2b8:	28 2b       	or	r18, r24
     2ba:	f7 01       	movw	r30, r14
     2bc:	21 93       	st	Z+, r18
     2be:	31 93       	st	Z+, r19
     2c0:	7f 01       	movw	r14, r30
     2c2:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2c4:	cc 33       	cpi	r28, 0x3C	; 60
     2c6:	d1 05       	cpc	r29, r1
     2c8:	c9 f6       	brne	.-78     	; 0x27c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2ca:	78 94       	sei
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	08 95       	ret

000002dc <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2dc:	1f 92       	push	r1
     2de:	0f 92       	push	r0
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	8f 93       	push	r24
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	a8 95       	wdr
     2ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2f2:	88 61       	ori	r24, 0x18	; 24
     2f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2fc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	41 f0       	breq	.+16     	; 0x31e <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	ef ec       	ldi	r30, 0xCF	; 207
     310:	f7 e0       	ldi	r31, 0x07	; 7
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <delay+0x8>
     316:	00 c0       	rjmp	.+0      	; 0x318 <delay+0xe>
     318:	00 00       	nop
        _delay_ms(1);
        ms--;
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f6 cf       	rjmp	.-20     	; 0x30a <delay>
    }
}
     31e:	08 95       	ret

00000320 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     320:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     324:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     328:	08 95       	ret

0000032a <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     330:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     334:	8f e0       	ldi	r24, 0x0F	; 15
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0c 94 85 01 	jmp	0x30a	; 0x30a <delay>

0000033c <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     33c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     340:	81 11       	cpse	r24, r1
     342:	1e c0       	rjmp	.+60     	; 0x380 <get_ambientlight+0x44>
        cli();
     344:	f8 94       	cli
        adc_setup_conversion(7);
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     34c:	83 e8       	ldi	r24, 0x83	; 131
     34e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     356:	80 64       	ori	r24, 0x40	; 64
     358:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     35c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     360:	86 fd       	sbrc	r24, 6
     362:	fc cf       	rjmp	.-8      	; 0x35c <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     368:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     36c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     370:	23 ea       	ldi	r18, 0xA3	; 163
     372:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     37c:	78 94       	sei
     37e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     384:	08 95       	ret

00000386 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     386:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     38a:	81 11       	cpse	r24, r1
     38c:	1e c0       	rjmp	.+60     	; 0x3ca <get_temperature+0x44>
        cli();
     38e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     390:	88 ec       	ldi	r24, 0xC8	; 200
     392:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     396:	87 e8       	ldi	r24, 0x87	; 135
     398:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     39c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3a0:	80 64       	ori	r24, 0x40	; 64
     3a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3aa:	86 fd       	sbrc	r24, 6
     3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3b6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3ba:	23 ea       	ldi	r18, 0xA3	; 163
     3bc:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3c6:	78 94       	sei
     3c8:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     3ce:	08 95       	ret

000003d0 <rand_hard>:

uint8_t rand_hard() {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     3d8:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     3da:	e3 ea       	ldi	r30, 0xA3	; 163
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     3de:	c6 e0       	ldi	r28, 0x06	; 6
     3e0:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     3e2:	a1 e0       	ldi	r26, 0x01	; 1
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     3e6:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     3e8:	f8 94       	cli
            adc_setup_conversion(6);
     3ea:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3ee:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     3f2:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3f6:	40 64       	ori	r20, 0x40	; 64
     3f8:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     3fc:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     400:	46 fd       	sbrc	r20, 6
     402:	fc cf       	rjmp	.-8      	; 0x3fc <rand_hard+0x2c>
            a = ADCW&0x1;
     404:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     408:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     40c:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     40e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     412:	50 64       	ori	r21, 0x40	; 64
     414:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     418:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     41c:	56 fd       	sbrc	r21, 6
     41e:	fc cf       	rjmp	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
            b = ADCW&0x1;
     420:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     424:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     428:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     42c:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     430:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     434:	78 94       	sei
            tries++;
     436:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     438:	61 70       	andi	r22, 0x01	; 1
     43a:	46 17       	cp	r20, r22
     43c:	51 f0       	breq	.+20     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
        if (a)
     43e:	44 23       	and	r20, r20
     440:	59 f0       	breq	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
            num |= (1<<i);
     442:	ad 01       	movw	r20, r26
     444:	02 2e       	mov	r0, r18
     446:	01 c0       	rjmp	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     448:	44 0f       	add	r20, r20
     44a:	0a 94       	dec	r0
     44c:	ea f7       	brpl	.-6      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     44e:	84 2b       	or	r24, r20
     450:	03 c0       	rjmp	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     452:	90 38       	cpi	r25, 0x80	; 128
     454:	49 f6       	brne	.-110    	; 0x3e8 <rand_hard+0x18>
     456:	f3 cf       	rjmp	.-26     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     458:	2f 5f       	subi	r18, 0xFF	; 255
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     45c:	28 30       	cpi	r18, 0x08	; 8
     45e:	31 05       	cpc	r19, r1
     460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	c1 cf       	rjmp	.-126    	; 0x3e6 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     46a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     46e:	98 e0       	ldi	r25, 0x08	; 8
     470:	89 9f       	mul	r24, r25
     472:	90 01       	movw	r18, r0
     474:	11 24       	eor	r1, r1
     476:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     478:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	89 0f       	add	r24, r25
     480:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     484:	82 2f       	mov	r24, r18
     486:	82 95       	swap	r24
     488:	86 95       	lsr	r24
     48a:	87 70       	andi	r24, 0x07	; 7
     48c:	28 27       	eor	r18, r24
     48e:	96 95       	lsr	r25
     490:	96 95       	lsr	r25
     492:	82 2f       	mov	r24, r18
     494:	89 27       	eor	r24, r25
     496:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     49a:	08 95       	ret

0000049c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     49c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     4a0:	08 95       	ret

000004a2 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4a2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     4a6:	81 11       	cpse	r24, r1
     4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <get_voltage+0x34>
        cli();                                    // disable interrupts
     4aa:	f8 94       	cli
        adc_setup_conversion(6);
     4ac:	86 e0       	ldi	r24, 0x06	; 6
     4ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4b2:	83 e8       	ldi	r24, 0x83	; 131
     4b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4c6:	86 fd       	sbrc	r24, 6
     4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     4ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     4d2:	78 94       	sei
     4d4:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     4da:	08 95       	ret

000004dc <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     4dc:	2f 92       	push	r2
     4de:	3f 92       	push	r3
     4e0:	4f 92       	push	r4
     4e2:	5f 92       	push	r5
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     502:	fc 01       	movw	r30, r24
     504:	c2 81       	ldd	r28, Z+2	; 0x02
     506:	d3 81       	ldd	r29, Z+3	; 0x03
     508:	c4 38       	cpi	r28, 0x84	; 132
     50a:	f3 e0       	ldi	r31, 0x03	; 3
     50c:	df 07       	cpc	r29, r31
     50e:	0c f0       	brlt	.+2      	; 0x512 <estimate_distance+0x36>
     510:	7e c0       	rjmp	.+252    	; 0x60e <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     512:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_irhigh>
     516:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <kilo_irhigh+0x1>
     51a:	8c 17       	cp	r24, r28
     51c:	9d 07       	cpc	r25, r29
     51e:	08 f4       	brcc	.+2      	; 0x522 <estimate_distance+0x46>
     520:	6f c0       	rjmp	.+222    	; 0x600 <estimate_distance+0x124>
     522:	e5 e1       	ldi	r30, 0x15	; 21
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     528:	81 91       	ld	r24, Z+
     52a:	91 91       	ld	r25, Z+
     52c:	8c 17       	cp	r24, r28
     52e:	9d 07       	cpc	r25, r29
     530:	20 f0       	brcs	.+8      	; 0x53a <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     532:	1f 5f       	subi	r17, 0xFF	; 255
     534:	1e 30       	cpi	r17, 0x0E	; 14
     536:	c1 f7       	brne	.-16     	; 0x528 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     538:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     53a:	81 2f       	mov	r24, r17
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	fc 01       	movw	r30, r24
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ed 5e       	subi	r30, 0xED	; 237
     546:	fe 4f       	sbci	r31, 0xFE	; 254
     548:	e0 80       	ld	r14, Z
     54a:	f1 80       	ldd	r15, Z+1	; 0x01
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	fc 01       	movw	r30, r24
     552:	ef 5e       	subi	r30, 0xEF	; 239
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	b7 01       	movw	r22, r14
     55c:	68 1b       	sub	r22, r24
     55e:	79 0b       	sbc	r23, r25
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     570:	4b 01       	movw	r8, r22
     572:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     574:	be 01       	movw	r22, r28
     576:	0d 2e       	mov	r0, r29
     578:	00 0c       	add	r0, r0
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatsisf>
     582:	2b 01       	movw	r4, r22
     584:	3c 01       	movw	r6, r24
     586:	b7 01       	movw	r22, r14
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     590:	6b 01       	movw	r12, r22
     592:	7c 01       	movw	r14, r24
     594:	61 2f       	mov	r22, r17
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	a9 01       	movw	r20, r18
     5b2:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     5b6:	a5 01       	movw	r20, r10
     5b8:	94 01       	movw	r18, r8
     5ba:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	c7 01       	movw	r24, r14
     5c4:	b6 01       	movw	r22, r12
     5c6:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
     5ca:	9b 01       	movw	r18, r22
     5cc:	ac 01       	movw	r20, r24
     5ce:	c3 01       	movw	r24, r6
     5d0:	b2 01       	movw	r22, r4
     5d2:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e2       	ldi	r20, 0x20	; 32
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     5e2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixsfsi>
     5e6:	7b 01       	movw	r14, r22
     5e8:	c5 01       	movw	r24, r10
     5ea:	b4 01       	movw	r22, r8
     5ec:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixsfsi>
     5f0:	ab 01       	movw	r20, r22
     5f2:	bc 01       	movw	r22, r24
     5f4:	c7 01       	movw	r24, r14
     5f6:	ba 01       	movw	r22, r20
     5f8:	0e 94 47 08 	call	0x108e	; 0x108e <__divmodhi4>
     5fc:	16 2f       	mov	r17, r22
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     600:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     602:	cd 3b       	cpi	r28, 0xBD	; 189
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	d8 07       	cpc	r29, r24
     608:	0c f4       	brge	.+2      	; 0x60c <estimate_distance+0x130>
     60a:	ca c0       	rjmp	.+404    	; 0x7a0 <estimate_distance+0x2c4>
     60c:	01 c0       	rjmp	.+2      	; 0x610 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     60e:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     610:	f1 01       	movw	r30, r2
     612:	c0 80       	ld	r12, Z
     614:	d1 80       	ldd	r13, Z+1	; 0x01
     616:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     61a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>
     61e:	8c 15       	cp	r24, r12
     620:	9d 05       	cpc	r25, r13
     622:	88 f0       	brcs	.+34     	; 0x646 <estimate_distance+0x16a>
     624:	ec e3       	ldi	r30, 0x3C	; 60
     626:	f1 e0       	ldi	r31, 0x01	; 1
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     62e:	e1 90       	ld	r14, Z+
     630:	f1 90       	ld	r15, Z+
     632:	ec 14       	cp	r14, r12
     634:	fd 04       	cpc	r15, r13
     636:	08 f4       	brcc	.+2      	; 0x63a <estimate_distance+0x15e>
     638:	58 c0       	rjmp	.+176    	; 0x6ea <estimate_distance+0x20e>
     63a:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     63c:	8e 30       	cpi	r24, 0x0E	; 14
     63e:	91 05       	cpc	r25, r1
     640:	a9 f7       	brne	.-22     	; 0x62c <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     642:	0a e5       	ldi	r16, 0x5A	; 90
     644:	01 c0       	rjmp	.+2      	; 0x648 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     646:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     648:	1f 3f       	cpi	r17, 0xFF	; 255
     64a:	09 f4       	brne	.+2      	; 0x64e <estimate_distance+0x172>
     64c:	4b c0       	rjmp	.+150    	; 0x6e4 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     64e:	be 01       	movw	r22, r28
     650:	dd 0f       	add	r29, r29
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatsisf>
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
     65e:	61 2f       	mov	r22, r17
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
     66e:	a7 01       	movw	r20, r14
     670:	96 01       	movw	r18, r12
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	81 e6       	ldi	r24, 0x61	; 97
     678:	94 e4       	ldi	r25, 0x44	; 68
     67a:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     68a:	4b 01       	movw	r8, r22
     68c:	5c 01       	movw	r10, r24
     68e:	60 2f       	mov	r22, r16
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	4f e2       	ldi	r20, 0x2F	; 47
     6a4:	54 e4       	ldi	r21, 0x44	; 68
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c3 01       	movw	r24, r6
     6b4:	b2 01       	movw	r22, r4
     6b6:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	c5 01       	movw	r24, r10
     6c0:	b4 01       	movw	r22, r8
     6c2:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	48 e4       	ldi	r20, 0x48	; 72
     6cc:	53 e4       	ldi	r21, 0x43	; 67
     6ce:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__divsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	44 e0       	ldi	r20, 0x04	; 4
     6d8:	52 e4       	ldi	r21, 0x42	; 66
     6da:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     6de:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixunssfsi>
     6e2:	60 c0       	rjmp	.+192    	; 0x7a4 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     6e4:	61 e2       	ldi	r22, 0x21	; 33
     6e6:	60 0f       	add	r22, r16
     6e8:	5d c0       	rjmp	.+186    	; 0x7a4 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	fc 01       	movw	r30, r24
     6f0:	e8 5c       	subi	r30, 0xC8	; 200
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	b7 01       	movw	r22, r14
     6fa:	68 1b       	sub	r22, r24
     6fc:	79 0b       	sbc	r23, r25
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     70e:	4b 01       	movw	r8, r22
     710:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     712:	b6 01       	movw	r22, r12
     714:	dd 0c       	add	r13, r13
     716:	88 0b       	sbc	r24, r24
     718:	99 0b       	sbc	r25, r25
     71a:	0e 94 9b 09 	call	0x1336	; 0x1336 <__floatsisf>
     71e:	2b 01       	movw	r4, r22
     720:	3c 01       	movw	r6, r24
     722:	b7 01       	movw	r22, r14
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
     730:	63 2d       	mov	r22, r3
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	0e 94 85 08 	call	0x110a	; 0x110a <__addsf3>
     752:	a5 01       	movw	r20, r10
     754:	94 01       	movw	r18, r8
     756:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     75a:	9b 01       	movw	r18, r22
     75c:	ac 01       	movw	r20, r24
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	c3 01       	movw	r24, r6
     76c:	b2 01       	movw	r22, r4
     76e:	0e 94 84 08 	call	0x1108	; 0x1108 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3>
     77e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixsfsi>
     782:	7b 01       	movw	r14, r22
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixsfsi>
     78c:	ab 01       	movw	r20, r22
     78e:	bc 01       	movw	r22, r24
     790:	c7 01       	movw	r24, r14
     792:	ba 01       	movw	r22, r20
     794:	0e 94 47 08 	call	0x108e	; 0x108e <__divmodhi4>
     798:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     79a:	6f 3f       	cpi	r22, 0xFF	; 255
     79c:	09 f0       	breq	.+2      	; 0x7a0 <estimate_distance+0x2c4>
     79e:	54 cf       	rjmp	.-344    	; 0x648 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7a0:	61 e2       	ldi	r22, 0x21	; 33
     7a2:	61 0f       	add	r22, r17
    }
}
     7a4:	86 2f       	mov	r24, r22
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	7f 90       	pop	r7
     7c0:	6f 90       	pop	r6
     7c2:	5f 90       	pop	r5
     7c4:	4f 90       	pop	r4
     7c6:	3f 90       	pop	r3
     7c8:	2f 90       	pop	r2
     7ca:	08 95       	ret

000007cc <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
    tx_clock += tx_increment;
     7ee:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     7f2:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     7f6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_increment>
     7fa:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tx_increment+0x1>
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_clock+0x1>
     806:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_clock>
    tx_increment = 0xFF;
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     812:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    OCR0A = tx_increment;
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     81a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_ticks>
     81e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_ticks+0x1>
     822:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <kilo_ticks+0x2>
     826:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <kilo_ticks+0x3>
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	a1 1d       	adc	r26, r1
     82e:	b1 1d       	adc	r27, r1
     830:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <kilo_ticks>
     834:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <kilo_ticks+0x1>
     838:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <kilo_ticks+0x2>
     83c:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     840:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     844:	81 11       	cpse	r24, r1
     846:	2d c0       	rjmp	.+90     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     848:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_tx_period>
     84c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_tx_period+0x1>
     850:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     854:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     858:	82 17       	cp	r24, r18
     85a:	93 07       	cpc	r25, r19
     85c:	10 f5       	brcc	.+68     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     85e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     862:	84 30       	cpi	r24, 0x04	; 4
     864:	f1 f4       	brne	.+60     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
        message_t *msg = kilo_message_tx();
     866:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     86a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     86e:	09 95       	icall
        if (msg) {
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	b9 f0       	breq	.+46     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
            if (message_send(msg)) {
     874:	0e 94 b9 07 	call	0xf72	; 0xf72 <message_send>
     878:	88 23       	and	r24, r24
     87a:	51 f0       	breq	.+20     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
                kilo_message_tx_success();
     87c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     880:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     884:	09 95       	icall
                tx_clock = 0;
     886:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     88a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
     88e:	09 c0       	rjmp	.+18     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
            } else {
                tx_increment = rand()&0xFF;
     890:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <rand>
     894:	9c 01       	movw	r18, r24
     896:	33 27       	eor	r19, r19
     898:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <tx_increment+0x1>
     89c:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <tx_increment>
                OCR0A = tx_increment;
     8a0:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8a2:	ff 91       	pop	r31
     8a4:	ef 91       	pop	r30
     8a6:	bf 91       	pop	r27
     8a8:	af 91       	pop	r26
     8aa:	9f 91       	pop	r25
     8ac:	8f 91       	pop	r24
     8ae:	7f 91       	pop	r23
     8b0:	6f 91       	pop	r22
     8b2:	5f 91       	pop	r21
     8b4:	4f 91       	pop	r20
     8b6:	3f 91       	pop	r19
     8b8:	2f 91       	pop	r18
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8c4:	80 ff       	sbrs	r24, 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <set_color+0x8>
        DDRD |= (1<<5);
     8c8:	55 9a       	sbi	0x0a, 5	; 10
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     8cc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     8ce:	81 ff       	sbrs	r24, 1
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <set_color+0x12>
        DDRD |= (1<<4);
     8d2:	54 9a       	sbi	0x0a, 4	; 10
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     8d6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     8d8:	82 ff       	sbrs	r24, 2
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <set_color+0x1c>
        DDRC |= (1<<3);
     8dc:	3b 9a       	sbi	0x07, 3	; 7
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     8e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     8e2:	83 ff       	sbrs	r24, 3
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <set_color+0x26>
        DDRC |= (1<<2);
     8e6:	3a 9a       	sbi	0x07, 2	; 7
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     8ea:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     8ec:	84 ff       	sbrs	r24, 4
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <set_color+0x30>
        DDRC |= (1<<5);
     8f0:	3d 9a       	sbi	0x07, 5	; 7
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     8f4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <set_color+0x3a>
        DDRC |= (1<<4);
     8fa:	3c 9a       	sbi	0x07, 4	; 7
     8fc:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     8fe:	3c 98       	cbi	0x07, 4	; 7
     900:	08 95       	ret

00000902 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     902:	8c 01       	movw	r16, r24
     904:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     906:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     908:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     90e:	98 e1       	ldi	r25, 0x18	; 24
     910:	c9 2e       	mov	r12, r25
     912:	29 e2       	ldi	r18, 0x29	; 41
     914:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     916:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	e7 30       	cpi	r30, 0x07	; 7
     91e:	f1 05       	cpc	r31, r1
     920:	d0 f7       	brcc	.-12     	; 0x916 <kilo_start+0x14>
     922:	ec 5c       	subi	r30, 0xCC	; 204
     924:	ff 4f       	sbci	r31, 0xFF	; 255
     926:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__tablejump2__>
            case SLEEPING:
                cli();
     92a:	f8 94       	cli
                acomp_off();
     92c:	80 b7       	in	r24, 0x30	; 48
     92e:	87 7f       	andi	r24, 0xF7	; 247
     930:	80 bf       	out	0x30, r24	; 48
                adc_off();
     932:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     936:	8f 77       	andi	r24, 0x7F	; 127
     938:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     93c:	14 b8       	out	0x04, r1	; 4
     93e:	17 b8       	out	0x07, r1	; 7
     940:	1a b8       	out	0x0a, r1	; 10
     942:	15 b8       	out	0x05, r1	; 5
     944:	18 b8       	out	0x08, r1	; 8
     946:	1b b8       	out	0x0b, r1	; 11
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	a8 95       	wdr
     94e:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     952:	0f be       	out	0x3f, r0	; 63
     954:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     958:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     95c:	80 64       	ori	r24, 0x40	; 64
     95e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     962:	83 b7       	in	r24, 0x33	; 51
     964:	81 7f       	andi	r24, 0xF1	; 241
     966:	84 60       	ori	r24, 0x04	; 4
     968:	83 bf       	out	0x33, r24	; 51
                cli();
     96a:	f8 94       	cli
                sleep_enable();
     96c:	83 b7       	in	r24, 0x33	; 51
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	83 bf       	out	0x33, r24	; 51
                sei();
     972:	78 94       	sei
                sleep_cpu();
     974:	88 95       	sleep
                sleep_disable();
     976:	83 b7       	in	r24, 0x33	; 51
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	83 bf       	out	0x33, r24	; 51
                sei();
     97c:	78 94       	sei
                rx_busy = 0;
     97e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
                ports_on();
     982:	52 9a       	sbi	0x0a, 2	; 10
     984:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     986:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     98a:	80 68       	ori	r24, 0x80	; 128
     98c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	87 e5       	ldi	r24, 0x57	; 87
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <kilo_start+0x92>
     998:	00 c0       	rjmp	.+0      	; 0x99a <kilo_start+0x98>
     99a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     99c:	80 b7       	in	r24, 0x30	; 48
     99e:	88 61       	ori	r24, 0x18	; 24
     9a0:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9a2:	8f e3       	ldi	r24, 0x3F	; 63
     9a4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a8:	ef e1       	ldi	r30, 0x1F	; 31
     9aa:	fe e4       	ldi	r31, 0x4E	; 78
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <kilo_start+0xaa>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <kilo_start+0xb0>
     9b2:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9b4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <kilo_start+0xbc>
     9bc:	50 c0       	rjmp	.+160    	; 0xa5e <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	20 e7       	ldi	r18, 0x70	; 112
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	f1 50       	subi	r31, 0x01	; 1
     9cc:	20 40       	sbci	r18, 0x00	; 0
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <kilo_start+0xc8>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <kilo_start+0xd2>
     9d4:	00 00       	nop
     9d6:	43 c0       	rjmp	.+134    	; 0xa5e <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     9de:	ef ec       	ldi	r30, 0xCF	; 207
     9e0:	f7 e0       	ldi	r31, 0x07	; 7
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <kilo_start+0xe0>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <kilo_start+0xe6>
     9e8:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     9f0:	ff ef       	ldi	r31, 0xFF	; 255
     9f2:	21 ee       	ldi	r18, 0xE1	; 225
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	f1 50       	subi	r31, 0x01	; 1
     9f8:	20 40       	sbci	r18, 0x00	; 0
     9fa:	80 40       	sbci	r24, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <kilo_start+0xf4>
     9fe:	2c c0       	rjmp	.+88     	; 0xa58 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a00:	0e 94 51 02 	call	0x4a2	; 0x4a2 <get_voltage>
                if(voltage > 682)
     a04:	8b 3a       	cpi	r24, 0xAB	; 171
     a06:	e2 e0       	ldi	r30, 0x02	; 2
     a08:	9e 07       	cpc	r25, r30
     a0a:	24 f0       	brlt	.+8      	; 0xa14 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a0c:	8c e0       	ldi	r24, 0x0C	; 12
     a0e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     a12:	81 cf       	rjmp	.-254    	; 0x916 <kilo_start+0x14>
                else if(voltage > 648)
     a14:	89 38       	cpi	r24, 0x89	; 137
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	9f 07       	cpc	r25, r31
     a1a:	14 f0       	brlt	.+4      	; 0xa20 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a1c:	80 e3       	ldi	r24, 0x30	; 48
     a1e:	f7 cf       	rjmp	.-18     	; 0xa0e <kilo_start+0x10c>
                else if(voltage > 614)
     a20:	87 36       	cpi	r24, 0x67	; 103
     a22:	92 40       	sbci	r25, 0x02	; 2
     a24:	14 f0       	brlt	.+4      	; 0xa2a <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a26:	8f e0       	ldi	r24, 0x0F	; 15
     a28:	f2 cf       	rjmp	.-28     	; 0xa0e <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	f0 cf       	rjmp	.-32     	; 0xa0e <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a2e:	48 99       	sbic	0x09, 0	; 9
     a30:	16 c0       	rjmp	.+44     	; 0xa5e <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     a38:	8f ec       	ldi	r24, 0xCF	; 207
     a3a:	97 e0       	ldi	r25, 0x07	; 7
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <kilo_start+0x13a>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <kilo_start+0x140>
     a42:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	e1 ee       	ldi	r30, 0xE1	; 225
     a4e:	f4 e0       	ldi	r31, 0x04	; 4
     a50:	91 50       	subi	r25, 0x01	; 1
     a52:	e0 40       	sbci	r30, 0x00	; 0
     a54:	f0 40       	sbci	r31, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <kilo_start+0x14e>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <kilo_start+0x158>
     a5a:	00 00       	nop
     a5c:	5c cf       	rjmp	.-328    	; 0x916 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	d6 cf       	rjmp	.-84     	; 0xa0e <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     a62:	d1 11       	cpse	r29, r1
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <kilo_start+0x168>
                    setup();
     a66:	f8 01       	movw	r30, r16
     a68:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a6a:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <kilo_state>
     a6e:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     a70:	f7 01       	movw	r30, r14
     a72:	09 95       	icall
                break;
     a74:	50 cf       	rjmp	.-352    	; 0x916 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a76:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     a7a:	81 11       	cpse	r24, r1
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a7e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     a82:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     a86:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     a8a:	45 cf       	rjmp	.-374    	; 0x916 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     a8c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     a90:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     a94:	98 17       	cp	r25, r24
     a96:	09 f4       	brne	.+2      	; 0xa9a <kilo_start+0x198>
     a98:	3e cf       	rjmp	.-388    	; 0x916 <kilo_start+0x14>
                        prev_motion = cur_motion;
     a9a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     a9e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     aa2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	89 f4       	brne	.+34     	; 0xacc <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aaa:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aae:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ab2:	8f e2       	ldi	r24, 0x2F	; 47
     ab4:	95 e7       	ldi	r25, 0x75	; 117
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <kilo_start+0x1b4>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <kilo_start+0x1ba>
     abc:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     abe:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ac6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     aca:	25 cf       	rjmp	.-438    	; 0x916 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     acc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ad0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ad4:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	59 f4       	brne	.+22     	; 0xaf2 <kilo_start+0x1f0>
     adc:	ef e2       	ldi	r30, 0x2F	; 47
     ade:	f5 e7       	ldi	r31, 0x75	; 117
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <kilo_start+0x1de>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <kilo_start+0x1e4>
     ae6:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     ae8:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aec:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     af0:	10 c0       	rjmp	.+32     	; 0xb12 <kilo_start+0x210>
     af2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     af6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     afa:	8f e2       	ldi	r24, 0x2F	; 47
     afc:	95 e7       	ldi	r25, 0x75	; 117
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <kilo_start+0x1fc>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <kilo_start+0x202>
     b04:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b06:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_straight_right>
     b0a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b0e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b12:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b16:	ff ce       	rjmp	.-514    	; 0x916 <kilo_start+0x14>

00000b18 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
    rx_timer_off();
     b26:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     b38:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
    rx_busy = 0;
     b3c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    adc_trigger_high_gain();
     b40:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b44:	93 ea       	ldi	r25, 0xA3	; 163
     b46:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b4a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     b82:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     b86:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     b90:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_leadingbit>
     b94:	88 23       	and	r24, r24
     b96:	21 f1       	breq	.+72     	; 0xbe0 <__vector_23+0x84>
        rx_timer_on();
     b98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ba0:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     ba4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
        rx_leadingbit = 0;
     ba8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_leadingbit>
        if (rx_leadingbyte) {
     bac:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__vector_23+0x5a>
     bb4:	af c1       	rjmp	.+862    	; 0xf14 <__vector_23+0x3b8>
            adc_finish_conversion();
     bb6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bba:	86 fd       	sbrc	r24, 6
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     bbe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     bc2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     bc6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x3>
     bca:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist+0x2>
            adc_trigger_low_gain();
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bd4:	93 ea       	ldi	r25, 0xA3	; 163
     bd6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bda:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     bde:	9a c1       	rjmp	.+820    	; 0xf14 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     be0:	c9 01       	movw	r24, r18
     be2:	87 58       	subi	r24, 0x87	; 135
     be4:	91 09       	sbc	r25, r1
     be6:	84 37       	cpi	r24, 0x74	; 116
     be8:	99 40       	sbci	r25, 0x09	; 9
     bea:	a0 f0       	brcs	.+40     	; 0xc14 <__vector_23+0xb8>
            rx_timer_off();
     bec:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bf0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bf4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     bf8:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
            rx_leadingbyte = 1;
     bfc:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
            rx_busy = 0;
     c00:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
            adc_trigger_high_gain();
     c04:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c08:	83 ea       	ldi	r24, 0xA3	; 163
     c0a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c0e:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c12:	80 c1       	rjmp	.+768    	; 0xf14 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c14:	26 58       	subi	r18, 0x86	; 134
     c16:	31 09       	sbc	r19, r1
     c18:	a4 ef       	ldi	r26, 0xF4	; 244
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__umulhisi3>
     c20:	8c 01       	movw	r16, r24
     c22:	22 27       	eor	r18, r18
     c24:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c26:	08 30       	cpi	r16, 0x08	; 8
     c28:	60 f4       	brcc	.+24     	; 0xc42 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <__vector_23+0xd6>
     c30:	88 0f       	add	r24, r24
     c32:	0a 95       	dec	r16
     c34:	ea f7       	brpl	.-6      	; 0xc30 <__vector_23+0xd4>
     c36:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     c3a:	89 2b       	or	r24, r25
     c3c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <rx_bytevalue>
     c40:	69 c1       	rjmp	.+722    	; 0xf14 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c42:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
                if (rx_leadingbyte) {
     c46:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     c4a:	88 23       	and	r24, r24
     c4c:	41 f1       	breq	.+80     	; 0xc9e <__vector_23+0x142>
                    adc_finish_conversion();
     c4e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c52:	86 fd       	sbrc	r24, 6
     c54:	fc cf       	rjmp	.-8      	; 0xc4e <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c56:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c5a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c5e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x1>
     c62:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist>
                    adc_trigger_high_gain();
     c66:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c6a:	83 ea       	ldi	r24, 0xA3	; 163
     c6c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     c76:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     c7a:	99 23       	and	r25, r25
     c7c:	59 f0       	breq	.+22     	; 0xc94 <__vector_23+0x138>
                        rx_timer_off();
     c7e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c82:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c86:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     c8a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     c8e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
     c92:	40 c1       	rjmp	.+640    	; 0xf14 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     c94:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_leadingbyte>
                        rx_byteindex = 0;
     c98:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
     c9c:	3b c1       	rjmp	.+630    	; 0xf14 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     c9e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_byteindex>
     ca2:	e8 2f       	mov	r30, r24
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	e4 5a       	subi	r30, 0xA4	; 164
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     cae:	90 83       	st	Z, r25
                    rx_byteindex++;
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cb6:	8c 30       	cpi	r24, 0x0C	; 12
     cb8:	09 f0       	breq	.+2      	; 0xcbc <__vector_23+0x160>
     cba:	2c c1       	rjmp	.+600    	; 0xf14 <__vector_23+0x3b8>
                        rx_timer_off();
     cbc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cc0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cc4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cc8:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     ccc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     cd0:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rx_msg+0xa>
     cd4:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <rx_msg+0xb>
     cd8:	8c e5       	ldi	r24, 0x5C	; 92
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <message_crc>
     ce0:	08 17       	cp	r16, r24
     ce2:	19 07       	cpc	r17, r25
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__vector_23+0x18c>
     ce6:	16 c1       	rjmp	.+556    	; 0xf14 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ce8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_msg+0x9>
     cec:	e7 fd       	sbrc	r30, 7
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     cf0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     cf4:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     cf8:	61 e3       	ldi	r22, 0x31	; 49
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	8c e5       	ldi	r24, 0x5C	; 92
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	09 95       	icall
     d02:	08 c1       	rjmp	.+528    	; 0xf14 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d04:	88 e7       	ldi	r24, 0x78	; 120
     d06:	8e 0f       	add	r24, r30
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	30 f0       	brcs	.+12     	; 0xd18 <__vector_23+0x1bc>
        motors_off();
     d0c:	53 98       	cbi	0x0a, 3	; 10
     d0e:	23 98       	cbi	0x04, 3	; 4
     d10:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d18:	8e 2f       	mov	r24, r30
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	fc 01       	movw	r30, r24
     d1e:	e0 58       	subi	r30, 0x80	; 128
     d20:	f1 09       	sbc	r31, r1
     d22:	eb 30       	cpi	r30, 0x0B	; 11
     d24:	f1 05       	cpc	r31, r1
     d26:	08 f0       	brcs	.+2      	; 0xd2a <__vector_23+0x1ce>
     d28:	f5 c0       	rjmp	.+490    	; 0xf14 <__vector_23+0x3b8>
     d2a:	e5 5c       	subi	r30, 0xC5	; 197
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d32:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d36:	8d 7f       	andi	r24, 0xFD	; 253
     d38:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d3c:	16 bc       	out	0x26, r1	; 38
            bootload();
     d3e:	e0 e0       	ldi	r30, 0x00	; 0
     d40:	f0 e7       	ldi	r31, 0x70	; 112
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d4a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
     d4e:	e2 c0       	rjmp	.+452    	; 0xf14 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	b2 c0       	rjmp	.+356    	; 0xeb8 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	b0 c0       	rjmp	.+352    	; 0xeb8 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	ae c0       	rjmp	.+348    	; 0xeb8 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d5c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d60:	83 30       	cpi	r24, 0x03	; 3
     d62:	09 f4       	brne	.+2      	; 0xd66 <__vector_23+0x20a>
     d64:	d7 c0       	rjmp	.+430    	; 0xf14 <__vector_23+0x3b8>
     d66:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d6a:	84 30       	cpi	r24, 0x04	; 4
     d6c:	09 f4       	brne	.+2      	; 0xd70 <__vector_23+0x214>
     d6e:	d2 c0       	rjmp	.+420    	; 0xf14 <__vector_23+0x3b8>
                motors_on();
     d70:	53 9a       	sbi	0x0a, 3	; 10
     d72:	23 9a       	sbi	0x04, 3	; 4
     d74:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d78:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	9c c0       	rjmp	.+312    	; 0xeb8 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     d80:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	09 f4       	brne	.+2      	; 0xd8a <__vector_23+0x22e>
     d88:	4b c0       	rjmp	.+150    	; 0xe20 <__vector_23+0x2c4>
     d8a:	80 f4       	brcc	.+32     	; 0xdac <__vector_23+0x250>
     d8c:	88 23       	and	r24, r24
     d8e:	a9 f0       	breq	.+42     	; 0xdba <__vector_23+0x25e>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	09 f0       	breq	.+2      	; 0xd96 <__vector_23+0x23a>
     d94:	82 c0       	rjmp	.+260    	; 0xe9a <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     d96:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x1>
     d9a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rx_msg+0x2>
     d9e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_uid+0x1>
     da2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_uid>
                    cur_motion = MOVE_STOP;
     da6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     daa:	77 c0       	rjmp	.+238    	; 0xe9a <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	09 f4       	brne	.+2      	; 0xdb2 <__vector_23+0x256>
     db0:	49 c0       	rjmp	.+146    	; 0xe44 <__vector_23+0x2e8>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	09 f4       	brne	.+2      	; 0xdb8 <__vector_23+0x25c>
     db6:	58 c0       	rjmp	.+176    	; 0xe68 <__vector_23+0x30c>
     db8:	70 c0       	rjmp	.+224    	; 0xe9a <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     dba:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     dbe:	86 30       	cpi	r24, 0x06	; 6
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__vector_23+0x268>
     dc2:	6b c0       	rjmp	.+214    	; 0xe9a <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     dc4:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_uid>
     dc8:	80 eb       	ldi	r24, 0xB0	; 176
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     dd0:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_uid+0x1>
     dd4:	81 eb       	ldi	r24, 0xB1	; 177
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     ddc:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_turn_left>
     de0:	85 e0       	ldi	r24, 0x05	; 5
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     de8:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     df4:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_straight_left>
     df8:	8c e0       	ldi	r24, 0x0C	; 12
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e00:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
     e04:	84 e1       	ldi	r24, 0x14	; 20
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <eeprom_write_byte>
                        motors_off();
     e0c:	53 98       	cbi	0x0a, 3	; 10
     e0e:	23 98       	cbi	0x04, 3	; 4
     e10:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     e1e:	3d c0       	rjmp	.+122    	; 0xe9a <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e20:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e24:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x3>
     e28:	91 30       	cpi	r25, 0x01	; 1
     e2a:	21 f4       	brne	.+8      	; 0xe34 <__vector_23+0x2d8>
     e2c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_turn_left>
     e30:	89 17       	cp	r24, r25
     e32:	99 f1       	breq	.+102    	; 0xe9a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e34:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e3e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
     e42:	2b c0       	rjmp	.+86     	; 0xe9a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e44:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e48:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x4>
     e4c:	92 30       	cpi	r25, 0x02	; 2
     e4e:	21 f4       	brne	.+8      	; 0xe58 <__vector_23+0x2fc>
     e50:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_turn_right>
     e54:	89 17       	cp	r24, r25
     e56:	09 f1       	breq	.+66     	; 0xe9a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e58:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     e62:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
     e66:	19 c0       	rjmp	.+50     	; 0xe9a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     e68:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
     e6c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x6>
     e70:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rx_msg+0x5>
     e74:	23 30       	cpi	r18, 0x03	; 3
     e76:	41 f4       	brne	.+16     	; 0xe88 <__vector_23+0x32c>
     e78:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <kilo_straight_right>
     e7c:	82 13       	cpse	r24, r18
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <__vector_23+0x32c>
     e80:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_straight_left>
     e84:	92 17       	cp	r25, r18
     e86:	49 f0       	breq	.+18     	; 0xe9a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e88:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     e8c:	23 e0       	ldi	r18, 0x03	; 3
     e8e:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     e92:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     e96:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     e9a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     e9e:	88 23       	and	r24, r24
     ea0:	c9 f1       	breq	.+114    	; 0xf14 <__vector_23+0x3b8>
     ea2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     ea6:	86 30       	cpi	r24, 0x06	; 6
     ea8:	a9 f1       	breq	.+106    	; 0xf14 <__vector_23+0x3b8>
                motors_on();
     eaa:	53 9a       	sbi	0x0a, 3	; 10
     eac:	23 9a       	sbi	0x04, 3	; 4
     eae:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eb2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     ebc:	2b c0       	rjmp	.+86     	; 0xf14 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     ebe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     ec2:	86 30       	cpi	r24, 0x06	; 6
     ec4:	81 f0       	breq	.+32     	; 0xee6 <__vector_23+0x38a>
                motors_on();
     ec6:	53 9a       	sbi	0x0a, 3	; 10
     ec8:	23 9a       	sbi	0x04, 3	; 4
     eca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ece:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     ed8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     edc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
     ee0:	86 e0       	ldi	r24, 0x06	; 6
     ee2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <rx_msg>
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <__vector_23+0x398>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <__vector_23+0x394>
     ef8:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_uid>
     efc:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <kilo_uid+0x1>
     f00:	82 23       	and	r24, r18
     f02:	93 23       	and	r25, r19
     f04:	89 2b       	or	r24, r25
     f06:	21 f0       	breq	.+8      	; 0xf10 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f10:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f3a:	fc 01       	movw	r30, r24
     f3c:	9c 01       	movw	r18, r24
     f3e:	26 5f       	subi	r18, 0xF6	; 246
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f46:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f48:	84 27       	eor	r24, r20
     f4a:	08 2e       	mov	r0, r24
     f4c:	82 95       	swap	r24
     f4e:	80 7f       	andi	r24, 0xF0	; 240
     f50:	80 25       	eor	r24, r0
     f52:	09 2e       	mov	r0, r25
     f54:	98 2f       	mov	r25, r24
     f56:	82 95       	swap	r24
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	08 26       	eor	r0, r24
     f5c:	86 95       	lsr	r24
     f5e:	98 27       	eor	r25, r24
     f60:	89 27       	eor	r24, r25
     f62:	88 0f       	add	r24, r24
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     f6a:	e2 17       	cp	r30, r18
     f6c:	f3 07       	cpc	r31, r19
     f6e:	59 f7       	brne	.-42     	; 0xf46 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     f70:	08 95       	ret

00000f72 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     f72:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     f74:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     f76:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     f78:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <tx_mask>
    or tmpreg1, ddrreg
     f7c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     f7e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     f80:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     f82:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
     f86:	20 30       	cpi	r18, 0x00	; 0
     f88:	29 f0       	breq	.+10     	; 0xf94 <message_send+0x22>
     f8a:	00 00       	nop
     f8c:	25 b1       	in	r18, 0x05	; 5
     f8e:	23 2b       	or	r18, r19
     f90:	25 b9       	out	0x05, r18	; 5
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <message_send+0x2a>
     f94:	00 00       	nop
     f96:	00 00       	nop
     f98:	00 00       	nop
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <message_send+0x2a>
     f9c:	00 00       	nop
     f9e:	00 00       	nop
     fa0:	00 00       	nop
     fa2:	30 95       	com	r19
     fa4:	25 b1       	in	r18, 0x05	; 5
     fa6:	23 23       	and	r18, r19
     fa8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     faa:	2e ea       	ldi	r18, 0xAE	; 174
     fac:	2a 95       	dec	r18
     fae:	f1 f7       	brne	.-4      	; 0xfac <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     fb0:	2b ee       	ldi	r18, 0xEB	; 235

00000fb2 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     fb2:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     fb4:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     fb8:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     fba:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
     fbe:	30 95       	com	r19
    in tmpreg1, IR_PORT
     fc0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     fc2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     fc4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     fc6:	0f be       	out	0x3f, r0	; 63
    return 0
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret

00000fcc <nocollision>:
nocollision:
    nop
     fcc:	00 00       	nop
    dec tmpreg1
     fce:	2a 95       	dec	r18
    brne checkcollision
     fd0:	81 f7       	brne	.-32     	; 0xfb2 <checkcollision>

    ldi tmpreg1, 0x01
     fd2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fd4:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
     fd8:	20 30       	cpi	r18, 0x00	; 0
     fda:	29 f0       	breq	.+10     	; 0xfe6 <nocollision+0x1a>
     fdc:	00 00       	nop
     fde:	25 b1       	in	r18, 0x05	; 5
     fe0:	23 2b       	or	r18, r19
     fe2:	25 b9       	out	0x05, r18	; 5
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <nocollision+0x22>
     fe6:	00 00       	nop
     fe8:	00 00       	nop
     fea:	00 00       	nop
     fec:	00 c0       	rjmp	.+0      	; 0xfee <nocollision+0x22>
     fee:	00 00       	nop
     ff0:	00 00       	nop
     ff2:	00 00       	nop
     ff4:	30 95       	com	r19
     ff6:	25 b1       	in	r18, 0x05	; 5
     ff8:	23 23       	and	r18, r19
     ffa:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
     ffc:	00 00       	nop
     ffe:	24 e5       	ldi	r18, 0x54	; 84
    1000:	2a 95       	dec	r18
    1002:	f1 f7       	brne	.-4      	; 0x1000 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1004:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1006:	8c e0       	ldi	r24, 0x0C	; 12

00001008 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1008:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    100a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    100c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    100e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1010:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1012:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1014:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1016:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1018:	50 e0       	ldi	r21, 0x00	; 0

0000101a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    101a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    101c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    101e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1020:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1022:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    1026:	20 30       	cpi	r18, 0x00	; 0
    1028:	29 f0       	breq	.+10     	; 0x1034 <sendbit+0x1a>
    102a:	00 00       	nop
    102c:	25 b1       	in	r18, 0x05	; 5
    102e:	23 2b       	or	r18, r19
    1030:	25 b9       	out	0x05, r18	; 5
    1032:	04 c0       	rjmp	.+8      	; 0x103c <sendbit+0x22>
    1034:	00 00       	nop
    1036:	00 00       	nop
    1038:	00 00       	nop
    103a:	00 c0       	rjmp	.+0      	; 0x103c <sendbit+0x22>
    103c:	00 00       	nop
    103e:	00 00       	nop
    1040:	00 00       	nop
    1042:	30 95       	com	r19
    1044:	25 b1       	in	r18, 0x05	; 5
    1046:	23 23       	and	r18, r19
    1048:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    104a:	00 00       	nop
    104c:	21 e5       	ldi	r18, 0x51	; 81
    104e:	2a 95       	dec	r18
    1050:	f1 f7       	brne	.-4      	; 0x104e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1052:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1054:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1056:	9a 95       	dec	r25
    brne sendbit
    1058:	01 f7       	brne	.-64     	; 0x101a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    105a:	8a 95       	dec	r24
    brne sendbyte
    105c:	a9 f6       	brne	.-86     	; 0x1008 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    105e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1060:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1062:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1064:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1066:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    106a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    106c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    106e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1070:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1072:	0f be       	out	0x3f, r0	; 63
    return 1
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	08 95       	ret

00001078 <main>:
}

int main() 
{
  kilo_init();
    1078:	0e 94 89 00 	call	0x112	; 0x112 <kilo_init>
  kilo_start(setup, loop);
    107c:	62 e7       	ldi	r22, 0x72	; 114
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	81 e7       	ldi	r24, 0x71	; 113
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 81 04 	call	0x902	; 0x902 <kilo_start>

  return 0;
}
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 95       	ret

0000108e <__divmodhi4>:
    108e:	97 fb       	bst	r25, 7
    1090:	07 2e       	mov	r0, r23
    1092:	16 f4       	brtc	.+4      	; 0x1098 <__divmodhi4+0xa>
    1094:	00 94       	com	r0
    1096:	07 d0       	rcall	.+14     	; 0x10a6 <__divmodhi4_neg1>
    1098:	77 fd       	sbrc	r23, 7
    109a:	09 d0       	rcall	.+18     	; 0x10ae <__divmodhi4_neg2>
    109c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__udivmodhi4>
    10a0:	07 fc       	sbrc	r0, 7
    10a2:	05 d0       	rcall	.+10     	; 0x10ae <__divmodhi4_neg2>
    10a4:	3e f4       	brtc	.+14     	; 0x10b4 <__divmodhi4_exit>

000010a6 <__divmodhi4_neg1>:
    10a6:	90 95       	com	r25
    10a8:	81 95       	neg	r24
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__divmodhi4_neg2>:
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255

000010b4 <__divmodhi4_exit>:
    10b4:	08 95       	ret

000010b6 <__tablejump2__>:
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	05 90       	lpm	r0, Z+
    10bc:	f4 91       	lpm	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	09 94       	ijmp

000010c2 <__umulhisi3>:
    10c2:	a2 9f       	mul	r26, r18
    10c4:	b0 01       	movw	r22, r0
    10c6:	b3 9f       	mul	r27, r19
    10c8:	c0 01       	movw	r24, r0
    10ca:	a3 9f       	mul	r26, r19
    10cc:	70 0d       	add	r23, r0
    10ce:	81 1d       	adc	r24, r1
    10d0:	11 24       	eor	r1, r1
    10d2:	91 1d       	adc	r25, r1
    10d4:	b2 9f       	mul	r27, r18
    10d6:	70 0d       	add	r23, r0
    10d8:	81 1d       	adc	r24, r1
    10da:	11 24       	eor	r1, r1
    10dc:	91 1d       	adc	r25, r1
    10de:	08 95       	ret

000010e0 <__udivmodhi4>:
    10e0:	aa 1b       	sub	r26, r26
    10e2:	bb 1b       	sub	r27, r27
    10e4:	51 e1       	ldi	r21, 0x11	; 17
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <__udivmodhi4_ep>

000010e8 <__udivmodhi4_loop>:
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	a6 17       	cp	r26, r22
    10ee:	b7 07       	cpc	r27, r23
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <__udivmodhi4_ep>
    10f2:	a6 1b       	sub	r26, r22
    10f4:	b7 0b       	sbc	r27, r23

000010f6 <__udivmodhi4_ep>:
    10f6:	88 1f       	adc	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	5a 95       	dec	r21
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__udivmodhi4_loop>
    10fe:	80 95       	com	r24
    1100:	90 95       	com	r25
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	08 95       	ret

00001108 <__subsf3>:
    1108:	50 58       	subi	r21, 0x80	; 128

0000110a <__addsf3>:
    110a:	bb 27       	eor	r27, r27
    110c:	aa 27       	eor	r26, r26
    110e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__addsf3x>
    1112:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_round>
    1116:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscA>
    111a:	38 f0       	brcs	.+14     	; 0x112a <__addsf3+0x20>
    111c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_pscB>
    1120:	20 f0       	brcs	.+8      	; 0x112a <__addsf3+0x20>
    1122:	39 f4       	brne	.+14     	; 0x1132 <__addsf3+0x28>
    1124:	9f 3f       	cpi	r25, 0xFF	; 255
    1126:	19 f4       	brne	.+6      	; 0x112e <__addsf3+0x24>
    1128:	26 f4       	brtc	.+8      	; 0x1132 <__addsf3+0x28>
    112a:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    112e:	0e f4       	brtc	.+2      	; 0x1132 <__addsf3+0x28>
    1130:	e0 95       	com	r30
    1132:	e7 fb       	bst	r30, 7
    1134:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>

00001138 <__addsf3x>:
    1138:	e9 2f       	mov	r30, r25
    113a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_split3>
    113e:	58 f3       	brcs	.-42     	; 0x1116 <__addsf3+0xc>
    1140:	ba 17       	cp	r27, r26
    1142:	62 07       	cpc	r22, r18
    1144:	73 07       	cpc	r23, r19
    1146:	84 07       	cpc	r24, r20
    1148:	95 07       	cpc	r25, r21
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__addsf3x+0x1c>
    114c:	79 f4       	brne	.+30     	; 0x116c <__addsf3x+0x34>
    114e:	a6 f5       	brtc	.+104    	; 0x11b8 <__addsf3x+0x80>
    1150:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_zero>
    1154:	0e f4       	brtc	.+2      	; 0x1158 <__addsf3x+0x20>
    1156:	e0 95       	com	r30
    1158:	0b 2e       	mov	r0, r27
    115a:	ba 2f       	mov	r27, r26
    115c:	a0 2d       	mov	r26, r0
    115e:	0b 01       	movw	r0, r22
    1160:	b9 01       	movw	r22, r18
    1162:	90 01       	movw	r18, r0
    1164:	0c 01       	movw	r0, r24
    1166:	ca 01       	movw	r24, r20
    1168:	a0 01       	movw	r20, r0
    116a:	11 24       	eor	r1, r1
    116c:	ff 27       	eor	r31, r31
    116e:	59 1b       	sub	r21, r25
    1170:	99 f0       	breq	.+38     	; 0x1198 <__addsf3x+0x60>
    1172:	59 3f       	cpi	r21, 0xF9	; 249
    1174:	50 f4       	brcc	.+20     	; 0x118a <__addsf3x+0x52>
    1176:	50 3e       	cpi	r21, 0xE0	; 224
    1178:	68 f1       	brcs	.+90     	; 0x11d4 <__addsf3x+0x9c>
    117a:	1a 16       	cp	r1, r26
    117c:	f0 40       	sbci	r31, 0x00	; 0
    117e:	a2 2f       	mov	r26, r18
    1180:	23 2f       	mov	r18, r19
    1182:	34 2f       	mov	r19, r20
    1184:	44 27       	eor	r20, r20
    1186:	58 5f       	subi	r21, 0xF8	; 248
    1188:	f3 cf       	rjmp	.-26     	; 0x1170 <__addsf3x+0x38>
    118a:	46 95       	lsr	r20
    118c:	37 95       	ror	r19
    118e:	27 95       	ror	r18
    1190:	a7 95       	ror	r26
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	53 95       	inc	r21
    1196:	c9 f7       	brne	.-14     	; 0x118a <__addsf3x+0x52>
    1198:	7e f4       	brtc	.+30     	; 0x11b8 <__addsf3x+0x80>
    119a:	1f 16       	cp	r1, r31
    119c:	ba 0b       	sbc	r27, r26
    119e:	62 0b       	sbc	r22, r18
    11a0:	73 0b       	sbc	r23, r19
    11a2:	84 0b       	sbc	r24, r20
    11a4:	ba f0       	brmi	.+46     	; 0x11d4 <__addsf3x+0x9c>
    11a6:	91 50       	subi	r25, 0x01	; 1
    11a8:	a1 f0       	breq	.+40     	; 0x11d2 <__addsf3x+0x9a>
    11aa:	ff 0f       	add	r31, r31
    11ac:	bb 1f       	adc	r27, r27
    11ae:	66 1f       	adc	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	c2 f7       	brpl	.-16     	; 0x11a6 <__addsf3x+0x6e>
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <__addsf3x+0x9c>
    11b8:	ba 0f       	add	r27, r26
    11ba:	62 1f       	adc	r22, r18
    11bc:	73 1f       	adc	r23, r19
    11be:	84 1f       	adc	r24, r20
    11c0:	48 f4       	brcc	.+18     	; 0x11d4 <__addsf3x+0x9c>
    11c2:	87 95       	ror	r24
    11c4:	77 95       	ror	r23
    11c6:	67 95       	ror	r22
    11c8:	b7 95       	ror	r27
    11ca:	f7 95       	ror	r31
    11cc:	9e 3f       	cpi	r25, 0xFE	; 254
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <__addsf3x+0x9a>
    11d0:	b0 cf       	rjmp	.-160    	; 0x1132 <__addsf3+0x28>
    11d2:	93 95       	inc	r25
    11d4:	88 0f       	add	r24, r24
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__addsf3x+0xa2>
    11d8:	99 27       	eor	r25, r25
    11da:	ee 0f       	add	r30, r30
    11dc:	97 95       	ror	r25
    11de:	87 95       	ror	r24
    11e0:	08 95       	ret

000011e2 <__divsf3>:
    11e2:	0e 94 05 09 	call	0x120a	; 0x120a <__divsf3x>
    11e6:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_round>
    11ea:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_pscB>
    11ee:	58 f0       	brcs	.+22     	; 0x1206 <__divsf3+0x24>
    11f0:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscA>
    11f4:	40 f0       	brcs	.+16     	; 0x1206 <__divsf3+0x24>
    11f6:	29 f4       	brne	.+10     	; 0x1202 <__divsf3+0x20>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__divsf3+0x24>
    11fc:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    1200:	51 11       	cpse	r21, r1
    1202:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>
    1206:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>

0000120a <__divsf3x>:
    120a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_split3>
    120e:	68 f3       	brcs	.-38     	; 0x11ea <__divsf3+0x8>

00001210 <__divsf3_pse>:
    1210:	99 23       	and	r25, r25
    1212:	b1 f3       	breq	.-20     	; 0x1200 <__divsf3+0x1e>
    1214:	55 23       	and	r21, r21
    1216:	91 f3       	breq	.-28     	; 0x11fc <__divsf3+0x1a>
    1218:	95 1b       	sub	r25, r21
    121a:	55 0b       	sbc	r21, r21
    121c:	bb 27       	eor	r27, r27
    121e:	aa 27       	eor	r26, r26
    1220:	62 17       	cp	r22, r18
    1222:	73 07       	cpc	r23, r19
    1224:	84 07       	cpc	r24, r20
    1226:	38 f0       	brcs	.+14     	; 0x1236 <__divsf3_pse+0x26>
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	44 1f       	adc	r20, r20
    1232:	aa 1f       	adc	r26, r26
    1234:	a9 f3       	breq	.-22     	; 0x1220 <__divsf3_pse+0x10>
    1236:	35 d0       	rcall	.+106    	; 0x12a2 <__divsf3_pse+0x92>
    1238:	0e 2e       	mov	r0, r30
    123a:	3a f0       	brmi	.+14     	; 0x124a <__divsf3_pse+0x3a>
    123c:	e0 e8       	ldi	r30, 0x80	; 128
    123e:	32 d0       	rcall	.+100    	; 0x12a4 <__divsf3_pse+0x94>
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	50 40       	sbci	r21, 0x00	; 0
    1244:	e6 95       	lsr	r30
    1246:	00 1c       	adc	r0, r0
    1248:	ca f7       	brpl	.-14     	; 0x123c <__divsf3_pse+0x2c>
    124a:	2b d0       	rcall	.+86     	; 0x12a2 <__divsf3_pse+0x92>
    124c:	fe 2f       	mov	r31, r30
    124e:	29 d0       	rcall	.+82     	; 0x12a2 <__divsf3_pse+0x92>
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	bb 1f       	adc	r27, r27
    1258:	26 17       	cp	r18, r22
    125a:	37 07       	cpc	r19, r23
    125c:	48 07       	cpc	r20, r24
    125e:	ab 07       	cpc	r26, r27
    1260:	b0 e8       	ldi	r27, 0x80	; 128
    1262:	09 f0       	breq	.+2      	; 0x1266 <__divsf3_pse+0x56>
    1264:	bb 0b       	sbc	r27, r27
    1266:	80 2d       	mov	r24, r0
    1268:	bf 01       	movw	r22, r30
    126a:	ff 27       	eor	r31, r31
    126c:	93 58       	subi	r25, 0x83	; 131
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	3a f0       	brmi	.+14     	; 0x1280 <__divsf3_pse+0x70>
    1272:	9e 3f       	cpi	r25, 0xFE	; 254
    1274:	51 05       	cpc	r21, r1
    1276:	78 f0       	brcs	.+30     	; 0x1296 <__divsf3_pse+0x86>
    1278:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    127c:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	e4 f3       	brlt	.-8      	; 0x127c <__divsf3_pse+0x6c>
    1284:	98 3e       	cpi	r25, 0xE8	; 232
    1286:	d4 f3       	brlt	.-12     	; 0x127c <__divsf3_pse+0x6c>
    1288:	86 95       	lsr	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f7 95       	ror	r31
    1292:	9f 5f       	subi	r25, 0xFF	; 255
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__divsf3_pse+0x78>
    1296:	88 0f       	add	r24, r24
    1298:	91 1d       	adc	r25, r1
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret
    12a2:	e1 e0       	ldi	r30, 0x01	; 1
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	bb 1f       	adc	r27, r27
    12ac:	62 17       	cp	r22, r18
    12ae:	73 07       	cpc	r23, r19
    12b0:	84 07       	cpc	r24, r20
    12b2:	ba 07       	cpc	r27, r26
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__divsf3_pse+0xae>
    12b6:	62 1b       	sub	r22, r18
    12b8:	73 0b       	sbc	r23, r19
    12ba:	84 0b       	sbc	r24, r20
    12bc:	ba 0b       	sbc	r27, r26
    12be:	ee 1f       	adc	r30, r30
    12c0:	88 f7       	brcc	.-30     	; 0x12a4 <__divsf3_pse+0x94>
    12c2:	e0 95       	com	r30
    12c4:	08 95       	ret

000012c6 <__fixsfsi>:
    12c6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixunssfsi>
    12ca:	68 94       	set
    12cc:	b1 11       	cpse	r27, r1
    12ce:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>
    12d2:	08 95       	ret

000012d4 <__fixunssfsi>:
    12d4:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_splitA>
    12d8:	88 f0       	brcs	.+34     	; 0x12fc <__fixunssfsi+0x28>
    12da:	9f 57       	subi	r25, 0x7F	; 127
    12dc:	98 f0       	brcs	.+38     	; 0x1304 <__fixunssfsi+0x30>
    12de:	b9 2f       	mov	r27, r25
    12e0:	99 27       	eor	r25, r25
    12e2:	b7 51       	subi	r27, 0x17	; 23
    12e4:	b0 f0       	brcs	.+44     	; 0x1312 <__fixunssfsi+0x3e>
    12e6:	e1 f0       	breq	.+56     	; 0x1320 <__fixunssfsi+0x4c>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	1a f0       	brmi	.+6      	; 0x12f8 <__fixunssfsi+0x24>
    12f2:	ba 95       	dec	r27
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__fixunssfsi+0x14>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <__fixunssfsi+0x4c>
    12f8:	b1 30       	cpi	r27, 0x01	; 1
    12fa:	91 f0       	breq	.+36     	; 0x1320 <__fixunssfsi+0x4c>
    12fc:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_zero>
    1300:	b1 e0       	ldi	r27, 0x01	; 1
    1302:	08 95       	ret
    1304:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_zero>
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	88 27       	eor	r24, r24
    130e:	b8 5f       	subi	r27, 0xF8	; 248
    1310:	39 f0       	breq	.+14     	; 0x1320 <__fixunssfsi+0x4c>
    1312:	b9 3f       	cpi	r27, 0xF9	; 249
    1314:	cc f3       	brlt	.-14     	; 0x1308 <__fixunssfsi+0x34>
    1316:	86 95       	lsr	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b3 95       	inc	r27
    131e:	d9 f7       	brne	.-10     	; 0x1316 <__fixunssfsi+0x42>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__fixunssfsi+0x5c>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__floatunsisf>:
    1332:	e8 94       	clt
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <__floatsisf+0x12>

00001336 <__floatsisf>:
    1336:	97 fb       	bst	r25, 7
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__floatsisf+0x12>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	99 23       	and	r25, r25
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__floatsisf+0x40>
    134c:	f9 2f       	mov	r31, r25
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	bb 27       	eor	r27, r27
    1352:	93 95       	inc	r25
    1354:	f6 95       	lsr	r31
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f1 11       	cpse	r31, r1
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <__floatsisf+0x1c>
    1362:	fa f4       	brpl	.+62     	; 0x13a2 <__floatsisf+0x6c>
    1364:	bb 0f       	add	r27, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <__floatsisf+0x36>
    1368:	60 ff       	sbrs	r22, 0
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__floatsisf+0x6c>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__floatsisf+0x6c>
    1376:	88 23       	and	r24, r24
    1378:	11 f0       	breq	.+4      	; 0x137e <__floatsisf+0x48>
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <__floatsisf+0x6a>
    137e:	77 23       	and	r23, r23
    1380:	21 f0       	breq	.+8      	; 0x138a <__floatsisf+0x54>
    1382:	9e e8       	ldi	r25, 0x8E	; 142
    1384:	87 2f       	mov	r24, r23
    1386:	76 2f       	mov	r23, r22
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__floatsisf+0x5e>
    138a:	66 23       	and	r22, r22
    138c:	71 f0       	breq	.+28     	; 0x13aa <__floatsisf+0x74>
    138e:	96 e8       	ldi	r25, 0x86	; 134
    1390:	86 2f       	mov	r24, r22
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	2a f0       	brmi	.+10     	; 0x13a2 <__floatsisf+0x6c>
    1398:	9a 95       	dec	r25
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	da f7       	brpl	.-10     	; 0x1398 <__floatsisf+0x62>
    13a2:	88 0f       	add	r24, r24
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <__fp_inf>:
    13ac:	97 f9       	bld	r25, 7
    13ae:	9f 67       	ori	r25, 0x7F	; 127
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <__fp_nan>:
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	80 ec       	ldi	r24, 0xC0	; 192
    13bc:	08 95       	ret

000013be <__fp_pscA>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	16 16       	cp	r1, r22
    13c4:	17 06       	cpc	r1, r23
    13c6:	18 06       	cpc	r1, r24
    13c8:	09 06       	cpc	r0, r25
    13ca:	08 95       	ret

000013cc <__fp_pscB>:
    13cc:	00 24       	eor	r0, r0
    13ce:	0a 94       	dec	r0
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	14 06       	cpc	r1, r20
    13d6:	05 06       	cpc	r0, r21
    13d8:	08 95       	ret

000013da <__fp_round>:
    13da:	09 2e       	mov	r0, r25
    13dc:	03 94       	inc	r0
    13de:	00 0c       	add	r0, r0
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__fp_round+0xc>
    13e2:	88 23       	and	r24, r24
    13e4:	52 f0       	brmi	.+20     	; 0x13fa <__fp_round+0x20>
    13e6:	bb 0f       	add	r27, r27
    13e8:	40 f4       	brcc	.+16     	; 0x13fa <__fp_round+0x20>
    13ea:	bf 2b       	or	r27, r31
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__fp_round+0x18>
    13ee:	60 ff       	sbrs	r22, 0
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <__fp_round+0x20>
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	8f 4f       	sbci	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	08 95       	ret

000013fc <__fp_split3>:
    13fc:	57 fd       	sbrc	r21, 7
    13fe:	90 58       	subi	r25, 0x80	; 128
    1400:	44 0f       	add	r20, r20
    1402:	55 1f       	adc	r21, r21
    1404:	59 f0       	breq	.+22     	; 0x141c <__fp_splitA+0x10>
    1406:	5f 3f       	cpi	r21, 0xFF	; 255
    1408:	71 f0       	breq	.+28     	; 0x1426 <__fp_splitA+0x1a>
    140a:	47 95       	ror	r20

0000140c <__fp_splitA>:
    140c:	88 0f       	add	r24, r24
    140e:	97 fb       	bst	r25, 7
    1410:	99 1f       	adc	r25, r25
    1412:	61 f0       	breq	.+24     	; 0x142c <__fp_splitA+0x20>
    1414:	9f 3f       	cpi	r25, 0xFF	; 255
    1416:	79 f0       	breq	.+30     	; 0x1436 <__fp_splitA+0x2a>
    1418:	87 95       	ror	r24
    141a:	08 95       	ret
    141c:	12 16       	cp	r1, r18
    141e:	13 06       	cpc	r1, r19
    1420:	14 06       	cpc	r1, r20
    1422:	55 1f       	adc	r21, r21
    1424:	f2 cf       	rjmp	.-28     	; 0x140a <__fp_split3+0xe>
    1426:	46 95       	lsr	r20
    1428:	f1 df       	rcall	.-30     	; 0x140c <__fp_splitA>
    142a:	08 c0       	rjmp	.+16     	; 0x143c <__fp_splitA+0x30>
    142c:	16 16       	cp	r1, r22
    142e:	17 06       	cpc	r1, r23
    1430:	18 06       	cpc	r1, r24
    1432:	99 1f       	adc	r25, r25
    1434:	f1 cf       	rjmp	.-30     	; 0x1418 <__fp_splitA+0xc>
    1436:	86 95       	lsr	r24
    1438:	71 05       	cpc	r23, r1
    143a:	61 05       	cpc	r22, r1
    143c:	08 94       	sec
    143e:	08 95       	ret

00001440 <__fp_zero>:
    1440:	e8 94       	clt

00001442 <__fp_szero>:
    1442:	bb 27       	eor	r27, r27
    1444:	66 27       	eor	r22, r22
    1446:	77 27       	eor	r23, r23
    1448:	cb 01       	movw	r24, r22
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret

0000144e <__mulsf3>:
    144e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__mulsf3x>
    1452:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_round>
    1456:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscA>
    145a:	38 f0       	brcs	.+14     	; 0x146a <__mulsf3+0x1c>
    145c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_pscB>
    1460:	20 f0       	brcs	.+8      	; 0x146a <__mulsf3+0x1c>
    1462:	95 23       	and	r25, r21
    1464:	11 f0       	breq	.+4      	; 0x146a <__mulsf3+0x1c>
    1466:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    146a:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    146e:	11 24       	eor	r1, r1
    1470:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>

00001474 <__mulsf3x>:
    1474:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_split3>
    1478:	70 f3       	brcs	.-36     	; 0x1456 <__mulsf3+0x8>

0000147a <__mulsf3_pse>:
    147a:	95 9f       	mul	r25, r21
    147c:	c1 f3       	breq	.-16     	; 0x146e <__mulsf3+0x20>
    147e:	95 0f       	add	r25, r21
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	55 1f       	adc	r21, r21
    1484:	62 9f       	mul	r22, r18
    1486:	f0 01       	movw	r30, r0
    1488:	72 9f       	mul	r23, r18
    148a:	bb 27       	eor	r27, r27
    148c:	f0 0d       	add	r31, r0
    148e:	b1 1d       	adc	r27, r1
    1490:	63 9f       	mul	r22, r19
    1492:	aa 27       	eor	r26, r26
    1494:	f0 0d       	add	r31, r0
    1496:	b1 1d       	adc	r27, r1
    1498:	aa 1f       	adc	r26, r26
    149a:	64 9f       	mul	r22, r20
    149c:	66 27       	eor	r22, r22
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	66 1f       	adc	r22, r22
    14a4:	82 9f       	mul	r24, r18
    14a6:	22 27       	eor	r18, r18
    14a8:	b0 0d       	add	r27, r0
    14aa:	a1 1d       	adc	r26, r1
    14ac:	62 1f       	adc	r22, r18
    14ae:	73 9f       	mul	r23, r19
    14b0:	b0 0d       	add	r27, r0
    14b2:	a1 1d       	adc	r26, r1
    14b4:	62 1f       	adc	r22, r18
    14b6:	83 9f       	mul	r24, r19
    14b8:	a0 0d       	add	r26, r0
    14ba:	61 1d       	adc	r22, r1
    14bc:	22 1f       	adc	r18, r18
    14be:	74 9f       	mul	r23, r20
    14c0:	33 27       	eor	r19, r19
    14c2:	a0 0d       	add	r26, r0
    14c4:	61 1d       	adc	r22, r1
    14c6:	23 1f       	adc	r18, r19
    14c8:	84 9f       	mul	r24, r20
    14ca:	60 0d       	add	r22, r0
    14cc:	21 1d       	adc	r18, r1
    14ce:	82 2f       	mov	r24, r18
    14d0:	76 2f       	mov	r23, r22
    14d2:	6a 2f       	mov	r22, r26
    14d4:	11 24       	eor	r1, r1
    14d6:	9f 57       	subi	r25, 0x7F	; 127
    14d8:	50 40       	sbci	r21, 0x00	; 0
    14da:	9a f0       	brmi	.+38     	; 0x1502 <__mulsf3_pse+0x88>
    14dc:	f1 f0       	breq	.+60     	; 0x151a <__mulsf3_pse+0xa0>
    14de:	88 23       	and	r24, r24
    14e0:	4a f0       	brmi	.+18     	; 0x14f4 <__mulsf3_pse+0x7a>
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	bb 1f       	adc	r27, r27
    14e8:	66 1f       	adc	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	91 50       	subi	r25, 0x01	; 1
    14f0:	50 40       	sbci	r21, 0x00	; 0
    14f2:	a9 f7       	brne	.-22     	; 0x14de <__mulsf3_pse+0x64>
    14f4:	9e 3f       	cpi	r25, 0xFE	; 254
    14f6:	51 05       	cpc	r21, r1
    14f8:	80 f0       	brcs	.+32     	; 0x151a <__mulsf3_pse+0xa0>
    14fa:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    14fe:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>
    1502:	5f 3f       	cpi	r21, 0xFF	; 255
    1504:	e4 f3       	brlt	.-8      	; 0x14fe <__mulsf3_pse+0x84>
    1506:	98 3e       	cpi	r25, 0xE8	; 232
    1508:	d4 f3       	brlt	.-12     	; 0x14fe <__mulsf3_pse+0x84>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b7 95       	ror	r27
    1512:	f7 95       	ror	r31
    1514:	e7 95       	ror	r30
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	c1 f7       	brne	.-16     	; 0x150a <__mulsf3_pse+0x90>
    151a:	fe 2b       	or	r31, r30
    151c:	88 0f       	add	r24, r24
    151e:	91 1d       	adc	r25, r1
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	97 f9       	bld	r25, 7
    1526:	08 95       	ret

00001528 <do_rand>:
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	ec 01       	movw	r28, r24
    153e:	68 81       	ld	r22, Y
    1540:	79 81       	ldd	r23, Y+1	; 0x01
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	61 15       	cp	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	81 05       	cpc	r24, r1
    154c:	91 05       	cpc	r25, r1
    154e:	21 f4       	brne	.+8      	; 0x1558 <do_rand+0x30>
    1550:	64 e2       	ldi	r22, 0x24	; 36
    1552:	79 ed       	ldi	r23, 0xD9	; 217
    1554:	8b e5       	ldi	r24, 0x5B	; 91
    1556:	97 e0       	ldi	r25, 0x07	; 7
    1558:	2d e1       	ldi	r18, 0x1D	; 29
    155a:	33 ef       	ldi	r19, 0xF3	; 243
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	0e 94 06 0b 	call	0x160c	; 0x160c <__divmodsi4>
    1564:	49 01       	movw	r8, r18
    1566:	5a 01       	movw	r10, r20
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	a7 ea       	ldi	r26, 0xA7	; 167
    156e:	b1 e4       	ldi	r27, 0x41	; 65
    1570:	0e 94 25 0b 	call	0x164a	; 0x164a <__muluhisi3>
    1574:	6b 01       	movw	r12, r22
    1576:	7c 01       	movw	r14, r24
    1578:	ac ee       	ldi	r26, 0xEC	; 236
    157a:	b4 ef       	ldi	r27, 0xF4	; 244
    157c:	a5 01       	movw	r20, r10
    157e:	94 01       	movw	r18, r8
    1580:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulohisi3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8c 0d       	add	r24, r12
    158a:	9d 1d       	adc	r25, r13
    158c:	ae 1d       	adc	r26, r14
    158e:	bf 1d       	adc	r27, r15
    1590:	b7 ff       	sbrs	r27, 7
    1592:	03 c0       	rjmp	.+6      	; 0x159a <do_rand+0x72>
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	a1 09       	sbc	r26, r1
    1598:	b0 48       	sbci	r27, 0x80	; 128
    159a:	88 83       	st	Y, r24
    159c:	99 83       	std	Y+1, r25	; 0x01
    159e:	aa 83       	std	Y+2, r26	; 0x02
    15a0:	bb 83       	std	Y+3, r27	; 0x03
    15a2:	9f 77       	andi	r25, 0x7F	; 127
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	9f 90       	pop	r9
    15b6:	8f 90       	pop	r8
    15b8:	08 95       	ret

000015ba <rand_r>:
    15ba:	0e 94 94 0a 	call	0x1528	; 0x1528 <do_rand>
    15be:	08 95       	ret

000015c0 <rand>:
    15c0:	89 e0       	ldi	r24, 0x09	; 9
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 94 0a 	call	0x1528	; 0x1528 <do_rand>
    15c8:	08 95       	ret

000015ca <srand>:
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <next>
    15d2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <next+0x1>
    15d6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <next+0x2>
    15da:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <next+0x3>
    15de:	08 95       	ret

000015e0 <eeprom_read_byte>:
    15e0:	f9 99       	sbic	0x1f, 1	; 31
    15e2:	fe cf       	rjmp	.-4      	; 0x15e0 <eeprom_read_byte>
    15e4:	92 bd       	out	0x22, r25	; 34
    15e6:	81 bd       	out	0x21, r24	; 33
    15e8:	f8 9a       	sbi	0x1f, 0	; 31
    15ea:	99 27       	eor	r25, r25
    15ec:	80 b5       	in	r24, 0x20	; 32
    15ee:	08 95       	ret

000015f0 <eeprom_write_byte>:
    15f0:	26 2f       	mov	r18, r22

000015f2 <eeprom_write_r18>:
    15f2:	f9 99       	sbic	0x1f, 1	; 31
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <eeprom_write_r18>
    15f6:	1f ba       	out	0x1f, r1	; 31
    15f8:	92 bd       	out	0x22, r25	; 34
    15fa:	81 bd       	out	0x21, r24	; 33
    15fc:	20 bd       	out	0x20, r18	; 32
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	fa 9a       	sbi	0x1f, 2	; 31
    1604:	f9 9a       	sbi	0x1f, 1	; 31
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	08 95       	ret

0000160c <__divmodsi4>:
    160c:	05 2e       	mov	r0, r21
    160e:	97 fb       	bst	r25, 7
    1610:	1e f4       	brtc	.+6      	; 0x1618 <__divmodsi4+0xc>
    1612:	00 94       	com	r0
    1614:	0e 94 1d 0b 	call	0x163a	; 0x163a <__negsi2>
    1618:	57 fd       	sbrc	r21, 7
    161a:	07 d0       	rcall	.+14     	; 0x162a <__divmodsi4_neg2>
    161c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__udivmodsi4>
    1620:	07 fc       	sbrc	r0, 7
    1622:	03 d0       	rcall	.+6      	; 0x162a <__divmodsi4_neg2>
    1624:	4e f4       	brtc	.+18     	; 0x1638 <__divmodsi4_exit>
    1626:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__negsi2>

0000162a <__divmodsi4_neg2>:
    162a:	50 95       	com	r21
    162c:	40 95       	com	r20
    162e:	30 95       	com	r19
    1630:	21 95       	neg	r18
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	4f 4f       	sbci	r20, 0xFF	; 255
    1636:	5f 4f       	sbci	r21, 0xFF	; 255

00001638 <__divmodsi4_exit>:
    1638:	08 95       	ret

0000163a <__negsi2>:
    163a:	90 95       	com	r25
    163c:	80 95       	com	r24
    163e:	70 95       	com	r23
    1640:	61 95       	neg	r22
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	08 95       	ret

0000164a <__muluhisi3>:
    164a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__umulhisi3>
    164e:	a5 9f       	mul	r26, r21
    1650:	90 0d       	add	r25, r0
    1652:	b4 9f       	mul	r27, r20
    1654:	90 0d       	add	r25, r0
    1656:	a4 9f       	mul	r26, r20
    1658:	80 0d       	add	r24, r0
    165a:	91 1d       	adc	r25, r1
    165c:	11 24       	eor	r1, r1
    165e:	08 95       	ret

00001660 <__mulshisi3>:
    1660:	b7 ff       	sbrs	r27, 7
    1662:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__muluhisi3>

00001666 <__mulohisi3>:
    1666:	0e 94 25 0b 	call	0x164a	; 0x164a <__muluhisi3>
    166a:	82 1b       	sub	r24, r18
    166c:	93 0b       	sbc	r25, r19
    166e:	08 95       	ret

00001670 <__udivmodsi4>:
    1670:	a1 e2       	ldi	r26, 0x21	; 33
    1672:	1a 2e       	mov	r1, r26
    1674:	aa 1b       	sub	r26, r26
    1676:	bb 1b       	sub	r27, r27
    1678:	fd 01       	movw	r30, r26
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <__udivmodsi4_ep>

0000167c <__udivmodsi4_loop>:
    167c:	aa 1f       	adc	r26, r26
    167e:	bb 1f       	adc	r27, r27
    1680:	ee 1f       	adc	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	a2 17       	cp	r26, r18
    1686:	b3 07       	cpc	r27, r19
    1688:	e4 07       	cpc	r30, r20
    168a:	f5 07       	cpc	r31, r21
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__udivmodsi4_ep>
    168e:	a2 1b       	sub	r26, r18
    1690:	b3 0b       	sbc	r27, r19
    1692:	e4 0b       	sbc	r30, r20
    1694:	f5 0b       	sbc	r31, r21

00001696 <__udivmodsi4_ep>:
    1696:	66 1f       	adc	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	1a 94       	dec	r1
    16a0:	69 f7       	brne	.-38     	; 0x167c <__udivmodsi4_loop>
    16a2:	60 95       	com	r22
    16a4:	70 95       	com	r23
    16a6:	80 95       	com	r24
    16a8:	90 95       	com	r25
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	bd 01       	movw	r22, r26
    16b0:	cf 01       	movw	r24, r30
    16b2:	08 95       	ret

000016b4 <_exit>:
    16b4:	f8 94       	cli

000016b6 <__stop_program>:
    16b6:	ff cf       	rjmp	.-2      	; 0x16b6 <__stop_program>
