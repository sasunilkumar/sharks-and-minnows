
build/minnow_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	76 05       	cpc	r23, r6
      6a:	cd 05       	cpc	r28, r13
      6c:	e1 05       	cpc	r30, r1
      6e:	12 06       	cpc	r1, r18
      70:	19 06       	cpc	r1, r25
      72:	f8 05       	cpc	r31, r8
      74:	1c 06       	cpc	r1, r28
      76:	7a 07       	cpc	r23, r26
      78:	6b 08       	sbc	r6, r11
      7a:	6b 08       	sbc	r6, r11
      7c:	83 07       	cpc	r24, r19
      7e:	86 07       	cpc	r24, r22
      80:	89 07       	cpc	r24, r25
      82:	8b 07       	cpc	r24, r27
      84:	8d 07       	cpc	r24, r29
      86:	8f 07       	cpc	r24, r31
      88:	40 08       	sbc	r4, r0
      8a:	a1 07       	cpc	r26, r17

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec e9       	ldi	r30, 0x9C	; 156
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 37       	cpi	r26, 0x76	; 118
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 1d 09 	call	0x123a	; 0x123a <main>
      da:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <sample_light>:
int curr = 0, rand = 0, die = 4;
uint32_t last_changed = 0;
int16_t current_light = 0;

int16_t sample_light()
{
      e2:	cf 92       	push	r12
      e4:	df 92       	push	r13
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    int16_t number_of_samples = 0;
    long sum = 0;
      ee:	c1 2c       	mov	r12, r1
      f0:	d1 2c       	mov	r13, r1
      f2:	76 01       	movw	r14, r12

int16_t sample_light()
{
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    int16_t number_of_samples = 0;
      f4:	c0 e0       	ldi	r28, 0x00	; 0
      f6:	d0 e0       	ldi	r29, 0x00	; 0
    long sum = 0;

    while (number_of_samples < 300)
    {
        int16_t sample = get_ambientlight();
      f8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <get_ambientlight>
        // -1 indicates a failed sample, which should be discarded.
        if (sample != -1)
      fc:	8f 3f       	cpi	r24, 0xFF	; 255
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	92 07       	cpc	r25, r18
     102:	49 f0       	breq	.+18     	; 0x116 <sample_light+0x34>
        {
            sum = sum + sample;
     104:	09 2e       	mov	r0, r25
     106:	00 0c       	add	r0, r0
     108:	aa 0b       	sbc	r26, r26
     10a:	bb 0b       	sbc	r27, r27
     10c:	c8 0e       	add	r12, r24
     10e:	d9 1e       	adc	r13, r25
     110:	ea 1e       	adc	r14, r26
     112:	fb 1e       	adc	r15, r27
            number_of_samples = number_of_samples + 1;
     114:	21 96       	adiw	r28, 0x01	; 1
    // The ambient light sensor gives noisy readings. To mitigate this,
    // we take the average of 300 samples in quick succession.
    int16_t number_of_samples = 0;
    long sum = 0;

    while (number_of_samples < 300)
     116:	cc 32       	cpi	r28, 0x2C	; 44
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	d8 07       	cpc	r29, r24
     11c:	6c f3       	brlt	.-38     	; 0xf8 <sample_light+0x16>
            number_of_samples = number_of_samples + 1;
        }
    }

    // Compute the average.
    return sum / number_of_samples;
     11e:	9e 01       	movw	r18, r28
     120:	dd 0f       	add	r29, r29
     122:	44 0b       	sbc	r20, r20
     124:	55 0b       	sbc	r21, r21
     126:	c7 01       	movw	r24, r14
     128:	b6 01       	movw	r22, r12
     12a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__divmodsi4>
}
     12e:	c9 01       	movw	r24, r18
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	ff 90       	pop	r15
     136:	ef 90       	pop	r14
     138:	df 90       	pop	r13
     13a:	cf 90       	pop	r12
     13c:	08 95       	ret

0000013e <set_motion>:

void set_motion(int new_motion){
  if (curr != new_motion) {
     13e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <curr>
     142:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <curr+0x1>
     146:	28 17       	cp	r18, r24
     148:	39 07       	cpc	r19, r25
     14a:	09 f1       	breq	.+66     	; 0x18e <set_motion+0x50>
        curr = new_motion;
     14c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <curr+0x1>
     150:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <curr>
        if (curr == STOP) {
     154:	00 97       	sbiw	r24, 0x00	; 0
     156:	11 f4       	brne	.+4      	; 0x15c <set_motion+0x1e>
          set_motors(0,0);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	16 c0       	rjmp	.+44     	; 0x188 <set_motion+0x4a>
        } else if (curr == FORWARD) {
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	39 f4       	brne	.+14     	; 0x170 <set_motion+0x32>
          spinup_motors();
     162:	0e 94 76 02 	call	0x4ec	; 0x4ec <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     166:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <kilo_straight_right>
     16a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <kilo_straight_left>
     16e:	0d c0       	rjmp	.+26     	; 0x18a <set_motion+0x4c>
        } else if (curr == LEFT) {
     170:	02 97       	sbiw	r24, 0x02	; 2
     172:	31 f4       	brne	.+12     	; 0x180 <set_motion+0x42>
          spinup_motors();
     174:	0e 94 76 02 	call	0x4ec	; 0x4ec <spinup_motors>
          set_motors(kilo_turn_left, 0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <kilo_turn_left>
     17e:	05 c0       	rjmp	.+10     	; 0x18a <set_motion+0x4c>
        } else {
          spinup_motors();
     180:	0e 94 76 02 	call	0x4ec	; 0x4ec <spinup_motors>
          set_motors(0, kilo_turn_right);
     184:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <kilo_turn_right>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <set_motors>
     18e:	08 95       	ret

00000190 <setup>:
        }
  }
}

void setup() {
  current_light = sample_light();
     190:	0e 94 71 00 	call	0xe2	; 0xe2 <sample_light>
     194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     198:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  set_motion(STOP);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 9f 00 	call	0x13e	; 0x13e <set_motion>
  if (current_light < 1000) {
     1a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     1a8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     1ac:	88 3e       	cpi	r24, 0xE8	; 232
     1ae:	93 40       	sbci	r25, 0x03	; 3
     1b0:	1c f4       	brge	.+6      	; 0x1b8 <setup+0x28>
    set_color(CYAN);
     1b2:	84 e1       	ldi	r24, 0x14	; 20
     1b4:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
  }
  delay(2000);
     1b8:	80 ed       	ldi	r24, 0xD0	; 208
     1ba:	97 e0       	ldi	r25, 0x07	; 7
     1bc:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <delay>

000001c0 <minnow>:
}

int16_t minnow(int16_t current) {
  if (kilo_ticks > last_changed + 32) {
     1c0:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <kilo_ticks>
     1c4:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <kilo_ticks+0x1>
     1c8:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <kilo_ticks+0x2>
     1cc:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <kilo_ticks+0x3>
     1d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_changed>
     1d4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <last_changed+0x1>
     1d8:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <last_changed+0x2>
     1dc:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <last_changed+0x3>
     1e0:	80 96       	adiw	r24, 0x20	; 32
     1e2:	a1 1d       	adc	r26, r1
     1e4:	b1 1d       	adc	r27, r1
     1e6:	84 17       	cp	r24, r20
     1e8:	95 07       	cpc	r25, r21
     1ea:	a6 07       	cpc	r26, r22
     1ec:	b7 07       	cpc	r27, r23
     1ee:	a0 f5       	brcc	.+104    	; 0x258 <minnow+0x98>
      last_changed = kilo_ticks;
     1f0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <kilo_ticks>
     1f4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <kilo_ticks+0x1>
     1f8:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <kilo_ticks+0x2>
     1fc:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <kilo_ticks+0x3>
     200:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_changed>
     204:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <last_changed+0x1>
     208:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <last_changed+0x2>
     20c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <last_changed+0x3>
        set_color(BLUE);
     210:	80 e1       	ldi	r24, 0x10	; 16
     212:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
        rand = rand_soft();
     216:	0e 94 16 03 	call	0x62c	; 0x62c <rand_soft>
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     220:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
        die = (rand % 3);
     224:	63 e0       	ldi	r22, 0x03	; 3
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     22c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if (die == 0) {
     234:	00 97       	sbiw	r24, 0x00	; 0
     236:	19 f4       	brne	.+6      	; 0x23e <minnow+0x7e>
          set_motion(FORWARD);
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	07 c0       	rjmp	.+14     	; 0x24c <minnow+0x8c>
        } else if (die == 1) {
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	19 f4       	brne	.+6      	; 0x248 <minnow+0x88>
          set_motion(LEFT);
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	02 c0       	rjmp	.+4      	; 0x24c <minnow+0x8c>
        } else {
          set_motion(RIGHT);
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 9f 00 	call	0x13e	; 0x13e <set_motion>
        }
        delay(150);
     250:	86 e9       	ldi	r24, 0x96	; 150
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 66 02 	call	0x4cc	; 0x4cc <delay>
  }
  return sample_light();
     258:	0c 94 71 00 	jmp	0xe2	; 0xe2 <sample_light>

0000025c <loop>:
}

void loop() {
  while (current_light > 1000) {
     25c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     260:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     264:	89 3e       	cpi	r24, 0xE9	; 233
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	92 07       	cpc	r25, r18
     26a:	3c f0       	brlt	.+14     	; 0x27a <loop+0x1e>
    current_light = minnow(current_light);
     26c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <minnow>
     270:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     274:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     278:	f1 cf       	rjmp	.-30     	; 0x25c <loop>
  }
  current_light = 0;
     27a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
     27e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
        set_color(RED);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
        rand = rand_soft();
     288:	0e 94 16 03 	call	0x62c	; 0x62c <rand_soft>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rand+0x1>
     292:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rand>
        die = (rand % 3);
     296:	63 e0       	ldi	r22, 0x03	; 3
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if (die == 0) {
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	19 f4       	brne	.+6      	; 0x2b0 <loop+0x54>
          set_motion(FORWARD);
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <loop+0x62>
        } else if (die == 1) {
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	19 f4       	brne	.+6      	; 0x2ba <loop+0x5e>
          set_motion(LEFT);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <loop+0x62>
        } else {
          set_motion(RIGHT);
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 9f 00 	call	0x13e	; 0x13e <set_motion>
        }
        delay(150);
     2c2:	86 e9       	ldi	r24, 0x96	; 150
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <delay>

000002ca <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     2ca:	08 95       	ret

000002cc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	08 95       	ret

000002d2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     2d2:	08 95       	ret

000002d4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
    cli();
     2e2:	f8 94       	cli

    ports_off();
     2e4:	14 b8       	out	0x04, r1	; 4
     2e6:	17 b8       	out	0x07, r1	; 7
     2e8:	1a b8       	out	0x0a, r1	; 10
     2ea:	15 b8       	out	0x05, r1	; 5
     2ec:	18 b8       	out	0x08, r1	; 8
     2ee:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2f0:	52 9a       	sbi	0x0a, 2	; 10
     2f2:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2f4:	14 bc       	out	0x24, r1	; 36
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	85 bd       	out	0x25, r24	; 37
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	87 bd       	out	0x27, r24	; 39
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     304:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     308:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     30c:	2f e8       	ldi	r18, 0x8F	; 143
     30e:	3b e0       	ldi	r19, 0x0B	; 11
     310:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     314:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     318:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     31c:	53 98       	cbi	0x0a, 3	; 10
     31e:	23 98       	cbi	0x04, 3	; 4
     320:	91 ea       	ldi	r25, 0xA1	; 161
     322:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     326:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     32a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     32e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     332:	8b e0       	ldi	r24, 0x0B	; 11
     334:	80 bf       	out	0x30, r24	; 48
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     342:	83 e8       	ldi	r24, 0x83	; 131
     344:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     348:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     34c:	80 64       	ori	r24, 0x40	; 64
     34e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     356:	86 fd       	sbrc	r24, 6
     358:	fc cf       	rjmp	.-8      	; 0x352 <kilo_init+0x7e>
    adc_trigger_high_gain();
     35a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     35e:	83 ea       	ldi	r24, 0xA3	; 163
     360:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
    if (osccal != 0xFF)
     372:	8f 3f       	cpi	r24, 0xFF	; 255
     374:	11 f0       	breq	.+4      	; 0x37a <kilo_init+0xa6>
        OSCCAL = osccal;
     376:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     37a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>
    rx_leadingbit = 1;
     37e:	c1 e0       	ldi	r28, 0x01	; 1
     380:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <rx_leadingbit>
    rx_leadingbyte = 1;
     384:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <rx_leadingbyte>
    rx_byteindex = 0;
     388:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rx_byteindex>
    rx_bytevalue = 0;
     38c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     390:	80 e9       	ldi	r24, 0x90	; 144
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     398:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     39c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tx_mask>
     3a0:	88 73       	andi	r24, 0x38	; 56
     3a2:	11 f0       	breq	.+4      	; 0x3a8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3a4:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <tx_mask>
    tx_clock = 0;
     3a8:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <tx_clock+0x1>
     3ac:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <tx_clock>
    tx_increment = 255;
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <tx_increment+0x1>
     3b8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tx_increment>
    kilo_ticks = 0;
     3bc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <kilo_ticks>
     3c0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <kilo_ticks+0x1>
     3c4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <kilo_ticks+0x2>
     3c8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <kilo_ticks+0x3>
    kilo_state = IDLE;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
    kilo_tx_period = 3906;
     3d2:	82 e4       	ldi	r24, 0x42	; 66
     3d4:	9f e0       	ldi	r25, 0x0F	; 15
     3d6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <kilo_tx_period+0x1>
     3da:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3de:	80 eb       	ldi	r24, 0xB0	; 176
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     3e6:	c8 2f       	mov	r28, r24
     3e8:	81 eb       	ldi	r24, 0xB1	; 177
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     3f0:	2c 2f       	mov	r18, r28
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	38 2b       	or	r19, r24
     3f6:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <kilo_uid+0x1>
     3fa:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     406:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     40a:	89 e0       	ldi	r24, 0x09	; 9
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     412:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     416:	8c e0       	ldi	r24, 0x0C	; 12
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     41e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     422:	84 e1       	ldi	r24, 0x14	; 20
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     42a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_straight_right>
     42e:	00 e4       	ldi	r16, 0x40	; 64
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	59 e1       	ldi	r21, 0x19	; 25
     434:	e5 2e       	mov	r14, r21
     436:	51 e0       	ldi	r21, 0x01	; 1
     438:	f5 2e       	mov	r15, r21
     43a:	c0 e2       	ldi	r28, 0x20	; 32
     43c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     43e:	ce 01       	movw	r24, r28
     440:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     444:	d8 2e       	mov	r13, r24
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     44e:	2d 2d       	mov	r18, r13
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	32 2f       	mov	r19, r18
     454:	22 27       	eor	r18, r18
     456:	28 2b       	or	r18, r24
     458:	f8 01       	movw	r30, r16
     45a:	21 93       	st	Z+, r18
     45c:	31 93       	st	Z+, r19
     45e:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     460:	ce 01       	movw	r24, r28
     462:	c0 96       	adiw	r24, 0x30	; 48
     464:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     468:	d8 2e       	mov	r13, r24
     46a:	ce 01       	movw	r24, r28
     46c:	c1 96       	adiw	r24, 0x31	; 49
     46e:	0e 94 b6 0b 	call	0x176c	; 0x176c <eeprom_read_byte>
     472:	2d 2d       	mov	r18, r13
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	32 2f       	mov	r19, r18
     478:	22 27       	eor	r18, r18
     47a:	28 2b       	or	r18, r24
     47c:	f7 01       	movw	r30, r14
     47e:	21 93       	st	Z+, r18
     480:	31 93       	st	Z+, r19
     482:	7f 01       	movw	r14, r30
     484:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     486:	cc 33       	cpi	r28, 0x3C	; 60
     488:	d1 05       	cpc	r29, r1
     48a:	c9 f6       	brne	.-78     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     48c:	78 94       	sei
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	08 95       	ret

0000049e <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	8f 93       	push	r24
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	a8 95       	wdr
     4b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4b4:	88 61       	ori	r24, 0x18	; 24
     4b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4be:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     4c0:	8f 91       	pop	r24
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	41 f0       	breq	.+16     	; 0x4e0 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	ef ec       	ldi	r30, 0xCF	; 207
     4d2:	f7 e0       	ldi	r31, 0x07	; 7
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <delay+0x8>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <delay+0xe>
     4da:	00 00       	nop
        _delay_ms(1);
        ms--;
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f6 cf       	rjmp	.-20     	; 0x4cc <delay>
    }
}
     4e0:	08 95       	ret

000004e2 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4e2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4e6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     4ea:	08 95       	ret

000004ec <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4f2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     4f6:	8f e0       	ldi	r24, 0x0F	; 15
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <delay>

000004fe <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     4fe:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_busy>
     502:	81 11       	cpse	r24, r1
     504:	1e c0       	rjmp	.+60     	; 0x542 <get_ambientlight+0x44>
        cli();
     506:	f8 94       	cli
        adc_setup_conversion(7);
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     50e:	83 e8       	ldi	r24, 0x83	; 131
     510:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     514:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     518:	80 64       	ori	r24, 0x40	; 64
     51a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     51e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     522:	86 fd       	sbrc	r24, 6
     524:	fc cf       	rjmp	.-8      	; 0x51e <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     526:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     52a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     52e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     532:	23 ea       	ldi	r18, 0xA3	; 163
     534:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     53e:	78 94       	sei
     540:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     546:	08 95       	ret

00000548 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     548:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_busy>
     54c:	81 11       	cpse	r24, r1
     54e:	1e c0       	rjmp	.+60     	; 0x58c <get_temperature+0x44>
        cli();
     550:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     552:	88 ec       	ldi	r24, 0xC8	; 200
     554:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     558:	87 e8       	ldi	r24, 0x87	; 135
     55a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     55e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     562:	80 64       	ori	r24, 0x40	; 64
     564:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     568:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     56c:	86 fd       	sbrc	r24, 6
     56e:	fc cf       	rjmp	.-8      	; 0x568 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     578:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     57c:	23 ea       	ldi	r18, 0xA3	; 163
     57e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     588:	78 94       	sei
     58a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     590:	08 95       	ret

00000592 <rand_hard>:

uint8_t rand_hard() {
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     59a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     59c:	e3 ea       	ldi	r30, 0xA3	; 163
     59e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     5a0:	c6 e0       	ldi	r28, 0x06	; 6
     5a2:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     5a4:	a1 e0       	ldi	r26, 0x01	; 1
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     5a8:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     5aa:	f8 94       	cli
            adc_setup_conversion(6);
     5ac:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5b0:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     5b4:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b8:	40 64       	ori	r20, 0x40	; 64
     5ba:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     5be:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5c2:	46 fd       	sbrc	r20, 6
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <rand_hard+0x2c>
            a = ADCW&0x1;
     5c6:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ca:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     5ce:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     5d0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5d4:	50 64       	ori	r21, 0x40	; 64
     5d6:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     5da:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5de:	56 fd       	sbrc	r21, 6
     5e0:	fc cf       	rjmp	.-8      	; 0x5da <rand_hard+0x48>
            b = ADCW&0x1;
     5e2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5e6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     5ea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5ee:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5f2:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     5f6:	78 94       	sei
            tries++;
     5f8:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     5fa:	61 70       	andi	r22, 0x01	; 1
     5fc:	46 17       	cp	r20, r22
     5fe:	51 f0       	breq	.+20     	; 0x614 <rand_hard+0x82>
        if (a)
     600:	44 23       	and	r20, r20
     602:	59 f0       	breq	.+22     	; 0x61a <rand_hard+0x88>
            num |= (1<<i);
     604:	ad 01       	movw	r20, r26
     606:	02 2e       	mov	r0, r18
     608:	01 c0       	rjmp	.+2      	; 0x60c <rand_hard+0x7a>
     60a:	44 0f       	add	r20, r20
     60c:	0a 94       	dec	r0
     60e:	ea f7       	brpl	.-6      	; 0x60a <rand_hard+0x78>
     610:	84 2b       	or	r24, r20
     612:	03 c0       	rjmp	.+6      	; 0x61a <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     614:	90 38       	cpi	r25, 0x80	; 128
     616:	49 f6       	brne	.-110    	; 0x5aa <rand_hard+0x18>
     618:	f3 cf       	rjmp	.-26     	; 0x600 <rand_hard+0x6e>
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     61e:	28 30       	cpi	r18, 0x08	; 8
     620:	31 05       	cpc	r19, r1
     622:	09 f0       	breq	.+2      	; 0x626 <rand_hard+0x94>
     624:	c1 cf       	rjmp	.-126    	; 0x5a8 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     62c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     630:	98 e0       	ldi	r25, 0x08	; 8
     632:	89 9f       	mul	r24, r25
     634:	90 01       	movw	r18, r0
     636:	11 24       	eor	r1, r1
     638:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     63a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <accumulator>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	89 0f       	add	r24, r25
     642:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <accumulator>
     646:	82 2f       	mov	r24, r18
     648:	82 95       	swap	r24
     64a:	86 95       	lsr	r24
     64c:	87 70       	andi	r24, 0x07	; 7
     64e:	28 27       	eor	r18, r24
     650:	96 95       	lsr	r25
     652:	96 95       	lsr	r25
     654:	82 2f       	mov	r24, r18
     656:	89 27       	eor	r24, r25
     658:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     65c:	08 95       	ret

0000065e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     65e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     662:	08 95       	ret

00000664 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     664:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_busy>
     668:	81 11       	cpse	r24, r1
     66a:	16 c0       	rjmp	.+44     	; 0x698 <get_voltage+0x34>
        cli();                                    // disable interrupts
     66c:	f8 94       	cli
        adc_setup_conversion(6);
     66e:	86 e0       	ldi	r24, 0x06	; 6
     670:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     674:	83 e8       	ldi	r24, 0x83	; 131
     676:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     67a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     67e:	80 64       	ori	r24, 0x40	; 64
     680:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     684:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     688:	86 fd       	sbrc	r24, 6
     68a:	fc cf       	rjmp	.-8      	; 0x684 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     68c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     690:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     694:	78 94       	sei
     696:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     69c:	08 95       	ret

0000069e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     69e:	2f 92       	push	r2
     6a0:	3f 92       	push	r3
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     6c4:	fc 01       	movw	r30, r24
     6c6:	c2 81       	ldd	r28, Z+2	; 0x02
     6c8:	d3 81       	ldd	r29, Z+3	; 0x03
     6ca:	c4 38       	cpi	r28, 0x84	; 132
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	df 07       	cpc	r29, r31
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <estimate_distance+0x36>
     6d2:	7e c0       	rjmp	.+252    	; 0x7d0 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     6d4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_irhigh>
     6d8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <kilo_irhigh+0x1>
     6dc:	8c 17       	cp	r24, r28
     6de:	9d 07       	cpc	r25, r29
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <estimate_distance+0x46>
     6e2:	6f c0       	rjmp	.+222    	; 0x7c2 <estimate_distance+0x124>
     6e4:	eb e1       	ldi	r30, 0x1B	; 27
     6e6:	f1 e0       	ldi	r31, 0x01	; 1
     6e8:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     6ea:	81 91       	ld	r24, Z+
     6ec:	91 91       	ld	r25, Z+
     6ee:	8c 17       	cp	r24, r28
     6f0:	9d 07       	cpc	r25, r29
     6f2:	20 f0       	brcs	.+8      	; 0x6fc <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     6f4:	1f 5f       	subi	r17, 0xFF	; 255
     6f6:	1e 30       	cpi	r17, 0x0E	; 14
     6f8:	c1 f7       	brne	.-16     	; 0x6ea <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     6fa:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     6fc:	81 2f       	mov	r24, r17
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	fc 01       	movw	r30, r24
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e7 5e       	subi	r30, 0xE7	; 231
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	e0 80       	ld	r14, Z
     70c:	f1 80       	ldd	r15, Z+1	; 0x01
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	fc 01       	movw	r30, r24
     714:	e9 5e       	subi	r30, 0xE9	; 233
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	b7 01       	movw	r22, r14
     71e:	68 1b       	sub	r22, r24
     720:	79 0b       	sbc	r23, r25
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     736:	be 01       	movw	r22, r28
     738:	0d 2e       	mov	r0, r29
     73a:	00 0c       	add	r0, r0
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 bd 0a 	call	0x157a	; 0x157a <__floatsisf>
     744:	2b 01       	movw	r4, r22
     746:	3c 01       	movw	r6, r24
     748:	b7 01       	movw	r22, r14
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
     756:	61 2f       	mov	r22, r17
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	a9 01       	movw	r20, r18
     774:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     778:	a5 01       	movw	r20, r10
     77a:	94 01       	movw	r18, r8
     77c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c3 01       	movw	r24, r6
     792:	b2 01       	movw	r22, r4
     794:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	40 e2       	ldi	r20, 0x20	; 32
     79e:	51 e4       	ldi	r21, 0x41	; 65
     7a0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     7a4:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixsfsi>
     7a8:	7b 01       	movw	r14, r22
     7aa:	c5 01       	movw	r24, r10
     7ac:	b4 01       	movw	r22, r8
     7ae:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixsfsi>
     7b2:	ab 01       	movw	r20, r22
     7b4:	bc 01       	movw	r22, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	ba 01       	movw	r22, r20
     7ba:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     7be:	16 2f       	mov	r17, r22
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     7c2:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     7c4:	cd 3b       	cpi	r28, 0xBD	; 189
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	d8 07       	cpc	r29, r24
     7ca:	0c f4       	brge	.+2      	; 0x7ce <estimate_distance+0x130>
     7cc:	ca c0       	rjmp	.+404    	; 0x962 <__stack+0x63>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     7d0:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     7d2:	f1 01       	movw	r30, r2
     7d4:	c0 80       	ld	r12, Z
     7d6:	d1 80       	ldd	r13, Z+1	; 0x01
     7d8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <kilo_irlow>
     7dc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <kilo_irlow+0x1>
     7e0:	8c 15       	cp	r24, r12
     7e2:	9d 05       	cpc	r25, r13
     7e4:	88 f0       	brcs	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7e6:	e2 e4       	ldi	r30, 0x42	; 66
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     7f0:	e1 90       	ld	r14, Z+
     7f2:	f1 90       	ld	r15, Z+
     7f4:	ec 14       	cp	r14, r12
     7f6:	fd 04       	cpc	r15, r13
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <estimate_distance+0x15e>
     7fa:	58 c0       	rjmp	.+176    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     7fc:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     7fe:	8e 30       	cpi	r24, 0x0E	; 14
     800:	91 05       	cpc	r25, r1
     802:	a9 f7       	brne	.-22     	; 0x7ee <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     804:	0a e5       	ldi	r16, 0x5A	; 90
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     808:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     80a:	1f 3f       	cpi	r17, 0xFF	; 255
     80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	4b c0       	rjmp	.+150    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     810:	be 01       	movw	r22, r28
     812:	dd 0f       	add	r29, r29
     814:	88 0b       	sbc	r24, r24
     816:	99 0b       	sbc	r25, r25
     818:	0e 94 bd 0a 	call	0x157a	; 0x157a <__floatsisf>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	61 2f       	mov	r22, r17
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     82c:	4b 01       	movw	r8, r22
     82e:	5c 01       	movw	r10, r24
     830:	a7 01       	movw	r20, r14
     832:	96 01       	movw	r18, r12
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	81 e6       	ldi	r24, 0x61	; 97
     83a:	94 e4       	ldi	r25, 0x44	; 68
     83c:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     84c:	4b 01       	movw	r8, r22
     84e:	5c 01       	movw	r10, r24
     850:	60 2f       	mov	r22, r16
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     85c:	2b 01       	movw	r4, r22
     85e:	3c 01       	movw	r6, r24
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	4f e2       	ldi	r20, 0x2F	; 47
     866:	54 e4       	ldi	r21, 0x44	; 68
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	c3 01       	movw	r24, r6
     876:	b2 01       	movw	r22, r4
     878:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	c5 01       	movw	r24, r10
     882:	b4 01       	movw	r22, r8
     884:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	48 e4       	ldi	r20, 0x48	; 72
     88e:	53 e4       	ldi	r21, 0x43	; 67
     890:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divsf3>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	44 e0       	ldi	r20, 0x04	; 4
     89a:	52 e4       	ldi	r21, 0x42	; 66
     89c:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     8a0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fixunssfsi>
     8a4:	60 c0       	rjmp	.+192    	; 0x966 <__stack+0x67>
        } else {
            return 33 + dist_low;
     8a6:	61 e2       	ldi	r22, 0x21	; 33
     8a8:	60 0f       	add	r22, r16
     8aa:	5d c0       	rjmp	.+186    	; 0x966 <__stack+0x67>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	fc 01       	movw	r30, r24
     8b2:	e2 5c       	subi	r30, 0xC2	; 194
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	b7 01       	movw	r22, r14
     8bc:	68 1b       	sub	r22, r24
     8be:	79 0b       	sbc	r23, r25
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     8d0:	4b 01       	movw	r8, r22
     8d2:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     8d4:	b6 01       	movw	r22, r12
     8d6:	dd 0c       	add	r13, r13
     8d8:	88 0b       	sbc	r24, r24
     8da:	99 0b       	sbc	r25, r25
     8dc:	0e 94 bd 0a 	call	0x157a	; 0x157a <__floatsisf>
     8e0:	2b 01       	movw	r4, r22
     8e2:	3c 01       	movw	r6, r24
     8e4:	b7 01       	movw	r22, r14
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	63 2d       	mov	r22, r3
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__floatunsisf>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	a9 01       	movw	r20, r18
     910:	0e 94 a7 09 	call	0x134e	; 0x134e <__addsf3>
     914:	a5 01       	movw	r20, r10
     916:	94 01       	movw	r18, r8
     918:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     91c:	9b 01       	movw	r18, r22
     91e:	ac 01       	movw	r20, r24
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	c3 01       	movw	r24, r6
     92e:	b2 01       	movw	r22, r4
     930:	0e 94 a6 09 	call	0x134c	; 0x134c <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e2       	ldi	r20, 0x20	; 32
     93a:	51 e4       	ldi	r21, 0x41	; 65
     93c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     940:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixsfsi>
     944:	7b 01       	movw	r14, r22
     946:	c5 01       	movw	r24, r10
     948:	b4 01       	movw	r22, r8
     94a:	0e 94 85 0a 	call	0x150a	; 0x150a <__fixsfsi>
     94e:	ab 01       	movw	r20, r22
     950:	bc 01       	movw	r22, r24
     952:	c7 01       	movw	r24, r14
     954:	ba 01       	movw	r22, r20
     956:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
     95a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     95c:	6f 3f       	cpi	r22, 0xFF	; 255
     95e:	09 f0       	breq	.+2      	; 0x962 <__stack+0x63>
     960:	54 cf       	rjmp	.-344    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     962:	61 e2       	ldi	r22, 0x21	; 33
     964:	61 0f       	add	r22, r17
    }
}
     966:	86 2f       	mov	r24, r22
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
    tx_clock += tx_increment;
     9b0:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <tx_clock>
     9b4:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <tx_clock+0x1>
     9b8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <tx_increment>
     9bc:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <tx_increment+0x1>
     9c0:	82 0f       	add	r24, r18
     9c2:	93 1f       	adc	r25, r19
     9c4:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <tx_clock+0x1>
     9c8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <tx_clock>
    tx_increment = 0xFF;
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <tx_increment+0x1>
     9d4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tx_increment>
    OCR0A = tx_increment;
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     9dc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <kilo_ticks>
     9e0:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <kilo_ticks+0x1>
     9e4:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <kilo_ticks+0x2>
     9e8:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <kilo_ticks+0x3>
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	a1 1d       	adc	r26, r1
     9f0:	b1 1d       	adc	r27, r1
     9f2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <kilo_ticks>
     9f6:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <kilo_ticks+0x1>
     9fa:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <kilo_ticks+0x2>
     9fe:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a02:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_busy>
     a06:	81 11       	cpse	r24, r1
     a08:	2d c0       	rjmp	.+90     	; 0xa64 <__vector_14+0xd6>
     a0a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_tx_period>
     a0e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_tx_period+0x1>
     a12:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <tx_clock>
     a16:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <tx_clock+0x1>
     a1a:	82 17       	cp	r24, r18
     a1c:	93 07       	cpc	r25, r19
     a1e:	10 f5       	brcc	.+68     	; 0xa64 <__vector_14+0xd6>
     a20:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     a24:	84 30       	cpi	r24, 0x04	; 4
     a26:	f1 f4       	brne	.+60     	; 0xa64 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     a28:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     a2c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     a30:	09 95       	icall
        if (msg) {
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	b9 f0       	breq	.+46     	; 0xa64 <__vector_14+0xd6>
            if (message_send(msg)) {
     a36:	0e 94 9a 08 	call	0x1134	; 0x1134 <message_send>
     a3a:	88 23       	and	r24, r24
     a3c:	51 f0       	breq	.+20     	; 0xa52 <__vector_14+0xc4>
                kilo_message_tx_success();
     a3e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     a42:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     a46:	09 95       	icall
                tx_clock = 0;
     a48:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <tx_clock+0x1>
     a4c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <tx_clock>
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a52:	0e 94 88 00 	call	0x110	; 0x110 <sample_light+0x2e>
     a56:	9c 01       	movw	r18, r24
     a58:	33 27       	eor	r19, r19
     a5a:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <tx_increment+0x1>
     a5e:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <tx_increment>
                OCR0A = tx_increment;
     a62:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     a86:	80 ff       	sbrs	r24, 0
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <set_color+0x8>
        DDRD |= (1<<5);
     a8a:	55 9a       	sbi	0x0a, 5	; 10
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a8e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a90:	81 ff       	sbrs	r24, 1
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <set_color+0x12>
        DDRD |= (1<<4);
     a94:	54 9a       	sbi	0x0a, 4	; 10
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a98:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a9a:	82 ff       	sbrs	r24, 2
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <set_color+0x1c>
        DDRC |= (1<<3);
     a9e:	3b 9a       	sbi	0x07, 3	; 7
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     aa2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     aa4:	83 ff       	sbrs	r24, 3
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <set_color+0x26>
        DDRC |= (1<<2);
     aa8:	3a 9a       	sbi	0x07, 2	; 7
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     aac:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     aae:	84 ff       	sbrs	r24, 4
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <set_color+0x30>
        DDRC |= (1<<5);
     ab2:	3d 9a       	sbi	0x07, 5	; 7
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     ab6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     ab8:	85 ff       	sbrs	r24, 5
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <set_color+0x3a>
        DDRC |= (1<<4);
     abc:	3c 9a       	sbi	0x07, 4	; 7
     abe:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     ac0:	3c 98       	cbi	0x07, 4	; 7
     ac2:	08 95       	ret

00000ac4 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     ac4:	8c 01       	movw	r16, r24
     ac6:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     aca:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     ad0:	98 e1       	ldi	r25, 0x18	; 24
     ad2:	c9 2e       	mov	r12, r25
     ad4:	29 e2       	ldi	r18, 0x29	; 41
     ad6:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     ad8:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <kilo_state>
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	e7 30       	cpi	r30, 0x07	; 7
     ae0:	f1 05       	cpc	r31, r1
     ae2:	d0 f7       	brcc	.-12     	; 0xad8 <kilo_start+0x14>
     ae4:	ec 5c       	subi	r30, 0xCC	; 204
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__tablejump2__>
            case SLEEPING:
                cli();
     aec:	f8 94       	cli
                acomp_off();
     aee:	80 b7       	in	r24, 0x30	; 48
     af0:	87 7f       	andi	r24, 0xF7	; 247
     af2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     af4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     af8:	8f 77       	andi	r24, 0x7F	; 127
     afa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     afe:	14 b8       	out	0x04, r1	; 4
     b00:	17 b8       	out	0x07, r1	; 7
     b02:	1a b8       	out	0x0a, r1	; 10
     b04:	15 b8       	out	0x05, r1	; 5
     b06:	18 b8       	out	0x08, r1	; 8
     b08:	1b b8       	out	0x0b, r1	; 11
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	a8 95       	wdr
     b10:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b1a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b1e:	80 64       	ori	r24, 0x40	; 64
     b20:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b24:	83 b7       	in	r24, 0x33	; 51
     b26:	81 7f       	andi	r24, 0xF1	; 241
     b28:	84 60       	ori	r24, 0x04	; 4
     b2a:	83 bf       	out	0x33, r24	; 51
                cli();
     b2c:	f8 94       	cli
                sleep_enable();
     b2e:	83 b7       	in	r24, 0x33	; 51
     b30:	81 60       	ori	r24, 0x01	; 1
     b32:	83 bf       	out	0x33, r24	; 51
                sei();
     b34:	78 94       	sei
                sleep_cpu();
     b36:	88 95       	sleep
                sleep_disable();
     b38:	83 b7       	in	r24, 0x33	; 51
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	83 bf       	out	0x33, r24	; 51
                sei();
     b3e:	78 94       	sei
                rx_busy = 0;
     b40:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>
                ports_on();
     b44:	52 9a       	sbi	0x0a, 2	; 10
     b46:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b48:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b52:	87 e5       	ldi	r24, 0x57	; 87
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <kilo_start+0x92>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <kilo_start+0x98>
     b5c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b5e:	80 b7       	in	r24, 0x30	; 48
     b60:	88 61       	ori	r24, 0x18	; 24
     b62:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     b64:	8f e3       	ldi	r24, 0x3F	; 63
     b66:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6a:	ef e1       	ldi	r30, 0x1F	; 31
     b6c:	fe e4       	ldi	r31, 0x4E	; 78
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <kilo_start+0xaa>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <kilo_start+0xb0>
     b74:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     b76:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rx_busy>
     b7a:	88 23       	and	r24, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <kilo_start+0xbc>
     b7e:	50 c0       	rjmp	.+160    	; 0xc20 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     b86:	ff ef       	ldi	r31, 0xFF	; 255
     b88:	20 e7       	ldi	r18, 0x70	; 112
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	f1 50       	subi	r31, 0x01	; 1
     b8e:	20 40       	sbci	r18, 0x00	; 0
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <kilo_start+0xc8>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <kilo_start+0xd2>
     b96:	00 00       	nop
     b98:	43 c0       	rjmp	.+134    	; 0xc20 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b9a:	8c e0       	ldi	r24, 0x0C	; 12
     b9c:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     ba0:	ef ec       	ldi	r30, 0xCF	; 207
     ba2:	f7 e0       	ldi	r31, 0x07	; 7
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <kilo_start+0xe0>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <kilo_start+0xe6>
     baa:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     bb2:	ff ef       	ldi	r31, 0xFF	; 255
     bb4:	21 ee       	ldi	r18, 0xE1	; 225
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	f1 50       	subi	r31, 0x01	; 1
     bba:	20 40       	sbci	r18, 0x00	; 0
     bbc:	80 40       	sbci	r24, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <kilo_start+0xf4>
     bc0:	2c c0       	rjmp	.+88     	; 0xc1a <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     bc2:	0e 94 32 03 	call	0x664	; 0x664 <get_voltage>
                if(voltage > 682)
     bc6:	8b 3a       	cpi	r24, 0xAB	; 171
     bc8:	e2 e0       	ldi	r30, 0x02	; 2
     bca:	9e 07       	cpc	r25, r30
     bcc:	24 f0       	brlt	.+8      	; 0xbd6 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     bce:	8c e0       	ldi	r24, 0x0C	; 12
     bd0:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     bd4:	81 cf       	rjmp	.-254    	; 0xad8 <kilo_start+0x14>
                else if(voltage > 648)
     bd6:	89 38       	cpi	r24, 0x89	; 137
     bd8:	f2 e0       	ldi	r31, 0x02	; 2
     bda:	9f 07       	cpc	r25, r31
     bdc:	14 f0       	brlt	.+4      	; 0xbe2 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     bde:	80 e3       	ldi	r24, 0x30	; 48
     be0:	f7 cf       	rjmp	.-18     	; 0xbd0 <kilo_start+0x10c>
                else if(voltage > 614)
     be2:	87 36       	cpi	r24, 0x67	; 103
     be4:	92 40       	sbci	r25, 0x02	; 2
     be6:	14 f0       	brlt	.+4      	; 0xbec <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     be8:	8f e0       	ldi	r24, 0x0F	; 15
     bea:	f2 cf       	rjmp	.-28     	; 0xbd0 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	f0 cf       	rjmp	.-32     	; 0xbd0 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     bf0:	48 99       	sbic	0x09, 0	; 9
     bf2:	16 c0       	rjmp	.+44     	; 0xc20 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     bfa:	8f ec       	ldi	r24, 0xCF	; 207
     bfc:	97 e0       	ldi	r25, 0x07	; 7
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <kilo_start+0x13a>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <kilo_start+0x140>
     c04:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	e1 ee       	ldi	r30, 0xE1	; 225
     c10:	f4 e0       	ldi	r31, 0x04	; 4
     c12:	91 50       	subi	r25, 0x01	; 1
     c14:	e0 40       	sbci	r30, 0x00	; 0
     c16:	f0 40       	sbci	r31, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <kilo_start+0x14e>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <kilo_start+0x158>
     c1c:	00 00       	nop
     c1e:	5c cf       	rjmp	.-328    	; 0xad8 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	d6 cf       	rjmp	.-84     	; 0xbd0 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     c24:	d1 11       	cpse	r29, r1
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <kilo_start+0x168>
                    setup();
     c28:	f8 01       	movw	r30, r16
     c2a:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     c2c:	d0 92 17 01 	sts	0x0117, r13	; 0x800117 <kilo_state>
     c30:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     c32:	f7 01       	movw	r30, r14
     c34:	09 95       	icall
                break;
     c36:	50 cf       	rjmp	.-352    	; 0xad8 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     c38:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     c3c:	81 11       	cpse	r24, r1
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c40:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c48:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
     c4c:	45 cf       	rjmp	.-374    	; 0xad8 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c4e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
     c52:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <prev_motion>
     c56:	98 17       	cp	r25, r24
     c58:	09 f4       	brne	.+2      	; 0xc5c <kilo_start+0x198>
     c5a:	3e cf       	rjmp	.-388    	; 0xad8 <kilo_start+0x14>
                        prev_motion = cur_motion;
     c5c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     c60:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     c64:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	89 f4       	brne	.+34     	; 0xc8e <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c6c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c70:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c74:	8f e2       	ldi	r24, 0x2F	; 47
     c76:	95 e7       	ldi	r25, 0x75	; 117
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <kilo_start+0x1b4>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <kilo_start+0x1ba>
     c7e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     c80:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c84:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c88:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c8c:	25 cf       	rjmp	.-438    	; 0xad8 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c8e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c92:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c96:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	59 f4       	brne	.+22     	; 0xcb4 <kilo_start+0x1f0>
     c9e:	ef e2       	ldi	r30, 0x2F	; 47
     ca0:	f5 e7       	ldi	r31, 0x75	; 117
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <kilo_start+0x1de>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <kilo_start+0x1e4>
     ca8:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     caa:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     cb2:	10 c0       	rjmp	.+32     	; 0xcd4 <kilo_start+0x210>
     cb4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cb8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cbc:	8f e2       	ldi	r24, 0x2F	; 47
     cbe:	95 e7       	ldi	r25, 0x75	; 117
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <kilo_start+0x1fc>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <kilo_start+0x202>
     cc6:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     cc8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <kilo_straight_right>
     ccc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cd0:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cd4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cd8:	ff ce       	rjmp	.-514    	; 0xad8 <kilo_start+0x14>

00000cda <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
    rx_timer_off();
     ce8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cf0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rx_leadingbit>
    rx_leadingbyte = 1;
     cfa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rx_leadingbyte>
    rx_busy = 0;
     cfe:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>
    adc_trigger_high_gain();
     d02:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d06:	93 ea       	ldi	r25, 0xA3	; 163
     d08:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d0c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d44:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d48:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d52:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rx_leadingbit>
     d56:	88 23       	and	r24, r24
     d58:	21 f1       	breq	.+72     	; 0xda2 <__vector_23+0x84>
        rx_timer_on();
     d5a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d5e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d62:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     d66:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_bytevalue>
        rx_leadingbit = 0;
     d6a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <rx_leadingbit>
        if (rx_leadingbyte) {
     d6e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_leadingbyte>
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <__vector_23+0x5a>
     d76:	af c1       	rjmp	.+862    	; 0x10d6 <__vector_23+0x3b8>
            adc_finish_conversion();
     d78:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d7c:	86 fd       	sbrc	r24, 6
     d7e:	fc cf       	rjmp	.-8      	; 0xd78 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     d80:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d84:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d88:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rx_dist+0x3>
     d8c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rx_dist+0x2>
            adc_trigger_low_gain();
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d96:	93 ea       	ldi	r25, 0xA3	; 163
     d98:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d9c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     da0:	9a c1       	rjmp	.+820    	; 0x10d6 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     da2:	c9 01       	movw	r24, r18
     da4:	87 58       	subi	r24, 0x87	; 135
     da6:	91 09       	sbc	r25, r1
     da8:	84 37       	cpi	r24, 0x74	; 116
     daa:	99 40       	sbci	r25, 0x09	; 9
     dac:	a0 f0       	brcs	.+40     	; 0xdd6 <__vector_23+0xb8>
            rx_timer_off();
     dae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     db2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     db6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     dba:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <rx_leadingbit>
            rx_leadingbyte = 1;
     dbe:	40 93 5c 01 	sts	0x015C, r20	; 0x80015c <rx_leadingbyte>
            rx_busy = 0;
     dc2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>
            adc_trigger_high_gain();
     dc6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     dca:	83 ea       	ldi	r24, 0xA3	; 163
     dcc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dd0:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     dd4:	80 c1       	rjmp	.+768    	; 0x10d6 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     dd6:	26 58       	subi	r18, 0x86	; 134
     dd8:	31 09       	sbc	r19, r1
     dda:	a4 ef       	ldi	r26, 0xF4	; 244
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__umulhisi3>
     de2:	8c 01       	movw	r16, r24
     de4:	22 27       	eor	r18, r18
     de6:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     de8:	08 30       	cpi	r16, 0x08	; 8
     dea:	60 f4       	brcc	.+24     	; 0xe04 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <__vector_23+0xd6>
     df2:	88 0f       	add	r24, r24
     df4:	0a 95       	dec	r16
     df6:	ea f7       	brpl	.-6      	; 0xdf2 <__vector_23+0xd4>
     df8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_bytevalue>
     dfc:	89 2b       	or	r24, r25
     dfe:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rx_bytevalue>
     e02:	69 c1       	rjmp	.+722    	; 0x10d6 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e04:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <rx_leadingbit>
                if (rx_leadingbyte) {
     e08:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_leadingbyte>
     e0c:	88 23       	and	r24, r24
     e0e:	41 f1       	breq	.+80     	; 0xe60 <__vector_23+0x142>
                    adc_finish_conversion();
     e10:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e14:	86 fd       	sbrc	r24, 6
     e16:	fc cf       	rjmp	.-8      	; 0xe10 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e18:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e1c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e20:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <rx_dist+0x1>
     e24:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <rx_dist>
                    adc_trigger_high_gain();
     e28:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e2c:	83 ea       	ldi	r24, 0xA3	; 163
     e2e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     e38:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_bytevalue>
     e3c:	99 23       	and	r25, r25
     e3e:	59 f0       	breq	.+22     	; 0xe56 <__vector_23+0x138>
                        rx_timer_off();
     e40:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e48:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e4c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rx_leadingbyte>
                        rx_busy = 0;
     e50:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>
     e54:	40 c1       	rjmp	.+640    	; 0x10d6 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e56:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <rx_leadingbyte>
                        rx_byteindex = 0;
     e5a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rx_byteindex>
     e5e:	3b c1       	rjmp	.+630    	; 0x10d6 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     e60:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rx_byteindex>
     e64:	e8 2f       	mov	r30, r24
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ee 59       	subi	r30, 0x9E	; 158
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_bytevalue>
     e70:	90 83       	st	Z, r25
                    rx_byteindex++;
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     e78:	8c 30       	cpi	r24, 0x0C	; 12
     e7a:	09 f0       	breq	.+2      	; 0xe7e <__vector_23+0x160>
     e7c:	2c c1       	rjmp	.+600    	; 0x10d6 <__vector_23+0x3b8>
                        rx_timer_off();
     e7e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e82:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e86:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e8a:	40 93 5c 01 	sts	0x015C, r20	; 0x80015c <rx_leadingbyte>
                        rx_busy = 0;
     e8e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e92:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <rx_msg+0xa>
     e96:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <rx_msg+0xb>
     e9a:	82 e6       	ldi	r24, 0x62	; 98
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <message_crc>
     ea2:	08 17       	cp	r16, r24
     ea4:	19 07       	cpc	r17, r25
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_23+0x18c>
     ea8:	16 c1       	rjmp	.+556    	; 0x10d6 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     eaa:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <rx_msg+0x9>
     eae:	e7 fd       	sbrc	r30, 7
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     eb2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     eb6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     eba:	67 e3       	ldi	r22, 0x37	; 55
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	82 e6       	ldi	r24, 0x62	; 98
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	09 95       	icall
     ec4:	08 c1       	rjmp	.+528    	; 0x10d6 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     ec6:	88 e7       	ldi	r24, 0x78	; 120
     ec8:	8e 0f       	add	r24, r30
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	30 f0       	brcs	.+12     	; 0xeda <__vector_23+0x1bc>
        motors_off();
     ece:	53 98       	cbi	0x0a, 3	; 10
     ed0:	23 98       	cbi	0x04, 3	; 4
     ed2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ed6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     eda:	8e 2f       	mov	r24, r30
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	e0 58       	subi	r30, 0x80	; 128
     ee2:	f1 09       	sbc	r31, r1
     ee4:	eb 30       	cpi	r30, 0x0B	; 11
     ee6:	f1 05       	cpc	r31, r1
     ee8:	08 f0       	brcs	.+2      	; 0xeec <__vector_23+0x1ce>
     eea:	f5 c0       	rjmp	.+490    	; 0x10d6 <__vector_23+0x3b8>
     eec:	e5 5c       	subi	r30, 0xC5	; 197
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     ef4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
     efa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     efe:	16 bc       	out	0x26, r1	; 38
            bootload();
     f00:	e0 e0       	ldi	r30, 0x00	; 0
     f02:	f0 e7       	ldi	r31, 0x70	; 112
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f06:	e0 e0       	ldi	r30, 0x00	; 0
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f0c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <kilo_state>
     f10:	e2 c0       	rjmp	.+452    	; 0x10d6 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	b2 c0       	rjmp	.+356    	; 0x107a <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f16:	85 e0       	ldi	r24, 0x05	; 5
     f18:	b0 c0       	rjmp	.+352    	; 0x107a <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	ae c0       	rjmp	.+348    	; 0x107a <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f1e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	09 f4       	brne	.+2      	; 0xf28 <__vector_23+0x20a>
     f26:	d7 c0       	rjmp	.+430    	; 0x10d6 <__vector_23+0x3b8>
     f28:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     f2c:	84 30       	cpi	r24, 0x04	; 4
     f2e:	09 f4       	brne	.+2      	; 0xf32 <__vector_23+0x214>
     f30:	d2 c0       	rjmp	.+420    	; 0x10d6 <__vector_23+0x3b8>
                motors_on();
     f32:	53 9a       	sbi	0x0a, 3	; 10
     f34:	23 9a       	sbi	0x04, 3	; 4
     f36:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f3a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	9c c0       	rjmp	.+312    	; 0x107a <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f42:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	09 f4       	brne	.+2      	; 0xf4c <__vector_23+0x22e>
     f4a:	4b c0       	rjmp	.+150    	; 0xfe2 <__vector_23+0x2c4>
     f4c:	80 f4       	brcc	.+32     	; 0xf6e <__vector_23+0x250>
     f4e:	88 23       	and	r24, r24
     f50:	a9 f0       	breq	.+42     	; 0xf7c <__vector_23+0x25e>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_23+0x23a>
     f56:	82 c0       	rjmp	.+260    	; 0x105c <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f58:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <rx_msg+0x1>
     f5c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <rx_msg+0x2>
     f60:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <kilo_uid+0x1>
     f64:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <kilo_uid>
                    cur_motion = MOVE_STOP;
     f68:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
     f6c:	77 c0       	rjmp	.+238    	; 0x105c <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	09 f4       	brne	.+2      	; 0xf74 <__vector_23+0x256>
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <__vector_23+0x2e8>
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	09 f4       	brne	.+2      	; 0xf7a <__vector_23+0x25c>
     f78:	58 c0       	rjmp	.+176    	; 0x102a <__vector_23+0x30c>
     f7a:	70 c0       	rjmp	.+224    	; 0x105c <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     f7c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
     f80:	86 30       	cpi	r24, 0x06	; 6
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_23+0x268>
     f84:	6b c0       	rjmp	.+214    	; 0x105c <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     f86:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <kilo_uid>
     f8a:	80 eb       	ldi	r24, 0xB0	; 176
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f92:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <kilo_uid+0x1>
     f96:	81 eb       	ldi	r24, 0xB1	; 177
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f9e:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <kilo_turn_left>
     fa2:	85 e0       	ldi	r24, 0x05	; 5
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     faa:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <kilo_turn_right>
     fae:	89 e0       	ldi	r24, 0x09	; 9
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     fb6:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kilo_straight_left>
     fba:	8c e0       	ldi	r24, 0x0C	; 12
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     fc2:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <kilo_straight_right>
     fc6:	84 e1       	ldi	r24, 0x14	; 20
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_byte>
                        motors_off();
     fce:	53 98       	cbi	0x0a, 3	; 10
     fd0:	23 98       	cbi	0x04, 3	; 4
     fd2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fd6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
     fe0:	3d c0       	rjmp	.+122    	; 0x105c <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     fe2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
     fe6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <rx_msg+0x3>
     fea:	91 30       	cpi	r25, 0x01	; 1
     fec:	21 f4       	brne	.+8      	; 0xff6 <__vector_23+0x2d8>
     fee:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_turn_left>
     ff2:	89 17       	cp	r24, r25
     ff4:	99 f1       	breq	.+102    	; 0x105c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ff6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_LEFT;
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1000:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <kilo_turn_left>
    1004:	2b c0       	rjmp	.+86     	; 0x105c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1006:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cur_motion>
    100a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <rx_msg+0x4>
    100e:	92 30       	cpi	r25, 0x02	; 2
    1010:	21 f4       	brne	.+8      	; 0x101a <__vector_23+0x2fc>
    1012:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <kilo_turn_right>
    1016:	89 17       	cp	r24, r25
    1018:	09 f1       	breq	.+66     	; 0x105c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    101a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1024:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <kilo_turn_right>
    1028:	19 c0       	rjmp	.+50     	; 0x105c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    102a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <cur_motion>
    102e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg+0x6>
    1032:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <rx_msg+0x5>
    1036:	23 30       	cpi	r18, 0x03	; 3
    1038:	41 f4       	brne	.+16     	; 0x104a <__vector_23+0x32c>
    103a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <kilo_straight_right>
    103e:	82 13       	cpse	r24, r18
    1040:	04 c0       	rjmp	.+8      	; 0x104a <__vector_23+0x32c>
    1042:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <kilo_straight_left>
    1046:	92 17       	cp	r25, r18
    1048:	49 f0       	breq	.+18     	; 0x105c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    104a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    104e:	23 e0       	ldi	r18, 0x03	; 3
    1050:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1054:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1058:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    105c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg>
    1060:	88 23       	and	r24, r24
    1062:	c9 f1       	breq	.+114    	; 0x10d6 <__vector_23+0x3b8>
    1064:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
    1068:	86 30       	cpi	r24, 0x06	; 6
    106a:	a9 f1       	breq	.+106    	; 0x10d6 <__vector_23+0x3b8>
                motors_on();
    106c:	53 9a       	sbi	0x0a, 3	; 10
    106e:	23 9a       	sbi	0x04, 3	; 4
    1070:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1074:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1078:	86 e0       	ldi	r24, 0x06	; 6
    107a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
    107e:	2b c0       	rjmp	.+86     	; 0x10d6 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1080:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <kilo_state>
    1084:	86 30       	cpi	r24, 0x06	; 6
    1086:	81 f0       	breq	.+32     	; 0x10a8 <__vector_23+0x38a>
                motors_on();
    1088:	53 9a       	sbi	0x0a, 3	; 10
    108a:	23 9a       	sbi	0x04, 3	; 4
    108c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1090:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	0e 94 43 05 	call	0xa86	; 0xa86 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    109a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
    109e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <prev_motion>
                kilo_state = MOVING;
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <rx_msg>
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <__vector_23+0x398>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <__vector_23+0x394>
    10ba:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <kilo_uid>
    10be:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <kilo_uid+0x1>
    10c2:	82 23       	and	r24, r18
    10c4:	93 23       	and	r25, r19
    10c6:	89 2b       	or	r24, r25
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cur_motion>
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    10d2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cur_motion>
                    }
                }
            }
        }
    }
}
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    10fc:	fc 01       	movw	r30, r24
    10fe:	9c 01       	movw	r18, r24
    1100:	26 5f       	subi	r18, 0xF6	; 246
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1108:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    110a:	84 27       	eor	r24, r20
    110c:	08 2e       	mov	r0, r24
    110e:	82 95       	swap	r24
    1110:	80 7f       	andi	r24, 0xF0	; 240
    1112:	80 25       	eor	r24, r0
    1114:	09 2e       	mov	r0, r25
    1116:	98 2f       	mov	r25, r24
    1118:	82 95       	swap	r24
    111a:	8f 70       	andi	r24, 0x0F	; 15
    111c:	08 26       	eor	r0, r24
    111e:	86 95       	lsr	r24
    1120:	98 27       	eor	r25, r24
    1122:	89 27       	eor	r24, r25
    1124:	88 0f       	add	r24, r24
    1126:	88 0f       	add	r24, r24
    1128:	88 0f       	add	r24, r24
    112a:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    112c:	e2 17       	cp	r30, r18
    112e:	f3 07       	cpc	r31, r19
    1130:	59 f7       	brne	.-42     	; 0x1108 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1132:	08 95       	ret

00001134 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1134:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1136:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1138:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    113a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <tx_mask>
    or tmpreg1, ddrreg
    113e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1140:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1142:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1144:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <tx_mask>
    1148:	20 30       	cpi	r18, 0x00	; 0
    114a:	29 f0       	breq	.+10     	; 0x1156 <message_send+0x22>
    114c:	00 00       	nop
    114e:	25 b1       	in	r18, 0x05	; 5
    1150:	23 2b       	or	r18, r19
    1152:	25 b9       	out	0x05, r18	; 5
    1154:	04 c0       	rjmp	.+8      	; 0x115e <message_send+0x2a>
    1156:	00 00       	nop
    1158:	00 00       	nop
    115a:	00 00       	nop
    115c:	00 c0       	rjmp	.+0      	; 0x115e <message_send+0x2a>
    115e:	00 00       	nop
    1160:	00 00       	nop
    1162:	00 00       	nop
    1164:	30 95       	com	r19
    1166:	25 b1       	in	r18, 0x05	; 5
    1168:	23 23       	and	r18, r19
    116a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    116c:	2e ea       	ldi	r18, 0xAE	; 174
    116e:	2a 95       	dec	r18
    1170:	f1 f7       	brne	.-4      	; 0x116e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1172:	2b ee       	ldi	r18, 0xEB	; 235

00001174 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1174:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1176:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1178:	0a c0       	rjmp	.+20     	; 0x118e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    117a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    117c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <tx_mask>
    com tmpreg2
    1180:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1182:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1184:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1186:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1188:	0f be       	out	0x3f, r0	; 63
    return 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	08 95       	ret

0000118e <nocollision>:
nocollision:
    nop
    118e:	00 00       	nop
    dec tmpreg1
    1190:	2a 95       	dec	r18
    brne checkcollision
    1192:	81 f7       	brne	.-32     	; 0x1174 <checkcollision>

    ldi tmpreg1, 0x01
    1194:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1196:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <tx_mask>
    119a:	20 30       	cpi	r18, 0x00	; 0
    119c:	29 f0       	breq	.+10     	; 0x11a8 <nocollision+0x1a>
    119e:	00 00       	nop
    11a0:	25 b1       	in	r18, 0x05	; 5
    11a2:	23 2b       	or	r18, r19
    11a4:	25 b9       	out	0x05, r18	; 5
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <nocollision+0x22>
    11a8:	00 00       	nop
    11aa:	00 00       	nop
    11ac:	00 00       	nop
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <nocollision+0x22>
    11b0:	00 00       	nop
    11b2:	00 00       	nop
    11b4:	00 00       	nop
    11b6:	30 95       	com	r19
    11b8:	25 b1       	in	r18, 0x05	; 5
    11ba:	23 23       	and	r18, r19
    11bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    11be:	00 00       	nop
    11c0:	24 e5       	ldi	r18, 0x54	; 84
    11c2:	2a 95       	dec	r18
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    11c6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    11c8:	8c e0       	ldi	r24, 0x0C	; 12

000011ca <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    11ca:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    11ce:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    11d0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    11d2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    11d4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    11d6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    11da:	50 e0       	ldi	r21, 0x00	; 0

000011dc <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    11dc:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    11de:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    11e0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    11e2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    11e4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <tx_mask>
    11e8:	20 30       	cpi	r18, 0x00	; 0
    11ea:	29 f0       	breq	.+10     	; 0x11f6 <sendbit+0x1a>
    11ec:	00 00       	nop
    11ee:	25 b1       	in	r18, 0x05	; 5
    11f0:	23 2b       	or	r18, r19
    11f2:	25 b9       	out	0x05, r18	; 5
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <sendbit+0x22>
    11f6:	00 00       	nop
    11f8:	00 00       	nop
    11fa:	00 00       	nop
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <sendbit+0x22>
    11fe:	00 00       	nop
    1200:	00 00       	nop
    1202:	00 00       	nop
    1204:	30 95       	com	r19
    1206:	25 b1       	in	r18, 0x05	; 5
    1208:	23 23       	and	r18, r19
    120a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    120c:	00 00       	nop
    120e:	21 e5       	ldi	r18, 0x51	; 81
    1210:	2a 95       	dec	r18
    1212:	f1 f7       	brne	.-4      	; 0x1210 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1214:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1216:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1218:	9a 95       	dec	r25
    brne sendbit
    121a:	01 f7       	brne	.-64     	; 0x11dc <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    121c:	8a 95       	dec	r24
    brne sendbyte
    121e:	a9 f6       	brne	.-86     	; 0x11ca <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1220:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1222:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1224:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1226:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1228:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <tx_mask>
    com tmpreg2
    122c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    122e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1230:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1232:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1234:	0f be       	out	0x3f, r0	; 63
    return 1
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	08 95       	ret

0000123a <main>:

}

int main() {
  kilo_init();
    123a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <kilo_init>
  kilo_start(setup, loop);
    123e:	6e e2       	ldi	r22, 0x2E	; 46
    1240:	71 e0       	ldi	r23, 0x01	; 1
    1242:	88 ec       	ldi	r24, 0xC8	; 200
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 62 05 	call	0xac4	; 0xac4 <kilo_start>
  return 0;
}
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	07 2e       	mov	r0, r23
    1254:	16 f4       	brtc	.+4      	; 0x125a <__divmodhi4+0xa>
    1256:	00 94       	com	r0
    1258:	07 d0       	rcall	.+14     	; 0x1268 <__divmodhi4_neg1>
    125a:	77 fd       	sbrc	r23, 7
    125c:	09 d0       	rcall	.+18     	; 0x1270 <__divmodhi4_neg2>
    125e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__udivmodhi4>
    1262:	07 fc       	sbrc	r0, 7
    1264:	05 d0       	rcall	.+10     	; 0x1270 <__divmodhi4_neg2>
    1266:	3e f4       	brtc	.+14     	; 0x1276 <__divmodhi4_exit>

00001268 <__divmodhi4_neg1>:
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__divmodhi4_neg2>:
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255

00001276 <__divmodhi4_exit>:
    1276:	08 95       	ret

00001278 <__divmodsi4>:
    1278:	05 2e       	mov	r0, r21
    127a:	97 fb       	bst	r25, 7
    127c:	1e f4       	brtc	.+6      	; 0x1284 <__divmodsi4+0xc>
    127e:	00 94       	com	r0
    1280:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__negsi2>
    1284:	57 fd       	sbrc	r21, 7
    1286:	07 d0       	rcall	.+14     	; 0x1296 <__divmodsi4_neg2>
    1288:	0e 94 84 09 	call	0x1308	; 0x1308 <__udivmodsi4>
    128c:	07 fc       	sbrc	r0, 7
    128e:	03 d0       	rcall	.+6      	; 0x1296 <__divmodsi4_neg2>
    1290:	4e f4       	brtc	.+18     	; 0x12a4 <__divmodsi4_exit>
    1292:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__negsi2>

00001296 <__divmodsi4_neg2>:
    1296:	50 95       	com	r21
    1298:	40 95       	com	r20
    129a:	30 95       	com	r19
    129c:	21 95       	neg	r18
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	4f 4f       	sbci	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255

000012a4 <__divmodsi4_exit>:
    12a4:	08 95       	ret

000012a6 <__negsi2>:
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__tablejump2__>:
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	05 90       	lpm	r0, Z+
    12bc:	f4 91       	lpm	r31, Z
    12be:	e0 2d       	mov	r30, r0
    12c0:	09 94       	ijmp

000012c2 <__umulhisi3>:
    12c2:	a2 9f       	mul	r26, r18
    12c4:	b0 01       	movw	r22, r0
    12c6:	b3 9f       	mul	r27, r19
    12c8:	c0 01       	movw	r24, r0
    12ca:	a3 9f       	mul	r26, r19
    12cc:	70 0d       	add	r23, r0
    12ce:	81 1d       	adc	r24, r1
    12d0:	11 24       	eor	r1, r1
    12d2:	91 1d       	adc	r25, r1
    12d4:	b2 9f       	mul	r27, r18
    12d6:	70 0d       	add	r23, r0
    12d8:	81 1d       	adc	r24, r1
    12da:	11 24       	eor	r1, r1
    12dc:	91 1d       	adc	r25, r1
    12de:	08 95       	ret

000012e0 <__udivmodhi4>:
    12e0:	aa 1b       	sub	r26, r26
    12e2:	bb 1b       	sub	r27, r27
    12e4:	51 e1       	ldi	r21, 0x11	; 17
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <__udivmodhi4_ep>

000012e8 <__udivmodhi4_loop>:
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	a6 17       	cp	r26, r22
    12ee:	b7 07       	cpc	r27, r23
    12f0:	10 f0       	brcs	.+4      	; 0x12f6 <__udivmodhi4_ep>
    12f2:	a6 1b       	sub	r26, r22
    12f4:	b7 0b       	sbc	r27, r23

000012f6 <__udivmodhi4_ep>:
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	5a 95       	dec	r21
    12fc:	a9 f7       	brne	.-22     	; 0x12e8 <__udivmodhi4_loop>
    12fe:	80 95       	com	r24
    1300:	90 95       	com	r25
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	08 95       	ret

00001308 <__udivmodsi4>:
    1308:	a1 e2       	ldi	r26, 0x21	; 33
    130a:	1a 2e       	mov	r1, r26
    130c:	aa 1b       	sub	r26, r26
    130e:	bb 1b       	sub	r27, r27
    1310:	fd 01       	movw	r30, r26
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__udivmodsi4_ep>

00001314 <__udivmodsi4_loop>:
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	ee 1f       	adc	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	a2 17       	cp	r26, r18
    131e:	b3 07       	cpc	r27, r19
    1320:	e4 07       	cpc	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	20 f0       	brcs	.+8      	; 0x132e <__udivmodsi4_ep>
    1326:	a2 1b       	sub	r26, r18
    1328:	b3 0b       	sbc	r27, r19
    132a:	e4 0b       	sbc	r30, r20
    132c:	f5 0b       	sbc	r31, r21

0000132e <__udivmodsi4_ep>:
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	1a 94       	dec	r1
    1338:	69 f7       	brne	.-38     	; 0x1314 <__udivmodsi4_loop>
    133a:	60 95       	com	r22
    133c:	70 95       	com	r23
    133e:	80 95       	com	r24
    1340:	90 95       	com	r25
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	bd 01       	movw	r22, r26
    1348:	cf 01       	movw	r24, r30
    134a:	08 95       	ret

0000134c <__subsf3>:
    134c:	50 58       	subi	r21, 0x80	; 128

0000134e <__addsf3>:
    134e:	bb 27       	eor	r27, r27
    1350:	aa 27       	eor	r26, r26
    1352:	0e 94 be 09 	call	0x137c	; 0x137c <__addsf3x>
    1356:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_round>
    135a:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
    135e:	38 f0       	brcs	.+14     	; 0x136e <__addsf3+0x20>
    1360:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
    1364:	20 f0       	brcs	.+8      	; 0x136e <__addsf3+0x20>
    1366:	39 f4       	brne	.+14     	; 0x1376 <__addsf3+0x28>
    1368:	9f 3f       	cpi	r25, 0xFF	; 255
    136a:	19 f4       	brne	.+6      	; 0x1372 <__addsf3+0x24>
    136c:	26 f4       	brtc	.+8      	; 0x1376 <__addsf3+0x28>
    136e:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    1372:	0e f4       	brtc	.+2      	; 0x1376 <__addsf3+0x28>
    1374:	e0 95       	com	r30
    1376:	e7 fb       	bst	r30, 7
    1378:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>

0000137c <__addsf3x>:
    137c:	e9 2f       	mov	r30, r25
    137e:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_split3>
    1382:	58 f3       	brcs	.-42     	; 0x135a <__addsf3+0xc>
    1384:	ba 17       	cp	r27, r26
    1386:	62 07       	cpc	r22, r18
    1388:	73 07       	cpc	r23, r19
    138a:	84 07       	cpc	r24, r20
    138c:	95 07       	cpc	r25, r21
    138e:	20 f0       	brcs	.+8      	; 0x1398 <__addsf3x+0x1c>
    1390:	79 f4       	brne	.+30     	; 0x13b0 <__addsf3x+0x34>
    1392:	a6 f5       	brtc	.+104    	; 0x13fc <__addsf3x+0x80>
    1394:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__fp_zero>
    1398:	0e f4       	brtc	.+2      	; 0x139c <__addsf3x+0x20>
    139a:	e0 95       	com	r30
    139c:	0b 2e       	mov	r0, r27
    139e:	ba 2f       	mov	r27, r26
    13a0:	a0 2d       	mov	r26, r0
    13a2:	0b 01       	movw	r0, r22
    13a4:	b9 01       	movw	r22, r18
    13a6:	90 01       	movw	r18, r0
    13a8:	0c 01       	movw	r0, r24
    13aa:	ca 01       	movw	r24, r20
    13ac:	a0 01       	movw	r20, r0
    13ae:	11 24       	eor	r1, r1
    13b0:	ff 27       	eor	r31, r31
    13b2:	59 1b       	sub	r21, r25
    13b4:	99 f0       	breq	.+38     	; 0x13dc <__addsf3x+0x60>
    13b6:	59 3f       	cpi	r21, 0xF9	; 249
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <__addsf3x+0x52>
    13ba:	50 3e       	cpi	r21, 0xE0	; 224
    13bc:	68 f1       	brcs	.+90     	; 0x1418 <__addsf3x+0x9c>
    13be:	1a 16       	cp	r1, r26
    13c0:	f0 40       	sbci	r31, 0x00	; 0
    13c2:	a2 2f       	mov	r26, r18
    13c4:	23 2f       	mov	r18, r19
    13c6:	34 2f       	mov	r19, r20
    13c8:	44 27       	eor	r20, r20
    13ca:	58 5f       	subi	r21, 0xF8	; 248
    13cc:	f3 cf       	rjmp	.-26     	; 0x13b4 <__addsf3x+0x38>
    13ce:	46 95       	lsr	r20
    13d0:	37 95       	ror	r19
    13d2:	27 95       	ror	r18
    13d4:	a7 95       	ror	r26
    13d6:	f0 40       	sbci	r31, 0x00	; 0
    13d8:	53 95       	inc	r21
    13da:	c9 f7       	brne	.-14     	; 0x13ce <__addsf3x+0x52>
    13dc:	7e f4       	brtc	.+30     	; 0x13fc <__addsf3x+0x80>
    13de:	1f 16       	cp	r1, r31
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	62 0b       	sbc	r22, r18
    13e4:	73 0b       	sbc	r23, r19
    13e6:	84 0b       	sbc	r24, r20
    13e8:	ba f0       	brmi	.+46     	; 0x1418 <__addsf3x+0x9c>
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	a1 f0       	breq	.+40     	; 0x1416 <__addsf3x+0x9a>
    13ee:	ff 0f       	add	r31, r31
    13f0:	bb 1f       	adc	r27, r27
    13f2:	66 1f       	adc	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	c2 f7       	brpl	.-16     	; 0x13ea <__addsf3x+0x6e>
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <__addsf3x+0x9c>
    13fc:	ba 0f       	add	r27, r26
    13fe:	62 1f       	adc	r22, r18
    1400:	73 1f       	adc	r23, r19
    1402:	84 1f       	adc	r24, r20
    1404:	48 f4       	brcc	.+18     	; 0x1418 <__addsf3x+0x9c>
    1406:	87 95       	ror	r24
    1408:	77 95       	ror	r23
    140a:	67 95       	ror	r22
    140c:	b7 95       	ror	r27
    140e:	f7 95       	ror	r31
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	08 f0       	brcs	.+2      	; 0x1416 <__addsf3x+0x9a>
    1414:	b0 cf       	rjmp	.-160    	; 0x1376 <__addsf3+0x28>
    1416:	93 95       	inc	r25
    1418:	88 0f       	add	r24, r24
    141a:	08 f0       	brcs	.+2      	; 0x141e <__addsf3x+0xa2>
    141c:	99 27       	eor	r25, r25
    141e:	ee 0f       	add	r30, r30
    1420:	97 95       	ror	r25
    1422:	87 95       	ror	r24
    1424:	08 95       	ret

00001426 <__divsf3>:
    1426:	0e 94 27 0a 	call	0x144e	; 0x144e <__divsf3x>
    142a:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_round>
    142e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
    1432:	58 f0       	brcs	.+22     	; 0x144a <__divsf3+0x24>
    1434:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
    1438:	40 f0       	brcs	.+16     	; 0x144a <__divsf3+0x24>
    143a:	29 f4       	brne	.+10     	; 0x1446 <__divsf3+0x20>
    143c:	5f 3f       	cpi	r21, 0xFF	; 255
    143e:	29 f0       	breq	.+10     	; 0x144a <__divsf3+0x24>
    1440:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    1444:	51 11       	cpse	r21, r1
    1446:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    144a:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>

0000144e <__divsf3x>:
    144e:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_split3>
    1452:	68 f3       	brcs	.-38     	; 0x142e <__divsf3+0x8>

00001454 <__divsf3_pse>:
    1454:	99 23       	and	r25, r25
    1456:	b1 f3       	breq	.-20     	; 0x1444 <__divsf3+0x1e>
    1458:	55 23       	and	r21, r21
    145a:	91 f3       	breq	.-28     	; 0x1440 <__divsf3+0x1a>
    145c:	95 1b       	sub	r25, r21
    145e:	55 0b       	sbc	r21, r21
    1460:	bb 27       	eor	r27, r27
    1462:	aa 27       	eor	r26, r26
    1464:	62 17       	cp	r22, r18
    1466:	73 07       	cpc	r23, r19
    1468:	84 07       	cpc	r24, r20
    146a:	38 f0       	brcs	.+14     	; 0x147a <__divsf3_pse+0x26>
    146c:	9f 5f       	subi	r25, 0xFF	; 255
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	44 1f       	adc	r20, r20
    1476:	aa 1f       	adc	r26, r26
    1478:	a9 f3       	breq	.-22     	; 0x1464 <__divsf3_pse+0x10>
    147a:	35 d0       	rcall	.+106    	; 0x14e6 <__divsf3_pse+0x92>
    147c:	0e 2e       	mov	r0, r30
    147e:	3a f0       	brmi	.+14     	; 0x148e <__divsf3_pse+0x3a>
    1480:	e0 e8       	ldi	r30, 0x80	; 128
    1482:	32 d0       	rcall	.+100    	; 0x14e8 <__divsf3_pse+0x94>
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	e6 95       	lsr	r30
    148a:	00 1c       	adc	r0, r0
    148c:	ca f7       	brpl	.-14     	; 0x1480 <__divsf3_pse+0x2c>
    148e:	2b d0       	rcall	.+86     	; 0x14e6 <__divsf3_pse+0x92>
    1490:	fe 2f       	mov	r31, r30
    1492:	29 d0       	rcall	.+82     	; 0x14e6 <__divsf3_pse+0x92>
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	88 1f       	adc	r24, r24
    149a:	bb 1f       	adc	r27, r27
    149c:	26 17       	cp	r18, r22
    149e:	37 07       	cpc	r19, r23
    14a0:	48 07       	cpc	r20, r24
    14a2:	ab 07       	cpc	r26, r27
    14a4:	b0 e8       	ldi	r27, 0x80	; 128
    14a6:	09 f0       	breq	.+2      	; 0x14aa <__divsf3_pse+0x56>
    14a8:	bb 0b       	sbc	r27, r27
    14aa:	80 2d       	mov	r24, r0
    14ac:	bf 01       	movw	r22, r30
    14ae:	ff 27       	eor	r31, r31
    14b0:	93 58       	subi	r25, 0x83	; 131
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	3a f0       	brmi	.+14     	; 0x14c4 <__divsf3_pse+0x70>
    14b6:	9e 3f       	cpi	r25, 0xFE	; 254
    14b8:	51 05       	cpc	r21, r1
    14ba:	78 f0       	brcs	.+30     	; 0x14da <__divsf3_pse+0x86>
    14bc:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    14c0:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    14c4:	5f 3f       	cpi	r21, 0xFF	; 255
    14c6:	e4 f3       	brlt	.-8      	; 0x14c0 <__divsf3_pse+0x6c>
    14c8:	98 3e       	cpi	r25, 0xE8	; 232
    14ca:	d4 f3       	brlt	.-12     	; 0x14c0 <__divsf3_pse+0x6c>
    14cc:	86 95       	lsr	r24
    14ce:	77 95       	ror	r23
    14d0:	67 95       	ror	r22
    14d2:	b7 95       	ror	r27
    14d4:	f7 95       	ror	r31
    14d6:	9f 5f       	subi	r25, 0xFF	; 255
    14d8:	c9 f7       	brne	.-14     	; 0x14cc <__divsf3_pse+0x78>
    14da:	88 0f       	add	r24, r24
    14dc:	91 1d       	adc	r25, r1
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret
    14e6:	e1 e0       	ldi	r30, 0x01	; 1
    14e8:	66 0f       	add	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	88 1f       	adc	r24, r24
    14ee:	bb 1f       	adc	r27, r27
    14f0:	62 17       	cp	r22, r18
    14f2:	73 07       	cpc	r23, r19
    14f4:	84 07       	cpc	r24, r20
    14f6:	ba 07       	cpc	r27, r26
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__divsf3_pse+0xae>
    14fa:	62 1b       	sub	r22, r18
    14fc:	73 0b       	sbc	r23, r19
    14fe:	84 0b       	sbc	r24, r20
    1500:	ba 0b       	sbc	r27, r26
    1502:	ee 1f       	adc	r30, r30
    1504:	88 f7       	brcc	.-30     	; 0x14e8 <__divsf3_pse+0x94>
    1506:	e0 95       	com	r30
    1508:	08 95       	ret

0000150a <__fixsfsi>:
    150a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fixunssfsi>
    150e:	68 94       	set
    1510:	b1 11       	cpse	r27, r1
    1512:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    1516:	08 95       	ret

00001518 <__fixunssfsi>:
    1518:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_splitA>
    151c:	88 f0       	brcs	.+34     	; 0x1540 <__fixunssfsi+0x28>
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	98 f0       	brcs	.+38     	; 0x1548 <__fixunssfsi+0x30>
    1522:	b9 2f       	mov	r27, r25
    1524:	99 27       	eor	r25, r25
    1526:	b7 51       	subi	r27, 0x17	; 23
    1528:	b0 f0       	brcs	.+44     	; 0x1556 <__fixunssfsi+0x3e>
    152a:	e1 f0       	breq	.+56     	; 0x1564 <__fixunssfsi+0x4c>
    152c:	66 0f       	add	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	1a f0       	brmi	.+6      	; 0x153c <__fixunssfsi+0x24>
    1536:	ba 95       	dec	r27
    1538:	c9 f7       	brne	.-14     	; 0x152c <__fixunssfsi+0x14>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <__fixunssfsi+0x4c>
    153c:	b1 30       	cpi	r27, 0x01	; 1
    153e:	91 f0       	breq	.+36     	; 0x1564 <__fixunssfsi+0x4c>
    1540:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_zero>
    1544:	b1 e0       	ldi	r27, 0x01	; 1
    1546:	08 95       	ret
    1548:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__fp_zero>
    154c:	67 2f       	mov	r22, r23
    154e:	78 2f       	mov	r23, r24
    1550:	88 27       	eor	r24, r24
    1552:	b8 5f       	subi	r27, 0xF8	; 248
    1554:	39 f0       	breq	.+14     	; 0x1564 <__fixunssfsi+0x4c>
    1556:	b9 3f       	cpi	r27, 0xF9	; 249
    1558:	cc f3       	brlt	.-14     	; 0x154c <__fixunssfsi+0x34>
    155a:	86 95       	lsr	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b3 95       	inc	r27
    1562:	d9 f7       	brne	.-10     	; 0x155a <__fixunssfsi+0x42>
    1564:	3e f4       	brtc	.+14     	; 0x1574 <__fixunssfsi+0x5c>
    1566:	90 95       	com	r25
    1568:	80 95       	com	r24
    156a:	70 95       	com	r23
    156c:	61 95       	neg	r22
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f 4f       	sbci	r24, 0xFF	; 255
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	08 95       	ret

00001576 <__floatunsisf>:
    1576:	e8 94       	clt
    1578:	09 c0       	rjmp	.+18     	; 0x158c <__floatsisf+0x12>

0000157a <__floatsisf>:
    157a:	97 fb       	bst	r25, 7
    157c:	3e f4       	brtc	.+14     	; 0x158c <__floatsisf+0x12>
    157e:	90 95       	com	r25
    1580:	80 95       	com	r24
    1582:	70 95       	com	r23
    1584:	61 95       	neg	r22
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	99 23       	and	r25, r25
    158e:	a9 f0       	breq	.+42     	; 0x15ba <__floatsisf+0x40>
    1590:	f9 2f       	mov	r31, r25
    1592:	96 e9       	ldi	r25, 0x96	; 150
    1594:	bb 27       	eor	r27, r27
    1596:	93 95       	inc	r25
    1598:	f6 95       	lsr	r31
    159a:	87 95       	ror	r24
    159c:	77 95       	ror	r23
    159e:	67 95       	ror	r22
    15a0:	b7 95       	ror	r27
    15a2:	f1 11       	cpse	r31, r1
    15a4:	f8 cf       	rjmp	.-16     	; 0x1596 <__floatsisf+0x1c>
    15a6:	fa f4       	brpl	.+62     	; 0x15e6 <__floatsisf+0x6c>
    15a8:	bb 0f       	add	r27, r27
    15aa:	11 f4       	brne	.+4      	; 0x15b0 <__floatsisf+0x36>
    15ac:	60 ff       	sbrs	r22, 0
    15ae:	1b c0       	rjmp	.+54     	; 0x15e6 <__floatsisf+0x6c>
    15b0:	6f 5f       	subi	r22, 0xFF	; 255
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <__floatsisf+0x6c>
    15ba:	88 23       	and	r24, r24
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <__floatsisf+0x48>
    15be:	96 e9       	ldi	r25, 0x96	; 150
    15c0:	11 c0       	rjmp	.+34     	; 0x15e4 <__floatsisf+0x6a>
    15c2:	77 23       	and	r23, r23
    15c4:	21 f0       	breq	.+8      	; 0x15ce <__floatsisf+0x54>
    15c6:	9e e8       	ldi	r25, 0x8E	; 142
    15c8:	87 2f       	mov	r24, r23
    15ca:	76 2f       	mov	r23, r22
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <__floatsisf+0x5e>
    15ce:	66 23       	and	r22, r22
    15d0:	71 f0       	breq	.+28     	; 0x15ee <__floatsisf+0x74>
    15d2:	96 e8       	ldi	r25, 0x86	; 134
    15d4:	86 2f       	mov	r24, r22
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	2a f0       	brmi	.+10     	; 0x15e6 <__floatsisf+0x6c>
    15dc:	9a 95       	dec	r25
    15de:	66 0f       	add	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	da f7       	brpl	.-10     	; 0x15dc <__floatsisf+0x62>
    15e6:	88 0f       	add	r24, r24
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret

000015f0 <__fp_inf>:
    15f0:	97 f9       	bld	r25, 7
    15f2:	9f 67       	ori	r25, 0x7F	; 127
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	08 95       	ret

000015fc <__fp_nan>:
    15fc:	9f ef       	ldi	r25, 0xFF	; 255
    15fe:	80 ec       	ldi	r24, 0xC0	; 192
    1600:	08 95       	ret

00001602 <__fp_pscA>:
    1602:	00 24       	eor	r0, r0
    1604:	0a 94       	dec	r0
    1606:	16 16       	cp	r1, r22
    1608:	17 06       	cpc	r1, r23
    160a:	18 06       	cpc	r1, r24
    160c:	09 06       	cpc	r0, r25
    160e:	08 95       	ret

00001610 <__fp_pscB>:
    1610:	00 24       	eor	r0, r0
    1612:	0a 94       	dec	r0
    1614:	12 16       	cp	r1, r18
    1616:	13 06       	cpc	r1, r19
    1618:	14 06       	cpc	r1, r20
    161a:	05 06       	cpc	r0, r21
    161c:	08 95       	ret

0000161e <__fp_round>:
    161e:	09 2e       	mov	r0, r25
    1620:	03 94       	inc	r0
    1622:	00 0c       	add	r0, r0
    1624:	11 f4       	brne	.+4      	; 0x162a <__fp_round+0xc>
    1626:	88 23       	and	r24, r24
    1628:	52 f0       	brmi	.+20     	; 0x163e <__fp_round+0x20>
    162a:	bb 0f       	add	r27, r27
    162c:	40 f4       	brcc	.+16     	; 0x163e <__fp_round+0x20>
    162e:	bf 2b       	or	r27, r31
    1630:	11 f4       	brne	.+4      	; 0x1636 <__fp_round+0x18>
    1632:	60 ff       	sbrs	r22, 0
    1634:	04 c0       	rjmp	.+8      	; 0x163e <__fp_round+0x20>
    1636:	6f 5f       	subi	r22, 0xFF	; 255
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__fp_split3>:
    1640:	57 fd       	sbrc	r21, 7
    1642:	90 58       	subi	r25, 0x80	; 128
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	59 f0       	breq	.+22     	; 0x1660 <__fp_splitA+0x10>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	71 f0       	breq	.+28     	; 0x166a <__fp_splitA+0x1a>
    164e:	47 95       	ror	r20

00001650 <__fp_splitA>:
    1650:	88 0f       	add	r24, r24
    1652:	97 fb       	bst	r25, 7
    1654:	99 1f       	adc	r25, r25
    1656:	61 f0       	breq	.+24     	; 0x1670 <__fp_splitA+0x20>
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	79 f0       	breq	.+30     	; 0x167a <__fp_splitA+0x2a>
    165c:	87 95       	ror	r24
    165e:	08 95       	ret
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	55 1f       	adc	r21, r21
    1668:	f2 cf       	rjmp	.-28     	; 0x164e <__fp_split3+0xe>
    166a:	46 95       	lsr	r20
    166c:	f1 df       	rcall	.-30     	; 0x1650 <__fp_splitA>
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <__fp_splitA+0x30>
    1670:	16 16       	cp	r1, r22
    1672:	17 06       	cpc	r1, r23
    1674:	18 06       	cpc	r1, r24
    1676:	99 1f       	adc	r25, r25
    1678:	f1 cf       	rjmp	.-30     	; 0x165c <__fp_splitA+0xc>
    167a:	86 95       	lsr	r24
    167c:	71 05       	cpc	r23, r1
    167e:	61 05       	cpc	r22, r1
    1680:	08 94       	sec
    1682:	08 95       	ret

00001684 <__fp_zero>:
    1684:	e8 94       	clt

00001686 <__fp_szero>:
    1686:	bb 27       	eor	r27, r27
    1688:	66 27       	eor	r22, r22
    168a:	77 27       	eor	r23, r23
    168c:	cb 01       	movw	r24, r22
    168e:	97 f9       	bld	r25, 7
    1690:	08 95       	ret

00001692 <__mulsf3>:
    1692:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3x>
    1696:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__fp_round>
    169a:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_pscA>
    169e:	38 f0       	brcs	.+14     	; 0x16ae <__mulsf3+0x1c>
    16a0:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_pscB>
    16a4:	20 f0       	brcs	.+8      	; 0x16ae <__mulsf3+0x1c>
    16a6:	95 23       	and	r25, r21
    16a8:	11 f0       	breq	.+4      	; 0x16ae <__mulsf3+0x1c>
    16aa:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    16ae:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__fp_nan>
    16b2:	11 24       	eor	r1, r1
    16b4:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>

000016b8 <__mulsf3x>:
    16b8:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fp_split3>
    16bc:	70 f3       	brcs	.-36     	; 0x169a <__mulsf3+0x8>

000016be <__mulsf3_pse>:
    16be:	95 9f       	mul	r25, r21
    16c0:	c1 f3       	breq	.-16     	; 0x16b2 <__mulsf3+0x20>
    16c2:	95 0f       	add	r25, r21
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	55 1f       	adc	r21, r21
    16c8:	62 9f       	mul	r22, r18
    16ca:	f0 01       	movw	r30, r0
    16cc:	72 9f       	mul	r23, r18
    16ce:	bb 27       	eor	r27, r27
    16d0:	f0 0d       	add	r31, r0
    16d2:	b1 1d       	adc	r27, r1
    16d4:	63 9f       	mul	r22, r19
    16d6:	aa 27       	eor	r26, r26
    16d8:	f0 0d       	add	r31, r0
    16da:	b1 1d       	adc	r27, r1
    16dc:	aa 1f       	adc	r26, r26
    16de:	64 9f       	mul	r22, r20
    16e0:	66 27       	eor	r22, r22
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	66 1f       	adc	r22, r22
    16e8:	82 9f       	mul	r24, r18
    16ea:	22 27       	eor	r18, r18
    16ec:	b0 0d       	add	r27, r0
    16ee:	a1 1d       	adc	r26, r1
    16f0:	62 1f       	adc	r22, r18
    16f2:	73 9f       	mul	r23, r19
    16f4:	b0 0d       	add	r27, r0
    16f6:	a1 1d       	adc	r26, r1
    16f8:	62 1f       	adc	r22, r18
    16fa:	83 9f       	mul	r24, r19
    16fc:	a0 0d       	add	r26, r0
    16fe:	61 1d       	adc	r22, r1
    1700:	22 1f       	adc	r18, r18
    1702:	74 9f       	mul	r23, r20
    1704:	33 27       	eor	r19, r19
    1706:	a0 0d       	add	r26, r0
    1708:	61 1d       	adc	r22, r1
    170a:	23 1f       	adc	r18, r19
    170c:	84 9f       	mul	r24, r20
    170e:	60 0d       	add	r22, r0
    1710:	21 1d       	adc	r18, r1
    1712:	82 2f       	mov	r24, r18
    1714:	76 2f       	mov	r23, r22
    1716:	6a 2f       	mov	r22, r26
    1718:	11 24       	eor	r1, r1
    171a:	9f 57       	subi	r25, 0x7F	; 127
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	9a f0       	brmi	.+38     	; 0x1746 <__mulsf3_pse+0x88>
    1720:	f1 f0       	breq	.+60     	; 0x175e <__mulsf3_pse+0xa0>
    1722:	88 23       	and	r24, r24
    1724:	4a f0       	brmi	.+18     	; 0x1738 <__mulsf3_pse+0x7a>
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	bb 1f       	adc	r27, r27
    172c:	66 1f       	adc	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	91 50       	subi	r25, 0x01	; 1
    1734:	50 40       	sbci	r21, 0x00	; 0
    1736:	a9 f7       	brne	.-22     	; 0x1722 <__mulsf3_pse+0x64>
    1738:	9e 3f       	cpi	r25, 0xFE	; 254
    173a:	51 05       	cpc	r21, r1
    173c:	80 f0       	brcs	.+32     	; 0x175e <__mulsf3_pse+0xa0>
    173e:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_inf>
    1742:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_szero>
    1746:	5f 3f       	cpi	r21, 0xFF	; 255
    1748:	e4 f3       	brlt	.-8      	; 0x1742 <__mulsf3_pse+0x84>
    174a:	98 3e       	cpi	r25, 0xE8	; 232
    174c:	d4 f3       	brlt	.-12     	; 0x1742 <__mulsf3_pse+0x84>
    174e:	86 95       	lsr	r24
    1750:	77 95       	ror	r23
    1752:	67 95       	ror	r22
    1754:	b7 95       	ror	r27
    1756:	f7 95       	ror	r31
    1758:	e7 95       	ror	r30
    175a:	9f 5f       	subi	r25, 0xFF	; 255
    175c:	c1 f7       	brne	.-16     	; 0x174e <__mulsf3_pse+0x90>
    175e:	fe 2b       	or	r31, r30
    1760:	88 0f       	add	r24, r24
    1762:	91 1d       	adc	r25, r1
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	97 f9       	bld	r25, 7
    176a:	08 95       	ret

0000176c <eeprom_read_byte>:
    176c:	f9 99       	sbic	0x1f, 1	; 31
    176e:	fe cf       	rjmp	.-4      	; 0x176c <eeprom_read_byte>
    1770:	92 bd       	out	0x22, r25	; 34
    1772:	81 bd       	out	0x21, r24	; 33
    1774:	f8 9a       	sbi	0x1f, 0	; 31
    1776:	99 27       	eor	r25, r25
    1778:	80 b5       	in	r24, 0x20	; 32
    177a:	08 95       	ret

0000177c <eeprom_write_byte>:
    177c:	26 2f       	mov	r18, r22

0000177e <eeprom_write_r18>:
    177e:	f9 99       	sbic	0x1f, 1	; 31
    1780:	fe cf       	rjmp	.-4      	; 0x177e <eeprom_write_r18>
    1782:	1f ba       	out	0x1f, r1	; 31
    1784:	92 bd       	out	0x22, r25	; 34
    1786:	81 bd       	out	0x21, r24	; 33
    1788:	20 bd       	out	0x20, r18	; 32
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	fa 9a       	sbi	0x1f, 2	; 31
    1790:	f9 9a       	sbi	0x1f, 1	; 31
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	08 95       	ret

00001798 <_exit>:
    1798:	f8 94       	cli

0000179a <__stop_program>:
    179a:	ff cf       	rjmp	.-2      	; 0x179a <__stop_program>
