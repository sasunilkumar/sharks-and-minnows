
build/minnow_convert.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	4e 05       	cpc	r20, r14
      6a:	a5 05       	cpc	r26, r5
      6c:	b9 05       	cpc	r27, r9
      6e:	ea 05       	cpc	r30, r10
      70:	f1 05       	cpc	r31, r1
      72:	d0 05       	cpc	r29, r0
      74:	f4 05       	cpc	r31, r4
      76:	52 07       	cpc	r21, r18
      78:	43 08       	sbc	r4, r3
      7a:	43 08       	sbc	r4, r3
      7c:	5b 07       	cpc	r21, r27
      7e:	5e 07       	cpc	r21, r30
      80:	61 07       	cpc	r22, r17
      82:	63 07       	cpc	r22, r19
      84:	65 07       	cpc	r22, r21
      86:	67 07       	cpc	r22, r23
      88:	18 08       	sbc	r1, r8
      8a:	79 07       	cpc	r23, r25

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ee       	ldi	r30, 0xEE	; 238
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	aa 30       	cpi	r26, 0x0A	; 10
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	aa e0       	ldi	r26, 0x0A	; 10
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <main>
      da:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
#define LEFT 2
#define RIGHT 3

int message_sent = 0, new_message = 0, curr = 0, rand = 0, die = 4;
message_t rcvd_message, transmit_msg;
void message_rx(message_t *msg, distance_measurement_t *dist) {
      e2:	fc 01       	movw	r30, r24
  rcvd_message = *msg;
      e4:	9c e0       	ldi	r25, 0x0C	; 12
      e6:	a6 e1       	ldi	r26, 0x16	; 22
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	9a 95       	dec	r25
      f0:	e1 f7       	brne	.-8      	; 0xea <message_rx+0x8>
  new_message = 1;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <new_message+0x1>
      fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <new_message>
      fe:	08 95       	ret

00000100 <message_tx>:
}
message_t *message_tx() {
  return &transmit_msg;
}
     100:	82 e2       	ldi	r24, 0x22	; 34
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret

00000106 <message_tx_success>:
void message_tx_success() {
  message_sent = 1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <message_sent+0x1>
     10e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <message_sent>
     112:	08 95       	ret

00000114 <setup>:
          set_motors(0, kilo_turn_right);
        }
  }
}

void setup() {
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
      transmit_msg.type = NORMAL;
     118:	c2 e2       	ldi	r28, 0x22	; 34
     11a:	d1 e0       	ldi	r29, 0x01	; 1
     11c:	19 86       	std	Y+9, r1	; 0x09
      transmit_msg.data[0] = 0;
     11e:	18 82       	st	Y, r1
      transmit_msg.crc = message_crc(&transmit_msg);
     120:	ce 01       	movw	r24, r28
     122:	0e 94 56 08 	call	0x10ac	; 0x10ac <message_crc>
     126:	9b 87       	std	Y+11, r25	; 0x0b
     128:	8a 87       	std	Y+10, r24	; 0x0a
}
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <set_motion>:
void message_tx_success() {
  message_sent = 1;
}

void set_motion(int new_motion){
  if (curr != new_motion) {
     130:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <curr>
     134:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <curr+0x1>
     138:	28 17       	cp	r18, r24
     13a:	39 07       	cpc	r19, r25
     13c:	09 f1       	breq	.+66     	; 0x180 <set_motion+0x50>
        curr = new_motion;
     13e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <curr+0x1>
     142:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <curr>
        if (curr == STOP) {
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	11 f4       	brne	.+4      	; 0x14e <set_motion+0x1e>
          set_motors(0,0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	16 c0       	rjmp	.+44     	; 0x17a <set_motion+0x4a>
        } else if (curr == FORWARD) {
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	91 05       	cpc	r25, r1
     152:	39 f4       	brne	.+14     	; 0x162 <set_motion+0x32>
          spinup_motors();
     154:	0e 94 4e 02 	call	0x49c	; 0x49c <spinup_motors>
          set_motors(kilo_straight_left, kilo_straight_right);
     158:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_straight_right>
     15c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <kilo_straight_left>
     160:	0d c0       	rjmp	.+26     	; 0x17c <set_motion+0x4c>
        } else if (curr == LEFT) {
     162:	02 97       	sbiw	r24, 0x02	; 2
     164:	31 f4       	brne	.+12     	; 0x172 <set_motion+0x42>
          spinup_motors();
     166:	0e 94 4e 02 	call	0x49c	; 0x49c <spinup_motors>
          set_motors(kilo_turn_left, 0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_turn_left>
     170:	05 c0       	rjmp	.+10     	; 0x17c <set_motion+0x4c>
        } else {
          spinup_motors();
     172:	0e 94 4e 02 	call	0x49c	; 0x49c <spinup_motors>
          set_motors(0, kilo_turn_right);
     176:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_turn_right>
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0c 94 49 02 	jmp	0x492	; 0x492 <set_motors>
     180:	08 95       	ret

00000182 <loop>:
      transmit_msg.type = NORMAL;
      transmit_msg.data[0] = 0;
      transmit_msg.crc = message_crc(&transmit_msg);
}
void loop() {
  if (new_message == 1) {
     182:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <new_message>
     186:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <new_message+0x1>
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	09 f0       	breq	.+2      	; 0x190 <loop+0xe>
     18e:	50 c0       	rjmp	.+160    	; 0x230 <loop+0xae>
      new_message = 0;
     190:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <new_message+0x1>
     194:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <new_message>
      set_color(VIOLET);
     198:	81 e1       	ldi	r24, 0x11	; 17
     19a:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
      set_motion(STOP);
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 98 00 	call	0x130	; 0x130 <set_motion>
      delay(200);
     1a6:	88 ec       	ldi	r24, 0xC8	; 200
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 3e 02 	call	0x47c	; 0x47c <delay>
      transmit_msg.type = NORMAL;
     1ae:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <transmit_msg+0x9>
      transmit_msg.data[0] = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmit_msg>
      transmit_msg.crc = message_crc(&transmit_msg);
     1b8:	82 e2       	ldi	r24, 0x22	; 34
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 56 08 	call	0x10ac	; 0x10ac <message_crc>
     1c0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <transmit_msg+0xb>
     1c4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmit_msg+0xa>
      if (message_sent == 1) {
     1c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <message_sent>
     1cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <message_sent+0x1>
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <loop+0x54>
     1d4:	51 c0       	rjmp	.+162    	; 0x278 <loop+0xf6>
        message_sent = 0;
     1d6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <message_sent+0x1>
     1da:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <message_sent>
        set_color(RED);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
        rand = rand_soft();
     1e4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <rand_soft>
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     1ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
        if (die == 0) {
     1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	19 f4       	brne	.+6      	; 0x204 <loop+0x82>
          set_motion(FORWARD);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	07 c0       	rjmp	.+14     	; 0x212 <loop+0x90>
        } else if (die == 1) {
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	19 f4       	brne	.+6      	; 0x20e <loop+0x8c>
          set_motion(LEFT);
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <loop+0x90>
        } else {
          set_motion(RIGHT);
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 98 00 	call	0x130	; 0x130 <set_motion>
        }
        die = (rand % 3);
     216:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     21a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     21e:	63 e0       	ldi	r22, 0x03	; 3
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     22e:	08 95       	ret
      }
  } else {
      set_color(BLUE);
     230:	80 e1       	ldi	r24, 0x10	; 16
     232:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
      rand = rand_soft();
     236:	0e 94 ee 02 	call	0x5dc	; 0x5dc <rand_soft>
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     240:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
      die = (rand % 3);
     244:	63 e0       	ldi	r22, 0x03	; 3
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     24c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
      if (die == 0) {
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	19 f4       	brne	.+6      	; 0x25e <loop+0xdc>
          set_motion(FORWARD);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	07 c0       	rjmp	.+14     	; 0x26c <loop+0xea>
      } else if (die == 1) {
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	19 f4       	brne	.+6      	; 0x268 <loop+0xe6>
          set_motion(LEFT);
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <loop+0xea>
      } else {
          set_motion(RIGHT);
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 98 00 	call	0x130	; 0x130 <set_motion>
      }
      delay(100);
     270:	84 e6       	ldi	r24, 0x64	; 100
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0c 94 3e 02 	jmp	0x47c	; 0x47c <delay>
     278:	08 95       	ret

0000027a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     27a:	08 95       	ret

0000027c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	08 95       	ret

00000282 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     282:	08 95       	ret

00000284 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
    cli();
     292:	f8 94       	cli

    ports_off();
     294:	14 b8       	out	0x04, r1	; 4
     296:	17 b8       	out	0x07, r1	; 7
     298:	1a b8       	out	0x0a, r1	; 10
     29a:	15 b8       	out	0x05, r1	; 5
     29c:	18 b8       	out	0x08, r1	; 8
     29e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2a0:	52 9a       	sbi	0x0a, 2	; 10
     2a2:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2a4:	14 bc       	out	0x24, r1	; 36
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	85 bd       	out	0x25, r24	; 37
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	87 bd       	out	0x27, r24	; 39
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     2b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     2b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2bc:	2f e8       	ldi	r18, 0x8F	; 143
     2be:	3b e0       	ldi	r19, 0x0B	; 11
     2c0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2c4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     2c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     2cc:	53 98       	cbi	0x0a, 3	; 10
     2ce:	23 98       	cbi	0x04, 3	; 4
     2d0:	91 ea       	ldi	r25, 0xA1	; 161
     2d2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     2da:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     2de:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     2e2:	8b e0       	ldi	r24, 0x0B	; 11
     2e4:	80 bf       	out	0x30, r24	; 48
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2f2:	83 e8       	ldi	r24, 0x83	; 131
     2f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2fc:	80 64       	ori	r24, 0x40	; 64
     2fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     302:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     306:	86 fd       	sbrc	r24, 6
     308:	fc cf       	rjmp	.-8      	; 0x302 <kilo_init+0x7e>
    adc_trigger_high_gain();
     30a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     30e:	83 ea       	ldi	r24, 0xA3	; 163
     310:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
    if (osccal != 0xFF)
     322:	8f 3f       	cpi	r24, 0xFF	; 255
     324:	11 f0       	breq	.+4      	; 0x32a <kilo_init+0xa6>
        OSCCAL = osccal;
     326:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     32a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    rx_leadingbit = 1;
     32e:	c1 e0       	ldi	r28, 0x01	; 1
     330:	c0 93 2e 01 	sts	0x012E, r28	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
     334:	c0 93 72 01 	sts	0x0172, r28	; 0x800172 <rx_leadingbyte>
    rx_byteindex = 0;
     338:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
    rx_bytevalue = 0;
     33c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     340:	80 e9       	ldi	r24, 0x90	; 144
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     348:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     34c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_mask>
     350:	88 73       	andi	r24, 0x38	; 56
     352:	11 f0       	breq	.+4      	; 0x358 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     354:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <tx_mask>
    tx_clock = 0;
     358:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
     35c:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
    tx_increment = 255;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
     368:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    kilo_ticks = 0;
     36c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <kilo_ticks>
     370:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <kilo_ticks+0x1>
     374:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <kilo_ticks+0x2>
     378:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <kilo_ticks+0x3>
    kilo_state = IDLE;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    kilo_tx_period = 3906;
     382:	82 e4       	ldi	r24, 0x42	; 66
     384:	9f e0       	ldi	r25, 0x0F	; 15
     386:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <kilo_tx_period+0x1>
     38a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     38e:	80 eb       	ldi	r24, 0xB0	; 176
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     396:	c8 2f       	mov	r28, r24
     398:	81 eb       	ldi	r24, 0xB1	; 177
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3a0:	2c 2f       	mov	r18, r28
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	38 2b       	or	r19, r24
     3a6:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <kilo_uid+0x1>
     3aa:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3b6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3ba:	89 e0       	ldi	r24, 0x09	; 9
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3c2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3c6:	8c e0       	ldi	r24, 0x0C	; 12
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3ce:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3d2:	84 e1       	ldi	r24, 0x14	; 20
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3da:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
     3de:	06 e5       	ldi	r16, 0x56	; 86
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	5f e2       	ldi	r21, 0x2F	; 47
     3e4:	e5 2e       	mov	r14, r21
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	f5 2e       	mov	r15, r21
     3ea:	c0 e2       	ldi	r28, 0x20	; 32
     3ec:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     3ee:	ce 01       	movw	r24, r28
     3f0:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3f4:	d8 2e       	mov	r13, r24
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     3fe:	2d 2d       	mov	r18, r13
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	32 2f       	mov	r19, r18
     404:	22 27       	eor	r18, r18
     406:	28 2b       	or	r18, r24
     408:	f8 01       	movw	r30, r16
     40a:	21 93       	st	Z+, r18
     40c:	31 93       	st	Z+, r19
     40e:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     410:	ce 01       	movw	r24, r28
     412:	c0 96       	adiw	r24, 0x30	; 48
     414:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     418:	d8 2e       	mov	r13, r24
     41a:	ce 01       	movw	r24, r28
     41c:	c1 96       	adiw	r24, 0x31	; 49
     41e:	0e 94 5f 0b 	call	0x16be	; 0x16be <eeprom_read_byte>
     422:	2d 2d       	mov	r18, r13
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	32 2f       	mov	r19, r18
     428:	22 27       	eor	r18, r18
     42a:	28 2b       	or	r18, r24
     42c:	f7 01       	movw	r30, r14
     42e:	21 93       	st	Z+, r18
     430:	31 93       	st	Z+, r19
     432:	7f 01       	movw	r14, r30
     434:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     436:	cc 33       	cpi	r28, 0x3C	; 60
     438:	d1 05       	cpc	r29, r1
     43a:	c9 f6       	brne	.-78     	; 0x3ee <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     43c:	78 94       	sei
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	ef 90       	pop	r14
     44a:	df 90       	pop	r13
     44c:	08 95       	ret

0000044e <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	8f 93       	push	r24
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	a8 95       	wdr
     460:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     464:	88 61       	ori	r24, 0x18	; 24
     466:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     46a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     46e:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     470:	8f 91       	pop	r24
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	41 f0       	breq	.+16     	; 0x490 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	ef ec       	ldi	r30, 0xCF	; 207
     482:	f7 e0       	ldi	r31, 0x07	; 7
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <delay+0x8>
     488:	00 c0       	rjmp	.+0      	; 0x48a <delay+0xe>
     48a:	00 00       	nop
        _delay_ms(1);
        ms--;
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f6 cf       	rjmp	.-20     	; 0x47c <delay>
    }
}
     490:	08 95       	ret

00000492 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     492:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     496:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     49a:	08 95       	ret

0000049c <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4a2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     4a6:	8f e0       	ldi	r24, 0x0F	; 15
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0c 94 3e 02 	jmp	0x47c	; 0x47c <delay>

000004ae <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     4ae:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     4b2:	81 11       	cpse	r24, r1
     4b4:	1e c0       	rjmp	.+60     	; 0x4f2 <get_ambientlight+0x44>
        cli();
     4b6:	f8 94       	cli
        adc_setup_conversion(7);
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4be:	83 e8       	ldi	r24, 0x83	; 131
     4c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4c8:	80 64       	ori	r24, 0x40	; 64
     4ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d2:	86 fd       	sbrc	r24, 6
     4d4:	fc cf       	rjmp	.-8      	; 0x4ce <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     4d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4de:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4e2:	23 ea       	ldi	r18, 0xA3	; 163
     4e4:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4ee:	78 94       	sei
     4f0:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     4f6:	08 95       	ret

000004f8 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     4f8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     4fc:	81 11       	cpse	r24, r1
     4fe:	1e c0       	rjmp	.+60     	; 0x53c <get_temperature+0x44>
        cli();
     500:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     502:	88 ec       	ldi	r24, 0xC8	; 200
     504:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     508:	87 e8       	ldi	r24, 0x87	; 135
     50a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     50e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     512:	80 64       	ori	r24, 0x40	; 64
     514:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     518:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     51c:	86 fd       	sbrc	r24, 6
     51e:	fc cf       	rjmp	.-8      	; 0x518 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     520:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     524:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     528:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     52c:	23 ea       	ldi	r18, 0xA3	; 163
     52e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     538:	78 94       	sei
     53a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     540:	08 95       	ret

00000542 <rand_hard>:

uint8_t rand_hard() {
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     54c:	e3 ea       	ldi	r30, 0xA3	; 163
     54e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     550:	c6 e0       	ldi	r28, 0x06	; 6
     552:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     554:	a1 e0       	ldi	r26, 0x01	; 1
     556:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     558:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     55a:	f8 94       	cli
            adc_setup_conversion(6);
     55c:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     560:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     564:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     568:	40 64       	ori	r20, 0x40	; 64
     56a:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     56e:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     572:	46 fd       	sbrc	r20, 6
     574:	fc cf       	rjmp	.-8      	; 0x56e <rand_hard+0x2c>
            a = ADCW&0x1;
     576:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     57a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     57e:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     580:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     584:	50 64       	ori	r21, 0x40	; 64
     586:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     58a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     58e:	56 fd       	sbrc	r21, 6
     590:	fc cf       	rjmp	.-8      	; 0x58a <rand_hard+0x48>
            b = ADCW&0x1;
     592:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     596:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     59a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     59e:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a2:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     5a6:	78 94       	sei
            tries++;
     5a8:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     5aa:	61 70       	andi	r22, 0x01	; 1
     5ac:	46 17       	cp	r20, r22
     5ae:	51 f0       	breq	.+20     	; 0x5c4 <rand_hard+0x82>
        if (a)
     5b0:	44 23       	and	r20, r20
     5b2:	59 f0       	breq	.+22     	; 0x5ca <rand_hard+0x88>
            num |= (1<<i);
     5b4:	ad 01       	movw	r20, r26
     5b6:	02 2e       	mov	r0, r18
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <rand_hard+0x7a>
     5ba:	44 0f       	add	r20, r20
     5bc:	0a 94       	dec	r0
     5be:	ea f7       	brpl	.-6      	; 0x5ba <rand_hard+0x78>
     5c0:	84 2b       	or	r24, r20
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     5c4:	90 38       	cpi	r25, 0x80	; 128
     5c6:	49 f6       	brne	.-110    	; 0x55a <rand_hard+0x18>
     5c8:	f3 cf       	rjmp	.-26     	; 0x5b0 <rand_hard+0x6e>
     5ca:	2f 5f       	subi	r18, 0xFF	; 255
     5cc:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     5ce:	28 30       	cpi	r18, 0x08	; 8
     5d0:	31 05       	cpc	r19, r1
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <rand_hard+0x94>
     5d4:	c1 cf       	rjmp	.-126    	; 0x558 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     5dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     5e0:	98 e0       	ldi	r25, 0x08	; 8
     5e2:	89 9f       	mul	r24, r25
     5e4:	90 01       	movw	r18, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     5ea:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <accumulator>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	89 0f       	add	r24, r25
     5f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accumulator>
     5f6:	82 2f       	mov	r24, r18
     5f8:	82 95       	swap	r24
     5fa:	86 95       	lsr	r24
     5fc:	87 70       	andi	r24, 0x07	; 7
     5fe:	28 27       	eor	r18, r24
     600:	96 95       	lsr	r25
     602:	96 95       	lsr	r25
     604:	82 2f       	mov	r24, r18
     606:	89 27       	eor	r24, r25
     608:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     60c:	08 95       	ret

0000060e <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     60e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     612:	08 95       	ret

00000614 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     614:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     618:	81 11       	cpse	r24, r1
     61a:	16 c0       	rjmp	.+44     	; 0x648 <get_voltage+0x34>
        cli();                                    // disable interrupts
     61c:	f8 94       	cli
        adc_setup_conversion(6);
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     624:	83 e8       	ldi	r24, 0x83	; 131
     626:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     62a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     634:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     638:	86 fd       	sbrc	r24, 6
     63a:	fc cf       	rjmp	.-8      	; 0x634 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     63c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     640:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     644:	78 94       	sei
     646:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     64c:	08 95       	ret

0000064e <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     64e:	2f 92       	push	r2
     650:	3f 92       	push	r3
     652:	4f 92       	push	r4
     654:	5f 92       	push	r5
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     674:	fc 01       	movw	r30, r24
     676:	c2 81       	ldd	r28, Z+2	; 0x02
     678:	d3 81       	ldd	r29, Z+3	; 0x03
     67a:	c4 38       	cpi	r28, 0x84	; 132
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	df 07       	cpc	r29, r31
     680:	0c f0       	brlt	.+2      	; 0x684 <estimate_distance+0x36>
     682:	7e c0       	rjmp	.+252    	; 0x780 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     684:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <kilo_irhigh>
     688:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <kilo_irhigh+0x1>
     68c:	8c 17       	cp	r24, r28
     68e:	9d 07       	cpc	r25, r29
     690:	08 f4       	brcc	.+2      	; 0x694 <estimate_distance+0x46>
     692:	6f c0       	rjmp	.+222    	; 0x772 <estimate_distance+0x124>
     694:	e1 e3       	ldi	r30, 0x31	; 49
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     69a:	81 91       	ld	r24, Z+
     69c:	91 91       	ld	r25, Z+
     69e:	8c 17       	cp	r24, r28
     6a0:	9d 07       	cpc	r25, r29
     6a2:	20 f0       	brcs	.+8      	; 0x6ac <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     6a4:	1f 5f       	subi	r17, 0xFF	; 255
     6a6:	1e 30       	cpi	r17, 0x0E	; 14
     6a8:	c1 f7       	brne	.-16     	; 0x69a <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     6aa:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     6ac:	81 2f       	mov	r24, r17
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	fc 01       	movw	r30, r24
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	e1 5d       	subi	r30, 0xD1	; 209
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	e0 80       	ld	r14, Z
     6bc:	f1 80       	ldd	r15, Z+1	; 0x01
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	fc 01       	movw	r30, r24
     6c4:	e3 5d       	subi	r30, 0xD3	; 211
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	80 81       	ld	r24, Z
     6ca:	91 81       	ldd	r25, Z+1	; 0x01
     6cc:	b7 01       	movw	r22, r14
     6ce:	68 1b       	sub	r22, r24
     6d0:	79 0b       	sbc	r23, r25
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     6e2:	4b 01       	movw	r8, r22
     6e4:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6e6:	be 01       	movw	r22, r28
     6e8:	0d 2e       	mov	r0, r29
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     6f4:	2b 01       	movw	r4, r22
     6f6:	3c 01       	movw	r6, r24
     6f8:	b7 01       	movw	r22, r14
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     702:	6b 01       	movw	r12, r22
     704:	7c 01       	movw	r14, r24
     706:	61 2f       	mov	r22, r17
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	5f e3       	ldi	r21, 0x3F	; 63
     71a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	a9 01       	movw	r20, r18
     724:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     728:	a5 01       	movw	r20, r10
     72a:	94 01       	movw	r18, r8
     72c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c3 01       	movw	r24, r6
     742:	b2 01       	movw	r22, r4
     744:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e2       	ldi	r20, 0x20	; 32
     74e:	51 e4       	ldi	r21, 0x41	; 65
     750:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     754:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
     758:	7b 01       	movw	r14, r22
     75a:	c5 01       	movw	r24, r10
     75c:	b4 01       	movw	r22, r8
     75e:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
     762:	ab 01       	movw	r20, r22
     764:	bc 01       	movw	r22, r24
     766:	c7 01       	movw	r24, r14
     768:	ba 01       	movw	r22, r20
     76a:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     76e:	16 2f       	mov	r17, r22
     770:	01 c0       	rjmp	.+2      	; 0x774 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     772:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     774:	cd 3b       	cpi	r28, 0xBD	; 189
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	d8 07       	cpc	r29, r24
     77a:	0c f4       	brge	.+2      	; 0x77e <estimate_distance+0x130>
     77c:	ca c0       	rjmp	.+404    	; 0x912 <__stack+0x13>
     77e:	01 c0       	rjmp	.+2      	; 0x782 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     780:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     782:	f1 01       	movw	r30, r2
     784:	c0 80       	ld	r12, Z
     786:	d1 80       	ldd	r13, Z+1	; 0x01
     788:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <kilo_irlow>
     78c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <kilo_irlow+0x1>
     790:	8c 15       	cp	r24, r12
     792:	9d 05       	cpc	r25, r13
     794:	88 f0       	brcs	.+34     	; 0x7b8 <estimate_distance+0x16a>
     796:	e8 e5       	ldi	r30, 0x58	; 88
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     7a0:	e1 90       	ld	r14, Z+
     7a2:	f1 90       	ld	r15, Z+
     7a4:	ec 14       	cp	r14, r12
     7a6:	fd 04       	cpc	r15, r13
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <estimate_distance+0x15e>
     7aa:	58 c0       	rjmp	.+176    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     7ac:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     7ae:	8e 30       	cpi	r24, 0x0E	; 14
     7b0:	91 05       	cpc	r25, r1
     7b2:	a9 f7       	brne	.-22     	; 0x79e <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     7b4:	0a e5       	ldi	r16, 0x5A	; 90
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     7b8:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     7ba:	1f 3f       	cpi	r17, 0xFF	; 255
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <estimate_distance+0x172>
     7be:	4b c0       	rjmp	.+150    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     7c0:	be 01       	movw	r22, r28
     7c2:	dd 0f       	add	r29, r29
     7c4:	88 0b       	sbc	r24, r24
     7c6:	99 0b       	sbc	r25, r25
     7c8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	61 2f       	mov	r22, r17
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     7dc:	4b 01       	movw	r8, r22
     7de:	5c 01       	movw	r10, r24
     7e0:	a7 01       	movw	r20, r14
     7e2:	96 01       	movw	r18, r12
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	81 e6       	ldi	r24, 0x61	; 97
     7ea:	94 e4       	ldi	r25, 0x44	; 68
     7ec:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	c5 01       	movw	r24, r10
     7f6:	b4 01       	movw	r22, r8
     7f8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
     800:	60 2f       	mov	r22, r16
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     80c:	2b 01       	movw	r4, r22
     80e:	3c 01       	movw	r6, r24
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	4f e2       	ldi	r20, 0x2F	; 47
     816:	54 e4       	ldi	r21, 0x44	; 68
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	c3 01       	movw	r24, r6
     826:	b2 01       	movw	r22, r4
     828:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	48 e4       	ldi	r20, 0x48	; 72
     83e:	53 e4       	ldi	r21, 0x43	; 67
     840:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	44 e0       	ldi	r20, 0x04	; 4
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     850:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
     854:	60 c0       	rjmp	.+192    	; 0x916 <__stack+0x17>
        } else {
            return 33 + dist_low;
     856:	61 e2       	ldi	r22, 0x21	; 33
     858:	60 0f       	add	r22, r16
     85a:	5d c0       	rjmp	.+186    	; 0x916 <__stack+0x17>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	fc 01       	movw	r30, r24
     862:	ec 5a       	subi	r30, 0xAC	; 172
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	b7 01       	movw	r22, r14
     86c:	68 1b       	sub	r22, r24
     86e:	79 0b       	sbc	r23, r25
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     880:	4b 01       	movw	r8, r22
     882:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     884:	b6 01       	movw	r22, r12
     886:	dd 0c       	add	r13, r13
     888:	88 0b       	sbc	r24, r24
     88a:	99 0b       	sbc	r25, r25
     88c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     890:	2b 01       	movw	r4, r22
     892:	3c 01       	movw	r6, r24
     894:	b7 01       	movw	r22, r14
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     89e:	6b 01       	movw	r12, r22
     8a0:	7c 01       	movw	r14, r24
     8a2:	63 2d       	mov	r22, r3
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	a9 01       	movw	r20, r18
     8c0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3>
     8c4:	a5 01       	movw	r20, r10
     8c6:	94 01       	movw	r18, r8
     8c8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	c3 01       	movw	r24, r6
     8de:	b2 01       	movw	r22, r4
     8e0:	0e 94 4f 09 	call	0x129e	; 0x129e <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e2       	ldi	r20, 0x20	; 32
     8ea:	51 e4       	ldi	r21, 0x41	; 65
     8ec:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3>
     8f0:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
     8f4:	7b 01       	movw	r14, r22
     8f6:	c5 01       	movw	r24, r10
     8f8:	b4 01       	movw	r22, r8
     8fa:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
     8fe:	ab 01       	movw	r20, r22
     900:	bc 01       	movw	r22, r24
     902:	c7 01       	movw	r24, r14
     904:	ba 01       	movw	r22, r20
     906:	0e 94 12 09 	call	0x1224	; 0x1224 <__divmodhi4>
     90a:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     90c:	6f 3f       	cpi	r22, 0xFF	; 255
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
     910:	54 cf       	rjmp	.-344    	; 0x7ba <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     912:	61 e2       	ldi	r22, 0x21	; 33
     914:	61 0f       	add	r22, r17
    }
}
     916:	86 2f       	mov	r24, r22
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	3f 90       	pop	r3
     93a:	2f 90       	pop	r2
     93c:	08 95       	ret

0000093e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	0f 92       	push	r0
     946:	11 24       	eor	r1, r1
     948:	2f 93       	push	r18
     94a:	3f 93       	push	r19
     94c:	4f 93       	push	r20
     94e:	5f 93       	push	r21
     950:	6f 93       	push	r22
     952:	7f 93       	push	r23
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	af 93       	push	r26
     95a:	bf 93       	push	r27
     95c:	ef 93       	push	r30
     95e:	ff 93       	push	r31
    tx_clock += tx_increment;
     960:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tx_clock>
     964:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tx_clock+0x1>
     968:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <tx_increment>
     96c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <tx_increment+0x1>
     970:	82 0f       	add	r24, r18
     972:	93 1f       	adc	r25, r19
     974:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tx_clock+0x1>
     978:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tx_clock>
    tx_increment = 0xFF;
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
     984:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    OCR0A = tx_increment;
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     98c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <kilo_ticks>
     990:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <kilo_ticks+0x1>
     994:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <kilo_ticks+0x2>
     998:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <kilo_ticks+0x3>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	a1 1d       	adc	r26, r1
     9a0:	b1 1d       	adc	r27, r1
     9a2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <kilo_ticks>
     9a6:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <kilo_ticks+0x1>
     9aa:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <kilo_ticks+0x2>
     9ae:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     9b2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     9b6:	81 11       	cpse	r24, r1
     9b8:	2d c0       	rjmp	.+90     	; 0xa14 <__vector_14+0xd6>
     9ba:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <kilo_tx_period>
     9be:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <kilo_tx_period+0x1>
     9c2:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tx_clock>
     9c6:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tx_clock+0x1>
     9ca:	82 17       	cp	r24, r18
     9cc:	93 07       	cpc	r25, r19
     9ce:	10 f5       	brcc	.+68     	; 0xa14 <__vector_14+0xd6>
     9d0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     9d4:	84 30       	cpi	r24, 0x04	; 4
     9d6:	f1 f4       	brne	.+60     	; 0xa14 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     9d8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     9dc:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     9e0:	09 95       	icall
        if (msg) {
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	b9 f0       	breq	.+46     	; 0xa14 <__vector_14+0xd6>
            if (message_send(msg)) {
     9e6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <message_send>
     9ea:	88 23       	and	r24, r24
     9ec:	51 f0       	breq	.+20     	; 0xa02 <__vector_14+0xc4>
                kilo_message_tx_success();
     9ee:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     9f2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     9f6:	09 95       	icall
                tx_clock = 0;
     9f8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
     9fc:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a02:	0e 94 85 00 	call	0x10a	; 0x10a <message_tx_success+0x4>
     a06:	9c 01       	movw	r18, r24
     a08:	33 27       	eor	r19, r19
     a0a:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <tx_increment+0x1>
     a0e:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <tx_increment>
                OCR0A = tx_increment;
     a12:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     a36:	80 ff       	sbrs	r24, 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <set_color+0x8>
        DDRD |= (1<<5);
     a3a:	55 9a       	sbi	0x0a, 5	; 10
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a3e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a40:	81 ff       	sbrs	r24, 1
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <set_color+0x12>
        DDRD |= (1<<4);
     a44:	54 9a       	sbi	0x0a, 4	; 10
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a48:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a4a:	82 ff       	sbrs	r24, 2
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <set_color+0x1c>
        DDRC |= (1<<3);
     a4e:	3b 9a       	sbi	0x07, 3	; 7
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     a52:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     a54:	83 ff       	sbrs	r24, 3
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <set_color+0x26>
        DDRC |= (1<<2);
     a58:	3a 9a       	sbi	0x07, 2	; 7
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     a5c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     a5e:	84 ff       	sbrs	r24, 4
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <set_color+0x30>
        DDRC |= (1<<5);
     a62:	3d 9a       	sbi	0x07, 5	; 7
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     a66:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     a68:	85 ff       	sbrs	r24, 5
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <set_color+0x3a>
        DDRC |= (1<<4);
     a6c:	3c 9a       	sbi	0x07, 4	; 7
     a6e:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     a70:	3c 98       	cbi	0x07, 4	; 7
     a72:	08 95       	ret

00000a74 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a74:	8c 01       	movw	r16, r24
     a76:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a78:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a7a:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a80:	98 e1       	ldi	r25, 0x18	; 24
     a82:	c9 2e       	mov	r12, r25
     a84:	29 e2       	ldi	r18, 0x29	; 41
     a86:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a88:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <kilo_state>
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e7 30       	cpi	r30, 0x07	; 7
     a90:	f1 05       	cpc	r31, r1
     a92:	d0 f7       	brcc	.-12     	; 0xa88 <kilo_start+0x14>
     a94:	ec 5c       	subi	r30, 0xCC	; 204
     a96:	ff 4f       	sbci	r31, 0xFF	; 255
     a98:	0c 94 26 09 	jmp	0x124c	; 0x124c <__tablejump2__>
            case SLEEPING:
                cli();
     a9c:	f8 94       	cli
                acomp_off();
     a9e:	80 b7       	in	r24, 0x30	; 48
     aa0:	87 7f       	andi	r24, 0xF7	; 247
     aa2:	80 bf       	out	0x30, r24	; 48
                adc_off();
     aa4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     aae:	14 b8       	out	0x04, r1	; 4
     ab0:	17 b8       	out	0x07, r1	; 7
     ab2:	1a b8       	out	0x0a, r1	; 10
     ab4:	15 b8       	out	0x05, r1	; 5
     ab6:	18 b8       	out	0x08, r1	; 8
     ab8:	1b b8       	out	0x0b, r1	; 11
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	a8 95       	wdr
     ac0:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     aca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ace:	80 64       	ori	r24, 0x40	; 64
     ad0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ad4:	83 b7       	in	r24, 0x33	; 51
     ad6:	81 7f       	andi	r24, 0xF1	; 241
     ad8:	84 60       	ori	r24, 0x04	; 4
     ada:	83 bf       	out	0x33, r24	; 51
                cli();
     adc:	f8 94       	cli
                sleep_enable();
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	83 bf       	out	0x33, r24	; 51
                sei();
     ae4:	78 94       	sei
                sleep_cpu();
     ae6:	88 95       	sleep
                sleep_disable();
     ae8:	83 b7       	in	r24, 0x33	; 51
     aea:	8e 7f       	andi	r24, 0xFE	; 254
     aec:	83 bf       	out	0x33, r24	; 51
                sei();
     aee:	78 94       	sei
                rx_busy = 0;
     af0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
                ports_on();
     af4:	52 9a       	sbi	0x0a, 2	; 10
     af6:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     af8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b02:	87 e5       	ldi	r24, 0x57	; 87
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <kilo_start+0x92>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <kilo_start+0x98>
     b0c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b0e:	80 b7       	in	r24, 0x30	; 48
     b10:	88 61       	ori	r24, 0x18	; 24
     b12:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1a:	ef e1       	ldi	r30, 0x1F	; 31
     b1c:	fe e4       	ldi	r31, 0x4E	; 78
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <kilo_start+0xaa>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <kilo_start+0xb0>
     b24:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     b26:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <kilo_start+0xbc>
     b2e:	50 c0       	rjmp	.+160    	; 0xbd0 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     b36:	ff ef       	ldi	r31, 0xFF	; 255
     b38:	20 e7       	ldi	r18, 0x70	; 112
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	f1 50       	subi	r31, 0x01	; 1
     b3e:	20 40       	sbci	r18, 0x00	; 0
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <kilo_start+0xc8>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <kilo_start+0xd2>
     b46:	00 00       	nop
     b48:	43 c0       	rjmp	.+134    	; 0xbd0 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     b50:	ef ec       	ldi	r30, 0xCF	; 207
     b52:	f7 e0       	ldi	r31, 0x07	; 7
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <kilo_start+0xe0>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <kilo_start+0xe6>
     b5a:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     b62:	ff ef       	ldi	r31, 0xFF	; 255
     b64:	21 ee       	ldi	r18, 0xE1	; 225
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	f1 50       	subi	r31, 0x01	; 1
     b6a:	20 40       	sbci	r18, 0x00	; 0
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <kilo_start+0xf4>
     b70:	2c c0       	rjmp	.+88     	; 0xbca <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     b72:	0e 94 0a 03 	call	0x614	; 0x614 <get_voltage>
                if(voltage > 682)
     b76:	8b 3a       	cpi	r24, 0xAB	; 171
     b78:	e2 e0       	ldi	r30, 0x02	; 2
     b7a:	9e 07       	cpc	r25, r30
     b7c:	24 f0       	brlt	.+8      	; 0xb86 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     b84:	81 cf       	rjmp	.-254    	; 0xa88 <kilo_start+0x14>
                else if(voltage > 648)
     b86:	89 38       	cpi	r24, 0x89	; 137
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	9f 07       	cpc	r25, r31
     b8c:	14 f0       	brlt	.+4      	; 0xb92 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b8e:	80 e3       	ldi	r24, 0x30	; 48
     b90:	f7 cf       	rjmp	.-18     	; 0xb80 <kilo_start+0x10c>
                else if(voltage > 614)
     b92:	87 36       	cpi	r24, 0x67	; 103
     b94:	92 40       	sbci	r25, 0x02	; 2
     b96:	14 f0       	brlt	.+4      	; 0xb9c <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b98:	8f e0       	ldi	r24, 0x0F	; 15
     b9a:	f2 cf       	rjmp	.-28     	; 0xb80 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	f0 cf       	rjmp	.-32     	; 0xb80 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     ba0:	48 99       	sbic	0x09, 0	; 9
     ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     baa:	8f ec       	ldi	r24, 0xCF	; 207
     bac:	97 e0       	ldi	r25, 0x07	; 7
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <kilo_start+0x13a>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <kilo_start+0x140>
     bb4:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	e1 ee       	ldi	r30, 0xE1	; 225
     bc0:	f4 e0       	ldi	r31, 0x04	; 4
     bc2:	91 50       	subi	r25, 0x01	; 1
     bc4:	e0 40       	sbci	r30, 0x00	; 0
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <kilo_start+0x14e>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <kilo_start+0x158>
     bcc:	00 00       	nop
     bce:	5c cf       	rjmp	.-328    	; 0xa88 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	d6 cf       	rjmp	.-84     	; 0xb80 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     bd4:	d1 11       	cpse	r29, r1
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <kilo_start+0x168>
                    setup();
     bd8:	f8 01       	movw	r30, r16
     bda:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     bdc:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <kilo_state>
     be0:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     be2:	f7 01       	movw	r30, r14
     be4:	09 95       	icall
                break;
     be6:	50 cf       	rjmp	.-352    	; 0xa88 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     be8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     bec:	81 11       	cpse	r24, r1
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bf0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bf4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     bf8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
     bfc:	45 cf       	rjmp	.-374    	; 0xa88 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     bfe:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     c02:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prev_motion>
     c06:	98 17       	cp	r25, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <kilo_start+0x198>
     c0a:	3e cf       	rjmp	.-388    	; 0xa88 <kilo_start+0x14>
                        prev_motion = cur_motion;
     c0c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     c10:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     c14:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	89 f4       	brne	.+34     	; 0xc3e <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c1c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c20:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c24:	8f e2       	ldi	r24, 0x2F	; 47
     c26:	95 e7       	ldi	r25, 0x75	; 117
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <kilo_start+0x1b4>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <kilo_start+0x1ba>
     c2e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     c30:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c34:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c38:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c3c:	25 cf       	rjmp	.-438    	; 0xa88 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c3e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c42:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c46:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	59 f4       	brne	.+22     	; 0xc64 <kilo_start+0x1f0>
     c4e:	ef e2       	ldi	r30, 0x2F	; 47
     c50:	f5 e7       	ldi	r31, 0x75	; 117
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <kilo_start+0x1de>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <kilo_start+0x1e4>
     c58:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c5a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c5e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c62:	10 c0       	rjmp	.+32     	; 0xc84 <kilo_start+0x210>
     c64:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c68:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c6c:	8f e2       	ldi	r24, 0x2F	; 47
     c6e:	95 e7       	ldi	r25, 0x75	; 117
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <kilo_start+0x1fc>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <kilo_start+0x202>
     c76:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c78:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <kilo_straight_right>
     c7c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c80:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c84:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c88:	ff ce       	rjmp	.-514    	; 0xa88 <kilo_start+0x14>

00000c8a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
    rx_timer_off();
     c98:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ca0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
     caa:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
    rx_busy = 0;
     cae:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    adc_trigger_high_gain();
     cb2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cb6:	93 ea       	ldi	r25, 0xA3	; 163
     cb8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cbc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     cf4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     cf8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d02:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_leadingbit>
     d06:	88 23       	and	r24, r24
     d08:	21 f1       	breq	.+72     	; 0xd52 <__vector_23+0x84>
        rx_timer_on();
     d0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d12:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     d16:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
        rx_leadingbit = 0;
     d1a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_leadingbit>
        if (rx_leadingbyte) {
     d1e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <__vector_23+0x5a>
     d26:	af c1       	rjmp	.+862    	; 0x1086 <__vector_23+0x3b8>
            adc_finish_conversion();
     d28:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d2c:	86 fd       	sbrc	r24, 6
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     d30:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d34:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d38:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <rx_dist+0x3>
     d3c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rx_dist+0x2>
            adc_trigger_low_gain();
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d46:	93 ea       	ldi	r25, 0xA3	; 163
     d48:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d4c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d50:	9a c1       	rjmp	.+820    	; 0x1086 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     d52:	c9 01       	movw	r24, r18
     d54:	87 58       	subi	r24, 0x87	; 135
     d56:	91 09       	sbc	r25, r1
     d58:	84 37       	cpi	r24, 0x74	; 116
     d5a:	99 40       	sbci	r25, 0x09	; 9
     d5c:	a0 f0       	brcs	.+40     	; 0xd86 <__vector_23+0xb8>
            rx_timer_off();
     d5e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d62:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d66:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     d6a:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
            rx_leadingbyte = 1;
     d6e:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
            rx_busy = 0;
     d72:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
            adc_trigger_high_gain();
     d76:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d7a:	83 ea       	ldi	r24, 0xA3	; 163
     d7c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d80:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d84:	80 c1       	rjmp	.+768    	; 0x1086 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d86:	26 58       	subi	r18, 0x86	; 134
     d88:	31 09       	sbc	r19, r1
     d8a:	a4 ef       	ldi	r26, 0xF4	; 244
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__umulhisi3>
     d92:	8c 01       	movw	r16, r24
     d94:	22 27       	eor	r18, r18
     d96:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d98:	08 30       	cpi	r16, 0x08	; 8
     d9a:	60 f4       	brcc	.+24     	; 0xdb4 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <__vector_23+0xd6>
     da2:	88 0f       	add	r24, r24
     da4:	0a 95       	dec	r16
     da6:	ea f7       	brpl	.-6      	; 0xda2 <__vector_23+0xd4>
     da8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     dac:	89 2b       	or	r24, r25
     dae:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <rx_bytevalue>
     db2:	69 c1       	rjmp	.+722    	; 0x1086 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     db4:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
                if (rx_leadingbyte) {
     db8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
     dbc:	88 23       	and	r24, r24
     dbe:	41 f1       	breq	.+80     	; 0xe10 <__vector_23+0x142>
                    adc_finish_conversion();
     dc0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dc4:	86 fd       	sbrc	r24, 6
     dc6:	fc cf       	rjmp	.-8      	; 0xdc0 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     dc8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dcc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     dd0:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <rx_dist+0x1>
     dd4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rx_dist>
                    adc_trigger_high_gain();
     dd8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ddc:	83 ea       	ldi	r24, 0xA3	; 163
     dde:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     de8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     dec:	99 23       	and	r25, r25
     dee:	59 f0       	breq	.+22     	; 0xe06 <__vector_23+0x138>
                        rx_timer_off();
     df0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     df8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dfc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
     e00:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
     e04:	40 c1       	rjmp	.+640    	; 0x1086 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e06:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <rx_leadingbyte>
                        rx_byteindex = 0;
     e0a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
     e0e:	3b c1       	rjmp	.+630    	; 0x1086 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     e10:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_byteindex>
     e14:	e8 2f       	mov	r30, r24
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	e8 58       	subi	r30, 0x88	; 136
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
     e20:	90 83       	st	Z, r25
                    rx_byteindex++;
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     e28:	8c 30       	cpi	r24, 0x0C	; 12
     e2a:	09 f0       	breq	.+2      	; 0xe2e <__vector_23+0x160>
     e2c:	2c c1       	rjmp	.+600    	; 0x1086 <__vector_23+0x3b8>
                        rx_timer_off();
     e2e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e3a:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
     e3e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e42:	00 91 82 01 	lds	r16, 0x0182	; 0x800182 <rx_msg+0xa>
     e46:	10 91 83 01 	lds	r17, 0x0183	; 0x800183 <rx_msg+0xb>
     e4a:	88 e7       	ldi	r24, 0x78	; 120
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 56 08 	call	0x10ac	; 0x10ac <message_crc>
     e52:	08 17       	cp	r16, r24
     e54:	19 07       	cpc	r17, r25
     e56:	09 f0       	breq	.+2      	; 0xe5a <__vector_23+0x18c>
     e58:	16 c1       	rjmp	.+556    	; 0x1086 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     e5a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_msg+0x9>
     e5e:	e7 fd       	sbrc	r30, 7
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     e62:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     e66:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     e6a:	6d e4       	ldi	r22, 0x4D	; 77
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	88 e7       	ldi	r24, 0x78	; 120
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	09 95       	icall
     e74:	08 c1       	rjmp	.+528    	; 0x1086 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e76:	88 e7       	ldi	r24, 0x78	; 120
     e78:	8e 0f       	add	r24, r30
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	30 f0       	brcs	.+12     	; 0xe8a <__vector_23+0x1bc>
        motors_off();
     e7e:	53 98       	cbi	0x0a, 3	; 10
     e80:	23 98       	cbi	0x04, 3	; 4
     e82:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e8a:	8e 2f       	mov	r24, r30
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	e0 58       	subi	r30, 0x80	; 128
     e92:	f1 09       	sbc	r31, r1
     e94:	eb 30       	cpi	r30, 0x0B	; 11
     e96:	f1 05       	cpc	r31, r1
     e98:	08 f0       	brcs	.+2      	; 0xe9c <__vector_23+0x1ce>
     e9a:	f5 c0       	rjmp	.+490    	; 0x1086 <__vector_23+0x3b8>
     e9c:	e5 5c       	subi	r30, 0xC5	; 197
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	0c 94 26 09 	jmp	0x124c	; 0x124c <__tablejump2__>
        case BOOT:
            tx_timer_off();
     ea4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     eae:	16 bc       	out	0x26, r1	; 38
            bootload();
     eb0:	e0 e0       	ldi	r30, 0x00	; 0
     eb2:	f0 e7       	ldi	r31, 0x70	; 112
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     eb6:	e0 e0       	ldi	r30, 0x00	; 0
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     ebc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <kilo_state>
     ec0:	e2 c0       	rjmp	.+452    	; 0x1086 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	b2 c0       	rjmp	.+356    	; 0x102a <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	b0 c0       	rjmp	.+352    	; 0x102a <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	ae c0       	rjmp	.+348    	; 0x102a <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     ece:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_23+0x20a>
     ed6:	d7 c0       	rjmp	.+430    	; 0x1086 <__vector_23+0x3b8>
     ed8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	09 f4       	brne	.+2      	; 0xee2 <__vector_23+0x214>
     ee0:	d2 c0       	rjmp	.+420    	; 0x1086 <__vector_23+0x3b8>
                motors_on();
     ee2:	53 9a       	sbi	0x0a, 3	; 10
     ee4:	23 9a       	sbi	0x04, 3	; 4
     ee6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eea:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	9c c0       	rjmp	.+312    	; 0x102a <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ef2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	09 f4       	brne	.+2      	; 0xefc <__vector_23+0x22e>
     efa:	4b c0       	rjmp	.+150    	; 0xf92 <__vector_23+0x2c4>
     efc:	80 f4       	brcc	.+32     	; 0xf1e <__vector_23+0x250>
     efe:	88 23       	and	r24, r24
     f00:	a9 f0       	breq	.+42     	; 0xf2c <__vector_23+0x25e>
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	09 f0       	breq	.+2      	; 0xf08 <__vector_23+0x23a>
     f06:	82 c0       	rjmp	.+260    	; 0x100c <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f08:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <rx_msg+0x1>
     f0c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_msg+0x2>
     f10:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <kilo_uid+0x1>
     f14:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <kilo_uid>
                    cur_motion = MOVE_STOP;
     f18:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
     f1c:	77 c0       	rjmp	.+238    	; 0x100c <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	09 f4       	brne	.+2      	; 0xf24 <__vector_23+0x256>
     f22:	49 c0       	rjmp	.+146    	; 0xfb6 <__vector_23+0x2e8>
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	09 f4       	brne	.+2      	; 0xf2a <__vector_23+0x25c>
     f28:	58 c0       	rjmp	.+176    	; 0xfda <__vector_23+0x30c>
     f2a:	70 c0       	rjmp	.+224    	; 0x100c <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     f2c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     f30:	86 30       	cpi	r24, 0x06	; 6
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_23+0x268>
     f34:	6b c0       	rjmp	.+214    	; 0x100c <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     f36:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <kilo_uid>
     f3a:	80 eb       	ldi	r24, 0xB0	; 176
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f42:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <kilo_uid+0x1>
     f46:	81 eb       	ldi	r24, 0xB1	; 177
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f4e:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_turn_left>
     f52:	85 e0       	ldi	r24, 0x05	; 5
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     f5a:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_turn_right>
     f5e:	89 e0       	ldi	r24, 0x09	; 9
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     f66:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_straight_left>
     f6a:	8c e0       	ldi	r24, 0x0C	; 12
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f72:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_straight_right>
     f76:	84 e1       	ldi	r24, 0x14	; 20
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <eeprom_write_byte>
                        motors_off();
     f7e:	53 98       	cbi	0x0a, 3	; 10
     f80:	23 98       	cbi	0x04, 3	; 4
     f82:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
     f90:	3d c0       	rjmp	.+122    	; 0x100c <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f92:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     f96:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_msg+0x3>
     f9a:	91 30       	cpi	r25, 0x01	; 1
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <__vector_23+0x2d8>
     f9e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <kilo_turn_left>
     fa2:	89 17       	cp	r24, r25
     fa4:	99 f1       	breq	.+102    	; 0x100c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fa6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_LEFT;
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     fb0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
     fb4:	2b c0       	rjmp	.+86     	; 0x100c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     fb6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     fba:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg+0x4>
     fbe:	92 30       	cpi	r25, 0x02	; 2
     fc0:	21 f4       	brne	.+8      	; 0xfca <__vector_23+0x2fc>
     fc2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_turn_right>
     fc6:	89 17       	cp	r24, r25
     fc8:	09 f1       	breq	.+66     	; 0x100c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fca:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     fd4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     fda:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <cur_motion>
     fde:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg+0x6>
     fe2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_msg+0x5>
     fe6:	23 30       	cpi	r18, 0x03	; 3
     fe8:	41 f4       	brne	.+16     	; 0xffa <__vector_23+0x32c>
     fea:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <kilo_straight_right>
     fee:	82 13       	cpse	r24, r18
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__vector_23+0x32c>
     ff2:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <kilo_straight_left>
     ff6:	92 17       	cp	r25, r18
     ff8:	49 f0       	breq	.+18     	; 0x100c <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ffa:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1004:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1008:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    100c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
    1010:	88 23       	and	r24, r24
    1012:	c9 f1       	breq	.+114    	; 0x1086 <__vector_23+0x3b8>
    1014:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    1018:	86 30       	cpi	r24, 0x06	; 6
    101a:	a9 f1       	breq	.+106    	; 0x1086 <__vector_23+0x3b8>
                motors_on();
    101c:	53 9a       	sbi	0x0a, 3	; 10
    101e:	23 9a       	sbi	0x04, 3	; 4
    1020:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1024:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    102e:	2b c0       	rjmp	.+86     	; 0x1086 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1030:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
    1034:	86 30       	cpi	r24, 0x06	; 6
    1036:	81 f0       	breq	.+32     	; 0x1058 <__vector_23+0x38a>
                motors_on();
    1038:	53 9a       	sbi	0x0a, 3	; 10
    103a:	23 9a       	sbi	0x04, 3	; 4
    103c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1040:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 1b 05 	call	0xa36	; 0xa36 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    104a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
    104e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                kilo_state = MOVING;
    1052:	86 e0       	ldi	r24, 0x06	; 6
    1054:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	00 90 78 01 	lds	r0, 0x0178	; 0x800178 <rx_msg>
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <__vector_23+0x398>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <__vector_23+0x394>
    106a:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <kilo_uid>
    106e:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <kilo_uid+0x1>
    1072:	82 23       	and	r24, r18
    1074:	93 23       	and	r25, r19
    1076:	89 2b       	or	r24, r25
    1078:	21 f0       	breq	.+8      	; 0x1082 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cur_motion>
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1082:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
                    }
                }
            }
        }
    }
}
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    10ac:	fc 01       	movw	r30, r24
    10ae:	9c 01       	movw	r18, r24
    10b0:	26 5f       	subi	r18, 0xF6	; 246
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    10b8:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    10ba:	84 27       	eor	r24, r20
    10bc:	08 2e       	mov	r0, r24
    10be:	82 95       	swap	r24
    10c0:	80 7f       	andi	r24, 0xF0	; 240
    10c2:	80 25       	eor	r24, r0
    10c4:	09 2e       	mov	r0, r25
    10c6:	98 2f       	mov	r25, r24
    10c8:	82 95       	swap	r24
    10ca:	8f 70       	andi	r24, 0x0F	; 15
    10cc:	08 26       	eor	r0, r24
    10ce:	86 95       	lsr	r24
    10d0:	98 27       	eor	r25, r24
    10d2:	89 27       	eor	r24, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	88 0f       	add	r24, r24
    10d8:	88 0f       	add	r24, r24
    10da:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    10dc:	e2 17       	cp	r30, r18
    10de:	f3 07       	cpc	r31, r19
    10e0:	59 f7       	brne	.-42     	; 0x10b8 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    10e2:	08 95       	ret

000010e4 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    10e4:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    10e6:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    10e8:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    10ea:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <tx_mask>
    or tmpreg1, ddrreg
    10ee:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    10f0:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10f4:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    10f8:	20 30       	cpi	r18, 0x00	; 0
    10fa:	29 f0       	breq	.+10     	; 0x1106 <message_send+0x22>
    10fc:	00 00       	nop
    10fe:	25 b1       	in	r18, 0x05	; 5
    1100:	23 2b       	or	r18, r19
    1102:	25 b9       	out	0x05, r18	; 5
    1104:	04 c0       	rjmp	.+8      	; 0x110e <message_send+0x2a>
    1106:	00 00       	nop
    1108:	00 00       	nop
    110a:	00 00       	nop
    110c:	00 c0       	rjmp	.+0      	; 0x110e <message_send+0x2a>
    110e:	00 00       	nop
    1110:	00 00       	nop
    1112:	00 00       	nop
    1114:	30 95       	com	r19
    1116:	25 b1       	in	r18, 0x05	; 5
    1118:	23 23       	and	r18, r19
    111a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    111c:	2e ea       	ldi	r18, 0xAE	; 174
    111e:	2a 95       	dec	r18
    1120:	f1 f7       	brne	.-4      	; 0x111e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1122:	2b ee       	ldi	r18, 0xEB	; 235

00001124 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1124:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1126:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1128:	0a c0       	rjmp	.+20     	; 0x113e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    112a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    112c:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    1130:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1132:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1134:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1136:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1138:	0f be       	out	0x3f, r0	; 63
    return 0
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	08 95       	ret

0000113e <nocollision>:
nocollision:
    nop
    113e:	00 00       	nop
    dec tmpreg1
    1140:	2a 95       	dec	r18
    brne checkcollision
    1142:	81 f7       	brne	.-32     	; 0x1124 <checkcollision>

    ldi tmpreg1, 0x01
    1144:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1146:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    114a:	20 30       	cpi	r18, 0x00	; 0
    114c:	29 f0       	breq	.+10     	; 0x1158 <nocollision+0x1a>
    114e:	00 00       	nop
    1150:	25 b1       	in	r18, 0x05	; 5
    1152:	23 2b       	or	r18, r19
    1154:	25 b9       	out	0x05, r18	; 5
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <nocollision+0x22>
    1158:	00 00       	nop
    115a:	00 00       	nop
    115c:	00 00       	nop
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <nocollision+0x22>
    1160:	00 00       	nop
    1162:	00 00       	nop
    1164:	00 00       	nop
    1166:	30 95       	com	r19
    1168:	25 b1       	in	r18, 0x05	; 5
    116a:	23 23       	and	r18, r19
    116c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    116e:	00 00       	nop
    1170:	24 e5       	ldi	r18, 0x54	; 84
    1172:	2a 95       	dec	r18
    1174:	f1 f7       	brne	.-4      	; 0x1172 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1176:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1178:	8c e0       	ldi	r24, 0x0C	; 12

0000117a <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    117a:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    117c:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    117e:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1180:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1182:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1184:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1186:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1188:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    118a:	50 e0       	ldi	r21, 0x00	; 0

0000118c <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    118c:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    118e:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1190:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1192:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1194:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    1198:	20 30       	cpi	r18, 0x00	; 0
    119a:	29 f0       	breq	.+10     	; 0x11a6 <sendbit+0x1a>
    119c:	00 00       	nop
    119e:	25 b1       	in	r18, 0x05	; 5
    11a0:	23 2b       	or	r18, r19
    11a2:	25 b9       	out	0x05, r18	; 5
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <sendbit+0x22>
    11a6:	00 00       	nop
    11a8:	00 00       	nop
    11aa:	00 00       	nop
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <sendbit+0x22>
    11ae:	00 00       	nop
    11b0:	00 00       	nop
    11b2:	00 00       	nop
    11b4:	30 95       	com	r19
    11b6:	25 b1       	in	r18, 0x05	; 5
    11b8:	23 23       	and	r18, r19
    11ba:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    11bc:	00 00       	nop
    11be:	21 e5       	ldi	r18, 0x51	; 81
    11c0:	2a 95       	dec	r18
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    11c4:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    11c6:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    11c8:	9a 95       	dec	r25
    brne sendbit
    11ca:	01 f7       	brne	.-64     	; 0x118c <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    11cc:	8a 95       	dec	r24
    brne sendbyte
    11ce:	a9 f6       	brne	.-86     	; 0x117a <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    11d0:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    11d2:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    11d4:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11d6:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11d8:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    11dc:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11de:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11e0:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11e2:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11e4:	0f be       	out	0x3f, r0	; 63
    return 1
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	08 95       	ret

000011ea <main>:
   }
}
int main() {
  kilo_init();
    11ea:	0e 94 42 01 	call	0x284	; 0x284 <kilo_init>
  kilo_message_rx = message_rx;
    11ee:	81 e7       	ldi	r24, 0x71	; 113
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <kilo_message_rx+0x1>
    11f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <kilo_message_rx>
  kilo_message_tx = message_tx;
    11fa:	80 e8       	ldi	r24, 0x80	; 128
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_tx+0x1>
    1202:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_tx>
  kilo_message_tx_success = message_tx_success;
    1206:	83 e8       	ldi	r24, 0x83	; 131
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx_success+0x1>
    120e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx_success>
  kilo_start(setup, loop);
    1212:	61 ec       	ldi	r22, 0xC1	; 193
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	8a e8       	ldi	r24, 0x8A	; 138
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 3a 05 	call	0xa74	; 0xa74 <kilo_start>
  return 0;
}
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	08 95       	ret

00001224 <__divmodhi4>:
    1224:	97 fb       	bst	r25, 7
    1226:	07 2e       	mov	r0, r23
    1228:	16 f4       	brtc	.+4      	; 0x122e <__divmodhi4+0xa>
    122a:	00 94       	com	r0
    122c:	07 d0       	rcall	.+14     	; 0x123c <__divmodhi4_neg1>
    122e:	77 fd       	sbrc	r23, 7
    1230:	09 d0       	rcall	.+18     	; 0x1244 <__divmodhi4_neg2>
    1232:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    1236:	07 fc       	sbrc	r0, 7
    1238:	05 d0       	rcall	.+10     	; 0x1244 <__divmodhi4_neg2>
    123a:	3e f4       	brtc	.+14     	; 0x124a <__divmodhi4_exit>

0000123c <__divmodhi4_neg1>:
    123c:	90 95       	com	r25
    123e:	81 95       	neg	r24
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__divmodhi4_neg2>:
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255

0000124a <__divmodhi4_exit>:
    124a:	08 95       	ret

0000124c <__tablejump2__>:
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	05 90       	lpm	r0, Z+
    1252:	f4 91       	lpm	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	09 94       	ijmp

00001258 <__umulhisi3>:
    1258:	a2 9f       	mul	r26, r18
    125a:	b0 01       	movw	r22, r0
    125c:	b3 9f       	mul	r27, r19
    125e:	c0 01       	movw	r24, r0
    1260:	a3 9f       	mul	r26, r19
    1262:	70 0d       	add	r23, r0
    1264:	81 1d       	adc	r24, r1
    1266:	11 24       	eor	r1, r1
    1268:	91 1d       	adc	r25, r1
    126a:	b2 9f       	mul	r27, r18
    126c:	70 0d       	add	r23, r0
    126e:	81 1d       	adc	r24, r1
    1270:	11 24       	eor	r1, r1
    1272:	91 1d       	adc	r25, r1
    1274:	08 95       	ret

00001276 <__udivmodhi4>:
    1276:	aa 1b       	sub	r26, r26
    1278:	bb 1b       	sub	r27, r27
    127a:	51 e1       	ldi	r21, 0x11	; 17
    127c:	07 c0       	rjmp	.+14     	; 0x128c <__udivmodhi4_ep>

0000127e <__udivmodhi4_loop>:
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	a6 17       	cp	r26, r22
    1284:	b7 07       	cpc	r27, r23
    1286:	10 f0       	brcs	.+4      	; 0x128c <__udivmodhi4_ep>
    1288:	a6 1b       	sub	r26, r22
    128a:	b7 0b       	sbc	r27, r23

0000128c <__udivmodhi4_ep>:
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	5a 95       	dec	r21
    1292:	a9 f7       	brne	.-22     	; 0x127e <__udivmodhi4_loop>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	08 95       	ret

0000129e <__subsf3>:
    129e:	50 58       	subi	r21, 0x80	; 128

000012a0 <__addsf3>:
    12a0:	bb 27       	eor	r27, r27
    12a2:	aa 27       	eor	r26, r26
    12a4:	0e 94 67 09 	call	0x12ce	; 0x12ce <__addsf3x>
    12a8:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_round>
    12ac:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_pscA>
    12b0:	38 f0       	brcs	.+14     	; 0x12c0 <__addsf3+0x20>
    12b2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscB>
    12b6:	20 f0       	brcs	.+8      	; 0x12c0 <__addsf3+0x20>
    12b8:	39 f4       	brne	.+14     	; 0x12c8 <__addsf3+0x28>
    12ba:	9f 3f       	cpi	r25, 0xFF	; 255
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <__addsf3+0x24>
    12be:	26 f4       	brtc	.+8      	; 0x12c8 <__addsf3+0x28>
    12c0:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>
    12c4:	0e f4       	brtc	.+2      	; 0x12c8 <__addsf3+0x28>
    12c6:	e0 95       	com	r30
    12c8:	e7 fb       	bst	r30, 7
    12ca:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>

000012ce <__addsf3x>:
    12ce:	e9 2f       	mov	r30, r25
    12d0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fp_split3>
    12d4:	58 f3       	brcs	.-42     	; 0x12ac <__addsf3+0xc>
    12d6:	ba 17       	cp	r27, r26
    12d8:	62 07       	cpc	r22, r18
    12da:	73 07       	cpc	r23, r19
    12dc:	84 07       	cpc	r24, r20
    12de:	95 07       	cpc	r25, r21
    12e0:	20 f0       	brcs	.+8      	; 0x12ea <__addsf3x+0x1c>
    12e2:	79 f4       	brne	.+30     	; 0x1302 <__addsf3x+0x34>
    12e4:	a6 f5       	brtc	.+104    	; 0x134e <__addsf3x+0x80>
    12e6:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_zero>
    12ea:	0e f4       	brtc	.+2      	; 0x12ee <__addsf3x+0x20>
    12ec:	e0 95       	com	r30
    12ee:	0b 2e       	mov	r0, r27
    12f0:	ba 2f       	mov	r27, r26
    12f2:	a0 2d       	mov	r26, r0
    12f4:	0b 01       	movw	r0, r22
    12f6:	b9 01       	movw	r22, r18
    12f8:	90 01       	movw	r18, r0
    12fa:	0c 01       	movw	r0, r24
    12fc:	ca 01       	movw	r24, r20
    12fe:	a0 01       	movw	r20, r0
    1300:	11 24       	eor	r1, r1
    1302:	ff 27       	eor	r31, r31
    1304:	59 1b       	sub	r21, r25
    1306:	99 f0       	breq	.+38     	; 0x132e <__addsf3x+0x60>
    1308:	59 3f       	cpi	r21, 0xF9	; 249
    130a:	50 f4       	brcc	.+20     	; 0x1320 <__addsf3x+0x52>
    130c:	50 3e       	cpi	r21, 0xE0	; 224
    130e:	68 f1       	brcs	.+90     	; 0x136a <__addsf3x+0x9c>
    1310:	1a 16       	cp	r1, r26
    1312:	f0 40       	sbci	r31, 0x00	; 0
    1314:	a2 2f       	mov	r26, r18
    1316:	23 2f       	mov	r18, r19
    1318:	34 2f       	mov	r19, r20
    131a:	44 27       	eor	r20, r20
    131c:	58 5f       	subi	r21, 0xF8	; 248
    131e:	f3 cf       	rjmp	.-26     	; 0x1306 <__addsf3x+0x38>
    1320:	46 95       	lsr	r20
    1322:	37 95       	ror	r19
    1324:	27 95       	ror	r18
    1326:	a7 95       	ror	r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	53 95       	inc	r21
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__addsf3x+0x52>
    132e:	7e f4       	brtc	.+30     	; 0x134e <__addsf3x+0x80>
    1330:	1f 16       	cp	r1, r31
    1332:	ba 0b       	sbc	r27, r26
    1334:	62 0b       	sbc	r22, r18
    1336:	73 0b       	sbc	r23, r19
    1338:	84 0b       	sbc	r24, r20
    133a:	ba f0       	brmi	.+46     	; 0x136a <__addsf3x+0x9c>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	a1 f0       	breq	.+40     	; 0x1368 <__addsf3x+0x9a>
    1340:	ff 0f       	add	r31, r31
    1342:	bb 1f       	adc	r27, r27
    1344:	66 1f       	adc	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	c2 f7       	brpl	.-16     	; 0x133c <__addsf3x+0x6e>
    134c:	0e c0       	rjmp	.+28     	; 0x136a <__addsf3x+0x9c>
    134e:	ba 0f       	add	r27, r26
    1350:	62 1f       	adc	r22, r18
    1352:	73 1f       	adc	r23, r19
    1354:	84 1f       	adc	r24, r20
    1356:	48 f4       	brcc	.+18     	; 0x136a <__addsf3x+0x9c>
    1358:	87 95       	ror	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b7 95       	ror	r27
    1360:	f7 95       	ror	r31
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__addsf3x+0x9a>
    1366:	b0 cf       	rjmp	.-160    	; 0x12c8 <__addsf3+0x28>
    1368:	93 95       	inc	r25
    136a:	88 0f       	add	r24, r24
    136c:	08 f0       	brcs	.+2      	; 0x1370 <__addsf3x+0xa2>
    136e:	99 27       	eor	r25, r25
    1370:	ee 0f       	add	r30, r30
    1372:	97 95       	ror	r25
    1374:	87 95       	ror	r24
    1376:	08 95       	ret

00001378 <__divsf3>:
    1378:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__divsf3x>
    137c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_round>
    1380:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscB>
    1384:	58 f0       	brcs	.+22     	; 0x139c <__divsf3+0x24>
    1386:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_pscA>
    138a:	40 f0       	brcs	.+16     	; 0x139c <__divsf3+0x24>
    138c:	29 f4       	brne	.+10     	; 0x1398 <__divsf3+0x20>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	29 f0       	breq	.+10     	; 0x139c <__divsf3+0x24>
    1392:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1396:	51 11       	cpse	r21, r1
    1398:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_szero>
    139c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>

000013a0 <__divsf3x>:
    13a0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fp_split3>
    13a4:	68 f3       	brcs	.-38     	; 0x1380 <__divsf3+0x8>

000013a6 <__divsf3_pse>:
    13a6:	99 23       	and	r25, r25
    13a8:	b1 f3       	breq	.-20     	; 0x1396 <__divsf3+0x1e>
    13aa:	55 23       	and	r21, r21
    13ac:	91 f3       	breq	.-28     	; 0x1392 <__divsf3+0x1a>
    13ae:	95 1b       	sub	r25, r21
    13b0:	55 0b       	sbc	r21, r21
    13b2:	bb 27       	eor	r27, r27
    13b4:	aa 27       	eor	r26, r26
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	38 f0       	brcs	.+14     	; 0x13cc <__divsf3_pse+0x26>
    13be:	9f 5f       	subi	r25, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	44 1f       	adc	r20, r20
    13c8:	aa 1f       	adc	r26, r26
    13ca:	a9 f3       	breq	.-22     	; 0x13b6 <__divsf3_pse+0x10>
    13cc:	35 d0       	rcall	.+106    	; 0x1438 <__divsf3_pse+0x92>
    13ce:	0e 2e       	mov	r0, r30
    13d0:	3a f0       	brmi	.+14     	; 0x13e0 <__divsf3_pse+0x3a>
    13d2:	e0 e8       	ldi	r30, 0x80	; 128
    13d4:	32 d0       	rcall	.+100    	; 0x143a <__divsf3_pse+0x94>
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	e6 95       	lsr	r30
    13dc:	00 1c       	adc	r0, r0
    13de:	ca f7       	brpl	.-14     	; 0x13d2 <__divsf3_pse+0x2c>
    13e0:	2b d0       	rcall	.+86     	; 0x1438 <__divsf3_pse+0x92>
    13e2:	fe 2f       	mov	r31, r30
    13e4:	29 d0       	rcall	.+82     	; 0x1438 <__divsf3_pse+0x92>
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	bb 1f       	adc	r27, r27
    13ee:	26 17       	cp	r18, r22
    13f0:	37 07       	cpc	r19, r23
    13f2:	48 07       	cpc	r20, r24
    13f4:	ab 07       	cpc	r26, r27
    13f6:	b0 e8       	ldi	r27, 0x80	; 128
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__divsf3_pse+0x56>
    13fa:	bb 0b       	sbc	r27, r27
    13fc:	80 2d       	mov	r24, r0
    13fe:	bf 01       	movw	r22, r30
    1400:	ff 27       	eor	r31, r31
    1402:	93 58       	subi	r25, 0x83	; 131
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	3a f0       	brmi	.+14     	; 0x1416 <__divsf3_pse+0x70>
    1408:	9e 3f       	cpi	r25, 0xFE	; 254
    140a:	51 05       	cpc	r21, r1
    140c:	78 f0       	brcs	.+30     	; 0x142c <__divsf3_pse+0x86>
    140e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1412:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_szero>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	e4 f3       	brlt	.-8      	; 0x1412 <__divsf3_pse+0x6c>
    141a:	98 3e       	cpi	r25, 0xE8	; 232
    141c:	d4 f3       	brlt	.-12     	; 0x1412 <__divsf3_pse+0x6c>
    141e:	86 95       	lsr	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b7 95       	ror	r27
    1426:	f7 95       	ror	r31
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	c9 f7       	brne	.-14     	; 0x141e <__divsf3_pse+0x78>
    142c:	88 0f       	add	r24, r24
    142e:	91 1d       	adc	r25, r1
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret
    1438:	e1 e0       	ldi	r30, 0x01	; 1
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	bb 1f       	adc	r27, r27
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	ba 07       	cpc	r27, r26
    144a:	20 f0       	brcs	.+8      	; 0x1454 <__divsf3_pse+0xae>
    144c:	62 1b       	sub	r22, r18
    144e:	73 0b       	sbc	r23, r19
    1450:	84 0b       	sbc	r24, r20
    1452:	ba 0b       	sbc	r27, r26
    1454:	ee 1f       	adc	r30, r30
    1456:	88 f7       	brcc	.-30     	; 0x143a <__divsf3_pse+0x94>
    1458:	e0 95       	com	r30
    145a:	08 95       	ret

0000145c <__fixsfsi>:
    145c:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    1460:	68 94       	set
    1462:	b1 11       	cpse	r27, r1
    1464:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_szero>
    1468:	08 95       	ret

0000146a <__fixunssfsi>:
    146a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__fp_splitA>
    146e:	88 f0       	brcs	.+34     	; 0x1492 <__fixunssfsi+0x28>
    1470:	9f 57       	subi	r25, 0x7F	; 127
    1472:	98 f0       	brcs	.+38     	; 0x149a <__fixunssfsi+0x30>
    1474:	b9 2f       	mov	r27, r25
    1476:	99 27       	eor	r25, r25
    1478:	b7 51       	subi	r27, 0x17	; 23
    147a:	b0 f0       	brcs	.+44     	; 0x14a8 <__fixunssfsi+0x3e>
    147c:	e1 f0       	breq	.+56     	; 0x14b6 <__fixunssfsi+0x4c>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	1a f0       	brmi	.+6      	; 0x148e <__fixunssfsi+0x24>
    1488:	ba 95       	dec	r27
    148a:	c9 f7       	brne	.-14     	; 0x147e <__fixunssfsi+0x14>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <__fixunssfsi+0x4c>
    148e:	b1 30       	cpi	r27, 0x01	; 1
    1490:	91 f0       	breq	.+36     	; 0x14b6 <__fixunssfsi+0x4c>
    1492:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__fp_zero>
    1496:	b1 e0       	ldi	r27, 0x01	; 1
    1498:	08 95       	ret
    149a:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_zero>
    149e:	67 2f       	mov	r22, r23
    14a0:	78 2f       	mov	r23, r24
    14a2:	88 27       	eor	r24, r24
    14a4:	b8 5f       	subi	r27, 0xF8	; 248
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <__fixunssfsi+0x4c>
    14a8:	b9 3f       	cpi	r27, 0xF9	; 249
    14aa:	cc f3       	brlt	.-14     	; 0x149e <__fixunssfsi+0x34>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b3 95       	inc	r27
    14b4:	d9 f7       	brne	.-10     	; 0x14ac <__fixunssfsi+0x42>
    14b6:	3e f4       	brtc	.+14     	; 0x14c6 <__fixunssfsi+0x5c>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	08 95       	ret

000014c8 <__floatunsisf>:
    14c8:	e8 94       	clt
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <__floatsisf+0x12>

000014cc <__floatsisf>:
    14cc:	97 fb       	bst	r25, 7
    14ce:	3e f4       	brtc	.+14     	; 0x14de <__floatsisf+0x12>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	99 23       	and	r25, r25
    14e0:	a9 f0       	breq	.+42     	; 0x150c <__floatsisf+0x40>
    14e2:	f9 2f       	mov	r31, r25
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	bb 27       	eor	r27, r27
    14e8:	93 95       	inc	r25
    14ea:	f6 95       	lsr	r31
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f1 11       	cpse	r31, r1
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <__floatsisf+0x1c>
    14f8:	fa f4       	brpl	.+62     	; 0x1538 <__floatsisf+0x6c>
    14fa:	bb 0f       	add	r27, r27
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__floatsisf+0x36>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <__floatsisf+0x6c>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <__floatsisf+0x6c>
    150c:	88 23       	and	r24, r24
    150e:	11 f0       	breq	.+4      	; 0x1514 <__floatsisf+0x48>
    1510:	96 e9       	ldi	r25, 0x96	; 150
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <__floatsisf+0x6a>
    1514:	77 23       	and	r23, r23
    1516:	21 f0       	breq	.+8      	; 0x1520 <__floatsisf+0x54>
    1518:	9e e8       	ldi	r25, 0x8E	; 142
    151a:	87 2f       	mov	r24, r23
    151c:	76 2f       	mov	r23, r22
    151e:	05 c0       	rjmp	.+10     	; 0x152a <__floatsisf+0x5e>
    1520:	66 23       	and	r22, r22
    1522:	71 f0       	breq	.+28     	; 0x1540 <__floatsisf+0x74>
    1524:	96 e8       	ldi	r25, 0x86	; 134
    1526:	86 2f       	mov	r24, r22
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	2a f0       	brmi	.+10     	; 0x1538 <__floatsisf+0x6c>
    152e:	9a 95       	dec	r25
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	da f7       	brpl	.-10     	; 0x152e <__floatsisf+0x62>
    1538:	88 0f       	add	r24, r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__fp_inf>:
    1542:	97 f9       	bld	r25, 7
    1544:	9f 67       	ori	r25, 0x7F	; 127
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	08 95       	ret

0000154e <__fp_nan>:
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	80 ec       	ldi	r24, 0xC0	; 192
    1552:	08 95       	ret

00001554 <__fp_pscA>:
    1554:	00 24       	eor	r0, r0
    1556:	0a 94       	dec	r0
    1558:	16 16       	cp	r1, r22
    155a:	17 06       	cpc	r1, r23
    155c:	18 06       	cpc	r1, r24
    155e:	09 06       	cpc	r0, r25
    1560:	08 95       	ret

00001562 <__fp_pscB>:
    1562:	00 24       	eor	r0, r0
    1564:	0a 94       	dec	r0
    1566:	12 16       	cp	r1, r18
    1568:	13 06       	cpc	r1, r19
    156a:	14 06       	cpc	r1, r20
    156c:	05 06       	cpc	r0, r21
    156e:	08 95       	ret

00001570 <__fp_round>:
    1570:	09 2e       	mov	r0, r25
    1572:	03 94       	inc	r0
    1574:	00 0c       	add	r0, r0
    1576:	11 f4       	brne	.+4      	; 0x157c <__fp_round+0xc>
    1578:	88 23       	and	r24, r24
    157a:	52 f0       	brmi	.+20     	; 0x1590 <__fp_round+0x20>
    157c:	bb 0f       	add	r27, r27
    157e:	40 f4       	brcc	.+16     	; 0x1590 <__fp_round+0x20>
    1580:	bf 2b       	or	r27, r31
    1582:	11 f4       	brne	.+4      	; 0x1588 <__fp_round+0x18>
    1584:	60 ff       	sbrs	r22, 0
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <__fp_round+0x20>
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	08 95       	ret

00001592 <__fp_split3>:
    1592:	57 fd       	sbrc	r21, 7
    1594:	90 58       	subi	r25, 0x80	; 128
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	59 f0       	breq	.+22     	; 0x15b2 <__fp_splitA+0x10>
    159c:	5f 3f       	cpi	r21, 0xFF	; 255
    159e:	71 f0       	breq	.+28     	; 0x15bc <__fp_splitA+0x1a>
    15a0:	47 95       	ror	r20

000015a2 <__fp_splitA>:
    15a2:	88 0f       	add	r24, r24
    15a4:	97 fb       	bst	r25, 7
    15a6:	99 1f       	adc	r25, r25
    15a8:	61 f0       	breq	.+24     	; 0x15c2 <__fp_splitA+0x20>
    15aa:	9f 3f       	cpi	r25, 0xFF	; 255
    15ac:	79 f0       	breq	.+30     	; 0x15cc <__fp_splitA+0x2a>
    15ae:	87 95       	ror	r24
    15b0:	08 95       	ret
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	14 06       	cpc	r1, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	f2 cf       	rjmp	.-28     	; 0x15a0 <__fp_split3+0xe>
    15bc:	46 95       	lsr	r20
    15be:	f1 df       	rcall	.-30     	; 0x15a2 <__fp_splitA>
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <__fp_splitA+0x30>
    15c2:	16 16       	cp	r1, r22
    15c4:	17 06       	cpc	r1, r23
    15c6:	18 06       	cpc	r1, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	f1 cf       	rjmp	.-30     	; 0x15ae <__fp_splitA+0xc>
    15cc:	86 95       	lsr	r24
    15ce:	71 05       	cpc	r23, r1
    15d0:	61 05       	cpc	r22, r1
    15d2:	08 94       	sec
    15d4:	08 95       	ret

000015d6 <__fp_zero>:
    15d6:	e8 94       	clt

000015d8 <__fp_szero>:
    15d8:	bb 27       	eor	r27, r27
    15da:	66 27       	eor	r22, r22
    15dc:	77 27       	eor	r23, r23
    15de:	cb 01       	movw	r24, r22
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret

000015e4 <__mulsf3>:
    15e4:	0e 94 05 0b 	call	0x160a	; 0x160a <__mulsf3x>
    15e8:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_round>
    15ec:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_pscA>
    15f0:	38 f0       	brcs	.+14     	; 0x1600 <__mulsf3+0x1c>
    15f2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscB>
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <__mulsf3+0x1c>
    15f8:	95 23       	and	r25, r21
    15fa:	11 f0       	breq	.+4      	; 0x1600 <__mulsf3+0x1c>
    15fc:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1600:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__fp_nan>
    1604:	11 24       	eor	r1, r1
    1606:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_szero>

0000160a <__mulsf3x>:
    160a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fp_split3>
    160e:	70 f3       	brcs	.-36     	; 0x15ec <__mulsf3+0x8>

00001610 <__mulsf3_pse>:
    1610:	95 9f       	mul	r25, r21
    1612:	c1 f3       	breq	.-16     	; 0x1604 <__mulsf3+0x20>
    1614:	95 0f       	add	r25, r21
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	55 1f       	adc	r21, r21
    161a:	62 9f       	mul	r22, r18
    161c:	f0 01       	movw	r30, r0
    161e:	72 9f       	mul	r23, r18
    1620:	bb 27       	eor	r27, r27
    1622:	f0 0d       	add	r31, r0
    1624:	b1 1d       	adc	r27, r1
    1626:	63 9f       	mul	r22, r19
    1628:	aa 27       	eor	r26, r26
    162a:	f0 0d       	add	r31, r0
    162c:	b1 1d       	adc	r27, r1
    162e:	aa 1f       	adc	r26, r26
    1630:	64 9f       	mul	r22, r20
    1632:	66 27       	eor	r22, r22
    1634:	b0 0d       	add	r27, r0
    1636:	a1 1d       	adc	r26, r1
    1638:	66 1f       	adc	r22, r22
    163a:	82 9f       	mul	r24, r18
    163c:	22 27       	eor	r18, r18
    163e:	b0 0d       	add	r27, r0
    1640:	a1 1d       	adc	r26, r1
    1642:	62 1f       	adc	r22, r18
    1644:	73 9f       	mul	r23, r19
    1646:	b0 0d       	add	r27, r0
    1648:	a1 1d       	adc	r26, r1
    164a:	62 1f       	adc	r22, r18
    164c:	83 9f       	mul	r24, r19
    164e:	a0 0d       	add	r26, r0
    1650:	61 1d       	adc	r22, r1
    1652:	22 1f       	adc	r18, r18
    1654:	74 9f       	mul	r23, r20
    1656:	33 27       	eor	r19, r19
    1658:	a0 0d       	add	r26, r0
    165a:	61 1d       	adc	r22, r1
    165c:	23 1f       	adc	r18, r19
    165e:	84 9f       	mul	r24, r20
    1660:	60 0d       	add	r22, r0
    1662:	21 1d       	adc	r18, r1
    1664:	82 2f       	mov	r24, r18
    1666:	76 2f       	mov	r23, r22
    1668:	6a 2f       	mov	r22, r26
    166a:	11 24       	eor	r1, r1
    166c:	9f 57       	subi	r25, 0x7F	; 127
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	9a f0       	brmi	.+38     	; 0x1698 <__mulsf3_pse+0x88>
    1672:	f1 f0       	breq	.+60     	; 0x16b0 <__mulsf3_pse+0xa0>
    1674:	88 23       	and	r24, r24
    1676:	4a f0       	brmi	.+18     	; 0x168a <__mulsf3_pse+0x7a>
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	bb 1f       	adc	r27, r27
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	a9 f7       	brne	.-22     	; 0x1674 <__mulsf3_pse+0x64>
    168a:	9e 3f       	cpi	r25, 0xFE	; 254
    168c:	51 05       	cpc	r21, r1
    168e:	80 f0       	brcs	.+32     	; 0x16b0 <__mulsf3_pse+0xa0>
    1690:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_inf>
    1694:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_szero>
    1698:	5f 3f       	cpi	r21, 0xFF	; 255
    169a:	e4 f3       	brlt	.-8      	; 0x1694 <__mulsf3_pse+0x84>
    169c:	98 3e       	cpi	r25, 0xE8	; 232
    169e:	d4 f3       	brlt	.-12     	; 0x1694 <__mulsf3_pse+0x84>
    16a0:	86 95       	lsr	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	f7 95       	ror	r31
    16aa:	e7 95       	ror	r30
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	c1 f7       	brne	.-16     	; 0x16a0 <__mulsf3_pse+0x90>
    16b0:	fe 2b       	or	r31, r30
    16b2:	88 0f       	add	r24, r24
    16b4:	91 1d       	adc	r25, r1
    16b6:	96 95       	lsr	r25
    16b8:	87 95       	ror	r24
    16ba:	97 f9       	bld	r25, 7
    16bc:	08 95       	ret

000016be <eeprom_read_byte>:
    16be:	f9 99       	sbic	0x1f, 1	; 31
    16c0:	fe cf       	rjmp	.-4      	; 0x16be <eeprom_read_byte>
    16c2:	92 bd       	out	0x22, r25	; 34
    16c4:	81 bd       	out	0x21, r24	; 33
    16c6:	f8 9a       	sbi	0x1f, 0	; 31
    16c8:	99 27       	eor	r25, r25
    16ca:	80 b5       	in	r24, 0x20	; 32
    16cc:	08 95       	ret

000016ce <eeprom_write_byte>:
    16ce:	26 2f       	mov	r18, r22

000016d0 <eeprom_write_r18>:
    16d0:	f9 99       	sbic	0x1f, 1	; 31
    16d2:	fe cf       	rjmp	.-4      	; 0x16d0 <eeprom_write_r18>
    16d4:	1f ba       	out	0x1f, r1	; 31
    16d6:	92 bd       	out	0x22, r25	; 34
    16d8:	81 bd       	out	0x21, r24	; 33
    16da:	20 bd       	out	0x20, r18	; 32
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	fa 9a       	sbi	0x1f, 2	; 31
    16e2:	f9 9a       	sbi	0x1f, 1	; 31
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	08 95       	ret

000016ea <_exit>:
    16ea:	f8 94       	cli

000016ec <__stop_program>:
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <__stop_program>
